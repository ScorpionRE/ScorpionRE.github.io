<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>[论文笔记-ccs2015]DFG</title>
      <link href="/2022/02/22/dfg/"/>
      <url>/2022/02/22/dfg/</url>
      
        <content type="html"><![CDATA[<h2 id="DFG论文">DFG论文</h2><p><img src="dfg.assets/image-20220218195458486.png" alt="image-20220218195458486"></p><p>Lestringant,P., Guihéry,F. and Fouque,P… Automated identification of cryptographic primitives in binary code with data flow graph isomorphism. (2015)In Proceedings of the 10th ACM Symposium on Information, Computer and Communications Security, pages 203–214.</p><h3 id="背景">背景</h3><p>软件用密码算法保护通信安全性以及数据安全。但算法的选择，具体实现方法，输入参数的生成对数据安全性有巨大影响。所以分析有密码的二进制文件安全性时，需要确保没有上述几点影响系统安全。所以首先需要识别并定位密码算法。但分析是耗时费力的，所以需要自动化工具</p><p><strong>现有方法：</strong></p><ul><li>静态分析主要根据常量或I/O关系，大多利用统计特性，可能不准确</li><li>动态分析性能不太好</li></ul><p><strong>缺陷：</strong></p><ul><li>手动构建签名的准确性</li><li>constant state</li></ul><p><strong>特色</strong></p><ul><li><p>静态分析，基于DFG</p><ul><li><p>表示数据间依赖。便于提取相关操作的子集以生成精确的签名</p></li><li><p>方便重写程序。可以通过重写DFG移除相同算法的不同实例中的变量</p></li></ul></li><li><p>高效，没有误报（除了签名不够distinctive）</p></li></ul><p><strong>贡献：</strong></p><ol><li><p>高效可靠地自动识别定位对称密码算法以及参数</p></li><li><p>归一化以及签名匹配，可以抵御编译器优化和源码变化</p></li><li><p>知名密码库测试并验证方案有效性</p></li></ol><h3 id="具体方案">具体方案</h3><ol><li>根据汇编代码构建相应DFG</li><li>用重写规则对DFG归一化</li><li>在DFG中搜索与密码算法图签名同构的子图</li></ol><p><img src="dfg.assets/image-20220221181451970.png" alt="image-20220221181451970"></p><h4 id="图构建">图构建</h4><p>DFG：表示一系列操作之间的数据依赖关系的有向无环图（Directed Acyclic Graph)</p><ul><li><p>顶点：表示算术/逻辑操作或输入变量</p></li><li><p>边：顶点v1到v2的边表示v1(或v1操作后的结果)是v2的输入</p></li></ul><p>根据程序片段F的汇编代码， 将每条指令 i 转换为一组操作 Oi ，而这些操作可能为空（NOP 或分支)，也可能包含多个顶点（可能需要多个操作来重现复杂指令的行为），然后迭代根据F中的指令，构建相应DFG：<code>Gf = (V,E)</code>。其中V是顶点的集合，E是边集</p><p>根据输入类型分为以下三种情况：</p><ul><li><p>立即数：向Gf中添加一个常量输入变量。该顶点表示立即数的值，且由边连接到Oi</p></li><li><p>寄存器：在写入该寄存器的最后一个值和 Oi 间创建一个边。实际上，这意味着为每个寄存器维护一个数组，其中包含对 Gf 中该值对应的顶点的引用。</p><p>引用：</p><ul><li>null：寄存器还未被使用（新的输入顶点将被添加到图中）</li><li>指向输入变量（寄存器被读取但未被写入）</li><li>指向操作（最后被写入寄存器的值）</li></ul></li><li><p>内存：load（读取），store（写入）。这两个操作以一个地址作为输入操作数，该地址的计算在Gf中被显式转录。同时还会跟踪程序片段中内存访问的顺序</p></li></ul><h5 id="例子">例子</h5><p>custom Even-Mansour cipher</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>C</mi><mo>=</mo><mi>S</mi><mo stretchy="false">(</mo><mi>p</mi><mtext> </mtext><mi>x</mi><mi>o</mi><mi>r</mi><mtext> </mtext><mi>k</mi><mo stretchy="false">)</mo><mtext> </mtext><mi>x</mi><mi>o</mi><mi>r</mi><mtext> </mtext><mi>k</mi></mrow><annotation encoding="application/x-tex">C =S(p\ xor\ k)\ xor\ k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mspace"> </span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace"> </span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span></span></p><p>S表示S盒，p表示明文，k表示密钥，C表示密文</p><p>其x86汇编代码如下</p><p><img src="dfg.assets/image-20220221190220766.png" alt="image-20220221190220766"></p><p>其构建的DFG图如下：</p><p>矩形框中的表示输入变量，圆框中表示操作</p><p><img src="dfg.assets/image-20220221190337262.png" alt="image-20220221190337262"></p><h3 id="归一化">归一化</h3><p><strong>目的</strong>：在不改变DFG语义的情况下做出调整以便匹配算法子图。即消除开发人员、编译器优化或反汇编导致的不同。</p><p>三种规则：</p><ul><li><p>Normalization Rules：多个指令可以执行相同的操作时使用。</p><p><img src="dfg.assets/image-20220221191520450.png" alt="image-20220221191520450"></p></li><li><p>Memory Access Simplification Rules：规范化的图应该不需要任何内存操作，除了那些与输入或输出变量相对应的操作</p><ul><li>store after store：移除第一个store</li><li>load after store：移除load，load的输出与store的输入一样</li><li>load after load：合并，两者操作的输出一样</li></ul><p>但还存在aliasing的问题，当两个不同的顶点等于相同的地址值时，在这种情况下，为两个顶点计算的地址序列是不完整的。这会造成两种后果：</p><ul><li><p>miss additional simplification cases。但这不算真正的问题，因为可以假设这些最后会被其他简化规则处理（如公共子表达式的消除）</p></li><li><p>用不完整的序列进行简化可能不可逆地破坏代码语义，如以下几种情况：</p><ol><li>两store间有aliased load</li><li>store与load间有aliased store</li><li>两load间有aliased store</li></ol><p>解决方法：当检测到一个可能的别名问题时，将内存操作的序列分割开来。其结果是一组序列不存在任何别名矛盾，并且可以安全地进行简化。但缺点在于如果过于inclusive，一些合法的简化案例会被忽略。</p></li></ul><p>比如下图中，load1和load4都是load地址(esp+8)，中间没有写入，即没有aliasing问题，所以可以进行合并</p><p><img src="dfg.assets/image-20220222110155634.png" alt="image-20220222110155634"></p></li><li><p>General Simplification Rules</p><p>目的：</p><ol><li>发现哪些内存访问是在同一地址进行的，以实现前面所述的内存简化</li><li>优化未被优化代码的DFG图。由于编译器优化不一定可逆，所以如果需要使未被优化的代码与优化的代码的归一化后的DFG一样，只能优化未被优化的代码。</li></ol><p>假设下面的指令序列及其优化后的对应序列：</p><p><img src="dfg.assets/image-20220222110826232.png" alt="image-20220222110826232"></p><p>假设某个编译器刚好执行了这种优化。很明显，这将很难被撤销，而我们无法猜到在序列的最后有一个右移操作。它的规范化表示应该肯定是优化后的结果。因此，每次遇到原始序列时，它都必须被优化。</p><p>但由于提出的straight line假设，不需要为配合现代编译器的数据优化做大量工作，只需局部应用于单个基本块（有入口点与出口点）</p><p>规则主要分为：</p><ul><li><p>公共子表达式的消除：如果两个操作共享同一组输入操作数，那么它们显然会产生相同的输出。因此，它们中的一个可以安全地从图中删除。</p><p>合并由同一组操作数(基数、索引、比例和位移)产生的有效地址。因此，一些内存访问将显式地共享图中的地址顶点。</p><p>比如load1和load4地址都是（esp+8)所以可以删掉其中一组操作，两个load共享同一地址顶点。</p><p><img src="dfg.assets/image-20220222112450707.png" alt="image-20220222112450707"></p></li><li><p>常数简化</p><p>以下两种情况可进行常数简化：</p><ol><li>如果算术/逻辑运算的每个输入操作数都是一个常变量。操作可以用结果代替</li><li>如果一个算术/逻辑运算有一个操作数等于该运算的ientity element或absorbing element(如果它们存在)</li></ol><p>有时需要重排associative operations的序列。该种规则合并涉及常变量的连续关联运算</p><p>如下图中两个加4被化简为加8</p><p><img src="dfg.assets/image-20220222113121499.png" alt="image-20220222113121499"></p><p>另一种重排策略是distribution，这对于内存地址的简化尤为重要，因为x86寻址模式的比例参数。所以该种规则分配涉及常变量的分配操作</p></li></ul></li></ul><h3 id="signature">signature</h3><p>人工构建签名。</p><h4 id="macro-signature">macro signature</h4><p>目的：针对算法的各种各样实现，有时需要多种签名。为了减少它们的数量，引入宏签名来构建上下文无关的graph grammar。</p><p>思想：在每次检测到签名时将一个特殊的顶点附加到DFG。</p><p>一个宏签名是一个包含一般的DFG顶点（终端符号）和代表其他签名的顶点（非终端符号符号）的图。</p><p>意义：</p><ol><li>减少需要测试的签名数量。</li></ol><p>​没有宏签名时，要测试的签名数量为</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\prod ^n_{i=1}a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∏</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>​用宏签名，每个备份可以被独立搜索，只需要</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\sum^n_{i=1}a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>个签名</p><ol start="2"><li>将大的图分解成更小的图</li></ol><h4 id="例子-2">例子</h4><p>如果我们要定位密码算法的参数，那么对于明文，密码，密钥，至少一个连接的路径，签名至少都要有一个顶点。</p><p>首先创建了一个签名，包含对替换盒的访问（地址计算加内存读取）</p><p>然后，右边图中一个新的顶点后(sig1），对应于第一个签名的成功匹配</p><p>最后成功匹配custom Even-Mansour算法的签名</p><p><img src="dfg.assets/image-20220222141947171.png" alt="image-20220222141947171"></p><h3 id="子图同构">子图同构</h3><p>给定归一化的DFG与signatures，得到DFG中包含哪些signatures。采用Ullmann子图同构算法</p><p>子图定义：如果<code>Va</code>属于<code>Vb</code>且<code>Ea</code>属于<code>Eb</code>，那么<code>Ga = &#123;Va, Ea&#125;</code>是<code>Gb = &#123;Vb, Eb&#125;</code>的子图</p><p>同构定义：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>存在函数</mtext><mi>f</mi><mo>:</mo><mi>V</mi><mi>a</mi><mo>↦</mo><mi>V</mi><mi>b</mi><mspace linebreak="newline"></mspace><mtext>使得</mtext><mo stretchy="false">(</mo><mi>v</mi><mo separator="true">,</mo><mi>w</mi><mo stretchy="false">)</mo><mo>∈</mo><mi>E</mi><mi>a</mi><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>v</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>f</mi><mo stretchy="false">(</mo><mi>w</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>∈</mo><mi>E</mi><mi>b</mi></mrow><annotation encoding="application/x-tex">存在函数f:Va \mapsto Vb\\使得 (v, w) \in Ea \iff (f(v),f(w)) \in Eb</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord cjk_fallback">存在函数</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6943em;vertical-align:-0.011em;"></span><span class="mord mathnormal">Va</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">↦</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">Vb</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">使得</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7073em;vertical-align:-0.024em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⟺</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal">b</span></span></span></span></span></p><p>那么<code>Ga = &#123;Va, Ea&#125;</code>与<code>Gb=&#123;Vb, Eb&#125;</code>同构</p><p>具体算法如下（深度优先搜索树）：</p><ol><li><p>对签名中的每个顶点v属于Vs，维护一个可能的分配集Av，其被初始化为D中标签与v相同的顶点</p></li><li><p>递归搜索，找到满足条件的f即表示找到了有效的同构子图；否则UPDATE(Av)进行相应剪枝操作，然后继续搜索</p></li><li><p>剪枝：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>v</mi><mo separator="true">,</mo><mi>w</mi><mtext>均属于</mtext><mi>V</mi><mi>s</mi><mtext>，且（</mtext><mi>v</mi><mo separator="true">,</mo><mi>w</mi><mo stretchy="false">)</mo><mo>∈</mo><mi>E</mi><mi>s</mi><mspace linebreak="newline"></mspace><mtext>对所有</mtext><mi>x</mi><mo>∈</mo><mi>A</mi><mi>v</mi><mspace linebreak="newline"></mspace><mtext>不存在</mtext><mi>y</mi><mo>∈</mo><mi>A</mi><mi>w</mi><mo separator="true">,</mo><mtext> 使得</mtext><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>∈</mo><mi>E</mi><mi>d</mi><mspace linebreak="newline"></mspace><mtext>那么可以从</mtext><mi>A</mi><mi>v</mi><mtext>中删除</mtext><mi>x</mi></mrow><annotation encoding="application/x-tex">v,w均属于Vs，且（v,w)\in Es\\对所有x \in Av\\不存在y\in Aw,\ 使得(x,y)\in Ed\\那么可以从Av中删除x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord cjk_fallback">均属于</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord mathnormal">s</span><span class="mord cjk_fallback">，且（</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal">s</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.7224em;vertical-align:-0.0391em;"></span><span class="mord cjk_fallback">对所有</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord cjk_fallback">不存在</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord cjk_fallback">使得</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal">d</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">那么可以从</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord cjk_fallback">中删除</span><span class="mord mathnormal">x</span></span></span></span></span></p></li></ol><p><img src="dfg.assets/image-20220222143759387.png" alt="image-20220222143759387"></p><h3 id="测试评估">测试评估</h3><p>为什么该方法没有误报：</p><ol><li>归一化过程保留语义。</li><li>Ullmann算法得到是精准的。虽然也可能签名不够distingctive，其他算法的DFG也可能匹配该签名。</li></ol><h4 id="XTEA">XTEA</h4><p><a href="http://en.wikipedia.org/w/index.php?title=XTEA&amp;oldid=618892433">http://en.wikipedia.org/w/index.php?title=XTEA&amp;oldid=618892433</a> 的c语言实现</p><p><img src="dfg.assets/image-20220222152208862.png" alt="image-20220222152208862"></p><p>Crypto++, LibTomCrypt, Botan，均成功检测。但存在密钥调度问题，LibTomCrypt中在早期初始化阶段进行得到round key buffer；Crypto++或Botan则在主要的加解密循环中计算。而这种差异不能通过归一化消除，所以应在签名级别处理。因此去掉签名中的密钥调度来得到对不同版本保持一致性的签名。虽然密钥无法识别，但是round key buffer和密钥调度的最终操作是作为签名输入变量的一部分被识别的</p><h4 id="MD5">MD5</h4><p>RFC中的C语言实现</p><p><img src="dfg.assets/image-20220222152902061.png" alt="image-20220222152902061"></p><p>除MSVC外，代表Feistel网络的final macro signature的识别是成功的。</p><p>在MSVC的情况下，并不是所有的64轮签名都能正确检测到第二个信息块的。因此取决于每个回合的正确识别最后的签名在第二个消息块中没有被检测到。该问题可以用以下两点来解释：</p><ol><li>Rotation：每轮函数都包括循环移位。由于C中没有循环移位运算符，需要用两个移位和一个or运算符来实现。有些编译器能识别并转换为x86中的循环移位指令。但MSVC并不总是进行这样的转换，但确定重写规则来识别并将其转换为一个循环移位的顶点是非常困难的。所以在签名层面解决该问题，同时说明macro signature的好处（64轮的总组合数是2^64，而用macro signatures只需要轮签名数量的两倍）</li><li>constant state：第一个信息块的状态被常量初始化。由于之前涉及初始状态的操作与周围的操作合并以使数字简化的重写规则，MSVC中第二个信息块的开始若有扩展形式的循环移位指令，将会影响预期的签名模式。该问题尚未被解决，希望能有消除分布在几个顶点上的公共子表达式的方法。</li></ol><p>Crypto++, LibTomCrypt and OpenSSL中md5的测试均成功，因为循环移位都是用x86指令集实现的，且初始状态未被视为常量，因为API设计初始化在代码片段之外的另一个函数中执行。</p><h4 id="AES">AES</h4><p>Gladman网站提供的源代码</p><p><img src="dfg.assets/image-20220222195328619.png" alt="image-20220222195328619"></p><p>Crypto++,LibTomCrypt and Botan</p><p>Crypto++只能检测解密的算法，加密由于其使用MMX和SSE2指令（DFG构建时不支持）未被成功识别。其余均成功检测</p><h4 id="性能">性能</h4><p>子图同构是NP完全问题，但大多数情况都可以有校解决</p><p>每一列对应一个代码片段（来源于LibTomCrypt），每一行对应一个签名</p><ul><li><p>灰色表示未成功匹配，能很快出结果（&lt;1ms)</p></li><li><p>大的签名（涵盖几个回合的签名）所花费的时间的时间明显多于较小的签名（仅覆盖一个回合)。因此可以用macro signature来减少签名的大小。但顶点的数量并不是影响执行时间的唯一参数，有时较大的签名意味着其顶点之间有更强的结构约束，子图同构算法就能更快地收敛到解决方案</p></li><li><p>每条重写规则都是与顶点数量成线性关系的，除了普通的子表达规则是二次的（至少对naive implementation)。然而，如前所述，重写规则规则是迭代应用的，直到达到一个平衡点。因此，执行时间也取决于原始DFG与归一化DFG之间的距离。在实践中归一化的执行时间并不超过签名匹配的执行时间</p></li></ul><p><img src="dfg.assets/image-20220222195734989.png" alt="image-20220222195734989"></p><h3 id="改进">改进</h3><ul><li>通过利用macro signature，涵盖块密码的操作模式</li><li>自动识别公钥密码算法</li><li>从参考实现中自动生成签名</li></ul>]]></content>
      
      
      <categories>
          
          <category> CryptoDetect </category>
          
          <category> paper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crypto </tag>
            
            <tag> CryptoDetect </tag>
            
            <tag> reverse </tag>
            
            <tag> paper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c2.dll</title>
      <link href="/2022/02/19/c2dll/"/>
      <url>/2022/02/19/c2dll/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MD5</title>
      <link href="/2022/01/28/md5/"/>
      <url>/2022/01/28/md5/</url>
      
        <content type="html"><![CDATA[<h1>MD5</h1><h3 id="算法-2">算法</h3><ul><li>输入：任意长的消息，512 比特长的分组。</li><li>输出：128 比特的消息摘要</li></ul><p>整体流程如下：</p><ul><li><p>首先填充原始消息使得对512求余的结果等于448，然后64位记录其长度。</p></li><li><p>512bit一组分为n组。每组中32bit为一段，分为16段</p></li><li><p>对每一组，循环4次下述4轮运算，得到新的A,B,C,D作为下一组的初始值</p></li><li><p>最后得到的A,B,C,D加上第n组原来A,B,C,D的值（即计算前的值）</p></li><li><p>按照地址的顺序从低到高打印对应的A,B,C,D值，就是所求的MD5值。</p></li></ul><p><img src="md5.assets/image-20220127171124399.png" alt="image-20220127171124399"></p><h4 id="填充">填充</h4><p>如果输入信息的长度(bit)对512求余的结果不等于448，就需要填充使得对512求余的结果等于448。填充的方法是填充一个1和n个0。填充完后，信息的长度就为N*512+448(bit)。</p><p>然后用64位来存储填充前信息长度。这64位加在第一步结果的后面，这样信息长度就变为N*512+448+64=(N+1)*512位</p><p>比如，需要加密消息&quot;gnubd&quot;，最后被填充为</p><p><code>小端字节序存储</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">67 6E 75 62 64 80 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 </span><br></pre></td></tr></table></figure><p>最后64位（8字节)为0x28（40），消息内容为40位（5字节）。</p><h4 id="数据处理">数据处理</h4><p>要使A,B,C,D在内存中的显示情况：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A = <span class="number">0x01234567</span></span><br><span class="line">B = <span class="number">0x89ABCDEF</span></span><br><span class="line">C = <span class="number">0xFEDCBA89</span></span><br><span class="line">D = <span class="number">0x76543210</span></span><br></pre></td></tr></table></figure><p>程序定义应为（<code>小端字节序存储</code>）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A = <span class="number">0x67452301</span>;</span><br><span class="line">B = <span class="number">0xEFCDAB89</span>;</span><br><span class="line">C = <span class="number">0x98BADCFE</span>;</span><br><span class="line">D = <span class="number">0x10325476</span>;</span><br></pre></td></tr></table></figure><p>每512位（64字节）为1段可以分成n段，（n大于等于1），对于每一段信息（512位，64字节）又划分成16小段（每段32位，4个字节，用M表示）</p><p>每一组，经过下列运算处理：</p><p>其中Mj表示消息的第j个子段（从0到15）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"> 第一轮</span><br><span class="line">a=FF(a,b,c,d,M0,<span class="number">7</span>,<span class="number">0xd76aa478</span>)</span><br><span class="line">b=FF(d,a,b,c,M1,<span class="number">12</span>,<span class="number">0xe8c7b756</span>)</span><br><span class="line">c=FF(c,d,a,b,M2,<span class="number">17</span>,<span class="number">0x242070db</span>)</span><br><span class="line">d=FF(b,c,d,a,M3,<span class="number">22</span>,<span class="number">0xc1bdceee</span>)</span><br><span class="line">a=FF(a,b,c,d,M4,<span class="number">7</span>,<span class="number">0xf57c0faf</span>)</span><br><span class="line">b=FF(d,a,b,c,M5,<span class="number">12</span>,<span class="number">0x4787c62a</span>)</span><br><span class="line">c=FF(c,d,a,b,M6,<span class="number">17</span>,<span class="number">0xa8304613</span>)</span><br><span class="line">d=FF(b,c,d,a,M7,<span class="number">22</span>,<span class="number">0xfd469501</span>)</span><br><span class="line">a=FF(a,b,c,d,M8,<span class="number">7</span>,<span class="number">0x698098d8</span>)</span><br><span class="line">b=FF(d,a,b,c,M9,<span class="number">12</span>,<span class="number">0x8b44f7af</span>)</span><br><span class="line">c=FF(c,d,a,b,M10,<span class="number">17</span>,<span class="number">0xffff5bb1</span>)</span><br><span class="line">d=FF(b,c,d,a,M11,<span class="number">22</span>,<span class="number">0x895cd7be</span>)</span><br><span class="line">a=FF(a,b,c,d,M12,<span class="number">7</span>,<span class="number">0x6b901122</span>)</span><br><span class="line">b=FF(d,a,b,c,M13,<span class="number">12</span>,<span class="number">0xfd987193</span>)</span><br><span class="line">c=FF(c,d,a,b,M14,<span class="number">17</span>,<span class="number">0xa679438e</span>)</span><br><span class="line">d=FF(b,c,d,a,M15,<span class="number">22</span>,<span class="number">0x49b40821</span>)</span><br><span class="line"></span><br><span class="line">第二轮</span><br><span class="line">a=GG(a,b,c,d,M1,<span class="number">5</span>,<span class="number">0xf61e2562</span>)</span><br><span class="line">b=GG(d,a,b,c,M6,<span class="number">9</span>,<span class="number">0xc040b340</span>)</span><br><span class="line">c=GG(c,d,a,b,M11,<span class="number">14</span>,<span class="number">0x265e5a51</span>)</span><br><span class="line">d=GG(b,c,d,a,M0,<span class="number">20</span>,<span class="number">0xe9b6c7aa</span>)</span><br><span class="line">a=GG(a,b,c,d,M5,<span class="number">5</span>,<span class="number">0xd62f105d</span>)</span><br><span class="line">b=GG(d,a,b,c,M10,<span class="number">9</span>,<span class="number">0x02441453</span>)</span><br><span class="line">c=GG(c,d,a,b,M15,<span class="number">14</span>,<span class="number">0xd8a1e681</span>)</span><br><span class="line">d=GG(b,c,d,a,M4,<span class="number">20</span>,<span class="number">0xe7d3fbc8</span>)</span><br><span class="line">a=GG(a,b,c,d,M9,<span class="number">5</span>,<span class="number">0x21e1cde6</span>)</span><br><span class="line">b=GG(d,a,b,c,M14,<span class="number">9</span>,<span class="number">0xc33707d6</span>)</span><br><span class="line">c=GG(c,d,a,b,M3,<span class="number">14</span>,<span class="number">0xf4d50d87</span>)</span><br><span class="line">d=GG(b,c,d,a,M8,<span class="number">20</span>,<span class="number">0x455a14ed</span>)</span><br><span class="line">a=GG(a,b,c,d,M13,<span class="number">5</span>,<span class="number">0xa9e3e905</span>)</span><br><span class="line">b=GG(d,a,b,c,M2,<span class="number">9</span>,<span class="number">0xfcefa3f8</span>)</span><br><span class="line">c=GG(c,d,a,b,M7,<span class="number">14</span>,<span class="number">0x676f02d9</span>)</span><br><span class="line">d=GG(b,c,d,a,M12,<span class="number">20</span>,<span class="number">0x8d2a4c8a</span>)</span><br><span class="line"></span><br><span class="line">第三轮</span><br><span class="line">a=HH(a,b,c,d,M5,<span class="number">4</span>,<span class="number">0xfffa3942</span>)</span><br><span class="line">b=HH(d,a,b,c,M8,<span class="number">11</span>,<span class="number">0x8771f681</span>)</span><br><span class="line">c=HH(c,d,a,b,M11,<span class="number">16</span>,<span class="number">0x6d9d6122</span>)</span><br><span class="line">d=HH(b,c,d,a,M14,<span class="number">23</span>,<span class="number">0xfde5380c</span>)</span><br><span class="line">a=HH(a,b,c,d,M1,<span class="number">4</span>,<span class="number">0xa4beea44</span>)</span><br><span class="line">b=HH(d,a,b,c,M4,<span class="number">11</span>,<span class="number">0x4bdecfa9</span>)</span><br><span class="line">c=HH(c,d,a,b,M7,<span class="number">16</span>,<span class="number">0xf6bb4b60</span>)</span><br><span class="line">d=HH(b,c,d,a,M10,<span class="number">23</span>,<span class="number">0xbebfbc70</span>)</span><br><span class="line">a=HH(a,b,c,d,M13,<span class="number">4</span>,<span class="number">0x289b7ec6</span>)</span><br><span class="line">b=HH(d,a,b,c,M0,<span class="number">11</span>,<span class="number">0xeaa127fa</span>)</span><br><span class="line">c=HH(c,d,a,b,M3,<span class="number">16</span>,<span class="number">0xd4ef3085</span>)</span><br><span class="line">d=HH(b,c,d,a,M6,<span class="number">23</span>,<span class="number">0x04881d05</span>)</span><br><span class="line">a=HH(a,b,c,d,M9,<span class="number">4</span>,<span class="number">0xd9d4d039</span>)</span><br><span class="line">b=HH(d,a,b,c,M12,<span class="number">11</span>,<span class="number">0xe6db99e5</span>)</span><br><span class="line">c=HH(c,d,a,b,M15,<span class="number">16</span>,<span class="number">0x1fa27cf8</span>)</span><br><span class="line">d=HH(b,c,d,a,M2,<span class="number">23</span>,<span class="number">0xc4ac5665</span>)</span><br><span class="line"></span><br><span class="line">第四轮</span><br><span class="line">a=II(a,b,c,d,M0,<span class="number">6</span>,<span class="number">0xf4292244</span>)</span><br><span class="line">b=II(d,a,b,c,M7,<span class="number">10</span>,<span class="number">0x432aff97</span>)</span><br><span class="line">c=II(c,d,a,b,M14,<span class="number">15</span>,<span class="number">0xab9423a7</span>)</span><br><span class="line">d=II(b,c,d,a,M5,<span class="number">21</span>,<span class="number">0xfc93a039</span>)</span><br><span class="line">a=II(a,b,c,d,M12,<span class="number">6</span>,<span class="number">0x655b59c3</span>)</span><br><span class="line">b=II(d,a,b,c,M3,<span class="number">10</span>,<span class="number">0x8f0ccc92</span>)</span><br><span class="line">c=II(c,d,a,b,M10,<span class="number">15</span>,<span class="number">0xffeff47d</span>)</span><br><span class="line">d=II(b,c,d,a,M1,<span class="number">21</span>,<span class="number">0x85845dd1</span>)</span><br><span class="line">a=II(a,b,c,d,M8,<span class="number">6</span>,<span class="number">0x6fa87e4f</span>)</span><br><span class="line">b=II(d,a,b,c,M15,<span class="number">10</span>,<span class="number">0xfe2ce6e0</span>)</span><br><span class="line">c=II(c,d,a,b,M6,<span class="number">15</span>,<span class="number">0xa3014314</span>)</span><br><span class="line">d=II(b,c,d,a,M13,<span class="number">21</span>,<span class="number">0x4e0811a1</span>)</span><br><span class="line">a=II(a,b,c,d,M4,<span class="number">6</span>,<span class="number">0xf7537e82</span>)</span><br><span class="line">b=II(d,a,b,c,M11,<span class="number">10</span>,<span class="number">0xbd3af235</span>)</span><br><span class="line">c=II(c,d,a,b,M2,<span class="number">15</span>,<span class="number">0x2ad7d2bb</span>)</span><br><span class="line">d=II(b,c,d,a,M9,<span class="number">21</span>,<span class="number">0xeb86d391</span>)</span><br><span class="line"></span><br><span class="line">FF(a,b,c,d,Mj,s,ti)表示a=b+((a+F(b,c,d)+Mj+ti)&lt;&lt;&lt;s)</span><br><span class="line">GG(a,b,c,d,Mj,s,ti)表示a=b+((a+G(b,c,d)+Mj+ti)&lt;&lt;&lt;s)</span><br><span class="line">HH(a,b,c,d,Mj,s,ti)表示a=b+((a+H(b,c,d)+Mj+ti)&lt;&lt;&lt;s)</span><br><span class="line">II(a,b,c,d,Mj,s,ti)表示a=b+((a+I(b,c,d)+Mj+ti)&lt;&lt;&lt;s)</span><br><span class="line">    </span><br><span class="line"><span class="comment">//四个线性函数定义如下</span></span><br><span class="line">F(X,Y,Z)=(X&amp;Y)|((~X)&amp;Z)</span><br><span class="line">G(X,Y,Z)=(X&amp;Z)|(Y&amp;(~Z))</span><br><span class="line">H(X,Y,Z)=X^Y^Z</span><br><span class="line">I(X,Y,Z)=Y^(X|(~Z))</span><br></pre></td></tr></table></figure><p>每轮循环后，将A，B，C，D分别加上a，b，c，d，然后进入下一循环，共循环四次。</p><p>循环结束后，新的A,B,C,D作为下一组A,B,C,D的初始值，继续进行上述循环运算，得到新的A,B,C,D再加上初始A,B,C,D值。最后按照地址的顺序从低到高打印对应的A,B,C,D值，就是所求的MD5值。</p><h3 id="signature-3">signature</h3><p>DSL定义如下</p><p><img src="md5.assets/image-20220127171654001.png" alt="image-20220127171654001">后面的3614090360（0xD76AA478),即为相应值转化为十进制后的数。</p><p>ROTATE表示移位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">F</span><span class="params">(<span class="keyword">long</span> x, <span class="keyword">long</span> y, <span class="keyword">long</span> z)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (x &amp; y) | ((~x) &amp; z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">FF</span><span class="params">(<span class="keyword">long</span> a, <span class="keyword">long</span> b, <span class="keyword">long</span> c, <span class="keyword">long</span> d, <span class="keyword">long</span> x, <span class="keyword">long</span> s,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">long</span> ac)</span> </span>&#123;</span><br><span class="line">        a += (F(b, c, d)&amp;<span class="number">0xFFFFFFFFL</span>) + x + ac;</span><br><span class="line">        a = ((a&amp;<span class="number">0xFFFFFFFFL</span>)&lt;&lt; s) | ((a&amp;<span class="number">0xFFFFFFFFL</span>) &gt;&gt;&gt; (<span class="number">32</span> - s));</span><br><span class="line">        a += b;</span><br><span class="line">        <span class="keyword">return</span> (a&amp;<span class="number">0xFFFFFFFFL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = FF(a, b, c, d, groups[<span class="number">0</span>], S11, <span class="number">0xd76aa478L</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="测试-3">测试</h3><p>libcrypto.so.1.1(openssl)</p><p>其中和md5有关的函数如下</p><p><img src="md5.assets/image-20220127175833516.png" alt="image-20220127175833516"></p><p>利用where’s crypto分析</p><p><img src="md5.assets/image-20220127181300578.png" alt="image-20220127181300578"></p><p><img src="md5.assets/image-20220128122013626.png" alt="image-20220128122013626"></p><p>反汇编MD5_Update,主要还是调用了md5_block_data_order</p><p><img src="md5.assets/image-20220128122933514.png" alt="image-20220128122933514">o</p><p>md5_block_data_order反汇编后</p><p><img src="md5.assets/image-20220128123055931.png" alt="image-20220128123055931"></p><p>与signature中对应关系如下</p><p><img src="md5.assets/image-20220128124206153.png" alt="image-20220128124206153"></p><p>openssl中源代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> md5_block_data_order</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">ifdef</span> X</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">undef</span> X</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">md5_block_data_order</span><span class="params">(MD5_CTX *c, <span class="keyword">const</span> <span class="keyword">void</span> *data_, <span class="keyword">size_t</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *data = data_;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">unsigned</span> MD32_REG_T A, B, C, D, l;</span><br><span class="line"><span class="meta"># <span class="meta-keyword">ifndef</span> MD32_XARRAY</span></span><br><span class="line">    <span class="comment">/* See comment in crypto/sha/sha_local.h for details. */</span></span><br><span class="line">    <span class="keyword">unsigned</span> MD32_REG_T XX0, XX1, XX2, XX3, XX4, XX5, XX6, XX7,</span><br><span class="line">        XX8, XX9, XX10, XX11, XX12, XX13, XX14, XX15;</span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> X(i)   XX##i</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">else</span></span></span><br><span class="line">    MD5_LONG XX[MD5_LBLOCK];</span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> X(i)   XX[i]</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    A = c-&gt;A;</span><br><span class="line">    B = c-&gt;B;</span><br><span class="line">    C = c-&gt;C;</span><br><span class="line">    D = c-&gt;D;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; num--;) &#123;</span><br><span class="line">        (<span class="keyword">void</span>)HOST_c2l(data, l);</span><br><span class="line">        X(<span class="number">0</span>) = l;</span><br><span class="line">        (<span class="keyword">void</span>)HOST_c2l(data, l);</span><br><span class="line">        X(<span class="number">1</span>) = l;</span><br><span class="line">        <span class="comment">/* Round 0 */</span></span><br><span class="line">        R0(A, B, C, D, X(<span class="number">0</span>), <span class="number">7</span>, <span class="number">0xd76aa478</span>L);</span><br><span class="line">        (<span class="keyword">void</span>)HOST_c2l(data, l);</span><br><span class="line">        X(<span class="number">2</span>) = l;</span><br><span class="line">        R0(D, A, B, C, X(<span class="number">1</span>), <span class="number">12</span>, <span class="number">0xe8c7b756</span>L);</span><br><span class="line">        (<span class="keyword">void</span>)HOST_c2l(data, l);</span><br><span class="line">        X(<span class="number">3</span>) = l;</span><br><span class="line">        R0(C, D, A, B, X(<span class="number">2</span>), <span class="number">17</span>, <span class="number">0x242070db</span>L);</span><br><span class="line">        (<span class="keyword">void</span>)HOST_c2l(data, l);</span><br><span class="line">        X(<span class="number">4</span>) = l;</span><br><span class="line">        R0(B, C, D, A, X(<span class="number">3</span>), <span class="number">22</span>, <span class="number">0xc1bdceee</span>L);</span><br><span class="line">        (<span class="keyword">void</span>)HOST_c2l(data, l);</span><br><span class="line">        X(<span class="number">5</span>) = l;</span><br><span class="line">        R0(A, B, C, D, X(<span class="number">4</span>), <span class="number">7</span>, <span class="number">0xf57c0faf</span>L);</span><br><span class="line">        (<span class="keyword">void</span>)HOST_c2l(data, l);</span><br><span class="line">        X(<span class="number">6</span>) = l;</span><br><span class="line">        R0(D, A, B, C, X(<span class="number">5</span>), <span class="number">12</span>, <span class="number">0x4787c62a</span>L);</span><br><span class="line">        (<span class="keyword">void</span>)HOST_c2l(data, l);</span><br><span class="line">        X(<span class="number">7</span>) = l;</span><br><span class="line">        R0(C, D, A, B, X(<span class="number">6</span>), <span class="number">17</span>, <span class="number">0xa8304613</span>L);</span><br><span class="line">        (<span class="keyword">void</span>)HOST_c2l(data, l);</span><br><span class="line">        X(<span class="number">8</span>) = l;</span><br><span class="line">        R0(B, C, D, A, X(<span class="number">7</span>), <span class="number">22</span>, <span class="number">0xfd469501</span>L);</span><br><span class="line">        (<span class="keyword">void</span>)HOST_c2l(data, l);</span><br><span class="line">        X(<span class="number">9</span>) = l;</span><br><span class="line">        R0(A, B, C, D, X(<span class="number">8</span>), <span class="number">7</span>, <span class="number">0x698098d8</span>L);</span><br><span class="line">        (<span class="keyword">void</span>)HOST_c2l(data, l);</span><br><span class="line">        X(<span class="number">10</span>) = l;</span><br><span class="line">        R0(D, A, B, C, X(<span class="number">9</span>), <span class="number">12</span>, <span class="number">0x8b44f7af</span>L);</span><br><span class="line">        (<span class="keyword">void</span>)HOST_c2l(data, l);</span><br><span class="line">        X(<span class="number">11</span>) = l;</span><br><span class="line">        R0(C, D, A, B, X(<span class="number">10</span>), <span class="number">17</span>, <span class="number">0xffff5bb1</span>L);</span><br><span class="line">        (<span class="keyword">void</span>)HOST_c2l(data, l);</span><br><span class="line">        X(<span class="number">12</span>) = l;</span><br><span class="line">        R0(B, C, D, A, X(<span class="number">11</span>), <span class="number">22</span>, <span class="number">0x895cd7be</span>L);</span><br><span class="line">        (<span class="keyword">void</span>)HOST_c2l(data, l);</span><br><span class="line">        X(<span class="number">13</span>) = l;</span><br><span class="line">        R0(A, B, C, D, X(<span class="number">12</span>), <span class="number">7</span>, <span class="number">0x6b901122</span>L);</span><br><span class="line">        (<span class="keyword">void</span>)HOST_c2l(data, l);</span><br><span class="line">        X(<span class="number">14</span>) = l;</span><br><span class="line">        R0(D, A, B, C, X(<span class="number">13</span>), <span class="number">12</span>, <span class="number">0xfd987193</span>L);</span><br><span class="line">        (<span class="keyword">void</span>)HOST_c2l(data, l);</span><br><span class="line">        X(<span class="number">15</span>) = l;</span><br><span class="line">        R0(C, D, A, B, X(<span class="number">14</span>), <span class="number">17</span>, <span class="number">0xa679438e</span>L);</span><br><span class="line">        R0(B, C, D, A, X(<span class="number">15</span>), <span class="number">22</span>, <span class="number">0x49b40821</span>L);</span><br><span class="line">        <span class="comment">/* Round 1 */</span></span><br><span class="line">        R1(A, B, C, D, X(<span class="number">1</span>), <span class="number">5</span>, <span class="number">0xf61e2562</span>L);</span><br><span class="line">        R1(D, A, B, C, X(<span class="number">6</span>), <span class="number">9</span>, <span class="number">0xc040b340</span>L);</span><br><span class="line">        R1(C, D, A, B, X(<span class="number">11</span>), <span class="number">14</span>, <span class="number">0x265e5a51</span>L);</span><br><span class="line">        R1(B, C, D, A, X(<span class="number">0</span>), <span class="number">20</span>, <span class="number">0xe9b6c7aa</span>L);</span><br><span class="line">        R1(A, B, C, D, X(<span class="number">5</span>), <span class="number">5</span>, <span class="number">0xd62f105d</span>L);</span><br><span class="line">        R1(D, A, B, C, X(<span class="number">10</span>), <span class="number">9</span>, <span class="number">0x02441453</span>L);</span><br><span class="line">        R1(C, D, A, B, X(<span class="number">15</span>), <span class="number">14</span>, <span class="number">0xd8a1e681</span>L);</span><br><span class="line">        R1(B, C, D, A, X(<span class="number">4</span>), <span class="number">20</span>, <span class="number">0xe7d3fbc8</span>L);</span><br><span class="line">        R1(A, B, C, D, X(<span class="number">9</span>), <span class="number">5</span>, <span class="number">0x21e1cde6</span>L);</span><br><span class="line">        R1(D, A, B, C, X(<span class="number">14</span>), <span class="number">9</span>, <span class="number">0xc33707d6</span>L);</span><br><span class="line">        R1(C, D, A, B, X(<span class="number">3</span>), <span class="number">14</span>, <span class="number">0xf4d50d87</span>L);</span><br><span class="line">        R1(B, C, D, A, X(<span class="number">8</span>), <span class="number">20</span>, <span class="number">0x455a14ed</span>L);</span><br><span class="line">        R1(A, B, C, D, X(<span class="number">13</span>), <span class="number">5</span>, <span class="number">0xa9e3e905</span>L);</span><br><span class="line">        R1(D, A, B, C, X(<span class="number">2</span>), <span class="number">9</span>, <span class="number">0xfcefa3f8</span>L);</span><br><span class="line">        R1(C, D, A, B, X(<span class="number">7</span>), <span class="number">14</span>, <span class="number">0x676f02d9</span>L);</span><br><span class="line">        R1(B, C, D, A, X(<span class="number">12</span>), <span class="number">20</span>, <span class="number">0x8d2a4c8a</span>L);</span><br><span class="line">        <span class="comment">/* Round 2 */</span></span><br><span class="line">        R2(A, B, C, D, X(<span class="number">5</span>), <span class="number">4</span>, <span class="number">0xfffa3942</span>L);</span><br><span class="line">        R2(D, A, B, C, X(<span class="number">8</span>), <span class="number">11</span>, <span class="number">0x8771f681</span>L);</span><br><span class="line">        R2(C, D, A, B, X(<span class="number">11</span>), <span class="number">16</span>, <span class="number">0x6d9d6122</span>L);</span><br><span class="line">        R2(B, C, D, A, X(<span class="number">14</span>), <span class="number">23</span>, <span class="number">0xfde5380c</span>L);</span><br><span class="line">        R2(A, B, C, D, X(<span class="number">1</span>), <span class="number">4</span>, <span class="number">0xa4beea44</span>L);</span><br><span class="line">        R2(D, A, B, C, X(<span class="number">4</span>), <span class="number">11</span>, <span class="number">0x4bdecfa9</span>L);</span><br><span class="line">        R2(C, D, A, B, X(<span class="number">7</span>), <span class="number">16</span>, <span class="number">0xf6bb4b60</span>L);</span><br><span class="line">        R2(B, C, D, A, X(<span class="number">10</span>), <span class="number">23</span>, <span class="number">0xbebfbc70</span>L);</span><br><span class="line">        R2(A, B, C, D, X(<span class="number">13</span>), <span class="number">4</span>, <span class="number">0x289b7ec6</span>L);</span><br><span class="line">        R2(D, A, B, C, X(<span class="number">0</span>), <span class="number">11</span>, <span class="number">0xeaa127fa</span>L);</span><br><span class="line">        R2(C, D, A, B, X(<span class="number">3</span>), <span class="number">16</span>, <span class="number">0xd4ef3085</span>L);</span><br><span class="line">        R2(B, C, D, A, X(<span class="number">6</span>), <span class="number">23</span>, <span class="number">0x04881d05</span>L);</span><br><span class="line">        R2(A, B, C, D, X(<span class="number">9</span>), <span class="number">4</span>, <span class="number">0xd9d4d039</span>L);</span><br><span class="line">        R2(D, A, B, C, X(<span class="number">12</span>), <span class="number">11</span>, <span class="number">0xe6db99e5</span>L);</span><br><span class="line">        R2(C, D, A, B, X(<span class="number">15</span>), <span class="number">16</span>, <span class="number">0x1fa27cf8</span>L);</span><br><span class="line">        R2(B, C, D, A, X(<span class="number">2</span>), <span class="number">23</span>, <span class="number">0xc4ac5665</span>L);</span><br><span class="line">        <span class="comment">/* Round 3 */</span></span><br><span class="line">        R3(A, B, C, D, X(<span class="number">0</span>), <span class="number">6</span>, <span class="number">0xf4292244</span>L);</span><br><span class="line">        R3(D, A, B, C, X(<span class="number">7</span>), <span class="number">10</span>, <span class="number">0x432aff97</span>L);</span><br><span class="line">        R3(C, D, A, B, X(<span class="number">14</span>), <span class="number">15</span>, <span class="number">0xab9423a7</span>L);</span><br><span class="line">        R3(B, C, D, A, X(<span class="number">5</span>), <span class="number">21</span>, <span class="number">0xfc93a039</span>L);</span><br><span class="line">        R3(A, B, C, D, X(<span class="number">12</span>), <span class="number">6</span>, <span class="number">0x655b59c3</span>L);</span><br><span class="line">        R3(D, A, B, C, X(<span class="number">3</span>), <span class="number">10</span>, <span class="number">0x8f0ccc92</span>L);</span><br><span class="line">        R3(C, D, A, B, X(<span class="number">10</span>), <span class="number">15</span>, <span class="number">0xffeff47d</span>L);</span><br><span class="line">        R3(B, C, D, A, X(<span class="number">1</span>), <span class="number">21</span>, <span class="number">0x85845dd1</span>L);</span><br><span class="line">        R3(A, B, C, D, X(<span class="number">8</span>), <span class="number">6</span>, <span class="number">0x6fa87e4f</span>L);</span><br><span class="line">        R3(D, A, B, C, X(<span class="number">15</span>), <span class="number">10</span>, <span class="number">0xfe2ce6e0</span>L);</span><br><span class="line">        R3(C, D, A, B, X(<span class="number">6</span>), <span class="number">15</span>, <span class="number">0xa3014314</span>L);</span><br><span class="line">        R3(B, C, D, A, X(<span class="number">13</span>), <span class="number">21</span>, <span class="number">0x4e0811a1</span>L);</span><br><span class="line">        R3(A, B, C, D, X(<span class="number">4</span>), <span class="number">6</span>, <span class="number">0xf7537e82</span>L);</span><br><span class="line">        R3(D, A, B, C, X(<span class="number">11</span>), <span class="number">10</span>, <span class="number">0xbd3af235</span>L);</span><br><span class="line">        R3(C, D, A, B, X(<span class="number">2</span>), <span class="number">15</span>, <span class="number">0x2ad7d2bb</span>L);</span><br><span class="line">        R3(B, C, D, A, X(<span class="number">9</span>), <span class="number">21</span>, <span class="number">0xeb86d391</span>L);</span><br><span class="line"></span><br><span class="line">        A = c-&gt;A += A;</span><br><span class="line">        B = c-&gt;B += B;</span><br><span class="line">        C = c-&gt;C += C;</span><br><span class="line">        D = c-&gt;D += D;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>md5_local.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(b,c,d)        ((((c) ^ (d)) &amp; (b)) ^ (d))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> G(b,c,d)        ((((b) ^ (c)) &amp; (d)) ^ (c))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H(b,c,d)        ((b) ^ (c) ^ (d))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> I(b,c,d)        (((~(d)) | (b)) ^ (c))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R0(a,b,c,d,k,s,t) &#123; \</span></span><br><span class="line"><span class="meta">        a+=((k)+(t)+F((b),(c),(d))); \</span></span><br><span class="line"><span class="meta">        a=ROTATE(a,s); \</span></span><br><span class="line"><span class="meta">        a+=b; &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R1(a,b,c,d,k,s,t) &#123; \</span></span><br><span class="line"><span class="meta">        a+=((k)+(t)+G((b),(c),(d))); \</span></span><br><span class="line"><span class="meta">        a=ROTATE(a,s); \</span></span><br><span class="line"><span class="meta">        a+=b; &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R2(a,b,c,d,k,s,t) &#123; \</span></span><br><span class="line"><span class="meta">        a+=((k)+(t)+H((b),(c),(d))); \</span></span><br><span class="line"><span class="meta">        a=ROTATE(a,s); \</span></span><br><span class="line"><span class="meta">        a+=b; &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R3(a,b,c,d,k,s,t) &#123; \</span></span><br><span class="line"><span class="meta">        a+=((k)+(t)+I((b),(c),(d))); \</span></span><br><span class="line"><span class="meta">        a=ROTATE(a,s); \</span></span><br><span class="line"><span class="meta">        a+=b; &#125;;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CryptoDetect </category>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> CryptoDetect </tag>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[ichunqiu-crypto]writeup【loading】</title>
      <link href="/2022/01/24/ichunqiu-crypto-writeup/"/>
      <url>/2022/01/24/ichunqiu-crypto-writeup/</url>
      
        <content type="html"><![CDATA[<h1>[ichunqiu-crypto]writeup</h1><h3 id="phrackCTF-BrokenPic">[phrackCTF]BrokenPic</h3><p>题面：这里有个图片，可是好像打不开？</p><p>给出一个bmp图片</p><h2 id="RSA">RSA</h2><h3 id="IceCTF-Round-Rabins【Cipolla】">[IceCTF]Round Rabins【Cipolla】</h3><p>发现n能开平方，提示rabin，e应为2，所以转化为下式求m的值</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>c</mi><mo>=</mo><msup><mi>m</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msup><mi>p</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">c = m^2 (mod\ p^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>先利用Cipolla算法求得r，使得（本题中k为2）</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>a</mi><mo>=</mo><msup><mi>r</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mtext>所以</mtext><mo stretchy="false">(</mo><msup><mi>r</mi><mn>2</mn></msup><mo>−</mo><mi>a</mi><msup><mo stretchy="false">)</mo><mi>k</mi></msup><mo>=</mo><mn>0</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msup><mi>p</mi><mi>k</mi></msup><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mtext>二项式分解</mtext><mo stretchy="false">(</mo><msup><mi>r</mi><mn>2</mn></msup><mo>−</mo><mi>a</mi><msup><mo stretchy="false">)</mo><mi>k</mi></msup><mo>=</mo><msup><mi>t</mi><mn>2</mn></msup><mo>−</mo><msup><mi>u</mi><mn>2</mn></msup><mi>a</mi><mo>=</mo><mn>0</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msup><mi>p</mi><mi>k</mi></msup><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><msup><mi>t</mi><mn>2</mn></msup><msup><mi>u</mi><mrow><mo>−</mo><mn>2</mn></mrow></msup><mo>=</mo><mi>a</mi><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msup><mi>p</mi><mi>k</mi></msup><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mtext>所以</mtext><mi>x</mi><mo>=</mo><mi>t</mi><mo>∗</mo><msup><mi>u</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><msup><mi>p</mi><mi>k</mi></msup><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mtext>即最后所求</mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">a = r^2 (mod\ p)\\所以 (r^2-a)^k = 0 (mod\ p^k)\\二项式分解 (r^2-a)^k=t^2-u^2a=0(mod\ p^k)\\t^2u^{-2} = a = x^2(mod\ p^k)\\所以 x = t*u^{-1} (mod p^k)\\即最后所求m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">p</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">所以</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1491em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1491em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">二项式分解</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1491em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1491em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1491em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">所以</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1491em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">即最后所求</span><span class="mord mathnormal">m</span></span></span></span></span></p><p>利用平方差公式得到方程组，求解得t、u</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>（</mtext><mi>r</mi><mo>−</mo><mroot><mi>a</mi><mn>2</mn></mroot><msup><mo stretchy="false">)</mo><mi>k</mi></msup><mo>=</mo><mi>t</mi><mo>−</mo><mi>u</mi><mroot><mi>a</mi><mn>2</mn></mroot><mspace linebreak="newline"></mspace><mo stretchy="false">(</mo><mi>r</mi><mo>+</mo><mroot><mi>a</mi><mn>2</mn></mroot><msup><mo stretchy="false">)</mo><mi>k</mi></msup><mo>=</mo><mi>t</mi><mo>+</mo><mi>u</mi><mroot><mi>a</mi><mn>2</mn></mroot></mrow><annotation encoding="application/x-tex">（r-\sqrt[2]{a})^k = t-u\sqrt[2]{a}\\(r+\sqrt[2]{a})^k = t + u\sqrt[2]{a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord cjk_fallback">（</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1491em;vertical-align:-0.25em;"></span><span class="mord sqrt"><span class="root"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7172em;"><span style="top:-2.895em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size6 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8492em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">a</span></span></span><span style="top:-2.8092em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1908em;"><span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6984em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.1908em;"></span><span class="mord mathnormal">u</span><span class="mord sqrt"><span class="root"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7172em;"><span style="top:-2.895em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size6 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8492em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">a</span></span></span><span style="top:-2.8092em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1908em;"><span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1491em;vertical-align:-0.25em;"></span><span class="mord sqrt"><span class="root"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7172em;"><span style="top:-2.895em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size6 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8492em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">a</span></span></span><span style="top:-2.8092em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1908em;"><span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6984em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.1908em;"></span><span class="mord mathnormal">u</span><span class="mord sqrt"><span class="root"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7172em;"><span style="top:-2.895em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size6 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8492em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">a</span></span></span><span style="top:-2.8092em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1908em;"><span></span></span></span></span></span></span></span></span></span></p><p><strong>Cipolla算法求r</strong></p><p>首先找到一个a使得</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><msup><mi>a</mi><mn>2</mn></msup><mo>−</mo><mi>n</mi><msup><mo stretchy="false">)</mo><mrow><mo stretchy="false">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msup><mo>=</mo><mo>−</mo><mn>1</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mtext>令</mtext><msup><mi>i</mi><mn>2</mn></msup><mo>=</mo><msup><mi>a</mi><mn>2</mn></msup><mo>−</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">(a^2-n)^{(p-1)/2} = -1 (mod\ p)\\令i^2 = a^2 - n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.188em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">p</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mord mtight">/2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">p</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord cjk_fallback">令</span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_a</span>(<span class="params">n,p</span>):</span></span><br></pre></td></tr></table></figure><p>更一般的情况：先对n进行质因数分解，再使用中国剩余定理</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>n</mi><mo>=</mo><mi>p</mi><msup><mn>1</mn><mrow><mi>k</mi><mn>1</mn></mrow></msup><mo>∗</mo><mi>p</mi><msup><mn>2</mn><mrow><mi>k</mi><mn>2</mn></mrow></msup><mo>∗</mo><mi>p</mi><msup><mn>3</mn><mrow><mi>k</mi><mn>3</mn></mrow></msup></mrow><annotation encoding="application/x-tex">n=p1^{k1} * p2^{k2} * p3^{k3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0935em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0935em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0935em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span></span></p>]]></content>
      
      
      <categories>
          
          <category> crypto </category>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crypto </tag>
            
            <tag> ctf </tag>
            
            <tag> writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[BUUCTF-crypto]writeup【loading】</title>
      <link href="/2022/01/24/BUUCTF-crypto-writeup-md/"/>
      <url>/2022/01/24/BUUCTF-crypto-writeup-md/</url>
      
        <content type="html"><![CDATA[<h1>[BUUCTF-crypto]writeup</h1><h2 id="数学">数学</h2><h3 id="WUSTCTF2020-大数计算">[WUSTCTF2020]大数计算</h3><p><img src="BUUCTF-crypto-writeup-md.assets/image-20211107125148733.png" alt="image-20211107125148733"></p><p>Note：理解问题，题目说要十六进制，前8位不知道是取十进制的前八位然后转换还是取十六进制的前八位，所以（错误就得多试试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = math.factorial(<span class="number">2020</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(a)[:<span class="number">8</span>])))</span><br><span class="line"></span><br><span class="line">x = <span class="built_in">pow</span>(<span class="number">520</span>,<span class="number">1314</span>) + <span class="built_in">pow</span>(<span class="number">2333</span>,<span class="number">666</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(x)[:<span class="number">8</span>])))</span><br></pre></td></tr></table></figure><p>宇宙终极问题：x³＋y³＋z³＝42</p><p>(-80538738812075974)³ + 80435758145817515³ + 12602123297335631³ = 42</p><p>part-4，简单的积分，计算面积即可，再加36得520</p><h2 id="编码">编码</h2><h3 id="鸡藤椒盐味-【汉明码】">鸡藤椒盐味  【汉明码】</h3><p>设将要进行检测的二进制代码为n位，为使其具有纠错能力，需要再加上k位的检测位，组成n+k位的代码。那么，新增加的检测位数k应满足：</p><p>2k≥n+k+1或2k-1≥n+k</p><p><img src="BUUCTF-crypto-writeup-md.assets/image-20211121185128493.png" alt="image-20211121185128493"></p><h2 id="古典">古典</h2><h3 id="INSHack2018-Crypt0r-part-1【tcp流-简单替换】">[INSHack2018]Crypt0r part 1【tcp流+简单替换】</h3><p><img src="BUUCTF-crypto-writeup-md.assets/image-20220118215319029.png" alt="image-20220118215319029"></p><p>给出pcap文件</p><p>使用wireshark打开，并分析tcp数据流</p><p><img src="BUUCTF-crypto-writeup-md.assets/image-20220118215352072.png" alt="image-20220118215352072"></p><p>quipquip直接频率分析得到的结果不太对，再仔细观察可能用到的为第二行中的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replacement</span>(<span class="params">s,cipher</span>):</span></span><br><span class="line">    <span class="comment"># s为m中对应的字母</span></span><br><span class="line">    m = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&#x27;</span></span><br><span class="line">    x = string.ascii_letters.maketrans(s, m)</span><br><span class="line">    <span class="built_in">print</span>(cipher.translate(x))</span><br><span class="line">    </span><br><span class="line">s = <span class="string">&#x27;PMSFADNIJKBXQCGYWETOVHRULZ&#x27;</span></span><br><span class="line">s += s.lower()</span><br><span class="line">replacement()</span><br></pre></td></tr></table></figure><h3 id="UTCTF2020-basic-crypto">[UTCTF2020]basic-crypto</h3><p>打开文件是二进制形式，先转十六进制，再转ASCII试试</p><p><img src="BUUCTF-crypto-writeup-md.assets/image-20211107144120942.png" alt="image-20211107144120942"></p><p>提示很明显base64</p><p><img src="BUUCTF-crypto-writeup-md.assets/image-20211107144143545.png" alt="image-20211107144143545"></p><p>提示移位以及Roman，试试凯撒</p><p><img src="BUUCTF-crypto-writeup-md.assets/image-20211107144221290.png" alt="image-20211107144221290"></p><p>提示进行词频分析</p><p><img src="BUUCTF-crypto-writeup-md.assets/image-20211107144251417.png" alt="image-20211107144251417"></p><h3 id="达芬奇密码-【换位】">达芬奇密码 【换位】</h3><p>根据电影简介，看到斐波那契数列</p><p>观察给出的一列数字，为32位，flag也是32位，</p><p>写一个函数，输出32个斐波那契数列的数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> <span class="keyword">or</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib(n-<span class="number">1</span>) + fib(n-<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    <span class="built_in">print</span>(fib(i),end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="BUUCTF-crypto-writeup-md.assets/image-20211121110325817.png" alt="image-20211121110325817"></p><p>原文flag通过移位得到密文c</p><p>第0位均为1，位置不变</p><p>原fib数列的233（12位）变换到第1位</p><p>因此只需要找到f在原数列哪个位置，再把c对应的数字放回原位即可，注意有两个1，而第0位不变，因此可以把第0位修改为0或其他没有冲突的数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fib = <span class="string">&quot;0 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309&quot;</span></span><br><span class="line"></span><br><span class="line">f = <span class="string">&quot;0 233 3 2584 1346269 144 5 196418 21 1597 610 377 10946 89 514229 987 8 55 6765 2178309 121393 317811 46368 4181 1 832040 2 28657 75025 34 13 17711&quot;</span></span><br><span class="line"></span><br><span class="line">c = <span class="string">&quot;36968853882116725547342176952286&quot;</span></span><br><span class="line"></span><br><span class="line">m = [<span class="string">&#x27;3&#x27;</span>]*<span class="number">32</span></span><br><span class="line"></span><br><span class="line">fib = fib.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">f = f.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(f)):</span><br><span class="line">    m[fib.index(f[i])] = c[i]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="UTCTF2020-hill">?[UTCTF2020]hill</h3><p>未知密钥，猜测</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="string">&#x27;wznqcaduqopfkqnwofDbzgeu&#x27;</span></span><br><span class="line"><span class="comment">#未给密钥的自己猜测</span></span><br><span class="line">flag_pre=<span class="string">&#x27;utflag&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getit</span>(<span class="params">a1,b1,c1,a2,b2,c2,a3,b3,c3</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">            <span class="keyword">if</span> (a1 * i + b1 * j) % <span class="number">26</span> == c1 <span class="keyword">and</span> (a2 * i + b2 * j) % <span class="number">26</span> == c2 <span class="keyword">and</span> (a3 * i+b3*j) % <span class="number">26</span> == c3:</span><br><span class="line">                <span class="keyword">return</span> (i,j)</span><br><span class="line">x1=getit(<span class="number">22</span>,<span class="number">25</span>,<span class="number">20</span>,<span class="number">13</span>,<span class="number">16</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">x2=getit(<span class="number">22</span>,<span class="number">25</span>,<span class="number">19</span>,<span class="number">13</span>,<span class="number">16</span>,<span class="number">11</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">6</span>)</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(s),<span class="number">2</span>):</span><br><span class="line">    flag+=string.ascii_letters[(x1[<span class="number">0</span>]*string.ascii_letters.index(s[i])+x1[<span class="number">1</span>]*string.ascii_letters.index(s[i+<span class="number">1</span>]))%<span class="number">26</span>]</span><br><span class="line">    flag+=string.ascii_letters[(x2[<span class="number">0</span>]*string.ascii_letters.index(s[i])+x2[<span class="number">1</span>]*string.ascii_letters.index(s[i+<span class="number">1</span>]))%<span class="number">26</span>]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="XNUCA2018-baby-crypto【重合指数、词频分析】">[XNUCA2018]baby_crypto【重合指数、词频分析】</h3><p>题目:26个字母用0-25分别表示，有两串密钥，长度未知，然后一个用作乘数，一个用作加数对明文进行加密</p><p><a href="https://blog.csdn.net/weixin_44110537/article/details/107947158">https://blog.csdn.net/weixin_44110537/article/details/107947158</a></p><h2 id="块密码">块密码</h2><h3 id="ACTF新生赛2020-crypto-aes">[ACTF新生赛2020]crypto-aes</h3><p>因为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">key=os.urandom(<span class="number">2</span>)*<span class="number">16</span></span><br><span class="line">iv=os.urandom(<span class="number">16</span>)</span><br></pre></td></tr></table></figure><p>key是<strong>32bytes</strong>,<strong>256bits</strong> ；iv是<strong>16bytes ,128bits</strong></p><p>由于os.urandom（size）</p><p>参数： size:字符串随机字节的大小 返回值：该方法返回一个字符串，该字符串表示适合加密使用的随机字节。</p><p>所以可以根据key的高128位得到key值，低128位和结果异或便得到iv</p><p>最后进行解密即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">xor = <span class="number">91144196586662942563895769614300232343026691029427747065707381728622849079757</span></span><br><span class="line">enc_flag = <span class="string">b&#x27;\x8c-\xcd\xde\xa7\xe9\x7f.b\x8aKs\xf1\xba\xc75\xc4d\x13\x07\xac\xa4&amp;\xd6\x91\xfe\xf3\x14\x10|\xf8p&#x27;</span></span><br><span class="line">out = long_to_bytes(xor)</span><br><span class="line"><span class="built_in">print</span>(out)</span><br><span class="line">key = out[:<span class="number">16</span>]*<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line">iv = bytes_to_long(key[<span class="number">16</span>:])^bytes_to_long(out[<span class="number">16</span>:])</span><br><span class="line"><span class="built_in">print</span>(iv)</span><br><span class="line">iv = long_to_bytes(iv)</span><br><span class="line"><span class="built_in">print</span>(iv)</span><br><span class="line">aes = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">flag = aes.decrypt(enc_flag)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="AFCTF2018-MyOwnCBC【AES-CBC】">[AFCTF2018]MyOwnCBC【AES-CBC】</h3><p>加密过程是用上一级的密文，作为下一次加密的密钥key,所以初始密钥key可以知道就是题目给的密文前32个</p><h3 id="美团CTF">[美团CTF]</h3><h3 id="ACTF新生赛2020-crypto-des">[ACTF新生赛2020]crypto-des</h3><p>c语言中数据在内存中的存储（大小端）</p><p>有轮密钥，直接解密即可</p><h2 id="流密码">流密码</h2><h3 id="AFCTF2018-你听过一次一密么？">?[AFCTF2018]你听过一次一密么？</h3><p>一次一密（One-Time-Pad）：xor key  明文多长，密文就多长（适合少量明文消息）</p><p>Many-Time-Pad攻击：多个明文异或同样的key</p><p><a href="https://www.ruanx.net/many-time-pad/">https://www.ruanx.net/many-time-pad/</a></p><p>攻击思想：对于每一条密文Ci，拿去异或其他所有密文。然后去数每一列有多少个英文字符，作为“Mi在这一位是空格”的评分。依据评分从大到小排序，依次利用 “某个明文的某一位是空格” 这种信息恢复出所有明文的那一列。如果产生冲突，则舍弃掉评分小的</p><p><strong>修复语句太绝了</strong></p><h3 id="？-De1CTF2019-xorz-【频率分析-break-repeating-key】">？[De1CTF2019]xorz 【频率分析/break repeating-key】</h3><p><strong>法一：流密码</strong></p><p>参考</p><p><a href="https://www.anquanke.com/post/id/161171#h3-">https://www.anquanke.com/post/id/161171#h3-</a></p><p><a href="http://socold.cn/index.php/archives/65/">http://socold.cn/index.php/archives/65/</a></p><h4 id="一-猜测密钥长度">一.猜测密钥长度</h4><p>1.暴力破解：</p><p><a href="https://www.ruanx.net/many-time-pad/">https://www.ruanx.net/many-time-pad/</a></p><p>给的是 m[i]⊕k[i]⊕s[i], 其中 s 已知，故实际上我们拿到了 m[i]⊕k[i]. 在这里 k 是有周期的，且周期不超过38。如果知道了 k 的周期，那么用 Many-Time-Pad 就可以成功攻击。由于 <code>len(key)</code> 并不大，从大到小枚举 <code>len(key)</code>，肉眼判断是否为flag即可。最后发现 <code>len(key)=30</code> 是满足要求的。</p><p>但是这种方法过于耗时费力</p><p>2.汉明距离：一组二进制数据变成另一组数据所需的步骤数。对两组二进制数据进行异或运算，并统计结果为1的个数，那么这个数就是汉明距离。</p><ul><li><p>根据扩展资料：</p><ul><li><p>两个以ascii编码的英文字符的汉明距离是2-3之间，也就是说正常英文字母的平均汉明距离为2-3（每比特），任意字符（非纯字母）的两两汉明距离平均为4。</p></li><li><p>正确分组的密文与密文的汉明距离等于明文与明文的汉明距离（可以通过按正确密钥长度分组的密文与密文异或等于明文与明文异或证明）</p><p>因此，当我们使用了正确的密钥长度后，两两字母进行计算汉明距离，那么这个值应该是趋于最小。为了增加效率，我们不需要对每一对分组都计算汉明距离，只需取出前几对就可说明问题。当然为了排除偶然误差，结果不应该只取最小的那一个密钥长度，而是酌情多取几组</p></li></ul></li></ul><h4 id="二-根据猜出的密文长度进行解密">二.根据猜出的密文长度进行解密</h4><p>两种方法：</p><ul><li><p>合理利用明文的空格</p><p>在使用异或加密的形式下，使用相同密钥加密的明文和秘文间存在这个规律，密文和密文异或等于明文和明文异或,并且二者的汉明距离一样。</p><p>空格和所有小写字母异或结果是相应的大写字母，空格和所有大写字母异或是相应的小写字母。</p><p><img src="BUUCTF-crypto-writeup-md.assets/t01dd9c90c1ecde8471.jpg" alt="img"></p><p><img src="BUUCTF-crypto-writeup-md.assets/t0189dac1c8ab2412c8.jpg" alt="img"></p><ol><li>使用取模运算把密文分成n个分组（其中n是密钥长度），如此以来，我们就有了n个独立的凯撒加密式的密文组（因为每个分组里面的值是使用同一个密钥字节明文异或）。这样就把问题简化成了破解n个独立的凯撒加密模式的单字节抑或密码方式。这一步可以直接使用爆破，但是效率不高。我们采取另一种姿势。</li><li>将2中的每个分组做如下的操作：每个分组做嵌套循环，内循环，外循环。设置外循环计数值possible*<em>space=0，max</em><em>possible=0，设置内循环计数值maxpossible=0,依次取出每个分组中的每一个字节做与其他字节两两抑或进行内循环，如果结果是字母，我们就把内循环计数值maxpossible+1,在每个内循环结束后进行max</em><em>possible的更新（与内循环maxpossible做对比），并记录当前字节的位置到possible</em><em>space，然后外循环继续。直至遍历完所有的字节。取出max</em><em>possible对应的字节位置possible</em>*space处的字节码，我们把它对应的明文假设成空格（根据之前的讨论）然后将该位置的字节和0x20（空格）异或;找出相应位置的密钥字节。</li></ol></li></ul><ol start="3"><li><p>重复2中的步骤，依次根据每个分组找出每位的密钥字节，至此密钥破解完毕</p></li><li><p>将找出的密钥用于破解密文。当密文足够多，可以发现破解的准确率很高，基本可以做到无差别破解。</p></li></ol><p><strong>词频分析</strong></p><p><a href="https://codeleading.com/article/68135872581/">https://codeleading.com/article/68135872581/</a></p><h3 id="？-SUCTF2019-MT【移位】">？[SUCTF2019]MT【移位】</h3><p><a href="https://blog.csdn.net/m0_49109277/article/details/117324488">https://blog.csdn.net/m0_49109277/article/details/117324488</a></p><h3 id="AFCTF2018-tinylfsr">[AFCTF2018]tinylfsr</h3><p>根据给出的文件，发现两次文件加密</p><ul><li>plain-&gt;cipher</li><li>flag-&gt;flag_encode</li></ul><p><a href="http://xn--encrypt-c46ow40i.py">查看encrypt.py</a>，加密方式为</p><ul><li>前一部分：key与plain的前一部分xor</li><li>后一部分：lfsr生成的密钥流与plain的后一部分xor</li></ul><p>进一步分析，可以发现key与mask位数是相同的，看了一下mask的位数是二进制64位，那么key的位数就是16进制16位，也就是8位ASCII字符.</p><p>(不知道key长度的话，也可以遍历一下，再用该key对plain加密看是否与cipher相同)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cip = <span class="built_in">open</span>(<span class="string">&#x27;cipher.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">msg = <span class="built_in">open</span>(<span class="string">&#x27;Plain.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(codecs.encode(strxor(cip, msg)[:<span class="number">8</span>], <span class="string">&#x27;hex&#x27;</span>))</span><br></pre></td></tr></table></figure><p>接下来可以生成lfsr的密钥流，再依次解密（R要初始化为key）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">key = <span class="string">&#x27;0123456789abcdef&#x27;</span></span><br><span class="line">R = <span class="built_in">int</span>(key, <span class="number">16</span>)</span><br><span class="line">mask = <span class="number">0b1101100000000000000000000000000000000000000000000000000000000000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lfsr</span>(<span class="params">R, mask</span>):</span></span><br><span class="line">    <span class="comment"># 左移1位：保留末尾 63 位，在最后添加一个0</span></span><br><span class="line">    output = (R &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xffffffffffffffff</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># i：保留 R 的前 0、1、3、4位</span></span><br><span class="line">    i = (R &amp; mask) &amp; <span class="number">0xffffffffffffffff</span></span><br><span class="line"></span><br><span class="line">    lastbit = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i != <span class="number">0</span>:</span><br><span class="line">        lastbit ^= (i &amp; <span class="number">1</span>)</span><br><span class="line">        i = i &gt;&gt; <span class="number">1</span></span><br><span class="line">    <span class="comment"># lastbit：统计 i 里面有多少个1, 奇数个则为1, 偶数个则为0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># output: R 左移1位，再添加 lastbit</span></span><br><span class="line">    output ^= lastbit</span><br><span class="line">    <span class="keyword">return</span> (output, lastbit)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cip = <span class="built_in">open</span>(<span class="string">&#x27;flag_encode.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">a = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(<span class="built_in">int</span>(b, <span class="number">16</span>)) <span class="keyword">for</span> b <span class="keyword">in</span> [key[i:i + <span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(key), <span class="number">2</span>)]])</span><br><span class="line"></span><br><span class="line">ans = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    ans += (<span class="built_in">chr</span>((cip[i] ^ <span class="built_in">ord</span>(a[i]))))</span><br><span class="line"></span><br><span class="line">lent = <span class="built_in">len</span>(cip)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a), lent):</span><br><span class="line">    tmp = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        (R, out) = lfsr(R, mask)</span><br><span class="line">        tmp = (tmp &lt;&lt; <span class="number">1</span>) ^ out</span><br><span class="line">    ans += (<span class="built_in">chr</span>(tmp ^ cip[i]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ans)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="秘密共享的门限方案">秘密共享的门限方案</h2><p>秘密共享的思想是将秘密以适当的方式拆分，拆分后的每一个份额由不同的参与者管理，单个参与者无法恢复秘密信息，只有若干个参与者一同协作才能恢复秘密消息。更重要的是，当其中任何相应范围内参与者出问题时，秘密仍可以完整恢复。</p><p>秘密共享是一种将秘密分割存储的密码技术，目的是阻止秘密过于集中，以达到分散风险和容忍入侵的目的，是信息安全和数据保密中的重要手段</p><h3 id="？-AFCTF2018-花开藏宝地【bloom方案】">？[AFCTF2018]花开藏宝地【bloom方案】</h3><p><a href="https://webencrypt.org/secretsharing/#bloom">https://webencrypt.org/secretsharing/#bloom</a></p><p><a href="http://www.matrix67.com/blog/archives/1261">http://www.matrix67.com/blog/archives/1261</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">a1 =<span class="number">100459779913520540098065407420629954816677926423356769524759072632219106155849450125185205557491138357760494272691949199099803239098119602186117878931534968435982565071570831032814288620974807498206233914826253433847572703407678712965098320122549759579566316372220959610814573945698083909575005303253205653244238542300266460559790606278310650849881421791081944960157781855164700773081375247</span></span><br><span class="line">d1 =<span class="number">347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820820091</span></span><br><span class="line">a2 =<span class="number">305345133911395218573790903508296238659147802274031796643017539011648802808763162902335644195648525375518941848430114497150082025133000033835083076541927530829557051524161069423494451667848236452337271862085346869364976989047180532167560796470067549915390773271207901537847213882479997325575278672917648417868759077150999044891099206133296336190476413164240995177077671480352739572539631359</span></span><br><span class="line">d2 =<span class="number">347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820813413</span></span><br><span class="line">a3 = <span class="number">152012681270682340051690627924586232702552460810030322267827401771304907469802591861912921281833890613186317787813611372838066924894691892444503039545946728621696590087591246339208248647926966446848123290344911662916758039134817404720512465817867255277476717353439505243247568126193361558042940352204093381260402400739429050280526212446967632582771424597203000629197487733610187359662268583</span></span><br><span class="line">d3 =<span class="number">347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820818553</span></span><br><span class="line"></span><br><span class="line">dd = d1*d2*d3</span><br><span class="line">t1 = <span class="built_in">pow</span>(dd//d1,d1-<span class="number">2</span>,d1)</span><br><span class="line"><span class="keyword">assert</span>(t1*d2*d3%d1 == <span class="number">1</span>)</span><br><span class="line">t2 = <span class="built_in">pow</span>(dd//d2,d2-<span class="number">2</span>,d2)</span><br><span class="line"><span class="keyword">assert</span>(t2*d1*d3%d2 == <span class="number">1</span>)</span><br><span class="line">t3 = <span class="built_in">pow</span>(dd//d3,d3-<span class="number">2</span>,d3)</span><br><span class="line"><span class="keyword">assert</span>(t3*d2*d1%d3 == <span class="number">1</span>)</span><br><span class="line">s = a1*t1*d2*d3+a2*t2*d1*d3+a3*t3*d1*d2</span><br><span class="line">p = <span class="number">80804238007977405688648566160504278593148666302626415149704905628622876270862865768337953835725801963142685182510812938072115996355782396318303927020705623120652014080032809421180400984242061592520733710243483947230962631945045134540159517488288781666622635328316972979183761952842010806304748313326215619695085380586052550443025074501971925005072999275628549710915357400946408857</span></span><br><span class="line">s %= dd</span><br><span class="line"><span class="comment"># print(hex(s))</span></span><br><span class="line">s %= p</span><br><span class="line">s = <span class="built_in">hex</span>(s)[<span class="number">2</span>:]</span><br><span class="line">flag = <span class="built_in">list</span>(<span class="built_in">bytearray</span>.fromhex(s))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i),end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="RSA-2">RSA</h2><h4 id="HDCTF2019-together-【多文件共模攻击】">[HDCTF2019]together  【多文件共模攻击】</h4><p>先分别分析两个公钥文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;pubkey2.pem&quot;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pub = RSA.importKey(f.read())</span><br><span class="line">    n = pub.n</span><br><span class="line">    e = pub.e</span><br><span class="line">    <span class="built_in">print</span>(n,<span class="string">&#x27;\n&#x27;</span>,e)</span><br></pre></td></tr></table></figure><p>发现n相同，e不同。可以利用共模攻击。读取myflag文件后需要base64解码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">e1 = <span class="number">2333</span></span><br><span class="line">e2 = <span class="number">23333</span></span><br><span class="line">n = <span class="number">14853081277902411240991719582265437298941606850989432655928075747449227799832389574251190347654658701773951599098366248661597113015221566041305501996451638624389417055956926238595947885740084994809382932733556986107653499144588614105694518150594105711438983069306254763078820574239989253573144558449346681620784979079971559976102366527270867527423001083169127402157598183442923364480383742653117285643026319914244072975557200353546060352744263637867557162046429886176035616570590229646013789737629785488326501654202429466891022723268768841320111152381619260637023031430545168618446134188815113100443559425057634959299</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;myflag1&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    c1 = base64.b64decode(f.read())</span><br><span class="line">    <span class="built_in">print</span>(c1)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;myflag2&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    c2 = base64.b64decode(f.read())</span><br><span class="line">    <span class="built_in">print</span>(c2)</span><br><span class="line">gcd,s,t = gmpy2.gcdext(e1,e2)</span><br><span class="line">c1 = libnum.s2n(c1)</span><br><span class="line">c2 = libnum.s2n(c2)</span><br><span class="line"><span class="keyword">if</span> s &lt; <span class="number">0</span>:</span><br><span class="line">    s = -s</span><br><span class="line">    c1 = gmpy2.invert(c1,n)</span><br><span class="line"><span class="keyword">if</span> t &lt; <span class="number">0</span>:</span><br><span class="line">    t = -t</span><br><span class="line">    c2 = gmpy2.invert(c2,n)</span><br><span class="line"></span><br><span class="line">M = gmpy2.powmod(c1,s,n)*gmpy2.powmod(c2,t,n) % n</span><br><span class="line">m = <span class="built_in">hex</span>(M)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(codecs.decode(m[<span class="number">2</span>:],<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line">m = m[<span class="number">2</span>:]</span><br><span class="line">missing_padding = <span class="number">4</span> - <span class="built_in">len</span>(m) % <span class="number">4</span></span><br><span class="line"><span class="keyword">if</span> missing_padding:</span><br><span class="line">    m += <span class="string">&#x27;=&#x27;</span> * missing_padding</span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(m))</span><br></pre></td></tr></table></figure><h4 id="MRCTF2020-babyRSA-【数学计算】">[MRCTF2020]babyRSA 【数学计算】</h4><p>看脚本</p><p><img src="BUUCTF-crypto-writeup-md.assets/image-20211115232410660.png" alt="image-20211115232410660"></p><p>过程都是和rsa一样，因此得到p，q即可正常解密</p><p><img src="BUUCTF-crypto-writeup-md.assets/image-20211115232440411.png" alt="image-20211115232440411"></p><p>生成p的方式中间有的和rsa类似，因此类比，phi为(P[i]-1)乘积</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">P = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>)]</span><br><span class="line">P[<span class="number">9</span>] = <span class="number">206027926847308612719677572554991143421</span></span><br><span class="line">n = <span class="number">206027926847308612719677572554991143421</span></span><br><span class="line">phi = <span class="number">206027926847308612719677572554991143420</span></span><br><span class="line">c = <span class="number">213671742765908980787116579976289600595864704574134469173111790965233629909513884704158446946409910475727584342641848597858942209151114627306286393390259700239698869487469080881267182803062488043469138252786381822646126962323295676431679988602406971858136496624861228526070581338082202663895710929460596143281673761666804565161435963957655012011051936180536581488499059517946308650135300428672486819645279969693519039407892941672784362868653243632727928279698588177694171797254644864554162848696210763681197279758130811723700154618280764123396312330032986093579531909363210692564988076206283296967165522152288770019720928264542910922693728918198338839</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>,<span class="number">17</span>):</span><br><span class="line">    P[i] = sympy.nextprime(P[i-<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(i, P[i])</span><br><span class="line">    n*= P[i]</span><br><span class="line">    phi *= P[i]-<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>,<span class="number">0</span>,-<span class="number">1</span>):</span><br><span class="line">    P[i] = sympy.prevprime(P[i+<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(i,P[i])</span><br><span class="line">    n *= P[i]</span><br><span class="line">    phi *= P[i]-<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">p = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="built_in">print</span>(sympy.nextprime(p))</span><br></pre></td></tr></table></figure><p>q直接根据计算即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q = pow(sub_q,q2,q1)</span><br></pre></td></tr></table></figure><h4 id="De1CTF2019-babyrsa-【综合】">[De1CTF2019]babyrsa 【综合】</h4><p>依次分析所需要的参数</p><p><img src="BUUCTF-crypto-writeup-md.assets/image-20211126163520911.png" alt="image-20211126163520911"></p><p>根据中国剩余定理求得p^4，开四次方求得p为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> crt</span><br><span class="line">m = [</span><br><span class="line">    <span class="number">20129615352491765499340112943188317180548761597861300847305827141510465619670536844634558246439230371658836928103063432870245707180355907194284861510906071265352409579441048101084995923962148527097370705452070577098780246282820065573711015664291991372085157016901209114191068574208680397710042842835940428451949500607613634682684113208766694028789275748528254287705759528498986306494267817198340658241873024800336013946294891687591013414935237821291805123285905335762719823771647853378892868896078424572232934360940672962436849523915563328779942134504499568866135266628078485232098208237036724121481835035731201383423</span>,</span><br><span class="line">    <span class="number">31221650155627849964466413749414700613823841060149524451234901677160009099014018926581094879840097248543411980533066831976617023676225625067854003317018794041723612556008471579060428898117790587991055681380408263382761841625714415879087478072771968160384909919958010983669368360788505288855946124159513118847747998656422521414980295212646675850690937883764000571667574381419144372824211798018586804674824564606122592483286575800685232128273820087791811663878057827386379787882962763290066072231248814920468264741654086011072638211075445447843691049847262485759393290853117072868406861840793895816215956869523289231421</span>,</span><br><span class="line">    <span class="number">29944537515397953361520922774124192605524711306753835303703478890414163510777460559798334313021216389356251874917792007638299225821018849648520673813786772452822809546571129816310207232883239771324122884804993418958309460009406342872173189008449237959577469114158991202433476710581356243815713762802478454390273808377430685157110095496727966308001254107517967559384019734279861840997239176254236069001453544559786063915970071130087811123912044312219535513880663913831358790376650439083660611831156205113873793106880255882114422025746986403355066996567909581710647746463994280444700922867397754748628425967488232530303</span>,</span><br><span class="line">    <span class="number">25703437855600135215185778453583925446912731661604054184163883272265503323016295700357253105301146726667897497435532579974951478354570415554221401778536104737296154316056314039449116386494323668483749833147800557403368489542273169489080222009368903993658498263905567516798684211462607069796613434661148186901892016282065916190920443378756167250809872483501712225782004396969996983057423942607174314132598421269169722518224478248836881076484639837343079324636997145199835034833367743079935361276149990997875905313642775214486046381368619638551892292787783137622261433528915269333426768947358552919740901860982679180791</span>]</span><br><span class="line">r = [</span><br><span class="line">    <span class="number">19131432661217908470262338421299691998526157790583544156741981238822158563988520225986915234570037383888112724408392918113942721994125505014727545946133307329781747600302829588248042922635714391033431930411180545085316438084317927348705241927570432757892985091396044950085462429575440060652967253845041398399648442340042970814415571904057667028157512971079384601724816308078631844480110201787343583073815186771790477712040051157180318804422120472007636722063989315320863580631330647116993819777750684150950416298085261478841177681677867236865666207391847046483954029213495373613490690687473081930148461830425717614569</span>,</span><br><span class="line">    <span class="number">15341898433226638235160072029875733826956799982958107910250055958334922460202554924743144122170018355117452459472017133614642242411479849369061482860570279863692425621526056862808425135267608544855833358314071200687340442512856575278712986641573012456729402660597339609443771145347181268285050728925993518704899005416187250003304581230701444705157412790787027926810710998646191467130550713600765898234392350153965811595060656753711278308005193370936296124790772689433773414703645703910742193898471800081321469055211709339846392500706523670145259024267858368216902176489814789679472227343363035428541915118378163012031</span>,</span><br><span class="line">    <span class="number">18715065071648040017967211297231106538139985087685358555650567057715550586464814763683688299037897182845007578571401359061213777645114414642903077003568155508465819628553747173244235936586812445440095450755154357646737087071605811984163416590278352605433362327949048243722556262979909488202442530307505819371594747936223835233586945423522256938701002370646382097846105014981763307729234675737702252155130837154876831885888669150418885088089324534892506199724486783446267336789872782137895552509353583305880144947714110009893134162185382309992604435664777436197587312317224862723813510974493087450281755452428746194446</span>,</span><br><span class="line">    <span class="number">2282284561224858293138480447463319262474918847630148770112472703128549032592187797289965592615199709857879008271766433462032328498580340968871260189669707518557157836592424973257334362931639831072584824103123486522582531666152363874396482744561758133655406410364442174983227005501860927820871260711861008830120617056883514525798709601744088135999465598338635794275123149165498933580159945032363880613524921913023341209439657145962332213468573402863796920571812418200814817086234262280338221161622789516829363805084715652121739036183264026120868756523770196284142271849879003202190966150390061195469351716819539183797</span>]</span><br><span class="line"></span><br><span class="line">a = crt(m,r)</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(gmpy2.mpz(<span class="built_in">pow</span>(a[<span class="number">0</span>],<span class="number">1</span>/<span class="number">4</span>)))</span><br></pre></td></tr></table></figure><p>109935857933867829728985398563235455481120300859311421762540858762721955038310117609456763338082237907005937380873151279351831600225270995344096532750271070807051984097524900957809427861441436796934012393707770012556604479065826879107677002380580866325868240270494148512743861326447181476633546419262340100453</p><p><img src="BUUCTF-crypto-writeup-md.assets/image-20211126162739647.png" alt="image-20211126162739647"></p><p>可以根据小公钥指数加密（m^e&lt;n 相对而言）</p><p>解出e2=381791429275130</p><p>e1 = 15218928658178</p><p><img src="BUUCTF-crypto-writeup-md.assets/image-20211126162708811.png" alt="image-20211126162708811"></p><p>分解n</p><p>q1p即q1为127587319253436643569312142058559706815497211661083866592534217079310497260365307426095661281103710042392775453866174657404985539066741684196020137840472950102380232067786400322600902938984916355631714439668326671310160916766472897536055371474076089779472372913037040153356437528808922911484049460342088834871</p><p>得到hint为</p><p><strong>orz…you.found.me.but.sorry.no.hint…keep.on.and.enjoy.it!</strong></p><p>最后，根据给出的条件看，一般情况用一个式子即可求解，但是报错无法求逆元d。发现gcd(e1,(p-1)(q1-1))=14。因此需要进行变形</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>c</mi><mn>1</mn><mo>=</mo><msup><mi>m</mi><mrow><mi>e</mi><mn>1</mn></mrow></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>p</mi><mo>∗</mo><mi>q</mi><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><msup><mi>m</mi><mn>14</mn></msup><msup><mo stretchy="false">)</mo><mrow><mi>e</mi><mn>1</mn><mo>÷</mo><mn>14</mn></mrow></msup><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mtext> </mtext><mo stretchy="false">(</mo><mi>p</mi><mo>∗</mo><mi>q</mi><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">c1=m^{e1}\ mod\ (p*q1)=(m^{14})^{e1\div14}\mod\ (p*q1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord mathnormal">c</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">14</span></span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="mord mtight">1</span><span class="mbin mtight">÷</span><span class="mord mtight">14</span></span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p>可以在此条件下求出m14 的通解(显然最小特解很大可能不是答案,因为这个解还需要满足第二个方程)</p><p>第二个方程同理，用中国剩余定理求得m^14</p><p>将同余方程组进行细化</p><p>m^14 ☰a1 mod p<br>m^14 ☰ a1 mod q1<br>m^14 ☰ a2 mod p<br>m^14 ☰ a2 mod q2</p><p>由于m的指数过大,我们尝试通过构造一个新的rsa式子来降解m的指数.理论上4个方程有6种合并方式.但是通过计算<strong>gcd(p-1,7)!=1</strong>所以如果选择p的话显然是行不通的.于是舍弃p,选择q1,q2进行合并.得到一个全新的方程以后再通过一般求解rsa的方法就可以了</p><p>m^14 = (m^2)^7 mod (q1*q2)</p><p>看作新的rsa，e为7，c为之前求得m^14，最后求得m^2，再分解即可</p><h4 id="NPUCTF2020-认清形势，建立信心【选择明文攻击】">[NPUCTF2020]认清形势，建立信心【选择明文攻击】</h4><p><img src="BUUCTF-crypto-writeup-md.assets/image-20211128152817403.png" alt="image-20211128152817403"></p><h4 id="NPUCTF2020-共模攻击-【coppersmith">[NPUCTF2020]共模攻击 【coppersmith]</h4><p>Coppersmith定理的内容为：在一个e阶的mod n多项式f(x)中，如果有一个根小于n^1/e，就可以运用一个O(log n)的算法求出这些根</p><p>task中我们可以获取的信息有：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>c</mi><mn>1</mn><mo>=</mo><msup><mi>m</mi><mi>p</mi></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mo>=</mo><msup><mi>m</mi><mi>p</mi></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo>∗</mo><mi>q</mi></mrow><annotation encoding="application/x-tex">c1 = m^p\ mod\ n = m^p\ mod \ p*q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord mathnormal">c</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7144em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9088em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>c</mi><mn>2</mn><mo>=</mo><msup><mi>m</mi><mi>q</mi></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mo>=</mo><msup><mi>m</mi><mi>q</mi></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo>∗</mo><mi>q</mi></mrow><annotation encoding="application/x-tex">c2 = m^q\ mod\ n = m^q\ mod\ p*q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord mathnormal">c</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7144em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9088em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span></span></p><p>因为p、q为素数，所以由费马定理可得：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>m</mi><mi>p</mi></msup><mo>≡</mo><mi>m</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">m^p ≡ m\ mod\ p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7144em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">m</span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">p</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>m</mi><mi>q</mi></msup><mo>≡</mo><mi>m</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>q</mi></mrow><annotation encoding="application/x-tex">m^q ≡ m\ mod\ q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7144em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">m</span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span></span></p><p>所以，又有：</p><p>c1 = m + ip + xpq，可整理成 c1 = m + ip</p><p>c2 = m + jq + ypq，可整理成 c2 = m + jq</p><p>因此：</p><p>c1 * c2 = m2 + (ip + jq)m + ijn</p><p>(c1 + c2)m = 2m2 + (ip+jq)m</p><p>有： m2 - (c1 + c2)m + c1 * c2 = ijn ≡ 0 mod n</p><p>最终的任务就是求m的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="number">128205304743751985889679351195836799434324346996129753896234917982647254577214018524580290192396070591032007818847697193260130051396080104704981594190602854241936777324431673564677900773992273463534717009587530152480725448774018550562603894883079711995434332008363470321069097619786793617099517770260029108149</span></span><br><span class="line">c1=<span class="number">96860654235275202217368130195089839608037558388884522737500611121271571335123981588807994043800468529002147570655597610639680977780779494880330669466389788497046710319213376228391138021976388925171307760030058456934898771589435836261317283743951614505136840364638706914424433566782044926111639955612412134198</span></span><br><span class="line">c2=<span class="number">9566853166416448316408476072940703716510748416699965603380497338943730666656667456274146023583837768495637484138572090891246105018219222267465595710692705776272469703739932909158740030049375350999465338363044226512016686534246611049299981674236577960786526527933966681954486377462298197949323271904405241585</span></span><br><span class="line"></span><br><span class="line">PR.&lt;m&gt; = PolynomialRing(Zmod(n))</span><br><span class="line"><span class="comment">#Zmod(n):指定模，定义界限为n的环；Z表示整数；指定模是划定这个环的界限，就是有效的数字只有从0到n，其他的都通过与n取模来保证在0～n这个范围内；Zmod代表这是一个整数域中的n模环</span></span><br><span class="line"><span class="comment">#ZZ：整数环；QQ：有理数环；RR：实数环；CC：复数环</span></span><br><span class="line"><span class="comment">#PR：只是一个指针，指向用polynomialring指定的那个环（可以使用任意字符）</span></span><br><span class="line"><span class="comment">#PolynomialRing：这个就是说建立多项式环</span></span><br><span class="line"><span class="comment">#.&lt;m&gt;：指定一个变量的意思（可以用任意字符）</span></span><br><span class="line">f = m^<span class="number">2</span>-(c1+c2)*m+c1*c2</span><br><span class="line">x0 = f.small_roots(X=<span class="number">2</span>^<span class="number">400</span>)</span><br><span class="line"><span class="comment">#x的绝对边界，因为m&lt;400bits，所以设为2^400</span></span><br><span class="line"><span class="built_in">print</span>(x0)</span><br></pre></td></tr></table></figure><p><a href="https://xz.aliyun.com/t/6813">https://xz.aliyun.com/t/6813</a></p><p>coppersmith攻击总结https://www.ruanx.net/coppersmith/</p><h4 id="QCTF2018-Xman-RSA">[QCTF2018]Xman-RSA</h4><p>查看encryption.encrypted，看代码应该是作了一个简单的替换加密，使用quipquip进行频率分析，还原出代码（其中大写的T没有作替换）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> is_prime </span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom </span><br><span class="line"><span class="keyword">import</span> base64 </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bytes_to_num</span>(<span class="params">b</span>):</span> </span><br><span class="line"><span class="keyword">return</span> <span class="built_in">int</span>(b.encode(<span class="string">&#x27;hex&#x27;</span>), <span class="number">16</span>) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num_to_bytes</span>(<span class="params">n</span>):</span> </span><br><span class="line">b = <span class="built_in">hex</span>(n)[<span class="number">2</span>:-<span class="number">1</span>] </span><br><span class="line">b = <span class="string">&#x27;0&#x27;</span> + b <span class="keyword">if</span> <span class="built_in">len</span>(b)%<span class="number">2</span> == <span class="number">1</span> <span class="keyword">else</span> b </span><br><span class="line"><span class="keyword">return</span> b.decode(<span class="string">&#x27;hex&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_a_prime</span>(<span class="params">l</span>):</span> </span><br><span class="line">random_seed = urandom(l) </span><br><span class="line">num = bytes_to_num(random_seed) </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>: </span><br><span class="line"><span class="keyword">if</span> is_prime(num): </span><br><span class="line"><span class="keyword">break</span> </span><br><span class="line">num+=<span class="number">1</span> </span><br><span class="line"><span class="keyword">return</span> num </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">s, e, n</span>):</span> </span><br><span class="line">p = bytes_to_num(s) </span><br><span class="line">p = <span class="built_in">pow</span>(p, e, n) </span><br><span class="line"><span class="keyword">return</span> num_to_bytes(p).encode(<span class="string">&#x27;hex&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">separate</span>(<span class="params">n</span>):</span> </span><br><span class="line">p = n % <span class="number">4</span> </span><br><span class="line">t = (p*p) % <span class="number">4</span> </span><br><span class="line"><span class="keyword">return</span> t == <span class="number">1</span> </span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) </span><br><span class="line">flag = f.read() </span><br><span class="line"></span><br><span class="line">msg1 = <span class="string">&quot;&quot;</span> </span><br><span class="line">msg2 = <span class="string">&quot;&quot;</span> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)): </span><br><span class="line"><span class="keyword">if</span> separate(i): </span><br><span class="line">msg2 += flag[i] </span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">msg1 += flag[i]</span><br><span class="line"></span><br><span class="line">p1 = get_a_prime(<span class="number">128</span>) </span><br><span class="line">p2 = get_a_prime(<span class="number">128</span>) </span><br><span class="line">p3 = get_a_prime(<span class="number">128</span>) </span><br><span class="line">n1 = p1*p2 </span><br><span class="line">n2 = p1*p3 </span><br><span class="line">e = <span class="number">0x1001</span> </span><br><span class="line">c1 = encrypt(msg1, e, n1) </span><br><span class="line">c2 = encrypt(msg2, e, n2) </span><br><span class="line"><span class="built_in">print</span>(c1) </span><br><span class="line"><span class="built_in">print</span>(c2) </span><br><span class="line">e1 = <span class="number">0x1001</span> </span><br><span class="line">e2 = <span class="number">0x101</span> </span><br><span class="line">p4 = get_a_prime(<span class="number">128</span>) </span><br><span class="line">p5 = get_a_prime(<span class="number">128</span>) </span><br><span class="line">n3 = p4*p5 </span><br><span class="line">c1 = num_to_bytes(<span class="built_in">pow</span>(n1, e1, n3)).encode(<span class="string">&#x27;hex&#x27;</span>) </span><br><span class="line">c2 = num_to_bytes(<span class="built_in">pow</span>(n1, e2, n3)).encode(<span class="string">&#x27;hex&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(c1) </span><br><span class="line"><span class="built_in">print</span>(c2) </span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(num_to_bytes(n2))) </span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(num_to_bytes(n3)))</span><br></pre></td></tr></table></figure><p>进一步分析文件，n1中的应该是59、60行中的c1、c2，ciphertext是上面真正和flag有关的的c1、c2，最后是n2和n3</p><p>先求得n2和n3的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n2 = <span class="string">&quot;PVNHb2BfGAnmxLrbKhgsYXRwWIL9eOj6K0s3I0slKHCTXTAUtZh3T0r+RoSlhpO3+77AY8P7WETYz2Jzuv5FV/mMODoFrM5fMyQsNt90VynR6J3Jv+fnPJPsm2hJ1Fqt7EKaVRwCbt6a4BdcRoHJsYN/+eh7k/X+FL5XM7viyvQxyFawQrhSV79FIoX6xfjtGW+uAeVF7DScRcl49dlwODhFD7SeLqzoYDJPIQS+VSb3YtvrDgdV+EhuS1bfWvkkXRijlJEpLrgWYmMdfsYX8u/+Ylf5xcBGn3hv1YhQrBCg77AHuUF2w/gJ/ADHFiMcH3ux3nqOsuwnbGSr7jA6Cw==&quot;</span></span><br><span class="line">n3 = <span class="string">&quot;TmNVbWUhCXR1od3gBpM+HGMKK/4ErfIKITxomQ/QmNCZlzmmsNyPXQBiMEeUB8udO7lWjQTYGjD6k21xjThHTNDG4z6C2cNNPz73VIaNTGz0hrh6CmqDowFbyrk+rv53QSkVKPa8EZnFKwGz9B3zXimm1D+01cov7V/ZDfrHrEjsDkgK4ZlrQxPpZAPl+yqGlRK8soBKhY/PF3/GjbquRYeYKbagpUmWOhLnF4/+DP33ve/EpaSAPirZXzf8hyatL4/5tAZ0uNq9W6T4GoMG+N7aS2GeyUA2sLJMHymW4cFK5l5kUvjslRdXOHTmz5eHxqIV6TmSBQRgovUijlNamQ==&quot;</span></span><br><span class="line">n2 = bytes_to_long(base64.b64decode(n2))</span><br><span class="line">n3 = bytes_to_long(base64.b64decode(n3))</span><br><span class="line"><span class="built_in">print</span>(n2)</span><br><span class="line"><span class="built_in">print</span>(n3)</span><br></pre></td></tr></table></figure><p>然后共模攻击，求得n1的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">c1 = <span class="string">&quot;2639c28e3609a4a8c953cca9c326e8e062756305ae8aee6efcd346458aade3ee8c2106ab9dfe5f470804f366af738aa493fd2dc26cb249a922e121287f3eddec0ed8dea89747dc57aed7cd2089d75c23a69bf601f490a64f73f6a583081ae3a7ed52238c13a95d3322065adba9053ee5b12f1de1873dbad9fbf4a50a2f58088df0fddfe2ed8ca1118c81268c8c0fd5572494276f4e48b5eb424f116e6f5e9d66da1b6b3a8f102539b690c1636e82906a46f3c5434d5b04ed7938861f8d453908970eccef07bf13f723d6fdd26a61be8b9462d0ddfbedc91886df194ea022e56c1780aa6c76b9f1c7d5ea743dc75cec3c805324e90ea577fa396a1effdafa3090&quot;</span></span><br><span class="line">c2 = <span class="string">&quot;42ff1157363d9cd10da64eb4382b6457ebb740dbef40ade9b24a174d0145adaa0115d86aa2fc2a41257f2b62486eaebb655925dac78dd8d13ab405aef5b8b8f9830094c712193500db49fb801e1368c73f88f6d8533c99c8e7259f8b9d1c926c47215ed327114f235ba8c873af7a0052aa2d32c52880db55c5615e5a1793b690c37efdd5e503f717bb8de716303e4d6c4116f62d81be852c5d36ef282a958d8c82cf3b458dcc8191dcc7b490f227d1562b1d57fbcf7bf4b78a5d90cd385fd79c8ca4688e7d62b3204aeaf9692ba4d4e44875eaa63642775846434f9ce51d138ca702d907849823b1e86896e4ea6223f93fae68b026cfe5fa5a665569a9e3948a&quot;</span></span><br><span class="line">c1 = codecs.decode(c1,<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">c1 = bytes_to_long(c1)</span><br><span class="line">c2 = bytes_to_long(codecs.decode(c2,<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line">e1 = <span class="number">0x1001</span></span><br><span class="line">e2 = <span class="number">0x101</span></span><br><span class="line">n = n3</span><br><span class="line">gcd,s,t = gmpy2.gcdext(e1,e2)</span><br><span class="line"><span class="keyword">if</span> s &lt; <span class="number">0</span>:</span><br><span class="line">    s = -s</span><br><span class="line">    c1 = gmpy2.invert(c1,n)</span><br><span class="line"><span class="keyword">if</span> t &lt; <span class="number">0</span>:</span><br><span class="line">    t = -t</span><br><span class="line">    c2 = gmpy2.invert(c2,n)</span><br><span class="line"></span><br><span class="line">M = gmpy2.powmod(c1,s,n)*gmpy2.powmod(c2,t,n) % n</span><br><span class="line"><span class="built_in">print</span>(M)</span><br><span class="line">n1 = M</span><br></pre></td></tr></table></figure><p>最后求解得到msg1，msg2。再分析separate函数，发现只是交错分割flag</p><p>所以还原即可。</p><p>注意字节码需要decode()转换为字符串。</p><p>给到的函数num_to_bytes不知道为什么可能有一点小问题，最后需要改用long_to_bytes</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">p = gmpy2.gcd(n1,n2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">c,e,n</span>):</span></span><br><span class="line">    c = bytes_to_num(codecs.decode(c,<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line">    q = <span class="built_in">divmod</span>(n,p)[<span class="number">0</span>]</span><br><span class="line">    phi_n = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    d = gmpy2.invert(e,phi_n)</span><br><span class="line">    m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(m)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c1 = <span class="string">&quot;1240198b148089290e375b999569f0d53c32d356b2e95f5acee070f016b3bef243d0b5e46d9ad7aa7dfe2f21bda920d0ac7ce7b1e48f22b2de410c6f391ce7c4347c65ffc9704ecb3068005e9f35cbbb7b27e0f7a18f4f42ae572d77aaa3ee189418d6a07bab7d93beaa365c98349d8599eb68d21313795f380f05f5b3dfdc6272635ede1f83d308c0fdb2baf444b9ee138132d0d532c3c7e60efb25b9bf9cb62dba9833aa3706344229bd6045f0877661a073b6deef2763452d0ad7ab3404ba494b93fd6dfdf4c28e4fe83a72884a99ddf15ca030ace978f2da87b79b4f504f1d15b5b96c654f6cd5179b72ed5f84d3a16a8f0d5bf6774e7fd98d27bf3c9839&quot;</span></span><br><span class="line">c2 = <span class="string">&quot;129d5d4ab3f9e8017d4e6761702467bbeb1b884b6c4f8ff397d078a8c41186a3d52977fa2307d5b6a0ad01fedfc3ba7b70f776ba3790a43444fb954e5afd64b1a3abeb6507cf70a5eb44678a886adf81cb4848a35afb4db7cd7818f566c7e6e2911f5ababdbdd2d4ff9825827e58d48d5466e021a64599b3e867840c07e29582961f81643df07f678a61a9f9027ebd34094e272dfbdc4619fa0ac60f0189af785df77e7ec784e086cf692a7bf7113a7fb8446a65efa8b431c6f72c14bcfa49c9b491fb1d87f2570059e0f13166a85bb555b40549f45f04bc5dbd09d8b858a5382be6497d88197ffb86381085756365bd757ec3cdfa8a77ba1728ec2de596c5ab&quot;</span></span><br><span class="line">e = <span class="number">0x1001</span></span><br><span class="line">msg1 = decrypt(c1,e,n1).decode()</span><br><span class="line">msg2 = decrypt(c2,e,n2).decode()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">len</span> = <span class="built_in">len</span>(msg2) + <span class="built_in">len</span>(msg1)</span><br><span class="line">tmp1 = <span class="number">0</span></span><br><span class="line">tmp2 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>//<span class="number">2</span>):</span><br><span class="line">    flag += <span class="built_in">str</span>(msg1[tmp1])</span><br><span class="line">    flag += <span class="built_in">str</span>(msg2[tmp2])</span><br><span class="line">    tmp1+=<span class="number">1</span></span><br><span class="line">    tmp2+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h4 id="羊城杯-2020-RRRRRRRSA-【wiener-attack】">[羊城杯 2020]RRRRRRRSA 【wiener attack】</h4><p>wiener attack：依靠连分数进行攻击，适用于非常接近某一值（如1）时，求一个比例关系，通过该比例关系再反推关键信息。</p><p>适用于解密指数d很小，满足以下条件</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>d</mi><mo>&lt;</mo><mn>1</mn><mi mathvariant="normal">/</mi><mn>3</mn><mtext> </mtext><mo>∗</mo><msup><mi>N</mi><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mn>4</mn></mrow></msup><mspace linebreak="newline"></mspace><mi>q</mi><mo>&lt;</mo><mi>p</mi><mo>&lt;</mo><mn>2</mn><mi>q</mi></mrow><annotation encoding="application/x-tex">d &lt; 1/3\ * N^{1/4}\\q &lt; p &lt; 2q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1/3</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.938em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1/4</span></span></span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span></span></p><p>一般用法：根据</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>e</mi><mi>d</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mi>h</mi><mi>i</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">ed\ mod\ phi(n) = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">p</span><span class="mord mathnormal">hi</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p><p>得到</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>e</mi><mo>∗</mo><mi>d</mi><mo>=</mo><mn>1</mn><mo>+</mo><mi>k</mi><mo>∗</mo><mi>p</mi><mi>h</mi><mi>i</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mtext>即 </mtext><mi>e</mi><mi mathvariant="normal">/</mi><mi>p</mi><mi>h</mi><mi>i</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>k</mi><mi mathvariant="normal">/</mi><mi>d</mi><mo>+</mo><mn>1</mn><mi mathvariant="normal">/</mi><mi>d</mi><mo>∗</mo><mi>p</mi><mi>h</mi><mi>i</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mtext>而 </mtext><mi>p</mi><mi>h</mi><mi>i</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mtext>接近于</mtext><mi>n</mi><mspace linebreak="newline"></mspace><mi>e</mi><mi mathvariant="normal">/</mi><mi>n</mi><mo>−</mo><mi>k</mi><mi mathvariant="normal">/</mi><mi>d</mi><mo>=</mo><mn>1</mn><mi mathvariant="normal">/</mi><mi>d</mi><mo>∗</mo><mi>p</mi><mi>h</mi><mi>i</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi>e</mi><mi mathvariant="normal">/</mi><mi>n</mi><mtext>与</mtext><mi>k</mi><mi mathvariant="normal">/</mi><mi>d</mi><mtext>非常接近</mtext><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">e*d = 1 + k*phi(n) \\即\ e/phi(n) = k/d + 1/d*phi(n)\\ 而\ phi(n)接近于n \\ e/n - k/d = 1/d*phi(n)\\ e/n 与 k/d非常接近\\ </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4653em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">hi</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">即</span><span class="mspace"> </span><span class="mord mathnormal">e</span><span class="mord">/</span><span class="mord mathnormal">p</span><span class="mord mathnormal">hi</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1/</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">hi</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">而</span><span class="mspace"> </span><span class="mord mathnormal">p</span><span class="mord mathnormal">hi</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mord cjk_fallback">接近于</span><span class="mord mathnormal">n</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">e</span><span class="mord">/</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1/</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">hi</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">e</span><span class="mord">/</span><span class="mord mathnormal">n</span><span class="mord cjk_fallback">与</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord cjk_fallback">非常接近</span></span><span class="mspace newline"></span></span></span></span></p><p>而e/N又是已知的,因此对e/N进行连分数展开，得到的一串分数的分母很有可能就是d，只要检验一下 ed mod phi(n) 看它是不是1就知道对不对了。</p><p>本题特殊之处：e与N并没有近到相除约为1的地步，相差还是很大的，也就是说解密指数d也许还是很大的，这样就解不出来。但是N1和N2的关系却适合。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>N</mi><mn>1</mn><mi mathvariant="normal">/</mi><mi>N</mi><mn>2</mn><mo>=</mo><mo stretchy="false">(</mo><mi>p</mi><mn>1</mn><mi mathvariant="normal">/</mi><mi>p</mi><mn>2</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mtext> </mtext><mo>∗</mo><mo stretchy="false">(</mo><mi>q</mi><mn>1</mn><mi mathvariant="normal">/</mi><mi>q</mi><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">N1/N2=(p1/p2)^2\ * (q1/q2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord">1/</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mord">1/</span><span class="mord mathnormal">p</span><span class="mord">2</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord">1/</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord">2</span><span class="mclose">)</span></span></span></span></span></p><p>显然我们可以知道的是N1/N2 &lt;Q1/Q2，所以在Q1/Q2在区间(N1/N2,1)之间，尝试对N1/N2进行连分数展开并求其各项渐进分数，其中某个连分数的分母可能就是Q1（这个可以依靠N%Q来验证）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">N1 =</span><br><span class="line">N2 =</span><br><span class="line"><span class="comment">#求连分数的项</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">continuedfra</span>(<span class="params">x,y</span>):</span></span><br><span class="line">    cf = []</span><br><span class="line">    <span class="keyword">while</span> y:</span><br><span class="line">        cf += [x//y]</span><br><span class="line">        x,y = y,x%y</span><br><span class="line">    <span class="keyword">return</span> cf</span><br><span class="line"><span class="comment">#得到分子和分母</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simplify</span>(<span class="params">c</span>):</span></span><br><span class="line">    numrator = <span class="number">0</span> <span class="comment">#分子</span></span><br><span class="line">    denominator = <span class="number">1</span> <span class="comment">#分母</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> c[::-<span class="number">1</span>]: <span class="comment">#倒序遍历？</span></span><br><span class="line">        numrator,denominator = denominator,x * denominator + numrator</span><br><span class="line">    <span class="keyword">return</span> (numrator,denominator) <span class="comment">#连分数生成分子和算出来的分母？</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getit</span>(<span class="params">c</span>):</span></span><br><span class="line">    cf = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        cf.append(simplify(c[:i]))</span><br><span class="line">    <span class="keyword">return</span> cf</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wiener</span>(<span class="params">e,n</span>):</span></span><br><span class="line">    cf = []</span><br><span class="line">    <span class="keyword">for</span> (Q2,Q1) <span class="keyword">in</span> getit(cf):</span><br><span class="line">        <span class="keyword">if</span> Q1 == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> N1%Q1 == <span class="number">0</span> <span class="keyword">and</span> Q1 != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> Q1</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;not found&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">Q1 = wiener(N1,N2)</span><br></pre></td></tr></table></figure><h4 id="！-watevrCTF-2019-Swedish-RSA【多项式】">！[watevrCTF 2019]Swedish RSA【多项式】</h4><p><a href="https://blog.csdn.net/MikeCoke/article/details/113800879">https://blog.csdn.net/MikeCoke/article/details/113800879</a></p><p>多项式的欧拉函数：对于多项式P(y)来讲，欧拉函数phi(P(y))表示所有不高于P(y)幂级的环内所有多项式中，与P(y)无（除1以外）公因式的其他多项式的个数。</p><h4 id="美团CTF-hambersa-【PP】">[美团CTF]hambersa 【PP】</h4><p>x, y = len(str§), len(str(q))<br>P = 10^x * p + p<br>Q = 10^y * q + q<br>同理<br>PP = 10^x’ * P + Q<br>QQ = 10^y’ * Q + P</p><p>N = 10^(x+x’+y+y’)pq+…+pq</p><p>sage代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt_RSA</span>(<span class="params">c, e, p, q</span>):</span></span><br><span class="line">    phi = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">    d = inverse(e, phi)</span><br><span class="line">    m = <span class="built_in">pow</span>(c, d, p*q)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line">n = <span class="number">177269125756508652546242326065138402971542751112423326033880862868822164234452280738170245589798474033047460920552550018968571267978283756742722231922451193</span></span><br><span class="line">c = <span class="number">47718022601324543399078395957095083753201631332808949406927091589044837556469300807728484035581447960954603540348152501053100067139486887367207461593404096</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">low = <span class="built_in">str</span>(n)[-<span class="number">18</span>:]</span><br><span class="line">high = <span class="built_in">str</span>(n)[:<span class="number">18</span>]</span><br><span class="line">pq_prob = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            pq_prob.append(<span class="built_in">int</span>(high + <span class="built_in">str</span>(i) + <span class="built_in">str</span>(j)+ <span class="built_in">str</span>(k) + low))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> tqdm(pq_prob):</span><br><span class="line">    f = factor(x)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(f) == <span class="number">2</span> <span class="keyword">and</span> f[<span class="number">0</span>][<span class="number">0</span>].nbits() == <span class="number">64</span>):</span><br><span class="line">        p, q = f[<span class="number">0</span>][<span class="number">0</span>], f[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">P = <span class="built_in">int</span>(<span class="built_in">str</span>(p) + <span class="built_in">str</span>(p))</span><br><span class="line"><span class="built_in">print</span>(P)</span><br><span class="line">Q = <span class="built_in">int</span>(<span class="built_in">str</span>(q) + <span class="built_in">str</span>(q))</span><br><span class="line">PP = <span class="built_in">int</span>(<span class="built_in">str</span>(P) + <span class="built_in">str</span>(Q))</span><br><span class="line">QQ = <span class="built_in">int</span>(<span class="built_in">str</span>(Q) + <span class="built_in">str</span>(P))</span><br><span class="line">N = PP * QQ</span><br><span class="line"><span class="built_in">print</span>(N == n)</span><br><span class="line">decrypt_RSA(c, <span class="number">65537</span>, PP, QQ)```</span><br></pre></td></tr></table></figure><h4 id="NCTF2019-easyrsa【e，phi不互素】">[NCTF2019]easyrsa【e，phi不互素】</h4><p><a href="http://yulige.top/?p=752#easyRSA909pt_2solvers">http://yulige.top/?p=752#easyRSA909pt_2solvers</a></p><p>然而本题则为<code>e</code>和<code>p-1</code>(或<code>q-1</code>)的最大公约数就是<code>e</code>本身，也就是说<code>e | p-1</code>，只有对<code>c</code>开<code>e</code>次方根才行，但是e很大，暴力计算所需时间很长。<br>可以将同余方程</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>m</mi><mi>e</mi></msup><mo>≡</mo><mi>c</mi><mspace width="1em"/><mo stretchy="false">(</mo><mtext>mod </mtext><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">m^e \equiv c \quad (\text{mod}\ n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7144em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord text"><span class="mord">mod</span></span><span class="mspace"> </span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>化成</mtext><mspace linebreak="newline"></mspace><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msup><mi>m</mi><mi>e</mi></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>≡</mo><mi>c</mi><mspace width="1em"/><mo stretchy="false">(</mo><mtext>mod </mtext><mi>p</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msup><mi>m</mi><mi>e</mi></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>≡</mo><mi>c</mi><mspace width="1em"/><mo stretchy="false">(</mo><mtext>mod </mtext><mi>q</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">化成\\ \begin{aligned}m^e &amp;\equiv c \quad (\text{mod}\ p)\newlinem^e &amp;\equiv c \quad (\text{mod}\ q)\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">化成</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord text"><span class="mord">mod</span></span><span class="mspace"> </span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord text"><span class="mord">mod</span></span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>然后分别在<code>GF(p)</code>和<code>GF(q)</code>上对<code>c</code>开<code>e=0x1337</code>次方根，再用<code>CRT</code>组合一下即可得到在<code>mod n</code>下的解</p><p>**有限域内开根： **</p><p>e与p-1和q-1都不互素，不能简单求个逆元</p><p>开平方根可以用 <code>Tonelli-Shanks</code>算法，可以扩展到开n次方根</p><p>这篇<a href="https://arxiv.org/pdf/1111.4877.pdf">paper</a> 里给出了具体的算法：<code>Adleman-Manders-Miller rth Root Extraction Method</code></p><p><img src="BUUCTF-crypto-writeup-md.assets/QNy9EWc7K4enJGu.jpg" alt="Adleman-Manders-Miller cubic root extraction method"></p><p><a href="https://jayxv.github.io/2019/12/04/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%B5%85%E6%9E%90On%20r-th%20Root%20Extraction%20Algorithm%20in%20Fq/">数学证明以后再看吧2333</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">AMM</span>(<span class="params">o, r, q</span>):</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n----------------------------------------------------------------------------------&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Start to run Adleman-Manders-Miller Root Extraction Method&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Try to find one &#123;:#x&#125;th root of &#123;&#125; modulo &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(r, o, q))</span><br><span class="line">    g = GF(q)</span><br><span class="line">    o = g(o)</span><br><span class="line">    p = g(random.randint(<span class="number">1</span>, q))</span><br><span class="line">    <span class="keyword">while</span> p ^ ((q-<span class="number">1</span>) // r) == <span class="number">1</span>:</span><br><span class="line">        p = g(random.randint(<span class="number">1</span>, q))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[+] Find p:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(p))</span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    s = q - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> s % r == <span class="number">0</span>:</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">        s = s // r</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[+] Find s:&#123;&#125;, t:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(s, t))</span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (k * s + <span class="number">1</span>) % r != <span class="number">0</span>:</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    alp = (k * s + <span class="number">1</span>) // r</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[+] Find alp:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(alp))</span><br><span class="line">    a = p ^ (r**(t-<span class="number">1</span>) * s)</span><br><span class="line">    b = o ^ (r*alp - <span class="number">1</span>)</span><br><span class="line">    c = p ^ s</span><br><span class="line">    h = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, t):</span><br><span class="line">        d = b ^ (r^(t-<span class="number">1</span>-i))</span><br><span class="line">        <span class="keyword">if</span> d == <span class="number">1</span>:</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[+] Calculating DLP...&#x27;</span>)</span><br><span class="line">            j = - discrete_log(d, a)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[+] Finish DLP...&#x27;</span>)</span><br><span class="line">        b = b * (c^r)^j</span><br><span class="line">        h = h * c^j</span><br><span class="line">        c = c^r</span><br><span class="line">    result = o^alp * h</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Finished in &#123;&#125; seconds.&quot;</span>.<span class="built_in">format</span>(end - start))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Find one solution: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(result))</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>但该算法只能求得一个根，实际上开0x1337次方，最多会有0x1337个根。</p><p>那么如何找到其他根呢？</p><p>先找到所有0x1336个proot使得</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>p</mi><mi>r</mi><mi>o</mi><mi>o</mi><msup><mi>t</mi><mi>e</mi></msup><mo>=</mo><mn>1</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">proot^e = 1 (mod\ p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9088em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">roo</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></span></p><p>然后乘以上面求得的根即可。</p><p>由于</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>o</mi><msup><mi>t</mi><mrow><mi>p</mi><mo>−</mo><mn>1</mn><mi mathvariant="normal">/</mi><mi>e</mi></mrow></msup><msup><mo stretchy="false">)</mo><mi>e</mi></msup><mo>=</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>o</mi><msup><mi>t</mi><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mn>1</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(proot^{p-1/e})^e = proot^{p-1} = 1 (mod\ p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.188em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mord mathnormal">roo</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mbin mtight">−</span><span class="mord mtight">1/</span><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0585em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">roo</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></span></p><p>所以只需要</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findAllPRoot</span>(<span class="params">p, e</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Start to find all the Primitive &#123;:#x&#125;th root of 1 modulo &#123;&#125;.&quot;</span>.<span class="built_in">format</span>(e, p))</span><br><span class="line">    start = time.time()</span><br><span class="line">    proot = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(proot) &lt; e:</span><br><span class="line">        g = <span class="built_in">pow</span>(random.randint(<span class="number">2</span>, p-<span class="number">1</span>), (p-<span class="number">1</span>)//e, p)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">pow</span>(g,e//<span class="number">2</span>,p) != <span class="number">1</span>:</span><br><span class="line">            proot.add(g)</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Finished in &#123;&#125; seconds.&quot;</span>.<span class="built_in">format</span>(end - start))</span><br><span class="line">    <span class="keyword">return</span> proot</span><br></pre></td></tr></table></figure><p>完整sage代码如下</p><h4 id="百度2021-time【p，q相近-随机数遍历】">[百度2021]time【p，q相近+随机数遍历】</h4><p>首先看到q是p的下一个素数，可以发现p，q非常相近，所以</p><p><img src="BUUCTF-crypto-writeup-md.assets/image-20211228131817914.png" alt="image-20211228131817914"></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>p</mi><mo>−</mo><mi>q</mi><mi mathvariant="normal">∣</mi><mtext>很小</mtext><mspace linebreak="newline"></mspace><mtext>（</mtext><mi>p</mi><mo>+</mo><mi>q</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn><mtext>与</mtext><mroot><mi>n</mi><mn>2</mn></mroot><mtext>很接近</mtext><mspace linebreak="newline"></mspace><mtext>从</mtext><mroot><mi>n</mi><mn>2</mn></mroot><mtext>开始直到找到一个</mtext><mi>x</mi><mtext>，使得</mtext><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><mi>n</mi><mo>=</mo><msup><mi>y</mi><mn>2</mn></msup><mtext>即可</mtext><mspace linebreak="newline"></mspace><mi>p</mi><mo>=</mo><mi>x</mi><mo>−</mo><mi>y</mi><mspace linebreak="newline"></mspace><mi>q</mi><mo>=</mo><mi>x</mi><mo>+</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">|p-q|很小\\（p+q)/2 与 \sqrt[2]{n}很接近\\从\sqrt[2]{n}开始直到找到一个x，使得x^2-n=y^2即可\\p = x-y \\q = x + y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord">∣</span><span class="mord cjk_fallback">很小</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord cjk_fallback">（</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0992em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span><span class="mord">/2</span><span class="mord cjk_fallback">与</span><span class="mord sqrt"><span class="root"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7172em;"><span style="top:-2.895em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size6 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8492em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">n</span></span></span><span style="top:-2.8092em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1908em;"><span></span></span></span></span></span><span class="mord cjk_fallback">很接近</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.055em;vertical-align:-0.1908em;"></span><span class="mord cjk_fallback">从</span><span class="mord sqrt"><span class="root"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7172em;"><span style="top:-2.895em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size6 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8492em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">n</span></span></span><span style="top:-2.8092em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1908em;"><span></span></span></span></span></span><span class="mord cjk_fallback">开始直到找到一个</span><span class="mord mathnormal">x</span><span class="mord cjk_fallback">，使得</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0585em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord cjk_fallback">即可</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pp = gmpy2.iroot(n,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(pp+<span class="number">1</span>,pp+<span class="number">3</span>):</span><br><span class="line">    yy = <span class="built_in">pow</span>(x,<span class="number">2</span>)-n</span><br><span class="line">    <span class="keyword">if</span> gmpy2.iroot(yy,<span class="number">2</span>)[<span class="number">1</span>]:</span><br><span class="line">        y = gmpy2.iroot(yy,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">        p = (x-y)</span><br><span class="line">        q = x + y</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;p:&quot;</span>,p)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;q:&quot;</span>,q)</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到hint</p><p><code>localtime为time.struct_time(tm_year=2021, tm_mon=4, tm_mday=28, tm_hour=20, tm_min=42, tm_sec=6, tm_wday=2, tm_yday=118, tm_isdst=0)</code></p><p><code>time()-a1 = 3.1603143215179443</code></p><p>randome.seed设置的种子相同的话，最后得到的随机数也相同，所以只需要进行遍历即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">lt = time.mktime((<span class="number">2021</span>,<span class="number">4</span>,<span class="number">28</span>,<span class="number">20</span>,<span class="number">42</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">118</span>,<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(lt)</span><br><span class="line">a1 = <span class="number">3.1603143215179443</span></span><br><span class="line">s = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>):</span><br><span class="line">        random.seed(s)</span><br><span class="line">        x = random.getrandbits(<span class="number">2048</span>)</span><br><span class="line">        s = <span class="built_in">int</span>(lt) - i + j * <span class="number">10</span> ** -<span class="number">5</span></span><br><span class="line">        <span class="keyword">if</span> n % x == <span class="number">0</span>:</span><br><span class="line">            p = x</span><br><span class="line">            <span class="built_in">print</span>(p)</span><br><span class="line">            q = n//p</span><br><span class="line">            phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">            d = gmpy2.invert(e,phi)</span><br><span class="line">            m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">            <span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        </span><br></pre></td></tr></table></figure><h4 id="百度ichunqiu-whitegiveCMA【数论-共模】">[百度ichunqiu]whitegiveCMA【数论+共模】</h4><h4 id="GKCTF2021-RRRsa【数学式子化简】">[GKCTF2021]RRRsa【数学式子化简】</h4><p>1）拿到两个式子后，先把<strong>括号去掉</strong>，然后把<strong>常数项去掉</strong>；<br>2）之后得到的式子应该是<strong>俩个只含p或q的式子</strong>，让两个式子的p（或q）的<strong>指数</strong>和<strong>系数</strong>相同；<br>3）将两个式子相加或相减<strong>消掉p</strong>,剩下的式子应该只剩下q,与n进行gcd（）求出q</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> Rsa</span><br><span class="line">t= <span class="number">202020</span>*<span class="number">212121</span></span><br><span class="line">h3=<span class="number">25590923416756813543880554963887576960707333607377889401033718419301278802157204881039116350321872162118977797069089653428121479486603744700519830597186045931412652681572060953439655868476311798368015878628002547540835719870081007505735499581449077950263721606955524302365518362434928190394924399683131242077</span></span><br><span class="line">h4=<span class="number">104100726926923869566862741238876132366916970864374562947844669556403268955625670105641264367038885706425427864941392601593437305258297198111819227915453081797889565662276003122901139755153002219126366611021736066016741562232998047253335141676203376521742965365133597943669838076210444485458296240951668402513</span></span><br><span class="line">n2 = <span class="number">114535923043375970380117920548097404729043079895540320742847840364455024050473125998926311644172960176471193602850427607899191810616953021324742137492746159921284982146320175356395325890407704697018412456350862990849606200323084717352630282539156670636025924425865741196506478163922312894384285889848355244489</span></span><br><span class="line">h = <span class="built_in">pow</span>(<span class="number">2021</span>,t,n2)*<span class="built_in">pow</span>(h3,<span class="number">212121</span>,n2)-<span class="built_in">pow</span>(<span class="number">2020</span>,t,n2)*<span class="built_in">pow</span>(h4,<span class="number">202020</span>,n2)</span><br><span class="line">q2 = gmpy2.gcd(n2,h)</span><br><span class="line"><span class="built_in">print</span>(q2)</span><br><span class="line">p2 = n2//q2</span><br><span class="line"><span class="built_in">print</span>(p2)</span><br><span class="line">c2 = <span class="number">67054203666901691181215262587447180910225473339143260100831118313521471029889304176235434129632237116993910316978096018724911531011857469325115308802162172965564951703583450817489247675458024801774590728726471567407812572210421642171456850352167810755440990035255967091145950569246426544351461548548423025004</span></span><br><span class="line">d = Rsa.get_d(<span class="number">65537</span>,p2,q2,n2)</span><br><span class="line">q = Rsa.decrypt(c2,d,n2)</span><br><span class="line"></span><br><span class="line">n1=<span class="number">75003557379080252219517825998990183226659117019770735080523409561757225883651040882547519748107588719498261922816865626714101556207649929655822889945870341168644508079317582220034374613066751916750036253423990673764234066999306874078424803774652754587494762629397701664706287999727238636073466137405374927829</span></span><br><span class="line">c1=<span class="number">68111901092027813007099627893896838517426971082877204047110404787823279211508183783468891474661365139933325981191524511345219830693064573462115529345012970089065201176142417462299650761299758078141504126185921304526414911455395289228444974516503526507906721378965227166653195076209418852399008741560796631569</span></span><br><span class="line">hint1=<span class="number">23552090716381769484990784116875558895715552896983313406764042416318710076256166472426553520240265023978449945974218435787929202289208329156594838420190890104226497263852461928474756025539394996288951828172126419569993301524866753797584032740426259804002564701319538183190684075289055345581960776903740881951</span></span><br><span class="line">hint2=<span class="number">52723229698530767897979433914470831153268827008372307239630387100752226850798023362444499211944996778363894528759290565718266340188582253307004810850030833752132728256929572703630431232622151200855160886614350000115704689605102500273815157636476901150408355565958834764444192860513855376978491299658773170270</span></span><br><span class="line">q1 = gmpy2.gcd(n1,<span class="built_in">pow</span>(hint2-<span class="number">212121</span>,<span class="number">202020</span>,n1)*<span class="built_in">pow</span>(<span class="number">2020</span>,<span class="number">202020</span>,n1)-hint1*<span class="built_in">pow</span>(<span class="number">2021</span>,<span class="number">202020</span>,n1))</span><br><span class="line"><span class="built_in">print</span>(q1)</span><br><span class="line">p1 = n1//q1</span><br><span class="line">d = Rsa.get_d(<span class="number">65537</span>,p1,q1,n1)</span><br><span class="line">p = Rsa.decrypt(c1,d,n1)</span><br><span class="line"></span><br><span class="line">c = <span class="number">13492392717469817866883431475453770951837476241371989714683737558395769731416522300851917887957945766132864151382877462142018129852703437240533684604508379950293643294877725773675505912622208813435625177696614781601216465807569201380151669942605208425645258372134465547452376467465833013387018542999562042758</span></span><br><span class="line">d = Rsa.get_d(<span class="number">65537</span>,p,q,p*q)</span><br><span class="line">m = Rsa.decrypt(c,d,p*q)</span><br></pre></td></tr></table></figure><h2 id="ELgamal">ELgamal</h2><h2 id="Hash">Hash</h2><h2 id="脑洞">脑洞</h2>]]></content>
      
      
      <categories>
          
          <category> crypto </category>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crypto </tag>
            
            <tag> ctf </tag>
            
            <tag> writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AES</title>
      <link href="/2022/01/23/AES/"/>
      <url>/2022/01/23/AES/</url>
      
        <content type="html"><![CDATA[<h1>AES</h1><h3 id="算法">算法</h3><ul><li><p>输入：128bit</p></li><li><p>输出：128bit</p></li><li><p>密钥长度与迭代轮数有关</p><p><img src="AES.assets/image-20220115160053585.png" alt="image-20220115160053585"></p></li></ul><p>加解密流程：</p><p><img src="AES.assets/aes_details.jpg" alt="img">每一轮主要包括：</p><ul><li>轮密钥加，AddRoundKey：将128位轮密钥Ki同状态矩阵中的数据进行逐位异或操作</li><li>字节替换，SubBytes：查表S盒。把字节的高4位作为行值（0），低4位作为列值（8），取出S盒或者逆S盒中对应的元素（30）作为输出</li><li>行移位，ShiftRows：简单的左循环移位。当密钥长度为128比特时，状态矩阵的第0行左移0字节，第1行左移1字节，第2行左移2字节，第3行左移3字节</li><li>列混淆，MixColumns：经行移位后的状态矩阵与固定的矩阵相乘，得到混淆后的状态矩阵。其中，矩阵元素的乘法和加法都是定义在基于GF(2^8)上的二元运算。</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>b</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>a</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>c</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><msup><mi>x</mi><mn>4</mn></msup><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mtext>其中</mtext><mi>c</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mn>03</mn><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mn>01</mn><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>01</mn><mi>x</mi><mo>+</mo><mn>02</mn><mspace linebreak="newline"></mspace><mi>c</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mtext>与</mtext><msup><mi>x</mi><mn>4</mn></msup><mo>+</mo><mn>1</mn><mtext>互素，保证存在逆多项式</mtext><mi>d</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mtext>，满足</mtext><mi>c</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>d</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><msup><mi>x</mi><mn>4</mn></msup><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mtext>。</mtext><mspace linebreak="newline"></mspace><mtext>只有逆多项式</mtext><mi>d</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mtext>存在，才能正确进行解密</mtext></mrow><annotation encoding="application/x-tex">b(x) = a(x)c(x) mod (x^4+1)\\ 其中c(x) = 03x^3+01x^2+01x+02\\ c(x)与x^4+1互素，保证存在逆多项式d(x)，满足c(x)d(x)=1 mod (x^4+1 )。\\只有逆多项式d(x)存在，才能正确进行解密</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord mathnormal">c</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">其中</span><span class="mord mathnormal">c</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord">03</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord">01</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">01</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">02</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord cjk_fallback">与</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord cjk_fallback">互素，保证存在逆多项式</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord cjk_fallback">，满足</span><span class="mord mathnormal">c</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord cjk_fallback">。</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">只有逆多项式</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord cjk_fallback">存在，才能正确进行解密</span></span></span></span></span></p><p>密钥扩展：</p><ol><li><p>首先将初始密钥输入到一个4*4的状态矩阵，每一列的4个字节组成一个字，依次为w[0],w[1],w[2],w[3]</p></li><li><p>接着，对W数组扩充40个新列，构成总共44列的扩展密钥数组。新列i的产生方式如下</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>i</mi><mtext>不是</mtext><mn>4</mn><mtext>的倍数</mtext><mspace linebreak="newline"></mspace><mi>w</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mi>w</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>4</mn><mo stretchy="false">]</mo><mtext> </mtext><mi>x</mi><mi>o</mi><mi>r</mi><mtext> </mtext><mi>w</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mspace linebreak="newline"></mspace><mi>i</mi><mtext>是</mtext><mn>4</mn><mtext>的倍数</mtext><mspace linebreak="newline"></mspace><mi>w</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mi>w</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>4</mn><mo stretchy="false">]</mo><mtext> </mtext><mi>x</mi><mi>o</mi><mi>r</mi><mtext> </mtext><mi>T</mi><mo stretchy="false">(</mo><mi>w</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">i不是4的倍数\\ w[i] = w[i-4] \ xor\ w[i-1]\\i是4的倍数\\ w[i] = w[i-4]\ xor \ T(w[i-1])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">i</span><span class="mord cjk_fallback">不是</span><span class="mord">4</span><span class="mord cjk_fallback">的倍数</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">4</span><span class="mclose">]</span><span class="mspace"> </span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">i</span><span class="mord cjk_fallback">是</span><span class="mord">4</span><span class="mord cjk_fallback">的倍数</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">4</span><span class="mclose">]</span><span class="mspace"> </span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">])</span></span></span></span></span></p><p>其中函数T由以下三部分组成：</p><ul><li>字循环：将1个字中的4个字节循环左移1个字节</li><li>字节代换：对字循环的结果使用S盒进行字节代换</li><li>轮常量异或：将前两步的结果与轮常量Rcon[j]异或，其中j表示轮数</li></ul><p><img src="AES.assets/image-20220118145857240.png" alt="image-20220118145857240"></p></li></ol><p>比如上述初始密钥</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>w</mi><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>:</mo><mn>2</mn><mi>b</mi><mtext> </mtext><mn>7</mn><mi>e</mi><mtext> </mtext><mn>15</mn><mtext> </mtext><mn>16</mn><mspace linebreak="newline"></mspace><mi>w</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>:</mo><mn>28</mn><mtext> </mtext><mi>a</mi><mi>e</mi><mtext> </mtext><mi>d</mi><mn>2</mn><mtext> </mtext><mi>a</mi><mn>6</mn><mspace linebreak="newline"></mspace><mi>w</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mo>:</mo><mi>a</mi><mi>b</mi><mtext> </mtext><mi>f</mi><mn>7</mn><mtext> </mtext><mn>15</mn><mtext> </mtext><mn>88</mn><mspace linebreak="newline"></mspace><mi>w</mi><mo stretchy="false">[</mo><mn>3</mn><mo stretchy="false">]</mo><mo>:</mo><mn>09</mn><mtext> </mtext><mi>c</mi><mi>f</mi><mtext> </mtext><mn>4</mn><mi>f</mi><mtext> </mtext><mn>3</mn><mi>c</mi><mspace linebreak="newline"></mspace><mtext>求扩展的第一轮的子密钥</mtext><mi>w</mi><mo stretchy="false">[</mo><mn>4</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>w</mi><mo stretchy="false">[</mo><mn>5</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>w</mi><mo stretchy="false">[</mo><mn>6</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>w</mi><mo stretchy="false">[</mo><mn>7</mn><mo stretchy="false">]</mo><mspace linebreak="newline"></mspace><mi>w</mi><mo stretchy="false">[</mo><mn>4</mn><mo stretchy="false">]</mo><mo>=</mo><mi>w</mi><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mi>x</mi><mi>o</mi><mi>r</mi><mi>T</mi><mo stretchy="false">(</mo><mi>w</mi><mo stretchy="false">[</mo><mn>3</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi>T</mi><mo stretchy="false">(</mo><mi>w</mi><mo stretchy="false">[</mo><mn>3</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mtext>计算过程如下：</mtext><mspace linebreak="newline"></mspace><mn>1.</mn><mi>w</mi><mo stretchy="false">[</mo><mn>3</mn><mo stretchy="false">]</mo><mtext>循环左移</mtext><mn>1</mn><mtext>个字节得到</mtext><mi>c</mi><mi>f</mi><mtext> </mtext><mn>4</mn><mi>f</mi><mtext> </mtext><mn>3</mn><mi>c</mi><mtext> </mtext><mn>09</mn><mspace linebreak="newline"></mspace><mn>2.</mn><mtext>字节代换得到</mtext><mn>8</mn><mi>a</mi><mtext> </mtext><mn>84</mn><mtext> </mtext><mi>e</mi><mi>b</mi><mtext> </mtext><mn>01</mn><mspace linebreak="newline"></mspace><mn>3.</mn><mtext>与轮常量异或再与</mtext><mi>w</mi><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mtext>异或最后得到</mtext><mi>a</mi><mn>0</mn><mtext> </mtext><mi>f</mi><mi>a</mi><mtext> </mtext><mi>f</mi><mi>e</mi><mtext> </mtext><mn>17</mn></mrow><annotation encoding="application/x-tex">w[0]:2b \ 7e \ 15 \ 16\\ w[1]:28 \ ae \ d2 \ a6\\ w[2]: ab \ f7 \ 15 \ 88\\ w[3]: 09 \ cf \ 4f \ 3c\\求扩展的第一轮的子密钥w[4],w[5],w[6],w[7]\\w[4] = w[0] xor T(w[3])\\ T(w[3])计算过程如下：\\1. w[3]循环左移1个字节得到cf \ 4f \ 3c \ 09\\2.字节代换得到8a \ 84 \ eb \ 01\\3.与轮常量异或再与w[0]异或最后得到a0 \ fa \ fe \ 17</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">2</span><span class="mord mathnormal">b</span><span class="mspace"> </span><span class="mord">7</span><span class="mord mathnormal">e</span><span class="mspace"> </span><span class="mord">15</span><span class="mspace"> </span><span class="mord">16</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">28</span><span class="mspace"> </span><span class="mord mathnormal">a</span><span class="mord mathnormal">e</span><span class="mspace"> </span><span class="mord mathnormal">d</span><span class="mord">2</span><span class="mspace"> </span><span class="mord mathnormal">a</span><span class="mord">6</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ab</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord">7</span><span class="mspace"> </span><span class="mord">15</span><span class="mspace"> </span><span class="mord">88</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord">3</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">09</span><span class="mspace"> </span><span class="mord mathnormal">c</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mspace"> </span><span class="mord">4</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mspace"> </span><span class="mord">3</span><span class="mord mathnormal">c</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">求扩展的第一轮的子密钥</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord">4</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord">5</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord">6</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord">7</span><span class="mclose">]</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord">4</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord">3</span><span class="mclose">])</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord">3</span><span class="mclose">])</span><span class="mord cjk_fallback">计算过程如下：</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1.</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord">3</span><span class="mclose">]</span><span class="mord cjk_fallback">循环左移</span><span class="mord">1</span><span class="mord cjk_fallback">个字节得到</span><span class="mord mathnormal">c</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mspace"> </span><span class="mord">4</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mspace"> </span><span class="mord">3</span><span class="mord mathnormal">c</span><span class="mspace"> </span><span class="mord">09</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">2.</span><span class="mord cjk_fallback">字节代换得到</span><span class="mord">8</span><span class="mord mathnormal">a</span><span class="mspace"> </span><span class="mord">84</span><span class="mspace"> </span><span class="mord mathnormal">e</span><span class="mord mathnormal">b</span><span class="mspace"> </span><span class="mord">01</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3.</span><span class="mord cjk_fallback">与轮常量异或再与</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mord cjk_fallback">异或最后得到</span><span class="mord mathnormal">a</span><span class="mord">0</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">a</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">e</span><span class="mspace"> </span><span class="mord">17</span></span></span></span></span></p><h3 id="signature-2">signature</h3><p>signature定义用到快速软件实现——查表法。将行移位、列混合和S盒结合得到4个4bytes*256项的查找表（T盒）。</p><p>列变换中，</p><p><img src="AES.assets/image-20220118160907434.png" alt="image-20220118160907434"></p><p>将其按列向量拆开，对于每一列，都有：</p><p><img src="AES.assets/image-20220118160943225.png" alt="image-20220118160943225"></p><p>所以得到：其中Wk0为本轮子密钥ki中对应的4字节</p><p><img src="AES.assets/image-20220118161013057.png" alt="image-20220118161013057"></p><p>T盒定义为</p><p><img src="AES.assets/image-20220118161112688.png" alt="image-20220118161112688"></p><p>所以轮操作变为：</p><p><img src="AES.assets/image-20220118161222708.png" alt="image-20220118161222708"></p><p>根据上述理论，预定义的结构如下</p><p><img src="AES.assets/image-20220118151325836.png" alt="image-20220118151325836"></p><p><img src="AES.assets/image-20220118151417023.png" alt="image-20220118151417023"></p><h3 id="测试">测试</h3><p>AES_encrypt</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AES_encrypt</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *in, <span class="keyword">unsigned</span> <span class="keyword">char</span> *out,</span></span></span><br><span class="line"><span class="params"><span class="function">                 <span class="keyword">const</span> AES_KEY *key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> u32 *rk;</span><br><span class="line">    u32 s0, s1, s2, s3, t0, t1, t2, t3;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> FULL_UNROLL</span></span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* ?FULL_UNROLL */</span></span></span><br><span class="line"></span><br><span class="line">    assert(in &amp;&amp; out &amp;&amp; key);</span><br><span class="line">    rk = key-&gt;rd_key;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * map byte array block to cipher state</span></span><br><span class="line"><span class="comment">     * and add initial round key:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    s0 = GETU32(in     ) ^ rk[<span class="number">0</span>];</span><br><span class="line">    s1 = GETU32(in +  <span class="number">4</span>) ^ rk[<span class="number">1</span>];</span><br><span class="line">    s2 = GETU32(in +  <span class="number">8</span>) ^ rk[<span class="number">2</span>];</span><br><span class="line">    s3 = GETU32(in + <span class="number">12</span>) ^ rk[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> FULL_UNROLL</span></span><br><span class="line">    <span class="comment">/* round 1: */</span></span><br><span class="line">    t0 = Te0[s0 &gt;&gt; <span class="number">24</span>] ^ Te1[(s1 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(s2 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[s3 &amp; <span class="number">0xff</span>] ^ rk[ <span class="number">4</span>];</span><br><span class="line">    t1 = Te0[s1 &gt;&gt; <span class="number">24</span>] ^ Te1[(s2 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(s3 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[s0 &amp; <span class="number">0xff</span>] ^ rk[ <span class="number">5</span>];</span><br><span class="line">    t2 = Te0[s2 &gt;&gt; <span class="number">24</span>] ^ Te1[(s3 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(s0 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[s1 &amp; <span class="number">0xff</span>] ^ rk[ <span class="number">6</span>];</span><br><span class="line">    t3 = Te0[s3 &gt;&gt; <span class="number">24</span>] ^ Te1[(s0 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(s1 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[s2 &amp; <span class="number">0xff</span>] ^ rk[ <span class="number">7</span>];</span><br><span class="line">    <span class="comment">/* round 2: */</span></span><br><span class="line">    s0 = Te0[t0 &gt;&gt; <span class="number">24</span>] ^ Te1[(t1 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(t2 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[t3 &amp; <span class="number">0xff</span>] ^ rk[ <span class="number">8</span>];</span><br><span class="line">    s1 = Te0[t1 &gt;&gt; <span class="number">24</span>] ^ Te1[(t2 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(t3 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[t0 &amp; <span class="number">0xff</span>] ^ rk[ <span class="number">9</span>];</span><br><span class="line">    s2 = Te0[t2 &gt;&gt; <span class="number">24</span>] ^ Te1[(t3 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(t0 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[t1 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">10</span>];</span><br><span class="line">    s3 = Te0[t3 &gt;&gt; <span class="number">24</span>] ^ Te1[(t0 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(t1 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[t2 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">11</span>];</span><br><span class="line">    <span class="comment">/* round 3: */</span></span><br><span class="line">    t0 = Te0[s0 &gt;&gt; <span class="number">24</span>] ^ Te1[(s1 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(s2 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[s3 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">12</span>];</span><br><span class="line">    t1 = Te0[s1 &gt;&gt; <span class="number">24</span>] ^ Te1[(s2 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(s3 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[s0 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">13</span>];</span><br><span class="line">    t2 = Te0[s2 &gt;&gt; <span class="number">24</span>] ^ Te1[(s3 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(s0 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[s1 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">14</span>];</span><br><span class="line">    t3 = Te0[s3 &gt;&gt; <span class="number">24</span>] ^ Te1[(s0 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(s1 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[s2 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">15</span>];</span><br><span class="line">    <span class="comment">/* round 4: */</span></span><br><span class="line">    s0 = Te0[t0 &gt;&gt; <span class="number">24</span>] ^ Te1[(t1 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(t2 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[t3 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">16</span>];</span><br><span class="line">    s1 = Te0[t1 &gt;&gt; <span class="number">24</span>] ^ Te1[(t2 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(t3 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[t0 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">17</span>];</span><br><span class="line">    s2 = Te0[t2 &gt;&gt; <span class="number">24</span>] ^ Te1[(t3 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(t0 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[t1 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">18</span>];</span><br><span class="line">    s3 = Te0[t3 &gt;&gt; <span class="number">24</span>] ^ Te1[(t0 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(t1 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[t2 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">19</span>];</span><br><span class="line">    <span class="comment">/* round 5: */</span></span><br><span class="line">    t0 = Te0[s0 &gt;&gt; <span class="number">24</span>] ^ Te1[(s1 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(s2 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[s3 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">20</span>];</span><br><span class="line">    t1 = Te0[s1 &gt;&gt; <span class="number">24</span>] ^ Te1[(s2 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(s3 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[s0 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">21</span>];</span><br><span class="line">    t2 = Te0[s2 &gt;&gt; <span class="number">24</span>] ^ Te1[(s3 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(s0 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[s1 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">22</span>];</span><br><span class="line">    t3 = Te0[s3 &gt;&gt; <span class="number">24</span>] ^ Te1[(s0 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(s1 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[s2 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">23</span>];</span><br><span class="line">    <span class="comment">/* round 6: */</span></span><br><span class="line">    s0 = Te0[t0 &gt;&gt; <span class="number">24</span>] ^ Te1[(t1 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(t2 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[t3 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">24</span>];</span><br><span class="line">    s1 = Te0[t1 &gt;&gt; <span class="number">24</span>] ^ Te1[(t2 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(t3 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[t0 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">25</span>];</span><br><span class="line">    s2 = Te0[t2 &gt;&gt; <span class="number">24</span>] ^ Te1[(t3 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(t0 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[t1 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">26</span>];</span><br><span class="line">    s3 = Te0[t3 &gt;&gt; <span class="number">24</span>] ^ Te1[(t0 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(t1 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[t2 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">27</span>];</span><br><span class="line">    <span class="comment">/* round 7: */</span></span><br><span class="line">    t0 = Te0[s0 &gt;&gt; <span class="number">24</span>] ^ Te1[(s1 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(s2 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[s3 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">28</span>];</span><br><span class="line">    t1 = Te0[s1 &gt;&gt; <span class="number">24</span>] ^ Te1[(s2 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(s3 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[s0 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">29</span>];</span><br><span class="line">    t2 = Te0[s2 &gt;&gt; <span class="number">24</span>] ^ Te1[(s3 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(s0 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[s1 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">30</span>];</span><br><span class="line">    t3 = Te0[s3 &gt;&gt; <span class="number">24</span>] ^ Te1[(s0 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(s1 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[s2 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">31</span>];</span><br><span class="line">    <span class="comment">/* round 8: */</span></span><br><span class="line">    s0 = Te0[t0 &gt;&gt; <span class="number">24</span>] ^ Te1[(t1 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(t2 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[t3 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">32</span>];</span><br><span class="line">    s1 = Te0[t1 &gt;&gt; <span class="number">24</span>] ^ Te1[(t2 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(t3 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[t0 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">33</span>];</span><br><span class="line">    s2 = Te0[t2 &gt;&gt; <span class="number">24</span>] ^ Te1[(t3 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(t0 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[t1 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">34</span>];</span><br><span class="line">    s3 = Te0[t3 &gt;&gt; <span class="number">24</span>] ^ Te1[(t0 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(t1 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[t2 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">35</span>];</span><br><span class="line">    <span class="comment">/* round 9: */</span></span><br><span class="line">    t0 = Te0[s0 &gt;&gt; <span class="number">24</span>] ^ Te1[(s1 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(s2 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[s3 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">36</span>];</span><br><span class="line">    t1 = Te0[s1 &gt;&gt; <span class="number">24</span>] ^ Te1[(s2 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(s3 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[s0 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">37</span>];</span><br><span class="line">    t2 = Te0[s2 &gt;&gt; <span class="number">24</span>] ^ Te1[(s3 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(s0 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[s1 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">38</span>];</span><br><span class="line">    t3 = Te0[s3 &gt;&gt; <span class="number">24</span>] ^ Te1[(s0 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(s1 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[s2 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">39</span>];</span><br><span class="line">    <span class="keyword">if</span> (key-&gt;rounds &gt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="comment">/* round 10: */</span></span><br><span class="line">        s0 = Te0[t0 &gt;&gt; <span class="number">24</span>] ^ Te1[(t1 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(t2 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[t3 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">40</span>];</span><br><span class="line">        s1 = Te0[t1 &gt;&gt; <span class="number">24</span>] ^ Te1[(t2 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(t3 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[t0 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">41</span>];</span><br><span class="line">        s2 = Te0[t2 &gt;&gt; <span class="number">24</span>] ^ Te1[(t3 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(t0 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[t1 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">42</span>];</span><br><span class="line">        s3 = Te0[t3 &gt;&gt; <span class="number">24</span>] ^ Te1[(t0 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(t1 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[t2 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">43</span>];</span><br><span class="line">        <span class="comment">/* round 11: */</span></span><br><span class="line">        t0 = Te0[s0 &gt;&gt; <span class="number">24</span>] ^ Te1[(s1 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(s2 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[s3 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">44</span>];</span><br><span class="line">        t1 = Te0[s1 &gt;&gt; <span class="number">24</span>] ^ Te1[(s2 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(s3 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[s0 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">45</span>];</span><br><span class="line">        t2 = Te0[s2 &gt;&gt; <span class="number">24</span>] ^ Te1[(s3 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(s0 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[s1 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">46</span>];</span><br><span class="line">        t3 = Te0[s3 &gt;&gt; <span class="number">24</span>] ^ Te1[(s0 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(s1 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[s2 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">47</span>];</span><br><span class="line">        <span class="keyword">if</span> (key-&gt;rounds &gt; <span class="number">12</span>) &#123;</span><br><span class="line">            <span class="comment">/* round 12: */</span></span><br><span class="line">            s0 = Te0[t0 &gt;&gt; <span class="number">24</span>] ^ Te1[(t1 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(t2 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[t3 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">48</span>];</span><br><span class="line">            s1 = Te0[t1 &gt;&gt; <span class="number">24</span>] ^ Te1[(t2 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(t3 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[t0 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">49</span>];</span><br><span class="line">            s2 = Te0[t2 &gt;&gt; <span class="number">24</span>] ^ Te1[(t3 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(t0 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[t1 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">50</span>];</span><br><span class="line">            s3 = Te0[t3 &gt;&gt; <span class="number">24</span>] ^ Te1[(t0 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(t1 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[t2 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">51</span>];</span><br><span class="line">            <span class="comment">/* round 13: */</span></span><br><span class="line">            t0 = Te0[s0 &gt;&gt; <span class="number">24</span>] ^ Te1[(s1 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(s2 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[s3 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">52</span>];</span><br><span class="line">            t1 = Te0[s1 &gt;&gt; <span class="number">24</span>] ^ Te1[(s2 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(s3 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[s0 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">53</span>];</span><br><span class="line">            t2 = Te0[s2 &gt;&gt; <span class="number">24</span>] ^ Te1[(s3 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(s0 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[s1 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">54</span>];</span><br><span class="line">            t3 = Te0[s3 &gt;&gt; <span class="number">24</span>] ^ Te1[(s0 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^ Te2[(s1 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^ Te3[s2 &amp; <span class="number">0xff</span>] ^ rk[<span class="number">55</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    rk += key-&gt;rounds &lt;&lt; <span class="number">2</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span>  <span class="comment">/* !FULL_UNROLL */</span></span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Nr - 1 full rounds:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    r = key-&gt;rounds &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        t0 =</span><br><span class="line">            Te0[(s0 &gt;&gt; <span class="number">24</span>)       ] ^</span><br><span class="line">            Te1[(s1 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^</span><br><span class="line">            Te2[(s2 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^</span><br><span class="line">            Te3[(s3      ) &amp; <span class="number">0xff</span>] ^</span><br><span class="line">            rk[<span class="number">4</span>];</span><br><span class="line">        t1 =</span><br><span class="line">            Te0[(s1 &gt;&gt; <span class="number">24</span>)       ] ^</span><br><span class="line">            Te1[(s2 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^</span><br><span class="line">            Te2[(s3 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^</span><br><span class="line">            Te3[(s0      ) &amp; <span class="number">0xff</span>] ^</span><br><span class="line">            rk[<span class="number">5</span>];</span><br><span class="line">        t2 =</span><br><span class="line">            Te0[(s2 &gt;&gt; <span class="number">24</span>)       ] ^</span><br><span class="line">            Te1[(s3 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^</span><br><span class="line">            Te2[(s0 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^</span><br><span class="line">            Te3[(s1      ) &amp; <span class="number">0xff</span>] ^</span><br><span class="line">            rk[<span class="number">6</span>];</span><br><span class="line">        t3 =</span><br><span class="line">            Te0[(s3 &gt;&gt; <span class="number">24</span>)       ] ^</span><br><span class="line">            Te1[(s0 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^</span><br><span class="line">            Te2[(s1 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^</span><br><span class="line">            Te3[(s2      ) &amp; <span class="number">0xff</span>] ^</span><br><span class="line">            rk[<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line">        rk += <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">if</span> (--r == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        s0 =</span><br><span class="line">            Te0[(t0 &gt;&gt; <span class="number">24</span>)       ] ^</span><br><span class="line">            Te1[(t1 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^</span><br><span class="line">            Te2[(t2 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^</span><br><span class="line">            Te3[(t3      ) &amp; <span class="number">0xff</span>] ^</span><br><span class="line">            rk[<span class="number">0</span>];</span><br><span class="line">        s1 =</span><br><span class="line">            Te0[(t1 &gt;&gt; <span class="number">24</span>)       ] ^</span><br><span class="line">            Te1[(t2 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^</span><br><span class="line">            Te2[(t3 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^</span><br><span class="line">            Te3[(t0      ) &amp; <span class="number">0xff</span>] ^</span><br><span class="line">            rk[<span class="number">1</span>];</span><br><span class="line">        s2 =</span><br><span class="line">            Te0[(t2 &gt;&gt; <span class="number">24</span>)       ] ^</span><br><span class="line">            Te1[(t3 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^</span><br><span class="line">            Te2[(t0 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^</span><br><span class="line">            Te3[(t1      ) &amp; <span class="number">0xff</span>] ^</span><br><span class="line">            rk[<span class="number">2</span>];</span><br><span class="line">        s3 =</span><br><span class="line">            Te0[(t3 &gt;&gt; <span class="number">24</span>)       ] ^</span><br><span class="line">            Te1[(t0 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^</span><br><span class="line">            Te2[(t1 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^</span><br><span class="line">            Te3[(t2      ) &amp; <span class="number">0xff</span>] ^</span><br><span class="line">            rk[<span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* ?FULL_UNROLL */</span></span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   * apply last round and</span></span><br><span class="line"><span class="comment">      map cipher state to byte array block:</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">         s0 =</span><br><span class="line">     (Te2[(t0 &gt;&gt; <span class="number">24</span>)       ] &amp; <span class="number">0xff000000</span>) ^</span><br><span class="line">     (Te3[(t1 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] &amp; <span class="number">0x00ff0000</span>) ^</span><br><span class="line">     (Te0[(t2 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] &amp; <span class="number">0x0000ff00</span>) ^</span><br><span class="line">     (Te1[(t3      ) &amp; <span class="number">0xff</span>] &amp; <span class="number">0x000000ff</span>) ^</span><br><span class="line">     rk[<span class="number">0</span>];</span><br><span class="line">         PUTU32(out     , s0);</span><br><span class="line">         s1 =</span><br><span class="line">     (Te2[(t1 &gt;&gt; <span class="number">24</span>)       ] &amp; <span class="number">0xff000000</span>) ^</span><br><span class="line">     (Te3[(t2 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] &amp; <span class="number">0x00ff0000</span>) ^</span><br><span class="line">     (Te0[(t3 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] &amp; <span class="number">0x0000ff00</span>) ^</span><br><span class="line">     (Te1[(t0      ) &amp; <span class="number">0xff</span>] &amp; <span class="number">0x000000ff</span>) ^</span><br><span class="line">     rk[<span class="number">1</span>];</span><br><span class="line">         PUTU32(out +  <span class="number">4</span>, s1);</span><br><span class="line">         s2 =</span><br><span class="line">     (Te2[(t2 &gt;&gt; <span class="number">24</span>)       ] &amp; <span class="number">0xff000000</span>) ^</span><br><span class="line">     (Te3[(t3 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] &amp; <span class="number">0x00ff0000</span>) ^</span><br><span class="line">     (Te0[(t0 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] &amp; <span class="number">0x0000ff00</span>) ^</span><br><span class="line">     (Te1[(t1      ) &amp; <span class="number">0xff</span>] &amp; <span class="number">0x000000ff</span>) ^</span><br><span class="line">     rk[<span class="number">2</span>];</span><br><span class="line">         PUTU32(out +  <span class="number">8</span>, s2);</span><br><span class="line">         s3 =</span><br><span class="line">     (Te2[(t3 &gt;&gt; <span class="number">24</span>)       ] &amp; <span class="number">0xff000000</span>) ^</span><br><span class="line">     (Te3[(t0 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] &amp; <span class="number">0x00ff0000</span>) ^</span><br><span class="line">     (Te0[(t1 &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>] &amp; <span class="number">0x0000ff00</span>) ^</span><br><span class="line">     (Te1[(t2      ) &amp; <span class="number">0xff</span>] &amp; <span class="number">0x000000ff</span>) ^</span><br><span class="line">     rk[<span class="number">3</span>];</span><br><span class="line">         PUTU32(out + <span class="number">12</span>, s3);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>可以从图中很明显看出符合signature的特征</p><p><img src="AES.assets/image-20220118172332974.png" alt="image-20220118172332974"></p><h2 id=""></h2>]]></content>
      
      
      <categories>
          
          <category> CryptoDetect </category>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crypto </tag>
            
            <tag> algorithm </tag>
            
            <tag> CryptoDetect </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DES</title>
      <link href="/2022/01/14/DES/"/>
      <url>/2022/01/14/DES/</url>
      
        <content type="html"><![CDATA[<h1>DES</h1><h3 id="算法原理">算法原理</h3><ul><li><p>输入 64 位。</p></li><li><p>输出 64 位。</p></li><li><p>密钥长64位，密钥事实上是56位参与DES运算（第8、16、24、32、40、48、56、64位是校验位， 使得每个密钥都有奇数个1）</p></li></ul><p>算法流程图如下：</p><p><img src="DES.assets/image-20220112114938574.png" alt="image-20220112114938574"></p><h4 id="密钥生成">密钥生成</h4><ol><li><p>选择置换：不考虑每个字节的第8位，DES的密钥由64位减至56位，每个字节的第8位作为奇偶校验位</p><p><img src="DES.assets/image-20220112132946201.png" alt="image-20220112132946201"></p></li><li><p>循环移位：根据轮数，将两部分分别循环左移1位或2位。</p><p><img src="DES.assets/image-20220112133041770.png" alt="image-20220112133041770"></p></li><li><p>置换：移位后，从56位中选出48位</p><p><img src="DES.assets/image-20220112133518482.png" alt="image-20220112133518482"></p></li></ol><h4 id="加密">加密</h4><ol><li>IP置换：将输入的64位数据块按位重新组合，并把输出分为L0、R0两部分，每部分各长32位。比如以下置换规则表，表示此位置的数据在原数据中的位置，即原数据块的第58位放到新数据的第1位</li></ol><p><img src="DES.assets/image-20220112133802349.png" alt="image-20220112133802349"></p><ol start="2"><li><p>Feistel</p><p><img src="DES.assets/image-20220112134612622.png" alt="image-20220112134612622"></p><ul><li><p>E（扩张置换）：将32位的半块R0扩展到48位，其输出包括8个6位的块，每块包含4位对应的输入位，加上两个邻接的块中紧邻的位。然后与子密钥异或。</p><p>目的有两个：生成与密钥相同长度的数据以进行异或运算；提供更长的结果，在后续的替代运算中可以进行压缩</p><p><img src="DES.assets/image-20220112133737845.png" alt="image-20220112133737845"></p></li><li><p>S盒：替代运算。（非线性，提供安全性）每个S盒将6位输入变为4位输出。给定输入后，输出行由外侧 2 位确定，列由内侧的 4 位确定，例如“011011”的输入的外侧位为“01”，内侧位为“1101”，而每张表的第一行为“00”，第一列为“0000”，输出S盒的第2行，第14列</p><table><thead><tr><th></th><th>x0000x</th><th>x0001x</th><th>x0010x</th><th>x0011x</th><th>x0100x</th><th>x0101x</th><th>x0110x</th><th>x0111x</th><th>x1000x</th><th>x1001x</th><th>x1010x</th><th>x1011x</th><th>x1100x</th><th>x1101x</th><th>x1110x</th><th>x1111x</th></tr></thead><tbody><tr><td>0yyyy0</td><td>14</td><td>4</td><td>13</td><td>1</td><td>2</td><td>15</td><td>11</td><td>8</td><td>3</td><td>10</td><td>6</td><td>12</td><td>5</td><td>9</td><td>0</td><td>7</td></tr><tr><td>0yyyy1</td><td>0</td><td>15</td><td>7</td><td>4</td><td>14</td><td>2</td><td>13</td><td>1</td><td>10</td><td>6</td><td>12</td><td>11</td><td>9</td><td>5</td><td>3</td><td>8</td></tr><tr><td>1yyyy0</td><td>4</td><td>1</td><td>14</td><td>8</td><td>13</td><td>6</td><td>2</td><td>11</td><td>15</td><td>12</td><td>9</td><td>7</td><td>3</td><td>10</td><td>5</td><td>0</td></tr><tr><td>1yyyy1</td><td>15</td><td>12</td><td>8</td><td>2</td><td>4</td><td>9</td><td>1</td><td>7</td><td>5</td><td>11</td><td>3</td><td>14</td><td>10</td><td>0</td><td>6</td><td>13</td></tr></tbody></table></li><li><p>P置换：将32位的半块数据重新排列</p><p><img src="DES.assets/image-20220112134549104.png" alt="image-20220112134549104"></p></li></ul></li><li><p>FP置换（IP置换的逆过程）</p><p><img src="DES.assets/image-20220112134705510.png" alt="image-20220112134705510"></p></li></ol><h3 id="signature">signature</h3><p>Feistel网络结构</p><p><img src="DES.assets/image-20220113142045280.png" alt="image-20220113142045280"></p><p>适用的加密算法</p><p><img src="DES.assets/image-20220112135218512.png" alt="image-20220112135218512"></p><p>DSL描述</p><p><img src="DES.assets/image-20220112135026479.png" alt="image-20220112135026479"></p><h3 id="效果">效果</h3><p>libcrypto.so.1.1(openssl)</p><p><img src="DES.assets/image-20220112165741033.png" alt="image-20220112165741033"></p><p>openssl中查看源代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//des_local.h</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> D_ENCRYPT(LL,R,S) &#123; \</span></span><br><span class="line"><span class="meta">        LOAD_DATA_tmp(R,S,u,t,E0,E1); \</span></span><br><span class="line"><span class="meta">        t=ROTATE(t,4); \</span></span><br><span class="line"><span class="meta">        LL^= \</span></span><br><span class="line"><span class="meta">            DES_SPtrans[0][(u&gt;&gt; 2L)&amp;0x3f]^ \</span></span><br><span class="line"><span class="meta">            DES_SPtrans[2][(u&gt;&gt;10L)&amp;0x3f]^ \</span></span><br><span class="line"><span class="meta">            DES_SPtrans[4][(u&gt;&gt;18L)&amp;0x3f]^ \</span></span><br><span class="line"><span class="meta">            DES_SPtrans[6][(u&gt;&gt;26L)&amp;0x3f]^ \</span></span><br><span class="line"><span class="meta">            DES_SPtrans[1][(t&gt;&gt; 2L)&amp;0x3f]^ \</span></span><br><span class="line"><span class="meta">            DES_SPtrans[3][(t&gt;&gt;10L)&amp;0x3f]^ \</span></span><br><span class="line"><span class="meta">            DES_SPtrans[5][(t&gt;&gt;18L)&amp;0x3f]^ \</span></span><br><span class="line"><span class="meta">            DES_SPtrans[7][(t&gt;&gt;26L)&amp;0x3f]; &#125;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//des_enc.c</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DES_encrypt2</span><span class="params">(DES_LONG *data, DES_key_schedule *ks, <span class="keyword">int</span> enc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> DES_LONG l, r, t, u;</span><br><span class="line">    <span class="keyword">register</span> DES_LONG *s;</span><br><span class="line"></span><br><span class="line">    r = data[<span class="number">0</span>];</span><br><span class="line">    l = data[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Things have been modified so that the initial rotate is done outside</span></span><br><span class="line"><span class="comment">     * the loop.  This required the DES_SPtrans values in sp.h to be rotated</span></span><br><span class="line"><span class="comment">     * 1 bit to the right. One perl script later and things have a 5% speed</span></span><br><span class="line"><span class="comment">     * up on a sparc2. Thanks to Richard Outerbridge for pointing this out.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/* clear the top bits on machines with 8byte longs */</span></span><br><span class="line">    r = ROTATE(r, <span class="number">29</span>) &amp; <span class="number">0xffffffff</span>L;</span><br><span class="line">    l = ROTATE(l, <span class="number">29</span>) &amp; <span class="number">0xffffffff</span>L;</span><br><span class="line"></span><br><span class="line">    s = ks-&gt;ks-&gt;deslong;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * I don&#x27;t know if it is worth the effort of loop unrolling the inner</span></span><br><span class="line"><span class="comment">     * loop</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (enc) &#123;</span><br><span class="line">        D_ENCRYPT(l, r, <span class="number">0</span>);     <span class="comment">/* 1 */</span></span><br><span class="line">        D_ENCRYPT(r, l, <span class="number">2</span>);     <span class="comment">/* 2 */</span></span><br><span class="line">        D_ENCRYPT(l, r, <span class="number">4</span>);     <span class="comment">/* 3 */</span></span><br><span class="line">        D_ENCRYPT(r, l, <span class="number">6</span>);     <span class="comment">/* 4 */</span></span><br><span class="line">        D_ENCRYPT(l, r, <span class="number">8</span>);     <span class="comment">/* 5 */</span></span><br><span class="line">        D_ENCRYPT(r, l, <span class="number">10</span>);    <span class="comment">/* 6 */</span></span><br><span class="line">        D_ENCRYPT(l, r, <span class="number">12</span>);    <span class="comment">/* 7 */</span></span><br><span class="line">        D_ENCRYPT(r, l, <span class="number">14</span>);    <span class="comment">/* 8 */</span></span><br><span class="line">        D_ENCRYPT(l, r, <span class="number">16</span>);    <span class="comment">/* 9 */</span></span><br><span class="line">        D_ENCRYPT(r, l, <span class="number">18</span>);    <span class="comment">/* 10 */</span></span><br><span class="line">        D_ENCRYPT(l, r, <span class="number">20</span>);    <span class="comment">/* 11 */</span></span><br><span class="line">        D_ENCRYPT(r, l, <span class="number">22</span>);    <span class="comment">/* 12 */</span></span><br><span class="line">        D_ENCRYPT(l, r, <span class="number">24</span>);    <span class="comment">/* 13 */</span></span><br><span class="line">        D_ENCRYPT(r, l, <span class="number">26</span>);    <span class="comment">/* 14 */</span></span><br><span class="line">        D_ENCRYPT(l, r, <span class="number">28</span>);    <span class="comment">/* 15 */</span></span><br><span class="line">        D_ENCRYPT(r, l, <span class="number">30</span>);    <span class="comment">/* 16 */</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        D_ENCRYPT(l, r, <span class="number">30</span>);    <span class="comment">/* 16 */</span></span><br><span class="line">        D_ENCRYPT(r, l, <span class="number">28</span>);    <span class="comment">/* 15 */</span></span><br><span class="line">        D_ENCRYPT(l, r, <span class="number">26</span>);    <span class="comment">/* 14 */</span></span><br><span class="line">        D_ENCRYPT(r, l, <span class="number">24</span>);    <span class="comment">/* 13 */</span></span><br><span class="line">        D_ENCRYPT(l, r, <span class="number">22</span>);    <span class="comment">/* 12 */</span></span><br><span class="line">        D_ENCRYPT(r, l, <span class="number">20</span>);    <span class="comment">/* 11 */</span></span><br><span class="line">        D_ENCRYPT(l, r, <span class="number">18</span>);    <span class="comment">/* 10 */</span></span><br><span class="line">        D_ENCRYPT(r, l, <span class="number">16</span>);    <span class="comment">/* 9 */</span></span><br><span class="line">        D_ENCRYPT(l, r, <span class="number">14</span>);    <span class="comment">/* 8 */</span></span><br><span class="line">        D_ENCRYPT(r, l, <span class="number">12</span>);    <span class="comment">/* 7 */</span></span><br><span class="line">        D_ENCRYPT(l, r, <span class="number">10</span>);    <span class="comment">/* 6 */</span></span><br><span class="line">        D_ENCRYPT(r, l, <span class="number">8</span>);     <span class="comment">/* 5 */</span></span><br><span class="line">        D_ENCRYPT(l, r, <span class="number">6</span>);     <span class="comment">/* 4 */</span></span><br><span class="line">        D_ENCRYPT(r, l, <span class="number">4</span>);     <span class="comment">/* 3 */</span></span><br><span class="line">        D_ENCRYPT(l, r, <span class="number">2</span>);     <span class="comment">/* 2 */</span></span><br><span class="line">        D_ENCRYPT(r, l, <span class="number">0</span>);     <span class="comment">/* 1 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* rotate and clear the top bits on machines with 8byte longs */</span></span><br><span class="line">    data[<span class="number">0</span>] = ROTATE(l, <span class="number">3</span>) &amp; <span class="number">0xffffffff</span>L;</span><br><span class="line">    data[<span class="number">1</span>] = ROTATE(r, <span class="number">3</span>) &amp; <span class="number">0xffffffff</span>L;</span><br><span class="line">    l = r = t = u = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DES_encrypt3</span><span class="params">(DES_LONG *data, DES_key_schedule *ks1,</span></span></span><br><span class="line"><span class="params"><span class="function">                  DES_key_schedule *ks2, DES_key_schedule *ks3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> DES_LONG l, r;</span><br><span class="line"></span><br><span class="line">    l = data[<span class="number">0</span>];</span><br><span class="line">    r = data[<span class="number">1</span>];</span><br><span class="line">    IP(l, r);</span><br><span class="line">    data[<span class="number">0</span>] = l;</span><br><span class="line">    data[<span class="number">1</span>] = r;</span><br><span class="line">    DES_encrypt2((DES_LONG *)data, ks1, DES_ENCRYPT);</span><br><span class="line">    DES_encrypt2((DES_LONG *)data, ks2, DES_DECRYPT);</span><br><span class="line">    DES_encrypt2((DES_LONG *)data, ks3, DES_ENCRYPT);</span><br><span class="line">    l = data[<span class="number">0</span>];</span><br><span class="line">    r = data[<span class="number">1</span>];</span><br><span class="line">    FP(r, l);</span><br><span class="line">    data[<span class="number">0</span>] = l;</span><br><span class="line">    data[<span class="number">1</span>] = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DES_ede3_cbc_encrypt</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *input, <span class="keyword">unsigned</span> <span class="keyword">char</span> *output,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="keyword">long</span> length, DES_key_schedule *ks1,</span></span></span><br><span class="line"><span class="params"><span class="function">                          DES_key_schedule *ks2, DES_key_schedule *ks3,</span></span></span><br><span class="line"><span class="params"><span class="function">                          DES_cblock *ivec, <span class="keyword">int</span> enc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> DES_LONG tin0, tin1;</span><br><span class="line">    <span class="keyword">register</span> DES_LONG tout0, tout1, xor0, xor1;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *in;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *out;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">long</span> l = length;</span><br><span class="line">    DES_LONG tin[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *iv;</span><br><span class="line"></span><br><span class="line">    in = input;</span><br><span class="line">    out = output;</span><br><span class="line">    iv = &amp;(*ivec)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (enc) &#123;</span><br><span class="line">        c2l(iv, tout0);</span><br><span class="line">        c2l(iv, tout1);</span><br><span class="line">        <span class="keyword">for</span> (l -= <span class="number">8</span>; l &gt;= <span class="number">0</span>; l -= <span class="number">8</span>) &#123;</span><br><span class="line">            c2l(in, tin0);</span><br><span class="line">            c2l(in, tin1);</span><br><span class="line">            tin0 ^= tout0;</span><br><span class="line">            tin1 ^= tout1;</span><br><span class="line"></span><br><span class="line">            tin[<span class="number">0</span>] = tin0;</span><br><span class="line">            tin[<span class="number">1</span>] = tin1;</span><br><span class="line">            DES_encrypt3((DES_LONG *)tin, ks1, ks2, ks3);</span><br><span class="line">            tout0 = tin[<span class="number">0</span>];</span><br><span class="line">            tout1 = tin[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            l2c(tout0, out);</span><br><span class="line">            l2c(tout1, out);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l != <span class="number">-8</span>) &#123;</span><br><span class="line">            c2ln(in, tin0, tin1, l + <span class="number">8</span>);</span><br><span class="line">            tin0 ^= tout0;</span><br><span class="line">            tin1 ^= tout1;</span><br><span class="line"></span><br><span class="line">            tin[<span class="number">0</span>] = tin0;</span><br><span class="line">            tin[<span class="number">1</span>] = tin1;</span><br><span class="line">            DES_encrypt3((DES_LONG *)tin, ks1, ks2, ks3);</span><br><span class="line">            tout0 = tin[<span class="number">0</span>];</span><br><span class="line">            tout1 = tin[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            l2c(tout0, out);</span><br><span class="line">            l2c(tout1, out);</span><br><span class="line">        &#125;</span><br><span class="line">        iv = &amp;(*ivec)[<span class="number">0</span>];</span><br><span class="line">        l2c(tout0, iv);</span><br><span class="line">        l2c(tout1, iv);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">register</span> DES_LONG t0, t1;</span><br><span class="line"></span><br><span class="line">        c2l(iv, xor0);</span><br><span class="line">        c2l(iv, xor1);</span><br><span class="line">        <span class="keyword">for</span> (l -= <span class="number">8</span>; l &gt;= <span class="number">0</span>; l -= <span class="number">8</span>) &#123;</span><br><span class="line">            c2l(in, tin0);</span><br><span class="line">            c2l(in, tin1);</span><br><span class="line"></span><br><span class="line">            t0 = tin0;</span><br><span class="line">            t1 = tin1;</span><br><span class="line"></span><br><span class="line">            tin[<span class="number">0</span>] = tin0;</span><br><span class="line">            tin[<span class="number">1</span>] = tin1;</span><br><span class="line">            DES_decrypt3((DES_LONG *)tin, ks1, ks2, ks3);</span><br><span class="line">            tout0 = tin[<span class="number">0</span>];</span><br><span class="line">            tout1 = tin[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            tout0 ^= xor0;</span><br><span class="line">            tout1 ^= xor1;</span><br><span class="line">            l2c(tout0, out);</span><br><span class="line">            l2c(tout1, out);</span><br><span class="line">            xor0 = t0;</span><br><span class="line">            xor1 = t1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l != <span class="number">-8</span>) &#123;</span><br><span class="line">            c2l(in, tin0);</span><br><span class="line">            c2l(in, tin1);</span><br><span class="line"></span><br><span class="line">            t0 = tin0;</span><br><span class="line">            t1 = tin1;</span><br><span class="line"></span><br><span class="line">            tin[<span class="number">0</span>] = tin0;</span><br><span class="line">            tin[<span class="number">1</span>] = tin1;</span><br><span class="line">            DES_decrypt3((DES_LONG *)tin, ks1, ks2, ks3);</span><br><span class="line">            tout0 = tin[<span class="number">0</span>];</span><br><span class="line">            tout1 = tin[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            tout0 ^= xor0;</span><br><span class="line">            tout1 ^= xor1;</span><br><span class="line">            l2cn(tout0, tout1, out, l + <span class="number">8</span>);</span><br><span class="line">            xor0 = t0;</span><br><span class="line">            xor1 = t1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        iv = &amp;(*ivec)[<span class="number">0</span>];</span><br><span class="line">        l2c(xor0, iv);</span><br><span class="line">        l2c(xor1, iv);</span><br><span class="line">    &#125;</span><br><span class="line">    tin0 = tin1 = tout0 = tout1 = xor0 = xor1 = <span class="number">0</span>;</span><br><span class="line">    tin[<span class="number">0</span>] = tin[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>                          <span class="comment">/* DES_DEFAULT_OPTIONS */</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>该图匹配到了feistel VARIANT B,根据常量看好像是encrypt3中的最后一部分，感觉不太明白子图和具体代码构建出来的图<img src="DES.assets/image-20220113124310851.png" alt="image-20220113124310851"></p><p>新的代码</p><p><img src="DES.assets/image-20220113141131473.png" alt="image-20220113141131473"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">uint64_t</span> <span class="title">raw_des</span><span class="params">(<span class="keyword">uint64_t</span> text, <span class="keyword">uint64_t</span> key, <span class="keyword">uint8_t</span> mode)</span></span>&#123;</span><br><span class="line">    <span class="keyword">uint64_t</span>* subkeys = (<span class="keyword">uint64_t</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">uint64_t</span>)*<span class="number">16</span>);</span><br><span class="line">    generateSubkeys(key, subkeys);</span><br><span class="line">    <span class="keyword">uint32_t</span> L = <span class="number">0</span>, R = <span class="number">0</span>, SR = <span class="number">0</span>, PR = <span class="number">0</span>, tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">uint64_t</span> ER = <span class="number">0</span>, output = <span class="number">0</span>, subkey = <span class="number">0</span>;</span><br><span class="line">    text = ip(text);</span><br><span class="line">    L = (text &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0x00000000ffffffff</span>;</span><br><span class="line">    R = text &amp; <span class="number">0x00000000ffffffff</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i ++)&#123;</span><br><span class="line">        ER = extend(R);</span><br><span class="line">        subkey = (mode == <span class="number">0</span>) ? subkeys[i] : subkeys[<span class="number">15</span>-i];</span><br><span class="line">        ER = ER ^ subkey;</span><br><span class="line">        SR = s(ER);</span><br><span class="line">        PR = p(SR);</span><br><span class="line">        tmp = R;</span><br><span class="line">        R = L ^ PR;</span><br><span class="line">        L = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(subkeys);</span><br><span class="line">    output = inv_ip(((<span class="keyword">uint64_t</span>)(R) &lt;&lt; <span class="number">32</span> ) | (<span class="keyword">uint64_t</span>)(L));</span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">uint64_t</span> <span class="title">des_ede2</span><span class="params">(<span class="keyword">uint64_t</span> text, <span class="keyword">uint64_t</span> key1, <span class="keyword">uint64_t</span> key2, <span class="keyword">uint8_t</span> mode)</span></span>&#123;</span><br><span class="line">    <span class="keyword">uint64_t</span> result;</span><br><span class="line">    result = (mode == <span class="number">0</span>) ? raw_des(text, key1, <span class="number">0</span>) : raw_des(text, key1, <span class="number">1</span>);</span><br><span class="line">    result = (mode == <span class="number">0</span>) ? raw_des(result, key2, <span class="number">1</span>) : raw_des(result, key2, <span class="number">0</span>);</span><br><span class="line">    result = (mode == <span class="number">0</span>) ? raw_des(result, key1, <span class="number">0</span>) : raw_des(result, key1, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个的图结构看起来就更清晰，符合feistel网络结构，也符合定义的signature的VARIANT C</p><p><img src="DES.assets/image-20220113141442031.png" alt="image-20220113141442031"></p><p>每轮加密</p><p><img src="DES.assets/image-20220113142202479.png" alt="image-20220113142202479"></p><p><img src="DES.assets/image-20220113142344671.png" alt="image-20220113142344671"></p><p><code>发现好像有的函数会代入图中，有的不会（都是BL调用函数）</code></p>]]></content>
      
      
      <categories>
          
          <category> CryptoDetect </category>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crypto </tag>
            
            <tag> algorithm </tag>
            
            <tag> CryptoDetect </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[论文笔记-ccs12]Aligot</title>
      <link href="/2021/12/03/aligot/"/>
      <url>/2021/12/03/aligot/</url>
      
        <content type="html"><![CDATA[<h1>Aligot</h1><p><img src="aligot.assets/image-20211128145601514.png" alt="image-20211128145601514"></p><p><em>Joan Calvet, José M. Fernandez, and Jean-Yves Marion. 2012. Aligot: cryptographic function identification in obfuscated binary programs. In</em> <em>Proceedings of the 2012 ACM conference on Computer and communications security</em> <em>(<strong>CCS '12</strong>). Association for Computing Machinery, New York, NY, USA, 169–182. DOI:<a href="https://doi.org/10.1145/2382196.2382217">https://doi.org/10.1145/2382196.2382217</a></em></p><p><strong>研究的问题：</strong> 识别混淆后的二进制文件的密码函数</p><p><strong>特色：</strong></p><ul><li>之前的静态分析检测常量或machine language instructions，不适用于混淆后的</li><li>检测密码函数的I/O关系，抗混淆（即使混淆后，输入输出也是可知的）</li></ul><h2 id="解决方法：">解决方法：</h2><p><img src="aligot.assets/image-20211202210609653.png" alt="image-20211202210609653"></p><p>I/O关系对足够确定多数密码函数</p><ol><li><p>收集目标程序的执行路径(程序在系统上运行期间所做的一系列操作)</p><p>Windows x86   Pin</p><p>收集 dynamic instruction  D，用元组表示,包括以下部分：</p><ul><li>内存地址A[D]</li><li>在A[D]执行的机器指令I[D]</li><li>I[D]读写内存地址Ra[D],Wa[D]</li><li>I[D]读写寄存器Rr[D],Wr[D]</li></ul><p>执行路径T便是一系列动态指令序列D1……Dn</p><p>T/ins是机器指令序列，T/Ins = I1…… In 如果对任意k 属于[1，n]，使得I[Dk] = Ik</p></li><li><p>从执行路径中提取密码相关代码以及I/O参数：</p><p>通常，可以将代码划分为函数，但是函数的概念也只是基于编译器特性（调用约定、prologue和epilogue code等）的一种启发式定义，而这在混淆后的代码中是不可靠的。因此为混淆后的加密代码构建了特定的抽象。</p><p>循环是加密函数经常用到的，但也不只加密函数会用到。所以需要准确定义加密代码中的循环</p><h3 id="simple-loop定义">simple loop定义</h3><p>比如下图中a表示混淆工具control-flow flattening,每次循环可能执行不同逻辑。</p><p>b表示一种可以被用作混淆的编译器优化技术unrolling，三条同样的指令执行了三次。</p><p>采用instruction-centric loops定义循环：机器指令的重复。所以a不应被视为循环，b应该被视为循环。</p><p><img src="aligot.assets/image-20211201174224006.png" alt="image-20211201174224006"></p><h3 id="nested-loop定义">nested loop定义</h3><p>比如图a的情况，B作为内嵌的循环可能不会与外层循环循环同样的次数，这样外层循环就不会被视为循环，但实际上外层循环应该被视为循环。因此检测到循环实例后就会用循环标记代替其代码，图b可以被替换为AXCAXC</p><p><img src="aligot.assets/image-20211202235129708.png" alt="image-20211202235129708"></p></li></ol><h3 id="循环识别算法：">循环识别算法：</h3><p>依次处理执行路径的机器指令，并将其存入链表history的尾部。</p><p>假设history中有指令I1,I2,I1,I3，现在正要处理的指令为I1，该指令在history中出现两次（都可能是loop的开始），因此创建两个loop实例L1,L2，指针指向下一条待执行的指令。然后将I1加入history中。</p><p><img src="aligot.assets/image-20211202154148799.png" alt="image-20211202154148799"></p><p>再假设下一条指令是I3.此时L1就会被舍弃，因为其期望的指令不是I3。而L2的指针继续移动，指向I1。</p><p><img src="aligot.assets/image-20211202154801527.png" alt="image-20211202154801527"></p><p>此时可以确定L2已经循环了两次，因此将其替换为循环标记符X属于Lid。假设下一条指令为I4，而L2等待的指令为I1，因此L2从running loop instances中移除并register</p><p><img src="aligot.assets/image-20211202155126668.png" alt="image-20211202155126668"></p><p><strong>参数</strong>：循环实例的参数是高级函数实现的参数对应的低级</p><ul><li>属于L的相同参数的bytes要么在内存中相邻，要么同时在同一个寄存器中</li><li>属于L的相同参数的字节由BODY [L]中的相同指令以相同的方式(读或写)操作</li><li>属于L的输入参数的字节被L中的代码读取，而属于L的输出参数的字节被L中的代码写入</li></ul><p>**参数收集算法：**先根据上述前两个条件收集参数，然后根据第三条将参数分为输入输出。然后确定参数的值：输入参数为第一次被读取的值，输出参数为最后一次被写入的值。最后，得到INm(L) and INr(L)(分别为内存和寄存器中的值）,OUTm(L) and OUTm(L)</p><p>比如：一次一密xor的程序P</p><p><img src="aligot.assets/image-20211202184802760.png" alt="image-20211202184802760"></p><p>首先，收集程序P的执行路径，然后识别循环体。检测到了一个loop实例。</p><p><img src="aligot.assets/image-20211202185040006.png" alt="image-20211202185040006"></p><p>收集循环的参数，同时还提取一些与这些实现有关的参数，将在最后进行对比时发挥作用。</p><ul><li>eax:4,ebx:4,esp:4：内存地址</li><li>ecx:4：counter value</li><li>12FFC0（起始地址）:4（字节数）：与sizetodecrypt循环前的初始化本地向量有关</li><li>edx:4：中间存储器</li></ul><p><img src="aligot.assets/image-20211202185147355.png" alt="image-20211202185147355"></p><p><strong>loop data flow</strong>：我们认为每个可能的加密实现都包含一个循环。然而，密码函数实际上可以由几个非嵌套循环组成，例如RC4[34]。因此，单靠上述的循环不足以完全捕获它们，所以使用data flow对参与相同加密实现的循环实例进行分组。</p><ul><li><p>定义：和def-use chains差不多，如果L1的输出参数用作L2的输入参数，那么称循环实例L1和L2连通。为了简单起见，只考虑内存参数，因为寄存器参数需要在循环实例之间的顺序代码中进行精确的污染跟踪。实际上，我们的假设是，对内存中输入和输出的所有处理都是通过循环处理的。</p><p>在不同的密码函数之间组合的情况下，即一个函数的输出用作另一个函数的输入，它们将被分到相同的loop data flow中，因此需要考虑所有子图。</p></li></ul><ol start="3"><li><p>与已知密码函数（pycrypto）比较：如果loop data flow与密码函数有同样的输入输出，则认为实现了同样的密码函数。</p><p>首先，生成所有可能的I/O值，比如上例有5个长度为4，22个长度为8的值。（实际应用中，逆向分析者可以去掉明显依赖于实现的参数，比如内存地址）</p><p>然后，对每个加密参考实现程序Pf，从生成的可能的输入值中选择合适的值输入。Pf如果只需要定长的参数，便只选择正确长度的参数</p><p>最后，运行Pf，如果其输出的值在之前生成的可能的输出值中，便成功找到。</p></li></ol><h3 id="结果：">结果：</h3><p>TEA特征：常量delta，标准实现为0x9E3779B9</p><p>MD5：输入被分为512bit的块</p><p>RSA:模乘运算，用到loop，Montgomery算法优化模乘运算、deconding routine(PolarSSL)</p><p><strong>样本：</strong></p><p>B1：TEA用MSVC编译，没有优化</p><p>B2：和B1类似，但delta用以下两条指令混淆，因此算法语义一样但是delta不再是静态可见常量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov reg,delta;</span><br><span class="line">add reg,delta/2;</span><br></pre></td></tr></table></figure><p>B3:RC4用MSVC编译，没有优化</p><p>B4:AES(OpenSSL)</p><p>B5:B4用AsProtect打包</p><p>B6：md5（OpenSSL)</p><p>B8:RSA(PolarSSL),AsProtect</p><p><img src="aligot.assets/image-20211202210729211.png" alt="image-20211202210729211"></p><p>B1有的工具没有识别出TEA，可能是其本身没有实现该算法的功能。但是B2只有Aligot能识别，其余工具可能只是基于静态delta的值</p><p>恶意软件对TEA作了些修改，再实现之后命名为Russian-TEA，也可以成功识别。</p><p>SBank也是类似，但是因为有静态delta，所以其余工具可以识别</p><p><img src="aligot.assets/image-20211202212334296.png" alt="image-20211202212334296"></p><p><strong>性能：</strong></p><ul><li><p>自己的样本都基本在20min以内</p></li><li><p>trance size并不总是意味着更长处理时间。</p></li><li><p>如果loop很少，那么history更大，性能会更差</p></li><li><p>比较环节，性能主要取决于LDP的数量以及参数数量</p><p><img src="aligot.assets/image-20211202215338681.png" alt="image-20211202215338681"></p></li></ul><p><strong>不足：</strong></p><ul><li>局限于特定的执行路径（一个程序P，输入为K，C（密文），输出C’(明文)，但不是P的所有执行路径都实现了密码函数，但确定具体的执行路径由逆向人员完成）</li><li>需要密码函数的参考实现</li><li>参数编码后便难以识别</li></ul>]]></content>
      
      
      <categories>
          
          <category> CryptoDetect </category>
          
          <category> paper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crypto </tag>
            
            <tag> CryptoDetect </tag>
            
            <tag> reverse </tag>
            
            <tag> paper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[论文笔记-usenix2021]where&#39;s-crypto</title>
      <link href="/2021/06/25/where-s-crypto/"/>
      <url>/2021/06/25/where-s-crypto/</url>
      
        <content type="html"><![CDATA[<h1>[论文阅读]where’s crypto</h1><p><img src="where-s-crypto.assets/image-20210601155403815.png" alt="image-20210601155403815"></p><p><strong>背景</strong>：专有密码学应用广泛。深入的安全分析需要在通常非常大的二进制文件中对算法进行定位和分类，因此即使在启发式方法的帮助下，手动检查也很耗时</p><p><strong>现有的方法</strong>：DFG isomorphism(Automated identification of cryptographic<br>primitives in binary code with data flow graph isomorphism[43])</p><p><strong>缺陷</strong>：仅限于已知的primitives，依赖于启发式算法来选择待分析的代码片段</p><p><strong>解决</strong>：通过将上述方法与符号执行结合（为密码原语的分类类别指定结构签名和与分析匹配的二进制代码），克服了上述缺陷，并将分析扩展到未知的专用密码原语中</p><p><strong>贡献</strong>：</p><ol><li>将子图同构与符号执行结合，解决了片段选择的开放性问题并消除了对启发式的需求</li><li>提出新的domain-specific language(DSL)，用于定义密码原语的结构属性</li><li>ida开源插件where’s crypto?</li></ol><h2 id="具体方案">具体方案</h2><p><strong>密码原语</strong>：本质上是一组表示输入/输出关系的算术和逻辑操作</p><p><strong>分类</strong>：纯粹为工具性，不会对算法进行排他性划分</p><p><img src="where-s-crypto.assets/image-20210623221842089.png" alt="image-20210623221842089"></p><p><strong>DFG</strong>:有向无环图（Directed Acyclic Graph)表示的一系列算术/逻辑运算中的数据流图</p><p>顶点代表一个操作或一个信息</p><p>顶点v1和v2间存在边表示v1（操作v1的结果）是操作v2的输入。</p><p>整体流程图如下：</p><p><img src="where-s-crypto.assets/image-20210624093611741.png" alt="image-20210624093611741"></p><h3 id="图构建">图构建</h3><p>给定函数入口点，execute symbolically，同时生成DFG图 G=(V,E)，图创建过程中连续进行归一化，提高了性能。</p><p>假设有一系列汇编指令， 将每条指令i转换为一组操作Oi(可能为空（NOP或分支)，也可能包含多个操作，然后根据此创建相应的DFG图G=(V,E)。</p><p>根据输入类型分为以下三种情况</p><ul><li><p>立即数：创建一个顶点表示G中的常数值。由边连接到Oi</p></li><li><p>寄存器：在写入该寄存器的最后一个值和Oi间创建一个边。实际上，这意味着为每个寄存器维护一个数组，其中包含对G中该值对应的顶点的引用</p></li><li><p>内存：LOAD，STORE。将内存地址顶点作为输入，与其他顶点一样，地址可以是常量，也可以是更复杂的符号表达式</p><p>图创建具体过程如下所示</p><p><img src="where-s-crypto.assets/image-20210624104523602.png" alt="image-20210624104523602"></p><p>为特定架构编写的处理器模块可以将每条指令转换为图形节点，但其不能自主创建新的节点，必须与broker交互。</p><p>broker负责规范化后规则的应用，这个过程与处理器架构无关。</p><p>处理器模块向broker提供所需节点的规范，代理再将规范化后的规则应用于规范。</p><p>规范化后，broker向DFG查询是否已经存在符合规范化后规范的节点。是则返回对他的引用</p><p>因此，在符合相同规范的图中不存在两个不同的节点，或是规范化后的等效节点。</p><p>规范化：包括简化运算，公共子表达式消除和随后的内存访问</p><ul><li>简化运算：输入参数为常数的算数/逻辑运算，直接由结果代替。同样，如果一个元素为其作为输入的操作的标识元素，则该操作无效且可被删除。若元素为0，可以将操作替换为0</li><li>公共子表达式消除：一个代码片段中，相同值被多次重新计算。</li></ul><p><img src="where-s-crypto.assets/image-20210624114508898.png" alt="image-20210624114508898"></p><ul><li>内存访问：将load操作替换为其结果来纠正此问题，若之前存在对同一内存地址节点的store操作，则结果是已知的。通过在图构建期间维护一个查找表（将地址节点映射到它们对应的存储值的哈希表），可以在恒定时间内执行替换。</li></ul><p><img src="where-s-crypto.assets/image-20210624154848633.png" alt="image-20210624154848633"></p><p>对于关联操作，结果不依赖于它们的执行顺序。因此，将嵌套的关联操作转换为接收所有输入的单个操作</p><p><img src="where-s-crypto.assets/image-20210624154904447.png" alt="image-20210624154904447"></p><p>其他规则：</p></li><li><p>表达式x加倍，用mult(x,2)表示</p><p><img src="where-s-crypto.assets/image-20210625132559544.png" alt="image-20210625132559544"></p></li><li><p>表达式x，常数c1，c2。当c2 <em>&lt;</em> 2^(32-c1)且c1 <em>&lt;</em> 32时，AND ( <em>x</em> &gt;&gt; <em>c</em> 1 <em>,</em> <em>c</em>2 )和AND ( ROTATE ( <em>x</em> <em>,</em> <em>c</em>1 ) <em>,</em> <em>c</em>2 ) 等价。用AND ( x &gt;&gt; c 1 <em>,</em> c 2 )表示</p><p><img src="where-s-crypto.assets/image-20210625132545137.png" alt="image-20210625132545137"></p></li><li><p>先乘后加</p></li></ul><p><img src="where-s-crypto.assets/image-20210625132532624.png" alt="image-20210625132532624"></p><p>​在图构建过程中应用规范化规则比在图完全生成后的优点：</p><ul><li>规范化函数h有恒定的运行时间复杂度，那么构建阶段的运行时间复杂度，包括归一化，会随着汇编指令的数量线性增长，而在完全生成的DFG上重复应用则为二次复杂度</li><li>任何一对节点引用的等价性都可以在常数时间内进行评估，只要检查v1是否等于v2.因此可以在常数时间内实现用结果替换load操作。</li></ul><p>符号执行：条件指令。分为以下两种情况</p><p>determined:变量被限制在一个域，因此只有一个可能的结果。如固定迭代次数组成的循环末尾的条件跳转指令。</p><p>underdetermined：输入变量的限制不足以确定固定的结果。</p><p>处理方法：</p><p>图构建首先将<em>S</em> = ( G <em>,</em> P <em>,</em> B )初始化为空状态，即G是空图， P = true ， B没有任何评估结果的记录。然后，开始通过处理位于函数<em>f</em>入口点的指令来构造。一些指令可能会操纵执行流程，例如，分支指令，在这种情况下，我们在其目标地址处继续。当我们遇到一条指令导致执行流程返回到<em>f</em>的调用函数时，构造就完成了。比如，在 ARM 程序集中，这是通过将<em>f</em>的调用者设置的寄存器LR的初始值写入程序计数器寄存器PC 来实现的</p><p>以元组( v 1 <em>,</em> o <em>,</em> v 2 )的形式表示条件c，如果v 1或v 2是非常量的，则谓词<em>P</em>可以充分限制<em>v</em> 0或<em>v</em> 1使得c确定；如果<em>c</em>未确定，则两种执行路径都是可能的，我们被迫选择遵循哪一个，或者可以通过复制状态<em>S</em>并随后将每个执行路径分配给其中一个实例来遵循两条路径。这样，最终的图构造由几个 DFG 组成；每个代表不同的执行路径。这种做法被称为分叉状态<em>S</em>。在出现未确定条件时进行分叉可最大化代码覆盖率。然而，由于状态爆炸问题，这是不可行的。因此采用path oracle来确定何时应用该方法。</p><p>何时应用分叉的策略仅与符号执行本身松散相关。<em>Path Oracle</em>是一个单独的实体，它在图构建阶段被查询，用于每次出现未确定的条件<em>c</em>。它决定<em>c</em>被评估为true还是false，或者构造分叉并遵循两个执行路径。</p><p>算法如下所示，谓词P被更新为包括条件c（或其否定），从而保持其定义属性满足（保证G表示f的输入/输出关系）。然后将path oracle做的决定添加到backlog B中。</p><p><img src="where-s-crypto.assets/image-20210625124717799.png" alt="image-20210625124717799"></p><p><strong>path oracle policy</strong></p><p>对于某个数字<em>n</em>，获得由具有可变输入长度的恰好<em>n</em>次迭代组成的原语的DFG 。随后可以通过在结果 DFG 中精确搜索<em>n</em>次迭代来识别目标原语</p><p><img src="where-s-crypto.assets/image-20210625125821055.png" alt="image-20210625125821055"></p><p>de,i表示path oracle 对在执行地址e处找到的条件指令的第i个查询的决定</p><p>7</p><p><img src="where-s-crypto.assets/image-20210625132713995.png" alt="image-20210625132713995"></p><p>S =(G;P;B),  P = true</p><p>i = 0, P = true, and c = (R8&lt;= 0)  TAKE_BOTH</p><p>P=(R8&lt;=0),B4[0] = true(这个状态会跳转11行并退出）, and S’ = (G’;P’;B’),  P’ = (R8 &gt; 0) B’4[0] =false</p><p>S’继续循环，回到line4，c = (R8 &lt;= 1), i = 1, P’ = (R8 &gt; 0) and<br>B’4[0] = false   P’^c无法确定，因此TAKE_FALSE</p><p>最后，i = n, we get c = R8 &lt;= n and P’ =(R8&gt;n-1). TAKE_TRUE</p><p>构建完成，得到两个图，一个对应R8&lt;=0,一个R8=n。后者描述了算法的<em>n</em>次迭代，完全符合目标。前者描述零迭代，因此，包含的节点数量可以忽略不计。因此，我们接受该图在分析的后期阶段引起的少量开销。</p><h3 id="清除">清除</h3><p>构建好后，进入清除阶段。从图中删除既不代表输入，也不代表任何输出计算中使用的值的节点。</p><p>构建完成后，图G表示f在谓词P下的输入/输出关系。但是，也包含其他信息，比如临时load/store存进堆栈 创建的节点，由broker重写的表达式</p><p>对于每个叶节点，检查其是否为f语义的一部分。如果v是以下几种情况中的任何一种，则认为它是：</p><ul><li>f的返回值</li><li>store操作，且目标地址与SP寄存器无关。因此，信息存储在堆栈之外</li><li>call操作，比如不受内联约束的函数调用</li></ul><p>若以上都不是，则删除v以及其入边</p><h3 id="匹配">匹配</h3><p>模式匹配：在DFG中搜索与给定加密原语的图签名同构的子图。Ulmann子图同构算法来搜索DFG</p><p>表达签名图：signature domain-specific language(DSL)</p><p><img src="where-s-crypto.assets/image-20210624171314309.png" alt="image-20210624171314309"></p><p>其中圆形框表示关键字，方形框表示数据类型。</p><ul><li>IDENTIFIER：为签名指定名称</li><li>VARIANT：强制创建新的空DFG图(后面的表达式被添加+到图中)。因此，允许指定签名的多个变体。子图同构检测最终对所有变体进行检测。</li><li>label（可选）：允许节点被其他表达式引用，从而实现表达式间的节点共享。</li><li>TRANSIENT：从表达式生成的节点被认为是非必要的，可能被清除</li></ul><p>新的图节点由表达式类型生成</p><p><img src="where-s-crypto.assets/image-20210624171324978.png" alt="image-20210624171324978"></p><p>literal表示常量。</p><p>STORE ， LOAD ， XOR ， OR ， AND ， MULT和ROTATE关键字后跟括号中包含的子表达式会引发新图节点的创建。子表达式作为输入节点。</p><p>OPAQUE表示特殊的通配符节点s（通过子图同构算法与任何其他类型的节点进行比较总为真，且可以由有任意数量的输入节点，包括零个）</p><p>clamp-label（可选）：为节点类型命名。与任何其他类型的节点进行比较都为真，并增加了所有带有相同类型标签的opaque必须映射到相同类型节点的限制（type clamping)</p><p>子图同构：Ullmann算法（可剪枝的递归回溯算法），并增加了对type clamping的支持</p><p>签名：主要为symmetric and unkeyed primitives。广义上说，该制定签名方法是制定primitives的定义属性，将它们转换为抽象的DFG，最后转换为用DSL表示的签名定义</p><p><img src="where-s-crypto.assets/image-20210624174209159.png" alt="image-20210624174209159"></p><p>​Feistel:</p><p><img src="where-s-crypto.assets/image-20210624174908504.png" alt="image-20210624174908504"></p><p>​F是一组特定算法的操作，因此不知道其属性。该OPAQUE操作值包括单一操作，而F包括数目不详的操作。已知F的输入为Ri和Ki，Ki也没有已知的性质。因此，为表示F引入多种variant。variant A中，用opaque（Ri)替换F，再用opaque(opaque(Ri))替换，直到达到8层嵌套操作。4444444</p><p><img src="where-s-crypto.assets/image-20210624174324222.png" alt="image-20210624174324222"></p><h3 id="范围与局限性">范围与局限性</h3><ol><li><p>规范化和优化：单个函数可以表示为许多不同的汇编指令组合。语义等价类和DFG间建立1-to-1 mapping超出范围。</p></li><li><p>隐式流：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\\语义等价</span><br><span class="line">a &lt;- b \\b直接流向a，依赖在DFG中明显</span><br><span class="line">if a then b &lt;- true; else b &lt;- false \\依赖信息丢失</span><br></pre></td></tr></table></figure></li><li><p>函数入口点：IDA将函数入口点识别为算法的输入（可能不准确）</p></li><li><p>代码混淆</p></li><li><p>分类约束：假设寻找的算法属于已定义类别之一</p></li><li><p>误报：某些原始类是其他原始类的子集，有些实例符合几个类的定义</p></li><li><p>路径预测：编译器有时会在入口及退出时确保loop-guard evaluation，产生一个代表<em>n</em> + 1 次迭代的 DFG ；具有恒定迭代长度的密码原语超出了路径预测的控制范围。最后，循环展开将产生一个表示<em>kn</em>次迭代的 DFG ，其中<em>k</em>表示编译器分组的迭代次数。</p></li></ol><h2 id="测试-2">测试</h2><h3 id="测试集">测试集</h3><ul><li>[43]论文使用的数据集</li><li>共享库的集合以及openWRT网络设备固件的可执行部分</li><li>开源的专有密码实现的集合</li><li>现实中的嵌入式固件（PLCs，ECUs）的集合</li></ul><h3 id="测试方法">测试方法</h3><p>可调变量n：DFG中包含的算法实例的目标数量。与构建的DFG的大小有关，因此与运行时间相关。但其足够大，以便可以识别所有已有签名。特定于算法的分类器和Feistal分类器仅针对算法的单个实例，因此不受n的影响；而（N）LFSR和Sequential block permutation分类器受n的影响，因此它们基于多个实例来识别一个原语。后者（什么？）表示了一些未知压缩函数c的两个连续实例。由于重写规则旨在促进数值简化，算法的第一步与最后一步可能会分别与c的第一个和最后一个实例合并。因此，选择n=4，保证在DFG中存在两个连续的c的实例，选择大于4的话显然不会提供有关此属性的任何优势。此外，确定4个连续的DFG（实际上没有实现的代码生成的）中的LSFR轮次是极不可能的。因此，选取n=4。</p><h3 id="结果">结果</h3><h4 id="与Lestringant-43-比较">与Lestringant[43]比较</h4><p>构建了一个尽可能忠实他们的ARM架构的新样本集。使用特定算法的签名来保证公平比较。结果如下</p><p><img src="where-s-crypto.assets/image-20210624202125509.png" alt="image-20210624202125509"></p><p>无论编译器和优化级别如何，所有样本可以通过相应签名中的某一variant成功识别。证明能够识别这些算法，而无须求助于片段选择的启发式方法。</p><h4 id="OpenWRT二进制文件">OpenWRT二进制文件</h4><p>从二进制代码构建 DFG是一种特殊的执行情况，因此会受到<em>停机</em>问题的影响。因此，不能保证图构建会终止。因此，引入了图构建超时时间t。</p><p>在分析libcrypto.so.1.1期间构建的所有图与图构建时间t的直方图如下所示</p><p><img src="where-s-crypto.assets/image-20210624202747254.png" alt="image-20210624202747254"></p><p>结果表明，对于绝大多数图，构造时间可以在10s内完成。因此选择t=10s</p><p>d：函数调用被内联的深度级别。</p><p>调查d的影响，同时采用不同的值，并测量运行时间和准确性方面的性能。</p><p><img src="where-s-crypto.assets/image-20210624203559676.png" alt="image-20210624203559676"></p><p>根据两者选择合理的d值，可以看出d&gt;2时，准确性没有显著提高，而对于运行时间影响很大。因此选择d=2（True negative被省略，因为它们涵盖了绝大多数的结果，从而影响可读性 ）</p><ul><li>true negative:没有函数f实现密码原语a，也没有DFG图匹配到签名<img src="where-s-crypto.assets/image-20210624225715291.png" alt="image-20210624225715291"></li><li>true positive: f实现了密码原语a，有DFG图匹配到签名</li><li>false positive:没有函数f实现密码原语a，有DFG图匹配到签名</li><li>false negative:f实现了密码原语a，没有DFG图匹配到签名</li></ul><p><img src="where-s-crypto.assets/image-20210624230418524.png" alt="image-20210624230418524"></p><p>表中的每个单元格都描述了第一个positive结果的相应二进制文件中的符号名称，或者，在false negative的情况下，期望得到positive的符号名称</p><h4 id="proprietary-algorithms">proprietary algorithms</h4><p>一些专有算法的分析如下所示。所有签名都针对一个通用的类别，且没有一个是预先构建来适合特定样本的。除了RED PIKE，其余都成功识别，其由于使用加法而不是异或，未被识别为Feistel。</p><p><img src="where-s-crypto.assets/image-20210624231520804.png" alt="image-20210624231520804"></p><h4 id="现实中的固件">现实中的固件</h4><p>Emerson ControlWave Micro RTU,<br>Emerson ControlWave XFC flow computer, Schneider Electric<br>M340 PLC and Volkswagen IPC</p><p>除了Megamaso外，所有密码原语都被成功识别。Megamaso包含NLFSR，但非线性反馈是作为子程序实现的，且移位寄存器根据其返回值通过if语句更新。这违反了基于DFG的方法固有的隐式流量限制。</p><p><img src="where-s-crypto.assets/image-20210624231925380.png" alt="image-20210624231925380"></p><h4 id="执行结果">执行结果</h4><p><img src="where-s-crypto.assets/image-20210625112903207.png" alt="image-20210625112903207"></p><h2 id="改进">改进</h2><ol><li>增加signature</li><li>根据需求调参（不同应用场景与算法，参数的选择）、轮函数数量</li><li>密码原语的分类树不一定明确</li><li>DFG无法表达代码流信息</li></ol>]]></content>
      
      
      <categories>
          
          <category> CryptoDetect </category>
          
          <category> paper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crypto </tag>
            
            <tag> CryptoDetect </tag>
            
            <tag> reverse </tag>
            
            <tag> paper </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
