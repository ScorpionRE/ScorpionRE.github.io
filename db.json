{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/Butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/image/avatar.jpg","path":"image/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/image/back.jpg","path":"image/back.jpg","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/image/heady.png","path":"image/heady.png","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/image/m4tsuri.jpg","path":"image/m4tsuri.jpg","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/image/star.jpg","path":"image/star.jpg","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_data/link.yml","hash":"229b0c67392da07f288cc9fe625999db106e00b7","modified":1677930576042},{"_id":"source/.DS_Store","hash":"5b4d25bd91b62a64fe253fdddd8096086ff31d96","modified":1665305057102},{"_id":"source/about/index.md","hash":"245153813d72f08c90db9cc316f4f81aed00ff64","modified":1643248994000},{"_id":"source/link/index.md","hash":"7233528622e05adbad2e9335a61c556ed2f12eb1","modified":1642964982000},{"_id":"source/_data/about.yml","hash":"fa6bb4c9ab1ea4a32ad43166c38138345a8ccb0a","modified":1643053258000},{"_id":"source/categories/index.md","hash":"ad2d055792cbfd7a0f34336cedc6d34cdae70a93","modified":1642894112000},{"_id":"source/tags/index.md","hash":"18c70cdbdefec6b2479285f16a7aa1567cdcbbad","modified":1642894074000},{"_id":"source/_posts/AES.md","hash":"fa80fc5218ef4115073f6be161c183da0c25781f","modified":1643053420000},{"_id":"source/_posts/DES.md","hash":"33ee4e34ee40eba0c4936414b42af0fdcfb332c1","modified":1643053112000},{"_id":"source/_posts/BUUCTF-crypto-writeup-md.md","hash":"1f56116473ff53eb445b268c084489f245bb8a6c","modified":1643053062000},{"_id":"source/_posts/KPA-COA.md","hash":"d3228a269ce1dd44b1ccefa4d2f7128d9918b0cd","modified":1677050957430},{"_id":"source/_posts/MC.md","hash":"7797cb613229c62225d1f4b6bce548e7a76bf268","modified":1665129699216},{"_id":"source/_posts/ichunqiu-crypto-writeup.md","hash":"1f05572e01c85e43382212896a405008e9b19bc0","modified":1643073062000},{"_id":"source/_posts/dfg.md","hash":"34f3fc6e7c3640c769cce0a83e389055f0d698e7","modified":1645564200000},{"_id":"source/_posts/c2dll.md","hash":"b3e2d17e52d401984842007840316e8d3eea8d73","modified":1645571340000},{"_id":"source/_posts/aligot.md","hash":"d563e56e675c3ac2fa125cea18d7ab7aeb8ad88e","modified":1643053034000},{"_id":"source/_posts/lfsr.md","hash":"f3ba47e78f9a4844b0773ea2246b2edcdff5bb4c","modified":1645890712000},{"_id":"source/_posts/sha1.md","hash":"3e8f51bd2779177721d8859d1966d99b70b0e0cd","modified":1645632054000},{"_id":"source/_posts/program-synthesis.md","hash":"b31ed82bae94c7a9b066573da3ee74f6cd7234d3","modified":1645631792000},{"_id":"source/_posts/where-s-crypto.md","hash":"e7d6ce6fcb1f67d3ebc8173106899e8537805f8e","modified":1643052958000},{"_id":"source/_posts/md5.md","hash":"2b24d90518000e1b481be01bf51d6fa28f6ed569","modified":1643302446000},{"_id":"source/_posts/AES/AES.assets/image-20220115160053585.png","hash":"487630912a94a63b4ae5ff84c43cc19f76db2c1c","modified":1642897630000},{"_id":"source/_posts/AES/AES.assets/image-20220118145857240.png","hash":"511906abbfa994699865ee0fd66194c670ca465e","modified":1642897630000},{"_id":"source/_posts/AES/AES.assets/image-20220118160907434.png","hash":"c671590e643ced8d6ec90dc48f7f1727092e7057","modified":1642897630000},{"_id":"source/_posts/AES/AES.assets/image-20220118161013057.png","hash":"6b557aeb476253f67a3e835e7dedfb4c9c2c03e3","modified":1642897630000},{"_id":"source/_posts/AES/AES.assets/image-20220118161112688.png","hash":"ecd305d34d6d3d94e4a348de2ef54bbe1177ddd8","modified":1642897630000},{"_id":"source/_posts/DES/DES.assets/image-20220112132946201.png","hash":"16dd647debe87ef5015d6bd1c1d5422e18c16164","modified":1642901512000},{"_id":"source/_posts/DES/DES.assets/image-20220112133518482.png","hash":"62205d3c93493eb34cacdb75bcd00b4c54ee03f8","modified":1642901512000},{"_id":"source/_posts/AES/AES.assets/image-20220118172332974.png","hash":"14a661279c89543e37172728ba7103fe1a12014f","modified":1642897630000},{"_id":"source/_posts/DES/DES.assets/image-20220112133737845.png","hash":"34f23b0d52571bfd51e5a1cd4d41cbd244f86561","modified":1642901512000},{"_id":"source/_posts/DES/DES.assets/image-20220112133041770.png","hash":"a738abdcde57d62ec64251ec050d83af9dd2ebd1","modified":1642901512000},{"_id":"source/_posts/DES/DES.assets/image-20220112133802349.png","hash":"a296481e9a8f765228ed810fea837248f27389bf","modified":1642901512000},{"_id":"source/_posts/DES/DES.assets/image-20220112134705510.png","hash":"f880beae30e7227bdaff72b6d708684c08e0e5f7","modified":1642901512000},{"_id":"source/_posts/DES/DES.assets/image-20220112134612622.png","hash":"23100ad9a4d4e6710295e45301d3bd6532df6ac1","modified":1642901512000},{"_id":"source/_posts/DES/DES.assets/image-20220112135218512.png","hash":"78b3aceffd2d9dba165362aec86d940c2444cac4","modified":1642901512000},{"_id":"source/_posts/DES/DES.assets/image-20220112165741033.png","hash":"bb08b0423275fa5a9a321d307939836395e7c44b","modified":1642901512000},{"_id":"source/_posts/DES/DES.assets/image-20220112134549104.png","hash":"d79a28e927a9d050bdf9e80d3291d36c4dfd203c","modified":1642901512000},{"_id":"source/_posts/DES/DES.assets/image-20220113141442031.png","hash":"23eb3e1b205b52da3f786105adc63a3e9aa80c8f","modified":1642901512000},{"_id":"source/_posts/DES/DES.assets/image-20220113124310851.png","hash":"e893fb9ad87da67f32349b8434a5a9c375f89c86","modified":1642901512000},{"_id":"source/_posts/DES/DES.assets/image-20220113141131473.png","hash":"8755fbc4980036a5555df6cfc34ea158e6b4f2c6","modified":1642901512000},{"_id":"source/_posts/DES/DES.assets/image-20220113142045280.png","hash":"0e0aa7ea3efcd37f3a326b8f68c848942e894556","modified":1642901512000},{"_id":"source/_posts/DES/DES.assets/image-20220113142202479.png","hash":"0c2f35a10e05dfc49c4f4e076ab87db97b35ccc4","modified":1642901512000},{"_id":"source/_posts/DES/DES.assets/image-20220113142344671.png","hash":"21020e497f2dda67216d1e9716b03edb79940912","modified":1642901512000},{"_id":"source/_posts/aligot/aligot.assets/image-20211202154148799.png","hash":"eba780af59f1841760dcec176377bee5967dcd2c","modified":1642973488000},{"_id":"source/_posts/aligot/aligot.assets/image-20211202154801527.png","hash":"f58b14953df40238e7d6214d015945fe44f455fb","modified":1642973488000},{"_id":"source/_posts/aligot/aligot.assets/image-20211201174224006.png","hash":"f5189b7f7eaf07596b23af3a15dc26d96bf3360e","modified":1642973488000},{"_id":"source/_posts/aligot/aligot.assets/image-20211202155126668.png","hash":"336793d02369a11d781b5b9a3819d0e78fe07b2a","modified":1642973488000},{"_id":"source/_posts/aligot/aligot.assets/image-20211202210609653.png","hash":"b4418c6d8a0216766dc3185f4eb05339ea35f551","modified":1642973488000},{"_id":"source/_posts/aligot/aligot.assets/image-20211202185147355.png","hash":"7d60db67669d28abe3daf8f9b5f15e05a28d349e","modified":1642973488000},{"_id":"source/_posts/aligot/aligot.assets/image-20211202212334296.png","hash":"e5c7862cdfb498aacef663b1eeccd61b5cdffb75","modified":1642973488000},{"_id":"source/_posts/aligot/aligot.assets/image-20211202235129708.png","hash":"eb0e6fa8e21e72de28b1e2a34b47670830974a5a","modified":1642973488000},{"_id":"source/_posts/aligot/aligot.assets/image-20211202215338681.png","hash":"a60b9d7926089a411c14f655cb5e7bfe501306b5","modified":1642973488000},{"_id":"source/_posts/c2dll/c2dll.assets/image-20210618143512463-16456145093014.png","hash":"b4609de695dbf1c5ee4b9a19e4fae93226cbf92c","modified":1645571374000},{"_id":"source/_posts/c2dll/c2dll.assets/image-20210618142608631-16456145093012.png","hash":"7d29f5e9da2c319e2793bedd052536e462f4ee53","modified":1645571374000},{"_id":"source/_posts/c2dll/c2dll.assets/image-20210618161730728-16456145093016.png","hash":"1950b437a2b4fd7fb6a9e43b8f773c557b923670","modified":1645571374000},{"_id":"source/_posts/c2dll/c2dll.assets/image-20210618161025486-16456145093015.png","hash":"78370034674ce123ea1a4b0be75a9156eb15e466","modified":1645571374000},{"_id":"source/_posts/c2dll/c2dll.assets/image-20210618162011465-16456145093017.png","hash":"f60daf58de9020111e4bf1c75cc670a455c9fd15","modified":1645571374000},{"_id":"source/_posts/c2dll/c2dll.assets/image-20210618162115746-16456145093018.png","hash":"c55c4ac5eca82bef427565973444e39dfead2e45","modified":1645571374000},{"_id":"source/_posts/c2dll/c2dll.assets/image-20210618163947120-164561450930210.png","hash":"7ae3b37a1c6462741398591905b1569e322656bc","modified":1645571374000},{"_id":"source/_posts/c2dll/c2dll.assets/image-20210619104237632-164561450930215.png","hash":"5916222e40e614e2fca9c2d52b890fe5dacd485f","modified":1645571374000},{"_id":"source/_posts/c2dll/c2dll.assets/image-20210618164215851-164561450930211.png","hash":"5994c9907c31c03ce2fdc7ee18ccb4619e6c4d1e","modified":1645571374000},{"_id":"source/_posts/c2dll/c2dll.assets/image-20210619145806024-164561450930212.png","hash":"11ebacba91a950715937b2ccf216e0eb54f7f273","modified":1645571374000},{"_id":"source/_posts/c2dll/c2dll.assets/image-20210619150017590-164561450930213.png","hash":"1dcac0a147c78b63e204064f3db8423ec7914bfd","modified":1645571374000},{"_id":"source/_posts/c2dll/c2dll.assets/image-20210618163119738-16456145093029.png","hash":"7938d634f2cbdd65adcc83af5c70fec9e86eae11","modified":1645571374000},{"_id":"source/_posts/c2dll/c2dll.assets/image-20210619150139149-164561450930214.png","hash":"dd156ee11ef90eaac7fc3f9d02f6884e8f364c61","modified":1645571374000},{"_id":"source/_posts/c2dll/c2dll.assets/image-20210619144516190-16456145093013.png","hash":"5de4ce3182537635a4ed0e74b6f56367e19b9922","modified":1645571374000},{"_id":"source/_posts/lfsr/lfsr.assets/image-20220224160744696.png","hash":"1fd4c1d2f3440ba08a8aa20fa54c71ff960ac1b9","modified":1645891054000},{"_id":"source/_posts/lfsr/lfsr.assets/image-20220224161436546.png","hash":"26089df159d3a8ce88ad8c47415c5ec5608d7f81","modified":1645891054000},{"_id":"source/_posts/md5/md5.assets/image-20220127175833516.png","hash":"71e0950d3ede8cc7d3de3f9babb40f166cd74e97","modified":1643302464000},{"_id":"source/_posts/md5/md5.assets/image-20220127181300578.png","hash":"97d5992b048d354a3ade179796ac63ed94356ebf","modified":1643302464000},{"_id":"source/_posts/md5/md5.assets/image-20220128122013626.png","hash":"6accfc9a5b065b9de71a8feea7e8f517510b1866","modified":1643302464000},{"_id":"source/_posts/md5/md5.assets/image-20220128122933514.png","hash":"b31e90ebe06985ecb34970060900e26390946778","modified":1643302464000},{"_id":"source/_posts/md5/md5.assets/image-20220128123055931.png","hash":"2365ba21350a57b354d9ebf0d3e5d90da7996bf6","modified":1643302464000},{"_id":"source/_posts/md5/md5.assets/image-20220128124206153.png","hash":"be81778b26dbe760aae6f1e2b0cb6c4a06dc6730","modified":1643302464000},{"_id":"source/_posts/dfg/dfg.assets/image-20220221190220766.png","hash":"e1f1e5ecc9e4c24d6dbba9d2df65d0b4e48fb108","modified":1645491696000},{"_id":"source/_posts/dfg/dfg.assets/image-20220221190337262.png","hash":"1b29e22706999ad2c36f717a7b6f887b8bc617ef","modified":1645491696000},{"_id":"source/_posts/dfg/dfg.assets/image-20220221181451970.png","hash":"d621ab9fe6b6e850bec4e00bc3e2ac8369479b1e","modified":1645491696000},{"_id":"source/_posts/dfg/dfg.assets/image-20220221191520450.png","hash":"01c25a4a4cab7b0770632d0a53876f4fbbf9da3b","modified":1645491696000},{"_id":"source/_posts/dfg/dfg.assets/image-20220222110826232.png","hash":"6b84454a1b2befbf3167b59a467e16e119c26da7","modified":1645491696000},{"_id":"source/_posts/dfg/dfg.assets/image-20220222110155634.png","hash":"6497e9aac65a079e7add16198deb041deac2bb03","modified":1645491696000},{"_id":"source/_posts/dfg/dfg.assets/image-20220222112450707.png","hash":"03e0f078f1c4645a9a54cc1cd7e6055bf2ef83c1","modified":1645491696000},{"_id":"source/_posts/dfg/dfg.assets/image-20220222113121499.png","hash":"393a496816c38e068c27766efbc6ce9beef52ea2","modified":1645491696000},{"_id":"source/_posts/dfg/dfg.assets/image-20220222152902061.png","hash":"fb7177b2f6c312d2747d7fef0b74ceee9f784d31","modified":1645491696000},{"_id":"source/_posts/dfg/dfg.assets/image-20220222195328619.png","hash":"0562f60cde3e6e75b822a3396e86a3bdc2302dd8","modified":1645491696000},{"_id":"source/_posts/dfg/dfg.assets/image-20220222152208862.png","hash":"7612d8fcad59978804a3e6e935cefc602738e31d","modified":1645491696000},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211107144143545.png","hash":"c88af1a3214e241ac3cb59326f4cc3ee38780711","modified":1642959386000},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211107144120942.png","hash":"029991b12bd95b3f82b3bdce5bac3b6dfe6d6cca","modified":1642959386000},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211107125148733.png","hash":"aef70bea7837eb2c06220ddbc76fc3635f82f9a3","modified":1642959386000},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211107144251417.png","hash":"336c6e643831dde9ca5713b5cd47bdcc2a1e3ee4","modified":1642959386000},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211121110325817.png","hash":"1a192f80a32dfe791fef9d7f02966841ba143fb0","modified":1642959386000},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211121185128493.png","hash":"18430b9283d0849b440120920c8eb755a54d7145","modified":1642959386000},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211126162739647.png","hash":"b36c5800d6ade99b23ad47467210e4a9cca292e8","modified":1642959386000},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211115232440411.png","hash":"8d272c5b39bd47536c1188d1854a489bf708f6a3","modified":1642959386000},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211126162708811.png","hash":"b6380bb9523f634eedc1168ed6bdaf4fe32375be","modified":1642959386000},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211126163520911.png","hash":"3f195ee630cbee0ca17dc3d096646821207089ac","modified":1642959386000},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211128152817403.png","hash":"01d17ee49147df069c4b80a03d0c5b4772681bdc","modified":1642959386000},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211228131817914.png","hash":"022f068cf465faee9b438b5600ec69e023b3b958","modified":1642959386000},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20220118215319029.png","hash":"b7a3480c0adc801b519b624f8aa247c75e316f02","modified":1642959386000},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20220118215352072.png","hash":"a9a1a55c8b53ee363f7121c8d528600814ae5497","modified":1642959386000},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211224202523935.png","hash":"8b366f7a422c14779fb3364bf7410d0e559e3961","modified":1645631908000},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211224203951802.png","hash":"db2481bf9407e32af99ec6fba5c71d6661770e6b","modified":1645631908000},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211224205920700.png","hash":"5f12690cf1c65939328d035681a3dbddb96e6684","modified":1645631908000},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211225085504762.png","hash":"8188acd9e37dcba9b43b6a490ce4acff5961ce2d","modified":1645631908000},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211225101503380-16403986033541.png","hash":"9a2395e726baf9880480b87b2ce7356394e44a1d","modified":1645631908000},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211226204335258.png","hash":"c094e759acc570e388019eacabc344331ac787d5","modified":1645631908000},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211226205016145.png","hash":"982c020243d296852ebb7365ac384310819e901d","modified":1645631908000},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211226204452516.png","hash":"2b91f87dda7d7c0e10e436c5910b68dced3c76fe","modified":1645631908000},{"_id":"source/_posts/sha1/sha1.assets/image-20220223192555863.png","hash":"b3cb45cbbb03c195321c107299c3982f36320776","modified":1645632088000},{"_id":"source/_posts/sha1/sha1.assets/image-20220223200517936.png","hash":"33e7e8a705a09a0930a00fe11491b9a64ebe3a42","modified":1645632088000},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210624104523602.png","hash":"786cd77bc578db61e2c4a3583fb7889f5b0c3c44","modified":1642902250000},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210624154848633.png","hash":"ee9e75a7075fc3e25a7b0de978a11418d9d29bf1","modified":1642902250000},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210624171324978.png","hash":"f03024b92a1031e8be3effe0513c3787ce5741d7","modified":1642902250000},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210624114508898.png","hash":"45acadd5a6fced73c07c6af974552f2029316ab6","modified":1642902250000},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210624154904447.png","hash":"57d6f98bf336489b5bd9ab798e4d27c276bc3645","modified":1642902250000},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210624174209159.png","hash":"c753d8443c2f87696ef69153a8151b4c3f2f074c","modified":1642902250000},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210624174908504.png","hash":"eefe5e6a2a337ec8b878c007a0236fecec59135f","modified":1642902250000},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210624174324222.png","hash":"b361aba5a460f75850b548559c0d23d00641d8cf","modified":1642902250000},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210624171314309.png","hash":"f86634e43cd3a725012ea4bb187279b7ad74568b","modified":1642902250000},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210624225715291.png","hash":"a3431060e6df6a8d8ff0774c33e54cc3386d663a","modified":1642902250000},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210624202747254.png","hash":"96700bbac32cb721bebfd1631c5b41b494b21e3e","modified":1642902250000},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210624231925380.png","hash":"176c3903d0c32f537f318de67d85ecd785ecef33","modified":1642902250000},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210624203559676.png","hash":"e6063178d9c580f4fb3a914cbec1a7d953f56f21","modified":1642902250000},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210625125821055.png","hash":"c1845d7f647a88a7647ba376bc93809a2fa0594a","modified":1642902250000},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210625132545137.png","hash":"1accff88b6799c466f00adc6b0b039fe7810cd53","modified":1642902250000},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210625132559544.png","hash":"9c3a413337efc4b67fcb447c03cadb9823701797","modified":1642902250000},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210625132713995.png","hash":"6c6c27baf142dc186af065e282049756ba28ebdf","modified":1642902250000},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210625132532624.png","hash":"5c3ff0e2a62a008997ba5eb84df4b55647db7acd","modified":1642902250000},{"_id":"source/_posts/AES/AES.assets/image-20220118160943225.png","hash":"42fcd14b062d93c063ec4768e491e62aef182a6c","modified":1642897630000},{"_id":"source/_posts/AES/AES.assets/image-20220118161222708.png","hash":"a96e5f9e2280379e906ca1d4cdf3356f8fc790fa","modified":1642897630000},{"_id":"source/_posts/DES/DES.assets/image-20220112135026479.png","hash":"55f7f64ae428916634b722d1b592eda5e3944977","modified":1642901512000},{"_id":"source/_posts/aligot/aligot.assets/image-20211128145601514.png","hash":"4ea334c81a066c14502a52e280b0a0c1933687af","modified":1642973488000},{"_id":"source/_posts/aligot/aligot.assets/image-20211202185040006.png","hash":"3dae881b377d28d34ad8208407edf162d9d2093f","modified":1642973488000},{"_id":"source/_posts/aligot/aligot.assets/image-20211202184802760.png","hash":"8ad16e3d830307fdc5c6d2affffff4f8e0d22e79","modified":1642973488000},{"_id":"source/_posts/c2dll/c2dll.assets/image-20210616195848892-16456145093001.png","hash":"2d71ee55905fbe3443c841226af14a65cda8037c","modified":1645571374000},{"_id":"source/_posts/lfsr/lfsr.assets/image-20220224153901121.png","hash":"1cc2eee8abe7e62670434c0e19f2aa6d5dabfdbb","modified":1645891054000},{"_id":"source/_posts/dfg/dfg.assets/image-20220218195458486.png","hash":"e41a093586db2c7083185823ac7072d647a1a69e","modified":1645491696000},{"_id":"source/_posts/dfg/dfg.assets/image-20220222195734989.png","hash":"7f6fec2dfeb031921a48bacf094cc11dcd53fa3b","modified":1645491696000},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/QNy9EWc7K4enJGu.jpg","hash":"0b4e45eda8d27b4873179f591cb418e6b3e0f234","modified":1642959386000},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211107144221290.png","hash":"13a4f5f036fcb06d5fed70591ae12c788b74a1b1","modified":1642959386000},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211115232410660.png","hash":"4d12ba69c47925bec759e187ad2da2c90747ea42","modified":1642959386000},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/t0189dac1c8ab2412c8.jpg","hash":"9c79e3be8e096b7ec30f81aeb856713d24dcfbf0","modified":1642959386000},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211223232437622.png","hash":"20f6b7421014af2c40d5f9cc35a46a7f0981de2f","modified":1645631908000},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211224200346689.png","hash":"4fbd30679b3c70807de0215992f999f9c2b6868e","modified":1645631908000},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211223232509638.png","hash":"ff228c743eae74c04dabe4a1b93c714874690b9a","modified":1645631908000},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211223232459726.png","hash":"4578b971ed19352def57e942e10c0cb43c76f10b","modified":1645631908000},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211224200549972.png","hash":"8a8bd5b0600884d03654e04a898dc6c634c1fd93","modified":1645631908000},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211225093440256.png","hash":"74a95db7b0394affa687892a541da7a27fa80c72","modified":1645631908000},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211225081537462.png","hash":"a6d40f7f439d33ea14d019a8f50ded487d85e10f","modified":1645631908000},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211225101633374.png","hash":"2ebee6a92e324bcb4025b124dcd209a316b7fa59","modified":1645631908000},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211226211621715.png","hash":"d808f8b3b41f4ba2abcdbd19d8c77df1eac41d9e","modified":1645631908000},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211225095033519.png","hash":"ab9c26f3d3740172f3044be89285ac8720e14605","modified":1645631908000},{"_id":"source/_posts/sha1/sha1.assets/image-20220223191837393.png","hash":"394ec5ff39d6b8f905d9a91e3978c6af966e7d4a","modified":1645632088000},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210601155403815.png","hash":"b3c24b94ac2ce07a66ddfb1778395b15c76f6142","modified":1642902250000},{"_id":"source/_posts/sha1/sha1.assets/image-20220223200537067.png","hash":"309e6eeb71d7ecd522dba11bfb60a9b0cf43222c","modified":1645632088000},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210623221842089.png","hash":"611da6e6b24dad06dab2ee8912aa1be33de3c10b","modified":1642902250000},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210624093611741.png","hash":"cd2a58083cd6be8c3268d12c3bc4ed07d54cfeeb","modified":1642902250000},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210624202125509.png","hash":"01c1932bd9281e70f79143537c5b3ae014f829b5","modified":1642902250000},{"_id":"source/_posts/sha1/sha1.assets/image-20220223213829056.png","hash":"85f6fc1c7c92cb74145ce2cd019e8e5d4c40ba5e","modified":1645632088000},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210625124717799.png","hash":"6ee7b78f70c194278a4935c6fd83a4d8a7a7ab5f","modified":1642902250000},{"_id":"themes/Butterfly/README_CN.md","hash":"49ace5208f98783344f17a00adab7641cda43280","modified":1642880090000},{"_id":"themes/Butterfly/package.json","hash":"bed90f39a3bcf23dcfeb0893a366de0a2fab4ab3","modified":1642880090000},{"_id":"themes/Butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1642880090000},{"_id":"themes/Butterfly/languages/en.yml","hash":"7fe7528ed2778fe39444df2bc7e64f09e1302e97","modified":1642880090000},{"_id":"themes/Butterfly/README.md","hash":"6ee27baf95a5741abbc224ef8938d679b6597665","modified":1642880090000},{"_id":"themes/Butterfly/_config.yml","hash":"b496ea720acf9b86c9ba141e5d9b44274b074634","modified":1651869556000},{"_id":"themes/Butterfly/.github/stale.yml","hash":"05a55a87fa7f122c59683e41c8b2e37e79f688f0","modified":1642880090000},{"_id":"themes/Butterfly/languages/default.yml","hash":"1177f2177945c3e2447c6c0208e6ffdf0c0b186c","modified":1642880090000},{"_id":"themes/Butterfly/languages/zh-CN.yml","hash":"b1ba98565fe2d28e956225cf9e8a21f329ee060e","modified":1642880090000},{"_id":"themes/Butterfly/layout/archive.pug","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":1642880090000},{"_id":"themes/Butterfly/languages/zh-TW.yml","hash":"38b32ab2aa3e2ebb9ef3c993c8dca42f1e000cd5","modified":1642880090000},{"_id":"themes/Butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1642880090000},{"_id":"themes/Butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1642880090000},{"_id":"themes/Butterfly/layout/post.pug","hash":"8d398c8925182699d9f2b9f1b727f06228488312","modified":1642880090000},{"_id":"themes/Butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1642880090000},{"_id":"themes/Butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1642880090000},{"_id":"themes/Butterfly/.github/ISSUE_TEMPLATE/bug_report.md","hash":"476802922b774b679225102ac30a9d9183394701","modified":1642880090000},{"_id":"themes/Butterfly/.github/ISSUE_TEMPLATE/custom.md","hash":"eff495eb1584cf4586e33c76e8b2fa6a469a179b","modified":1642880090000},{"_id":"themes/Butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1642880090000},{"_id":"themes/Butterfly/.github/ISSUE_TEMPLATE/feature_request.md","hash":"f6867a2f0417fe89a0f2008730ee19dd38422021","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/additional-js.pug","hash":"ab3bdeb6e0acd3d58091698c1335afb069eea7e5","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/layout.pug","hash":"6f2608c4d93d3d10ae6b2cd7f8918f303f024321","modified":1642880090000},{"_id":"themes/Butterfly/scripts/events/config.js","hash":"0ace90c45322ae386a3f974ab74c92e8d0dd0ab2","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/pagination.pug","hash":"0b80f04950bd0fe5e6c4e7b7559adf4d0ce28436","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/head.pug","hash":"5945f6f7f963b3ed1cc50e7e7d2e4929e1c1440c","modified":1642880090000},{"_id":"themes/Butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1642880090000},{"_id":"themes/Butterfly/scripts/events/welcome.js","hash":"d575137c8779e50422c2416f4d0832fdea346ee6","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/rightside.pug","hash":"428758c2459fd31efaf816c39693edb4f716b861","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/sidebar.pug","hash":"f093ab771257a6a939b194f68607a2038c8d7da3","modified":1642880090000},{"_id":"themes/Butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1642880090000},{"_id":"themes/Butterfly/scripts/events/init.js","hash":"a7f567b3d3110afe2f99c967b8e15351a7f5bd6d","modified":1642880090000},{"_id":"themes/Butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1642880090000},{"_id":"themes/Butterfly/scripts/filters/random_cover.js","hash":"21379ed2dccb69c43b893895c9d56238c11e5f43","modified":1642880090000},{"_id":"themes/Butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1642880090000},{"_id":"themes/Butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1642880090000},{"_id":"themes/Butterfly/scripts/helpers/inject_head_js.js","hash":"6a103a2472903289bdecd5240eb89cac0b9e13d9","modified":1642880090000},{"_id":"themes/Butterfly/scripts/helpers/page.js","hash":"c6611d97087c51845cb1ab4821696a62fa33daeb","modified":1642880090000},{"_id":"themes/Butterfly/scripts/helpers/related_post.js","hash":"21556f9cb412ddc500ad12ecfd419f3ea6c9f663","modified":1642880090000},{"_id":"themes/Butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1642880090000},{"_id":"themes/Butterfly/scripts/tag/gallery.js","hash":"f79c99f6c5b626c272dc2bed2b0250d6b91bb28a","modified":1642880090000},{"_id":"themes/Butterfly/scripts/tag/hide.js","hash":"a091f82d8897adb2347c228e544e29363c679d1f","modified":1642880090000},{"_id":"themes/Butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1642880090000},{"_id":"themes/Butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1642880090000},{"_id":"themes/Butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1642880090000},{"_id":"themes/Butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1642880090000},{"_id":"themes/Butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1642880090000},{"_id":"themes/Butterfly/scripts/tag/note.js","hash":"c16c6eb058af2b36bcd583b2591076c7ebdd51ad","modified":1642880090000},{"_id":"themes/Butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1642880090000},{"_id":"themes/Butterfly/source/image/avatar.jpg","hash":"d5ab76653c100dc1d4f3ca6725bfb96d5538e3fb","modified":1642884928000},{"_id":"themes/Butterfly/source/css/var.styl","hash":"4890a40366d6443f8b8942a4e9a6dce9fe3494f5","modified":1642880090000},{"_id":"themes/Butterfly/source/image/back.jpg","hash":"0f288c497c54dc63db6ea4429cd71c21cb292a8d","modified":1642889590000},{"_id":"themes/Butterfly/source/image/heady.png","hash":"d92f8117903eabe1e90cc219f5172271eaa387ca","modified":1642892800000},{"_id":"themes/Butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1642880090000},{"_id":"themes/Butterfly/source/image/star.jpg","hash":"28ed654230e353d99d00f1ba0b36723667a17621","modified":1642967140000},{"_id":"themes/Butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1642880090000},{"_id":"themes/Butterfly/source/js/utils.js","hash":"3ee4bd9071dc6e854ffa33964f3a8da2ee2a8409","modified":1642880090000},{"_id":"themes/Butterfly/source/js/main.js","hash":"1254dca2c02b3389ec0434cdd2728fdea4ae0216","modified":1642880090000},{"_id":"themes/Butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/head/config.pug","hash":"9e58c80af8bbd0c66ccb4f94d3781818cebf0d66","modified":1642880090000},{"_id":"themes/Butterfly/source/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/head/analytics.pug","hash":"15530d9ac59c576d79af75dd687efe71e8d261b0","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/head/Open_Graph.pug","hash":"6c41f49a3e682067533dd9384e6e4511fc3a1349","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/head/preconnect.pug","hash":"65a23b5170204e55b813ce13a79d799b66b7382c","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/header/index.pug","hash":"65fa23680af0daf64930a399c2f2ca37809a8149","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/header/nav.pug","hash":"78a3abd90bb3c18cd773d3d5abac3541e7f415e5","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/header/post-info.pug","hash":"dc3913c1a6dd207051c3d3414a33851ae8bc0a45","modified":1642890238000},{"_id":"themes/Butterfly/layout/includes/loading/loading-js.pug","hash":"4cfcf0100e37ce91864703cd44f1cb99cb5493ea","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/mixins/article-sort.pug","hash":"2fb74d0b0e4b98749427c5a1a1b0acb6c85fadc4","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/mixins/post-ui.pug","hash":"b9ebb02af8ccf43e3f73be43db19254fa913c57b","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/post/post-copyright.pug","hash":"88e3b611b03149665e4113cfa39595c1a3fca7e5","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/page/flink.pug","hash":"fed069baa9b383f57db32bb631115071d29bdc60","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/effect.pug","hash":"b9d54a01d7c2a7a183cb7209e99430ce7fea1fe3","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/page/tags.pug","hash":"6311eda08e4515281c51bd49f43902a51832383c","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/pjax.pug","hash":"d4072f9ab79f4ac49aa251ae470abc45a2fddbd6","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/aplayer.pug","hash":"292646dfab135973b09f0fa9e3931e83da2ed30e","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/pangu.pug","hash":"d5fec7dedc52ab23865fb4db002755e9bdaadc9f","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/widget/card_announcement.pug","hash":"3d8e3706a056389176f55dd21956aabc78046761","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/subtitle.pug","hash":"b63fd8ec48d782f51ee11226753fed1998bbf34a","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/widget/card_author.pug","hash":"0380a1e048e6219ea4b4a8a4eadba960edf308f0","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/prismjs.pug","hash":"1fbecfd299068f90d727f0c8c65e2a792fa6e3e2","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/widget/card_newest_comment.pug","hash":"6d93564a8bd13cb9b52ee5e178db3bcbf18b1bc6","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/widget/card_recent_post.pug","hash":"9c1229af6ab48961021886882c473514101fba21","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/widget/card_webinfo.pug","hash":"0612aaee878f33ea8d3da0293c7dc3b6cd871466","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/widget/card_tags.pug","hash":"438aea3e713ed16b7559b9a80a9c5ec0221263df","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_global/function.styl","hash":"d9bbe20a4029e542fee9f1e1013d28d767605ffc","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_highlight/highlight.styl","hash":"facf3bec0afce3bc6d077cf1939818efc7fe3bf1","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/widget/index.pug","hash":"7fb096656c8a6c21a4b6a5100885b1081d6021ed","modified":1642888240000},{"_id":"themes/Butterfly/source/css/_global/index.styl","hash":"714f19e7d66df84938bd1b82b33d5667abe1f147","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_layout/aside.styl","hash":"085e61a75588e86a6bdba75da7803411485c7b5a","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_layout/footer.styl","hash":"26be2afa9d4e7016cf3c42a6cd166f01e8e4ad5c","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_layout/loading.styl","hash":"ef21990de28bd75dcd0f88b8d616e1a7a137502f","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_layout/head.styl","hash":"d97c1722ce0fcc319f1f90ec2d51f9d746748e2b","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_layout/pagination.styl","hash":"4825b1751ae46ca005b2af9d6e0a3e477c82b1f9","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_layout/post.styl","hash":"eb47b8134d3aa91824259c833356686a6a3de168","modified":1643417178000},{"_id":"themes/Butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_layout/rightside.styl","hash":"bd88ee30ebf8ca2e7b4d3a034c317fd61733921f","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_layout/sidebar.styl","hash":"1bcbc80dff19cd53d0b367c3b9a3c751d3a1f10d","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_mode/darkmode.styl","hash":"1bfe7554c3aa8ccc6fcba5e027086188ca0a7ad7","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_layout/third-party.styl","hash":"66c8c94bdc62e00e1dd848582aa2612ae22c1066","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_mode/readmode.styl","hash":"69f8e9414526dfda3af9a71c8e528fdd0ecbbfe5","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_page/common.styl","hash":"a58d35d698885f1034dedbe99f7dbc1a801412c6","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_page/archives.styl","hash":"6f4b4ede52305bce9b22c8c897dcbde8af6e2ce4","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_page/flink.styl","hash":"91dfd28d7e5f2113e27c8ae854337d316ca1c48f","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_search/algolia.styl","hash":"656f9007d94cf29a20532705d94fb7f22827e6fe","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_page/homepage.styl","hash":"826dae759062d8f84eb2bf5ab8fdb80e0f79d58b","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_search/index.styl","hash":"0290605c4984882990059eefe3ad18d2ac6a19ef","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_search/local-search.styl","hash":"e4c987c0202162b50dec91e1df74665d0fa933c9","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_tags/gallery.styl","hash":"a310e48f826a4cacc55d8e68f43806e5085554f6","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_tags/hide.styl","hash":"bb2a9b7937818ff3a154c8c1009f13b534e77ec3","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_tags/note.styl","hash":"08493b66b9f31f2bd3e9a3115017a0ce16142b20","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1642880090000},{"_id":"themes/Butterfly/source/js/search/local-search.js","hash":"72911c7b42e0174a979c09ead3f42ee24136feae","modified":1642880090000},{"_id":"themes/Butterfly/source/js/search/algolia.js","hash":"aaa5e44125dcf321866bc2355a73773b11db8c9c","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"7848ec58c6ec03243abf80a3b22b4dc10f3edf53","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"e3bf847553515174f6085df982f0623e9783db7a","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"ef1b2b5b980d6aeaa5d06b97d1afc9644b155a16","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"bba9871f446c10ffcc8fa9023f5a2eb701a86bae","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"400ce038548d6f9ddb486150c724c87b6923a88b","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/chat/index.pug","hash":"3f05f8311ae559d768ee3d0925e84ed767c314d3","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"143236e395c18d80ab8dc794821eb337c85f6b32","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/comments/disqus.pug","hash":"a111407fdcafcf1099e26ffa69786f8822c5d9fb","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"6852d4fa5fff3fe52fdc41875a2c7af57f286b3a","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/comments/giscus.pug","hash":"0764709381fa29778f6390d645ed137d2f91228f","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"9c96e6e67931977268b218b99084b98597c2e42b","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/comments/index.pug","hash":"e4850f2c9ba5f6b2248808f7257662679e0fab0a","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/comments/js.pug","hash":"9302837f1e35f153323bb4f166514c7e96e8ecdd","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"c271cacbac14ed665bbf47aa9c6e74e94c69dcef","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/comments/utterances.pug","hash":"c1c75abe5c899618ed6699c97ac999544840098a","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/comments/valine.pug","hash":"59c22ebf3aaee90152e7cdb17ff5841c888fcd82","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/math/katex.pug","hash":"f9b00ead54573ba6e6eb33481588af144aab648d","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/comments/waline.pug","hash":"7648e4cb0b224f480b5f1356d64f62c9235f6723","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/math/mathjax.pug","hash":"a47d8f9f593091cc91192c0c49deaa2c0d2317fd","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"04b2a5882e789a988e41d45abe606f0617b08e38","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/math/mermaid.pug","hash":"0a7587a0211011b5942edba2aa80d51169561d30","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"e846ddfe4a63b15d1416f6055f5756af5e3da7c6","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f6506ccfd1ce994b9e53aa95588d0b6dbad11411","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"9028efac78e4122acd734edd5ef9110ef3f05cd1","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"ac811c1d6e0bf08aeb933ade1b9557e0c560d0c9","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"5e32d903903c76db55a625640f9417d15a3a312f","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/search/algolia.pug","hash":"c92df4f9d0611cf44c1a4491e226f242ec80f5bb","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/search/local-search.pug","hash":"8ce336a4c8cae81b58ee26ff51040ca650ff1519","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/share/addtoany.pug","hash":"309f51bc5302e72fc469d54c577fbcfe57fb07a8","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/share/share-js.pug","hash":"006acc91ce25fc7c7d778ca043e970f57dc46b83","modified":1642880090000},{"_id":"themes/Butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1642880090000},{"_id":"themes/Butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1642880090000},{"_id":"source/_posts/aligot/aligot.assets/image-20211202210729211.png","hash":"f55274f88d84c14daa708b52bf39c0cdd2a82278","modified":1642973488000},{"_id":"source/_posts/md5/md5.assets/image-20220127171124399.png","hash":"b3cef6b4a8f4243c61112a0b29264bf480a91ae8","modified":1643302464000},{"_id":"source/_posts/dfg/dfg.assets/image-20220222143759387.png","hash":"383e8f7de71c350fb09bad75fc39c2a342cd812c","modified":1645491696000},{"_id":"source/_posts/dfg/dfg.assets/image-20220222141947171.png","hash":"6930b3bb4ca017a5a64b3e8d3cc3941ee04ad6f5","modified":1645491696000},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/t01dd9c90c1ecde8471.jpg","hash":"03a5c8dfc84bff2de292a96f278a86f3c0d6994b","modified":1642959386000},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210624230418524.png","hash":"96871eb438e970cb44fe2679ca43cd8fa312a311","modified":1642902250000},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210624231520804.png","hash":"15711986baafb0d830aca8747c961693ffa2ed55","modified":1642902250000},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210625112903207.png","hash":"bba5efd6eddedaee4258b315ad214c3e18754dd0","modified":1642902250000},{"_id":"source/_posts/AES/AES.assets/image-20220118151417023.png","hash":"2b9d14fda4b387c8104f14da2957d807d561cefa","modified":1642897630000},{"_id":"source/_posts/AES/AES.assets/image-20220118151325836.png","hash":"cd5debeeb30ecdb8b3e0fb4803b481465fecea07","modified":1642897630000},{"_id":"source/_posts/lfsr/lfsr.assets/image-20220217205141000.png","hash":"17b02d748d2c4dd78e76d0919c078918b31e7d6b","modified":1645891056000},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211224205908008.png","hash":"aa170db92835f3c4a2fdf528e5341f20f1b45198","modified":1645631908000},{"_id":"themes/Butterfly/source/image/m4tsuri.jpg","hash":"d32b5ffdb25ef951cce077a2dc318ea766420ed5","modified":1642966368000},{"_id":"source/_posts/DES/DES.assets/image-20220112114938574.png","hash":"d22ca4cb12a8a236f8f03539b756ccaab0c25bde","modified":1642901512000},{"_id":"source/_posts/md5/md5.assets/image-20220127171654001.png","hash":"fc01bba9eba1f43c1ee549a112911d5b0208a0ee","modified":1643302464000},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20220224115439047.png","hash":"d4273775df9923407594217425f80a44cd8d1752","modified":1645631908000},{"_id":"source/_posts/AES/AES.assets/aes_details.jpg","hash":"b8f710940e8ac3c2f42b1d95a3574fe917bcddbf","modified":1642897630000},{"_id":"public/search.xml","hash":"b507283cefe12015fce4072c79300fd937a3dae2","modified":1677930581345},{"_id":"public/sitemap.xml","hash":"bac9a58f5b29d6cfae22851f85fcaf049d43b0d9","modified":1677930581345},{"_id":"public/about/index.html","hash":"dac4811af10fec96b393aa8f459710deb7b861e6","modified":1677930581345},{"_id":"public/categories/index.html","hash":"07b5353c2277832082fd0dfdf993f79cfcc4f4db","modified":1677930581345},{"_id":"public/link/index.html","hash":"23a40e05fa84992f5fe88b20abbe1fcb6c517fd1","modified":1677930581345},{"_id":"public/tags/index.html","hash":"d8153d65b6f24adc68b2ebe6be8ec5919da2abdb","modified":1677930581345},{"_id":"public/2022/02/24/lfsr/index.html","hash":"63baac46009b9faf3c6594986c1ddd479624bc0a","modified":1677930581345},{"_id":"public/2022/02/23/sha1/index.html","hash":"0167a9cd8218e33d9fb7e1832f515f39a4f660a2","modified":1677930581345},{"_id":"public/2022/02/22/dfg/index.html","hash":"0f30d02955c1dff1c1d456db5c223a67011ec4df","modified":1677930581345},{"_id":"public/2022/01/28/md5/index.html","hash":"f2876a90f6880ac8dc7ad008fbf8f6e4c4bde808","modified":1677930581345},{"_id":"public/2022/01/24/ichunqiu-crypto-writeup/index.html","hash":"389b7a0cbd26ee0bb8ee94e4dc23cb18be9a6959","modified":1677930581345},{"_id":"public/2022/01/24/BUUCTF-crypto-writeup-md/index.html","hash":"ecbbf9f233cb618d76d149d66cd789b9559c6a6c","modified":1677930581345},{"_id":"public/2022/01/23/AES/index.html","hash":"b2b2ab310e4ffbc4e826f3799420bbfc694c7408","modified":1677930581345},{"_id":"public/2021/12/03/aligot/index.html","hash":"97d26f2d803d5631c9cd3d2dbf9f1e65f29ac8e0","modified":1677930581345},{"_id":"public/2022/01/14/DES/index.html","hash":"85259832081e1d1d458b6f8594a411b02c5159fb","modified":1677930581345},{"_id":"public/2021/06/25/where-s-crypto/index.html","hash":"3115ebe47858b8e76e6f32966cfcd7cd3c773430","modified":1677930581345},{"_id":"public/2021/12/06/program-synthesis/index.html","hash":"c2cd93b63451b8ef0552280ce7fdaade14c4fcfd","modified":1677930581345},{"_id":"public/2021/06/20/c2dll/index.html","hash":"830eb2177e92a2db69698c2076954824aed5f6e3","modified":1677930581345},{"_id":"public/archives/index.html","hash":"74ba92bc4b2c3e14a3884b478c4b3f4bd0cfc714","modified":1677930581345},{"_id":"public/archives/page/2/index.html","hash":"7d21f3c46818a974897d6d7139df8226c0174e37","modified":1677930581345},{"_id":"public/archives/2021/index.html","hash":"6f9489f8f56fa926389440a6b37f081d5da7d9eb","modified":1677930581345},{"_id":"public/archives/2021/06/index.html","hash":"3835aa1cec2e453dbfdca9da8670de299efee980","modified":1677930581345},{"_id":"public/archives/2021/12/index.html","hash":"1176cbe85f8345be4243ec994f6523b827bc0729","modified":1677930581345},{"_id":"public/archives/2022/index.html","hash":"efb4d7910e8894ac050521902a5e747049684756","modified":1677930581345},{"_id":"public/archives/2022/01/index.html","hash":"bff9415ae4ada86e720ceff5b9bb2de2f43bc12f","modified":1677930581345},{"_id":"public/archives/2022/02/index.html","hash":"5e41f8645e6e831081c179b9dd43a0287bad6279","modified":1677930581345},{"_id":"public/categories/CryptoDetect/index.html","hash":"3acce69c745e20d2dfe230b052b7a5b3eec97de0","modified":1677930581345},{"_id":"public/categories/crypto/index.html","hash":"14bfbd4d6d574596d9d3cbf93c5faf145ee34af5","modified":1677930581345},{"_id":"public/categories/CryptoDetect/algorithm/index.html","hash":"1d814e27efa1079929689cbde039396fc655630c","modified":1677930581345},{"_id":"public/categories/CryptoDetect/paper/index.html","hash":"e0147c07dc3233c2e153987a536856848956ca76","modified":1677930581345},{"_id":"public/categories/crypto/ctf/index.html","hash":"1cd8d2830e1ccf02ff556601d058af5898487400","modified":1677930581345},{"_id":"public/categories/reverse/index.html","hash":"902f09098af58c6e11f2d0ed91535ea121eb8c5b","modified":1677930581345},{"_id":"public/categories/program-synthesis/index.html","hash":"347c5eb9d2d995231e20b49e3d8b883fb8a9612b","modified":1677930581345},{"_id":"public/categories/program-synthesis/paper/index.html","hash":"2a421790e36cc41d14c6535182091ad7104583f5","modified":1677930581345},{"_id":"public/index.html","hash":"c5fea6c5cd92a495eadd40156235b508bfa84165","modified":1677930581345},{"_id":"public/page/2/index.html","hash":"65f20c745c202e1450c64a4f593f604b9cf52159","modified":1677930581345},{"_id":"public/tags/crypto/index.html","hash":"9cf904513746a6b1a08fb22fb84d22b193049254","modified":1677930581345},{"_id":"public/tags/algorithm/index.html","hash":"1e6f6190174a452aa659d522770eb5d0ab8cd6eb","modified":1677930581345},{"_id":"public/tags/CryptoDetect/index.html","hash":"9bd3afd175b27d3d2c178beb54027eaae74a4f83","modified":1677930581345},{"_id":"public/tags/ctf/index.html","hash":"2f3a24d3393ece62528f721402deb2c82322b4bb","modified":1677930581345},{"_id":"public/tags/writeup/index.html","hash":"73dcd13536202362a51677ba6d6e0bfc9143b52e","modified":1677930581345},{"_id":"public/tags/reverse/index.html","hash":"ae4ba82ded9cc4d5e6e05a71e2c17cf760628e02","modified":1677930581345},{"_id":"public/tags/paper/index.html","hash":"c8b33b36ad1adafaad1965b56c74993f883dd409","modified":1677930581345},{"_id":"public/tags/program-synthesis/index.html","hash":"f6ca73008cb8dd360c2184f412fff3e0934a340f","modified":1677930581345},{"_id":"public/image/back.jpg","hash":"0f288c497c54dc63db6ea4429cd71c21cb292a8d","modified":1677930581345},{"_id":"public/image/heady.png","hash":"d92f8117903eabe1e90cc219f5172271eaa387ca","modified":1677930581345},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1677930581345},{"_id":"public/image/avatar.jpg","hash":"d5ab76653c100dc1d4f3ca6725bfb96d5538e3fb","modified":1677930581345},{"_id":"public/image/star.jpg","hash":"28ed654230e353d99d00f1ba0b36723667a17621","modified":1677930581345},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1677930581345},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1677930581345},{"_id":"public/2022/01/23/AES/AES.assets/image-20220118145857240.png","hash":"511906abbfa994699865ee0fd66194c670ca465e","modified":1677930581345},{"_id":"public/2022/01/23/AES/AES.assets/image-20220115160053585.png","hash":"487630912a94a63b4ae5ff84c43cc19f76db2c1c","modified":1677930581345},{"_id":"public/2022/01/23/AES/AES.assets/image-20220118160907434.png","hash":"c671590e643ced8d6ec90dc48f7f1727092e7057","modified":1677930581345},{"_id":"public/2022/01/23/AES/AES.assets/image-20220118161013057.png","hash":"6b557aeb476253f67a3e835e7dedfb4c9c2c03e3","modified":1677930581345},{"_id":"public/2022/01/23/AES/AES.assets/image-20220118172332974.png","hash":"14a661279c89543e37172728ba7103fe1a12014f","modified":1677930581345},{"_id":"public/2022/01/23/AES/AES.assets/image-20220118161112688.png","hash":"ecd305d34d6d3d94e4a348de2ef54bbe1177ddd8","modified":1677930581345},{"_id":"public/2022/01/24/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211107144143545.png","hash":"c88af1a3214e241ac3cb59326f4cc3ee38780711","modified":1677930581345},{"_id":"public/2022/01/24/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211107125148733.png","hash":"aef70bea7837eb2c06220ddbc76fc3635f82f9a3","modified":1677930581345},{"_id":"public/2022/01/24/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211107144120942.png","hash":"029991b12bd95b3f82b3bdce5bac3b6dfe6d6cca","modified":1677930581345},{"_id":"public/2022/01/24/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211107144251417.png","hash":"336c6e643831dde9ca5713b5cd47bdcc2a1e3ee4","modified":1677930581345},{"_id":"public/2022/01/24/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211115232440411.png","hash":"8d272c5b39bd47536c1188d1854a489bf708f6a3","modified":1677930581345},{"_id":"public/2022/01/24/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211121110325817.png","hash":"1a192f80a32dfe791fef9d7f02966841ba143fb0","modified":1677930581345},{"_id":"public/2022/01/24/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211126162708811.png","hash":"b6380bb9523f634eedc1168ed6bdaf4fe32375be","modified":1677930581345},{"_id":"public/2022/01/24/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211121185128493.png","hash":"18430b9283d0849b440120920c8eb755a54d7145","modified":1677930581345},{"_id":"public/2022/01/24/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211126163520911.png","hash":"3f195ee630cbee0ca17dc3d096646821207089ac","modified":1677930581345},{"_id":"public/2022/01/24/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211126162739647.png","hash":"b36c5800d6ade99b23ad47467210e4a9cca292e8","modified":1677930581345},{"_id":"public/2022/01/24/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211228131817914.png","hash":"022f068cf465faee9b438b5600ec69e023b3b958","modified":1677930581345},{"_id":"public/2022/01/24/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211128152817403.png","hash":"01d17ee49147df069c4b80a03d0c5b4772681bdc","modified":1677930581345},{"_id":"public/2022/01/24/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20220118215352072.png","hash":"a9a1a55c8b53ee363f7121c8d528600814ae5497","modified":1677930581345},{"_id":"public/2022/01/24/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20220118215319029.png","hash":"b7a3480c0adc801b519b624f8aa247c75e316f02","modified":1677930581345},{"_id":"public/2022/01/14/DES/DES.assets/image-20220112133041770.png","hash":"a738abdcde57d62ec64251ec050d83af9dd2ebd1","modified":1677930581345},{"_id":"public/2022/01/14/DES/DES.assets/image-20220112132946201.png","hash":"16dd647debe87ef5015d6bd1c1d5422e18c16164","modified":1677930581345},{"_id":"public/2022/01/14/DES/DES.assets/image-20220112133737845.png","hash":"34f23b0d52571bfd51e5a1cd4d41cbd244f86561","modified":1677930581345},{"_id":"public/2022/01/14/DES/DES.assets/image-20220112133802349.png","hash":"a296481e9a8f765228ed810fea837248f27389bf","modified":1677930581345},{"_id":"public/2022/01/14/DES/DES.assets/image-20220112134549104.png","hash":"d79a28e927a9d050bdf9e80d3291d36c4dfd203c","modified":1677930581345},{"_id":"public/2022/01/14/DES/DES.assets/image-20220112133518482.png","hash":"62205d3c93493eb34cacdb75bcd00b4c54ee03f8","modified":1677930581345},{"_id":"public/2022/01/14/DES/DES.assets/image-20220112134612622.png","hash":"23100ad9a4d4e6710295e45301d3bd6532df6ac1","modified":1677930581345},{"_id":"public/2022/01/14/DES/DES.assets/image-20220112134705510.png","hash":"f880beae30e7227bdaff72b6d708684c08e0e5f7","modified":1677930581345},{"_id":"public/2022/01/14/DES/DES.assets/image-20220112165741033.png","hash":"bb08b0423275fa5a9a321d307939836395e7c44b","modified":1677930581345},{"_id":"public/2022/01/14/DES/DES.assets/image-20220112135218512.png","hash":"78b3aceffd2d9dba165362aec86d940c2444cac4","modified":1677930581345},{"_id":"public/2022/01/14/DES/DES.assets/image-20220113141131473.png","hash":"8755fbc4980036a5555df6cfc34ea158e6b4f2c6","modified":1677930581345},{"_id":"public/2022/01/14/DES/DES.assets/image-20220113124310851.png","hash":"e893fb9ad87da67f32349b8434a5a9c375f89c86","modified":1677930581345},{"_id":"public/2022/01/14/DES/DES.assets/image-20220113141442031.png","hash":"23eb3e1b205b52da3f786105adc63a3e9aa80c8f","modified":1677930581345},{"_id":"public/2022/01/14/DES/DES.assets/image-20220113142045280.png","hash":"0e0aa7ea3efcd37f3a326b8f68c848942e894556","modified":1677930581345},{"_id":"public/2022/01/14/DES/DES.assets/image-20220113142202479.png","hash":"0c2f35a10e05dfc49c4f4e076ab87db97b35ccc4","modified":1677930581345},{"_id":"public/2022/01/14/DES/DES.assets/image-20220113142344671.png","hash":"21020e497f2dda67216d1e9716b03edb79940912","modified":1677930581345},{"_id":"public/2021/12/03/aligot/aligot.assets/image-20211201174224006.png","hash":"f5189b7f7eaf07596b23af3a15dc26d96bf3360e","modified":1677930581345},{"_id":"public/2021/12/03/aligot/aligot.assets/image-20211202154148799.png","hash":"eba780af59f1841760dcec176377bee5967dcd2c","modified":1677930581345},{"_id":"public/2021/12/03/aligot/aligot.assets/image-20211202155126668.png","hash":"336793d02369a11d781b5b9a3819d0e78fe07b2a","modified":1677930581345},{"_id":"public/2021/12/03/aligot/aligot.assets/image-20211202154801527.png","hash":"f58b14953df40238e7d6214d015945fe44f455fb","modified":1677930581345},{"_id":"public/2021/12/03/aligot/aligot.assets/image-20211202210609653.png","hash":"b4418c6d8a0216766dc3185f4eb05339ea35f551","modified":1677930581345},{"_id":"public/2021/12/03/aligot/aligot.assets/image-20211202185147355.png","hash":"7d60db67669d28abe3daf8f9b5f15e05a28d349e","modified":1677930581345},{"_id":"public/2021/12/03/aligot/aligot.assets/image-20211202215338681.png","hash":"a60b9d7926089a411c14f655cb5e7bfe501306b5","modified":1677930581345},{"_id":"public/2021/12/03/aligot/aligot.assets/image-20211202235129708.png","hash":"eb0e6fa8e21e72de28b1e2a34b47670830974a5a","modified":1677930581345},{"_id":"public/2022/01/28/md5/md5.assets/image-20220127175833516.png","hash":"71e0950d3ede8cc7d3de3f9babb40f166cd74e97","modified":1677930581345},{"_id":"public/2022/01/28/md5/md5.assets/image-20220127181300578.png","hash":"97d5992b048d354a3ade179796ac63ed94356ebf","modified":1677930581345},{"_id":"public/2022/01/28/md5/md5.assets/image-20220128122013626.png","hash":"6accfc9a5b065b9de71a8feea7e8f517510b1866","modified":1677930581345},{"_id":"public/2022/01/28/md5/md5.assets/image-20220128123055931.png","hash":"2365ba21350a57b354d9ebf0d3e5d90da7996bf6","modified":1677930581345},{"_id":"public/2022/01/28/md5/md5.assets/image-20220128124206153.png","hash":"be81778b26dbe760aae6f1e2b0cb6c4a06dc6730","modified":1677930581345},{"_id":"public/2022/01/28/md5/md5.assets/image-20220128122933514.png","hash":"b31e90ebe06985ecb34970060900e26390946778","modified":1677930581345},{"_id":"public/2022/02/24/lfsr/lfsr.assets/image-20220224160744696.png","hash":"1fd4c1d2f3440ba08a8aa20fa54c71ff960ac1b9","modified":1677930581345},{"_id":"public/2022/02/24/lfsr/lfsr.assets/image-20220224161436546.png","hash":"26089df159d3a8ce88ad8c47415c5ec5608d7f81","modified":1677930581345},{"_id":"public/2021/06/20/c2dll/c2dll.assets/image-20210618142608631-16456145093012.png","hash":"7d29f5e9da2c319e2793bedd052536e462f4ee53","modified":1677930581345},{"_id":"public/2021/12/03/aligot/aligot.assets/image-20211202212334296.png","hash":"e5c7862cdfb498aacef663b1eeccd61b5cdffb75","modified":1677930581345},{"_id":"public/2021/06/20/c2dll/c2dll.assets/image-20210618143512463-16456145093014.png","hash":"b4609de695dbf1c5ee4b9a19e4fae93226cbf92c","modified":1677930581345},{"_id":"public/2021/06/20/c2dll/c2dll.assets/image-20210618161025486-16456145093015.png","hash":"78370034674ce123ea1a4b0be75a9156eb15e466","modified":1677930581345},{"_id":"public/2021/06/20/c2dll/c2dll.assets/image-20210618163119738-16456145093029.png","hash":"7938d634f2cbdd65adcc83af5c70fec9e86eae11","modified":1677930581345},{"_id":"public/2021/06/20/c2dll/c2dll.assets/image-20210618162011465-16456145093017.png","hash":"f60daf58de9020111e4bf1c75cc670a455c9fd15","modified":1677930581345},{"_id":"public/2021/06/20/c2dll/c2dll.assets/image-20210618161730728-16456145093016.png","hash":"1950b437a2b4fd7fb6a9e43b8f773c557b923670","modified":1677930581345},{"_id":"public/2021/06/20/c2dll/c2dll.assets/image-20210618162115746-16456145093018.png","hash":"c55c4ac5eca82bef427565973444e39dfead2e45","modified":1677930581345},{"_id":"public/2021/06/20/c2dll/c2dll.assets/image-20210619104237632-164561450930215.png","hash":"5916222e40e614e2fca9c2d52b890fe5dacd485f","modified":1677930581345},{"_id":"public/2021/06/20/c2dll/c2dll.assets/image-20210618164215851-164561450930211.png","hash":"5994c9907c31c03ce2fdc7ee18ccb4619e6c4d1e","modified":1677930581345},{"_id":"public/2021/06/20/c2dll/c2dll.assets/image-20210618163947120-164561450930210.png","hash":"7ae3b37a1c6462741398591905b1569e322656bc","modified":1677930581345},{"_id":"public/2021/06/20/c2dll/c2dll.assets/image-20210619144516190-16456145093013.png","hash":"5de4ce3182537635a4ed0e74b6f56367e19b9922","modified":1677930581345},{"_id":"public/2021/06/20/c2dll/c2dll.assets/image-20210619145806024-164561450930212.png","hash":"11ebacba91a950715937b2ccf216e0eb54f7f273","modified":1677930581345},{"_id":"public/2021/06/20/c2dll/c2dll.assets/image-20210619150017590-164561450930213.png","hash":"1dcac0a147c78b63e204064f3db8423ec7914bfd","modified":1677930581345},{"_id":"public/2022/02/23/sha1/sha1.assets/image-20220223192555863.png","hash":"b3cb45cbbb03c195321c107299c3982f36320776","modified":1677930581345},{"_id":"public/2022/02/23/sha1/sha1.assets/image-20220223200517936.png","hash":"33e7e8a705a09a0930a00fe11491b9a64ebe3a42","modified":1677930581345},{"_id":"public/2022/02/22/dfg/dfg.assets/image-20220221190220766.png","hash":"e1f1e5ecc9e4c24d6dbba9d2df65d0b4e48fb108","modified":1677930581345},{"_id":"public/2022/02/22/dfg/dfg.assets/image-20220221181451970.png","hash":"d621ab9fe6b6e850bec4e00bc3e2ac8369479b1e","modified":1677930581345},{"_id":"public/2022/02/22/dfg/dfg.assets/image-20220221190337262.png","hash":"1b29e22706999ad2c36f717a7b6f887b8bc617ef","modified":1677930581345},{"_id":"public/2022/02/22/dfg/dfg.assets/image-20220222110155634.png","hash":"6497e9aac65a079e7add16198deb041deac2bb03","modified":1677930581345},{"_id":"public/2022/02/22/dfg/dfg.assets/image-20220221191520450.png","hash":"01c25a4a4cab7b0770632d0a53876f4fbbf9da3b","modified":1677930581345},{"_id":"public/2022/02/22/dfg/dfg.assets/image-20220222112450707.png","hash":"03e0f078f1c4645a9a54cc1cd7e6055bf2ef83c1","modified":1677930581345},{"_id":"public/2022/02/22/dfg/dfg.assets/image-20220222113121499.png","hash":"393a496816c38e068c27766efbc6ce9beef52ea2","modified":1677930581345},{"_id":"public/2022/02/22/dfg/dfg.assets/image-20220222110826232.png","hash":"6b84454a1b2befbf3167b59a467e16e119c26da7","modified":1677930581345},{"_id":"public/2021/06/20/c2dll/c2dll.assets/image-20210619150139149-164561450930214.png","hash":"dd156ee11ef90eaac7fc3f9d02f6884e8f364c61","modified":1677930581345},{"_id":"public/2022/02/22/dfg/dfg.assets/image-20220222152208862.png","hash":"7612d8fcad59978804a3e6e935cefc602738e31d","modified":1677930581345},{"_id":"public/2022/02/22/dfg/dfg.assets/image-20220222195328619.png","hash":"0562f60cde3e6e75b822a3396e86a3bdc2302dd8","modified":1677930581345},{"_id":"public/2022/02/22/dfg/dfg.assets/image-20220222152902061.png","hash":"fb7177b2f6c312d2747d7fef0b74ceee9f784d31","modified":1677930581345},{"_id":"public/2021/12/06/program-synthesis/program-synthesis.assets/image-20211224203951802.png","hash":"db2481bf9407e32af99ec6fba5c71d6661770e6b","modified":1677930581345},{"_id":"public/2021/12/06/program-synthesis/program-synthesis.assets/image-20211225085504762.png","hash":"8188acd9e37dcba9b43b6a490ce4acff5961ce2d","modified":1677930581345},{"_id":"public/2021/12/06/program-synthesis/program-synthesis.assets/image-20211224205920700.png","hash":"5f12690cf1c65939328d035681a3dbddb96e6684","modified":1677930581345},{"_id":"public/2021/12/06/program-synthesis/program-synthesis.assets/image-20211224202523935.png","hash":"8b366f7a422c14779fb3364bf7410d0e559e3961","modified":1677930581345},{"_id":"public/2021/12/06/program-synthesis/program-synthesis.assets/image-20211225101503380-16403986033541.png","hash":"9a2395e726baf9880480b87b2ce7356394e44a1d","modified":1677930581345},{"_id":"public/2021/12/06/program-synthesis/program-synthesis.assets/image-20211226204335258.png","hash":"c094e759acc570e388019eacabc344331ac787d5","modified":1677930581345},{"_id":"public/2021/12/06/program-synthesis/program-synthesis.assets/image-20211226204452516.png","hash":"2b91f87dda7d7c0e10e436c5910b68dced3c76fe","modified":1677930581345},{"_id":"public/2021/12/06/program-synthesis/program-synthesis.assets/image-20211226205016145.png","hash":"982c020243d296852ebb7365ac384310819e901d","modified":1677930581345},{"_id":"public/2021/06/25/where-s-crypto/where-s-crypto.assets/image-20210624104523602.png","hash":"786cd77bc578db61e2c4a3583fb7889f5b0c3c44","modified":1677930581345},{"_id":"public/2021/06/25/where-s-crypto/where-s-crypto.assets/image-20210624114508898.png","hash":"45acadd5a6fced73c07c6af974552f2029316ab6","modified":1677930581345},{"_id":"public/2021/06/25/where-s-crypto/where-s-crypto.assets/image-20210624154904447.png","hash":"57d6f98bf336489b5bd9ab798e4d27c276bc3645","modified":1677930581345},{"_id":"public/2021/06/25/where-s-crypto/where-s-crypto.assets/image-20210624154848633.png","hash":"ee9e75a7075fc3e25a7b0de978a11418d9d29bf1","modified":1677930581345},{"_id":"public/2021/06/25/where-s-crypto/where-s-crypto.assets/image-20210624171324978.png","hash":"f03024b92a1031e8be3effe0513c3787ce5741d7","modified":1677930581345},{"_id":"public/2021/06/25/where-s-crypto/where-s-crypto.assets/image-20210624174324222.png","hash":"b361aba5a460f75850b548559c0d23d00641d8cf","modified":1677930581345},{"_id":"public/2021/06/25/where-s-crypto/where-s-crypto.assets/image-20210624174209159.png","hash":"c753d8443c2f87696ef69153a8151b4c3f2f074c","modified":1677930581345},{"_id":"public/2021/06/25/where-s-crypto/where-s-crypto.assets/image-20210624174908504.png","hash":"eefe5e6a2a337ec8b878c007a0236fecec59135f","modified":1677930581345},{"_id":"public/2021/06/25/where-s-crypto/where-s-crypto.assets/image-20210624202747254.png","hash":"96700bbac32cb721bebfd1631c5b41b494b21e3e","modified":1677930581345},{"_id":"public/2021/06/25/where-s-crypto/where-s-crypto.assets/image-20210624203559676.png","hash":"e6063178d9c580f4fb3a914cbec1a7d953f56f21","modified":1677930581345},{"_id":"public/2021/06/25/where-s-crypto/where-s-crypto.assets/image-20210624171314309.png","hash":"f86634e43cd3a725012ea4bb187279b7ad74568b","modified":1677930581345},{"_id":"public/2021/06/25/where-s-crypto/where-s-crypto.assets/image-20210624231925380.png","hash":"176c3903d0c32f537f318de67d85ecd785ecef33","modified":1677930581345},{"_id":"public/2021/06/25/where-s-crypto/where-s-crypto.assets/image-20210624225715291.png","hash":"a3431060e6df6a8d8ff0774c33e54cc3386d663a","modified":1677930581345},{"_id":"public/2021/06/25/where-s-crypto/where-s-crypto.assets/image-20210625132532624.png","hash":"5c3ff0e2a62a008997ba5eb84df4b55647db7acd","modified":1677930581345},{"_id":"public/2021/06/25/where-s-crypto/where-s-crypto.assets/image-20210625125821055.png","hash":"c1845d7f647a88a7647ba376bc93809a2fa0594a","modified":1677930581345},{"_id":"public/2021/06/25/where-s-crypto/where-s-crypto.assets/image-20210625132545137.png","hash":"1accff88b6799c466f00adc6b0b039fe7810cd53","modified":1677930581345},{"_id":"public/2021/06/25/where-s-crypto/where-s-crypto.assets/image-20210625132559544.png","hash":"9c3a413337efc4b67fcb447c03cadb9823701797","modified":1677930581345},{"_id":"public/2021/06/25/where-s-crypto/where-s-crypto.assets/image-20210625132713995.png","hash":"6c6c27baf142dc186af065e282049756ba28ebdf","modified":1677930581345},{"_id":"public/2022/01/23/AES/AES.assets/image-20220118160943225.png","hash":"42fcd14b062d93c063ec4768e491e62aef182a6c","modified":1677930581345},{"_id":"public/2022/01/23/AES/AES.assets/image-20220118161222708.png","hash":"a96e5f9e2280379e906ca1d4cdf3356f8fc790fa","modified":1677930581345},{"_id":"public/2022/01/24/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/QNy9EWc7K4enJGu.jpg","hash":"0b4e45eda8d27b4873179f591cb418e6b3e0f234","modified":1677930581345},{"_id":"public/2022/01/24/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211107144221290.png","hash":"13a4f5f036fcb06d5fed70591ae12c788b74a1b1","modified":1677930581345},{"_id":"public/2022/01/24/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211115232410660.png","hash":"4d12ba69c47925bec759e187ad2da2c90747ea42","modified":1677930581345},{"_id":"public/2022/01/24/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/t0189dac1c8ab2412c8.jpg","hash":"9c79e3be8e096b7ec30f81aeb856713d24dcfbf0","modified":1677930581345},{"_id":"public/2022/01/14/DES/DES.assets/image-20220112135026479.png","hash":"55f7f64ae428916634b722d1b592eda5e3944977","modified":1677930581345},{"_id":"public/2021/12/03/aligot/aligot.assets/image-20211128145601514.png","hash":"4ea334c81a066c14502a52e280b0a0c1933687af","modified":1677930581345},{"_id":"public/2021/12/03/aligot/aligot.assets/image-20211202184802760.png","hash":"8ad16e3d830307fdc5c6d2affffff4f8e0d22e79","modified":1677930581345},{"_id":"public/2021/12/03/aligot/aligot.assets/image-20211202185040006.png","hash":"3dae881b377d28d34ad8208407edf162d9d2093f","modified":1677930581345},{"_id":"public/2022/02/24/lfsr/lfsr.assets/image-20220224153901121.png","hash":"1cc2eee8abe7e62670434c0e19f2aa6d5dabfdbb","modified":1677930581345},{"_id":"public/2021/06/20/c2dll/c2dll.assets/image-20210616195848892-16456145093001.png","hash":"2d71ee55905fbe3443c841226af14a65cda8037c","modified":1677930581345},{"_id":"public/2022/02/23/sha1/sha1.assets/image-20220223200537067.png","hash":"309e6eeb71d7ecd522dba11bfb60a9b0cf43222c","modified":1677930581345},{"_id":"public/2022/02/23/sha1/sha1.assets/image-20220223191837393.png","hash":"394ec5ff39d6b8f905d9a91e3978c6af966e7d4a","modified":1677930581345},{"_id":"public/2022/02/23/sha1/sha1.assets/image-20220223213829056.png","hash":"85f6fc1c7c92cb74145ce2cd019e8e5d4c40ba5e","modified":1677930581345},{"_id":"public/2022/02/22/dfg/dfg.assets/image-20220218195458486.png","hash":"e41a093586db2c7083185823ac7072d647a1a69e","modified":1677930581345},{"_id":"public/2022/02/22/dfg/dfg.assets/image-20220222195734989.png","hash":"7f6fec2dfeb031921a48bacf094cc11dcd53fa3b","modified":1677930581345},{"_id":"public/2021/12/06/program-synthesis/program-synthesis.assets/image-20211223232437622.png","hash":"20f6b7421014af2c40d5f9cc35a46a7f0981de2f","modified":1677930581345},{"_id":"public/2021/12/06/program-synthesis/program-synthesis.assets/image-20211223232509638.png","hash":"ff228c743eae74c04dabe4a1b93c714874690b9a","modified":1677930581345},{"_id":"public/2021/12/06/program-synthesis/program-synthesis.assets/image-20211223232459726.png","hash":"4578b971ed19352def57e942e10c0cb43c76f10b","modified":1677930581345},{"_id":"public/2021/12/06/program-synthesis/program-synthesis.assets/image-20211224200346689.png","hash":"4fbd30679b3c70807de0215992f999f9c2b6868e","modified":1677930581345},{"_id":"public/2021/12/06/program-synthesis/program-synthesis.assets/image-20211224200549972.png","hash":"8a8bd5b0600884d03654e04a898dc6c634c1fd93","modified":1677930581345},{"_id":"public/2021/12/06/program-synthesis/program-synthesis.assets/image-20211225081537462.png","hash":"a6d40f7f439d33ea14d019a8f50ded487d85e10f","modified":1677930581345},{"_id":"public/2021/12/06/program-synthesis/program-synthesis.assets/image-20211225093440256.png","hash":"74a95db7b0394affa687892a541da7a27fa80c72","modified":1677930581345},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1677930581345},{"_id":"public/js/utils.js","hash":"3ee4bd9071dc6e854ffa33964f3a8da2ee2a8409","modified":1677930581345},{"_id":"public/js/search/local-search.js","hash":"72911c7b42e0174a979c09ead3f42ee24136feae","modified":1677930581345},{"_id":"public/js/search/algolia.js","hash":"aaa5e44125dcf321866bc2355a73773b11db8c9c","modified":1677930581345},{"_id":"public/css/index.css","hash":"65d60425ab32496f66998a764ef79a530e5e23b9","modified":1677930581345},{"_id":"public/js/main.js","hash":"1254dca2c02b3389ec0434cdd2728fdea4ae0216","modified":1677930581345},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1677930581345},{"_id":"public/2021/12/06/program-synthesis/program-synthesis.assets/image-20211225095033519.png","hash":"ab9c26f3d3740172f3044be89285ac8720e14605","modified":1677930581345},{"_id":"public/2021/12/06/program-synthesis/program-synthesis.assets/image-20211225101633374.png","hash":"2ebee6a92e324bcb4025b124dcd209a316b7fa59","modified":1677930581345},{"_id":"public/2021/12/06/program-synthesis/program-synthesis.assets/image-20211226211621715.png","hash":"d808f8b3b41f4ba2abcdbd19d8c77df1eac41d9e","modified":1677930581345},{"_id":"public/2021/06/25/where-s-crypto/where-s-crypto.assets/image-20210601155403815.png","hash":"b3c24b94ac2ce07a66ddfb1778395b15c76f6142","modified":1677930581345},{"_id":"public/2021/06/25/where-s-crypto/where-s-crypto.assets/image-20210623221842089.png","hash":"611da6e6b24dad06dab2ee8912aa1be33de3c10b","modified":1677930581345},{"_id":"public/2021/06/25/where-s-crypto/where-s-crypto.assets/image-20210624093611741.png","hash":"cd2a58083cd6be8c3268d12c3bc4ed07d54cfeeb","modified":1677930581345},{"_id":"public/2021/06/25/where-s-crypto/where-s-crypto.assets/image-20210624202125509.png","hash":"01c1932bd9281e70f79143537c5b3ae014f829b5","modified":1677930581345},{"_id":"public/2021/06/25/where-s-crypto/where-s-crypto.assets/image-20210625124717799.png","hash":"6ee7b78f70c194278a4935c6fd83a4d8a7a7ab5f","modified":1677930581345},{"_id":"public/image/m4tsuri.jpg","hash":"d32b5ffdb25ef951cce077a2dc318ea766420ed5","modified":1677930581345},{"_id":"public/2022/01/24/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/t01dd9c90c1ecde8471.jpg","hash":"03a5c8dfc84bff2de292a96f278a86f3c0d6994b","modified":1677930581345},{"_id":"public/2021/12/03/aligot/aligot.assets/image-20211202210729211.png","hash":"f55274f88d84c14daa708b52bf39c0cdd2a82278","modified":1677930581345},{"_id":"public/2022/01/28/md5/md5.assets/image-20220127171124399.png","hash":"b3cef6b4a8f4243c61112a0b29264bf480a91ae8","modified":1677930581345},{"_id":"public/2022/02/22/dfg/dfg.assets/image-20220222143759387.png","hash":"383e8f7de71c350fb09bad75fc39c2a342cd812c","modified":1677930581345},{"_id":"public/2022/02/22/dfg/dfg.assets/image-20220222141947171.png","hash":"6930b3bb4ca017a5a64b3e8d3cc3941ee04ad6f5","modified":1677930581345},{"_id":"public/2021/06/25/where-s-crypto/where-s-crypto.assets/image-20210624231520804.png","hash":"15711986baafb0d830aca8747c961693ffa2ed55","modified":1677930581345},{"_id":"public/2021/06/25/where-s-crypto/where-s-crypto.assets/image-20210625112903207.png","hash":"bba5efd6eddedaee4258b315ad214c3e18754dd0","modified":1677930581345},{"_id":"public/2021/06/25/where-s-crypto/where-s-crypto.assets/image-20210624230418524.png","hash":"96871eb438e970cb44fe2679ca43cd8fa312a311","modified":1677930581345},{"_id":"public/2022/01/23/AES/AES.assets/image-20220118151325836.png","hash":"cd5debeeb30ecdb8b3e0fb4803b481465fecea07","modified":1677930581345},{"_id":"public/2022/01/23/AES/AES.assets/image-20220118151417023.png","hash":"2b9d14fda4b387c8104f14da2957d807d561cefa","modified":1677930581345},{"_id":"public/2022/02/24/lfsr/lfsr.assets/image-20220217205141000.png","hash":"17b02d748d2c4dd78e76d0919c078918b31e7d6b","modified":1677930581345},{"_id":"public/2021/12/06/program-synthesis/program-synthesis.assets/image-20211224205908008.png","hash":"aa170db92835f3c4a2fdf528e5341f20f1b45198","modified":1677930581345},{"_id":"public/2022/01/14/DES/DES.assets/image-20220112114938574.png","hash":"d22ca4cb12a8a236f8f03539b756ccaab0c25bde","modified":1677930581345},{"_id":"public/2022/01/28/md5/md5.assets/image-20220127171654001.png","hash":"fc01bba9eba1f43c1ee549a112911d5b0208a0ee","modified":1677930581345},{"_id":"public/2021/12/06/program-synthesis/program-synthesis.assets/image-20220224115439047.png","hash":"d4273775df9923407594217425f80a44cd8d1752","modified":1677930581345},{"_id":"public/2022/01/23/AES/AES.assets/aes_details.jpg","hash":"b8f710940e8ac3c2f42b1d95a3574fe917bcddbf","modified":1677930581345}],"Category":[{"name":"CryptoDetect","_id":"cletwjoht0007ri3sbfx533qy"},{"name":"crypto","_id":"cletwjohv000bri3segmra3zh"},{"name":"algorithm","parent":"cletwjoht0007ri3sbfx533qy","_id":"cletwjohv000dri3s9quc42zx"},{"name":"ctf","parent":"cletwjohv000bri3segmra3zh","_id":"cletwjohv000lri3s1poqdjgg"},{"name":"paper","parent":"cletwjoht0007ri3sbfx533qy","_id":"cletwjohy0015ri3scm3yeqw6"},{"name":"reverse","_id":"cletwjohz0019ri3s10qp9xa0"},{"name":"program synthesis","_id":"cletwjoi2001ori3s9f7883pj"},{"name":"paper","parent":"cletwjoi2001ori3s9f7883pj","_id":"cletwjoi2001wri3s773s9rw8"}],"Data":[{"_id":"about","data":{"class":{"class_name":"about","link_list":{"-1":{"name":"Scorpion","avatar":"/image/avatar.jpg","link":null,"descr":"�����ƹ������ë��̨��ɢ�򣬻�ѩ���������ݣ����ֲ�Ƭ����Ƭ�赸��Ƶ��ҵ����Ӱ���Ǻð�ȫ��"}}}}},{"_id":"link","data":{"class":{"class_name":"友情链接","link_list":{"-1":{"name":"M4tsuri","link":"https://M4tsuri.io","avatar":"/image/m4tsuri.jpg","descr":"pwn,blockchain"}}}}}],"Page":[{"title":"about","date":"2022-01-23T16:00:00.000Z","type":"about","comments":1,"description":null,"top_img":null,"mathjax":null,"katex":null,"_content":"\n# about\n\n不会打乒乓球羽毛球台球散打，滑雪滑冰滑滑梯，看恐怖片悬疑片舞蹈视频的业余摄影不是好安全狗\n\n\n\n**wx** : scorpionbelle\n\n`欢迎约拍/交流技术`\n\n\n\n\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-01-24 00:00:00\ntype: \"about\"\ncomments:\ndescription:\ntop_img:\nmathjax:\nkatex:\n---\n\n# about\n\n不会打乒乓球羽毛球台球散打，滑雪滑冰滑滑梯，看恐怖片悬疑片舞蹈视频的业余摄影不是好安全狗\n\n\n\n**wx** : scorpionbelle\n\n`欢迎约拍/交流技术`\n\n\n\n\n\n","updated":"2022-01-27T02:03:14.000Z","path":"about/index.html","layout":"page","_id":"cletwjohm0000ri3s1b797xuq","content":"<h1>about</h1>\n<p>不会打乒乓球羽毛球台球散打，滑雪滑冰滑滑梯，看恐怖片悬疑片舞蹈视频的业余摄影不是好安全狗</p>\n<p><strong>wx</strong> : scorpionbelle</p>\n<p><code>欢迎约拍/交流技术</code></p>\n","site":{"data":{"about":{"class":{"class_name":"about","link_list":{"-1":{"name":"Scorpion","avatar":"/image/avatar.jpg","link":null,"descr":"�����ƹ������ë��̨��ɢ�򣬻�ѩ���������ݣ����ֲ�Ƭ����Ƭ�赸��Ƶ��ҵ����Ӱ���Ǻð�ȫ��"}}}},"link":{"class":{"class_name":"友情链接","link_list":{"-1":{"name":"M4tsuri","link":"https://M4tsuri.io","avatar":"/image/m4tsuri.jpg","descr":"pwn,blockchain"}}}}}},"cover":"/image/star.jpg","excerpt":"","more":"<h1>about</h1>\n<p>不会打乒乓球羽毛球台球散打，滑雪滑冰滑滑梯，看恐怖片悬疑片舞蹈视频的业余摄影不是好安全狗</p>\n<p><strong>wx</strong> : scorpionbelle</p>\n<p><code>欢迎约拍/交流技术</code></p>\n"},{"type":"link","comments":1,"top_img":"/image/back.jpg","title":"友情链接","date":"2022-01-23T07:55:00.000Z","description":null,"mathjax":null,"katex":null,"_content":"","source":"link/index.md","raw":"---\ntype: 'link'\ncomments: (是否需要显示评论，默认true)\ntop_img: /image/back.jpg\ntitle: 友情链接\ndate: 2022-01-23 15:55:00\ndescription:\nmathjax:\nkatex:\n---\n","updated":"2022-01-23T19:09:42.000Z","path":"link/index.html","layout":"page","_id":"cletwjohr0002ri3sdda45jpl","content":"","site":{"data":{"about":{"class":{"class_name":"about","link_list":{"-1":{"name":"Scorpion","avatar":"/image/avatar.jpg","link":null,"descr":"�����ƹ������ë��̨��ɢ�򣬻�ѩ���������ݣ����ֲ�Ƭ����Ƭ�赸��Ƶ��ҵ����Ӱ���Ǻð�ȫ��"}}}},"link":{"class":{"class_name":"友情链接","link_list":{"-1":{"name":"M4tsuri","link":"https://M4tsuri.io","avatar":"/image/m4tsuri.jpg","descr":"pwn,blockchain"}}}}}},"cover":"/image/star.jpg","excerpt":"","more":""},{"type":"categories","comments":1,"top_img":"/image/back.jpg","title":"categories","date":"2022-01-23T07:43:50.000Z","description":null,"mathjax":null,"katex":null,"_content":"","source":"categories/index.md","raw":"---\ntype: 'categories'\ncomments: (是否需要显示评论，默认true)\ntop_img: /image/back.jpg\ntitle: categories\ndate: 2022-01-23 15:43:50\ndescription:\nmathjax:\nkatex:\n---\n","updated":"2022-01-22T23:28:32.000Z","path":"categories/index.html","layout":"page","_id":"cletwjoht0005ri3s66567q7d","content":"","site":{"data":{"about":{"class":{"class_name":"about","link_list":{"-1":{"name":"Scorpion","avatar":"/image/avatar.jpg","link":null,"descr":"�����ƹ������ë��̨��ɢ�򣬻�ѩ���������ݣ����ֲ�Ƭ����Ƭ�赸��Ƶ��ҵ����Ӱ���Ǻð�ȫ��"}}}},"link":{"class":{"class_name":"友情链接","link_list":{"-1":{"name":"M4tsuri","link":"https://M4tsuri.io","avatar":"/image/m4tsuri.jpg","descr":"pwn,blockchain"}}}}}},"cover":"/image/star.jpg","excerpt":"","more":""},{"type":"tags","comments":1,"top_img":"/image/back.jpg","title":"tags","date":"2022-01-23T07:43:33.000Z","description":null,"mathjax":null,"katex":null,"_content":"","source":"tags/index.md","raw":"---\ntype: 'tags'\ncomments: (是否需要显示评论，默认true)\ntop_img: /image/back.jpg\ntitle: tags\ndate: 2022-01-23 15:43:33\ndescription:\nmathjax:\nkatex:\n---\n","updated":"2022-01-22T23:27:54.000Z","path":"tags/index.html","layout":"page","_id":"cletwjohu0008ri3sgm5ogopp","content":"","site":{"data":{"about":{"class":{"class_name":"about","link_list":{"-1":{"name":"Scorpion","avatar":"/image/avatar.jpg","link":null,"descr":"�����ƹ������ë��̨��ɢ�򣬻�ѩ���������ݣ����ֲ�Ƭ����Ƭ�赸��Ƶ��ҵ����Ӱ���Ǻð�ȫ��"}}}},"link":{"class":{"class_name":"友情链接","link_list":{"-1":{"name":"M4tsuri","link":"https://M4tsuri.io","avatar":"/image/m4tsuri.jpg","descr":"pwn,blockchain"}}}}}},"cover":"/image/star.jpg","excerpt":"","more":""}],"Post":[{"title":"AES","date":"2022-01-23T11:00:00.000Z","keywords":["AES"],"description":null,"top_img":null,"comments":1,"cover":"https://scorpionre.github.io/2022/01/23/AES/AES.assets/aes_details.jpg","toc":null,"toc_number":null,"copyright":null,"mathjax":null,"katex":true,"hide":null,"_content":"\n# AES\n\n### 算法\n\n- 输入：128bit\n\n- 输出：128bit\n\n- 密钥长度与迭代轮数有关\n\n  ![image-20220115160053585](AES.assets/image-20220115160053585.png)\n\n加解密流程：\n\n\n\n![img](AES.assets/aes_details.jpg)每一轮主要包括：\n\n- 轮密钥加，AddRoundKey：将128位轮密钥Ki同状态矩阵中的数据进行逐位异或操作\n- 字节替换，SubBytes：查表S盒。把字节的高4位作为行值（0），低4位作为列值（8），取出S盒或者逆S盒中对应的元素（30）作为输出\n- 行移位，ShiftRows：简单的左循环移位。当密钥长度为128比特时，状态矩阵的第0行左移0字节，第1行左移1字节，第2行左移2字节，第3行左移3字节\n- 列混淆，MixColumns：经行移位后的状态矩阵与固定的矩阵相乘，得到混淆后的状态矩阵。其中，矩阵元素的乘法和加法都是定义在基于GF(2^8)上的二元运算。\n\n$$\nb(x) = a(x)c(x) mod (x^4+1)\n\\\\ 其中c(x) = 03x^3+01x^2+01x+02\n\\\\ c(x)与x^4+1互素，保证存在逆多项式d(x)，满足c(x)d(x)=1 mod (x^4+1 )。\n\\\\只有逆多项式d(x)存在，才能正确进行解密\n$$\n\n密钥扩展：\n\n1. 首先将初始密钥输入到一个4*4的状态矩阵，每一列的4个字节组成一个字，依次为w[0],w[1],w[2],w[3]\n\n2. 接着，对W数组扩充40个新列，构成总共44列的扩展密钥数组。新列i的产生方式如下\n   $$\n   i不是4的倍数\n   \\\\ w[i] = w[i-4] \\ xor\\ w[i-1]\n   \\\\i是4的倍数\n   \\\\ w[i] = w[i-4]\\ xor \\ T(w[i-1])\n   $$\n   其中函数T由以下三部分组成：\n\n   - 字循环：将1个字中的4个字节循环左移1个字节\n   - 字节代换：对字循环的结果使用S盒进行字节代换\n   - 轮常量异或：将前两步的结果与轮常量Rcon[j]异或，其中j表示轮数\n\n   ![image-20220118145857240](AES.assets/image-20220118145857240.png)\n\n比如上述初始密钥\n$$\nw[0]:2b \\ 7e \\ 15 \\ 16\n\\\\ w[1]:28 \\ ae \\ d2 \\ a6\n\\\\ w[2]: ab \\ f7 \\ 15 \\ 88\n\\\\ w[3]: 09 \\ cf \\ 4f \\ 3c\n\\\\求扩展的第一轮的子密钥w[4],w[5],w[6],w[7]\n\\\\w[4] = w[0] xor T(w[3])\n\\\\ T(w[3])计算过程如下：\n\\\\1. w[3]循环左移1个字节得到cf \\ 4f \\ 3c \\ 09\n\\\\2.字节代换得到8a \\ 84 \\ eb \\ 01\n\\\\3.与轮常量异或再与w[0]异或最后得到a0 \\ fa \\ fe \\ 17\n$$\n\n\n### signature\n\nsignature定义用到快速软件实现——查表法。将行移位、列混合和S盒结合得到4个4bytes*256项的查找表（T盒）。\n\n列变换中，\n\n![image-20220118160907434](AES.assets/image-20220118160907434.png)\n\n将其按列向量拆开，对于每一列，都有：\n\n![image-20220118160943225](AES.assets/image-20220118160943225.png)\n\n所以得到：其中Wk0为本轮子密钥ki中对应的4字节\n\n![image-20220118161013057](AES.assets/image-20220118161013057.png)\n\nT盒定义为\n\n![image-20220118161112688](AES.assets/image-20220118161112688.png)\n\n所以轮操作变为：\n\n![image-20220118161222708](AES.assets/image-20220118161222708.png)\n\n根据上述理论，预定义的结构如下\n\n![image-20220118151325836](AES.assets/image-20220118151325836.png)\n\n![image-20220118151417023](AES.assets/image-20220118151417023.png)\n\n### 测试\n\nAES_encrypt\n\n```c\nvoid AES_encrypt(const unsigned char *in, unsigned char *out,\n                 const AES_KEY *key) {\n\n    const u32 *rk;\n    u32 s0, s1, s2, s3, t0, t1, t2, t3;\n\n#ifndef FULL_UNROLL\n    int r;\n#endif /* ?FULL_UNROLL */\n\n    assert(in && out && key);\n    rk = key->rd_key;\n    \n    /*\n     * map byte array block to cipher state\n     * and add initial round key:\n     */\n    s0 = GETU32(in     ) ^ rk[0];\n    s1 = GETU32(in +  4) ^ rk[1];\n    s2 = GETU32(in +  8) ^ rk[2];\n    s3 = GETU32(in + 12) ^ rk[3];\n\n#ifdef FULL_UNROLL\n    /* round 1: */\n    t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >>  8) & 0xff] ^ Te3[s3 & 0xff] ^ rk[ 4];\n    t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >>  8) & 0xff] ^ Te3[s0 & 0xff] ^ rk[ 5];\n    t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >>  8) & 0xff] ^ Te3[s1 & 0xff] ^ rk[ 6];\n    t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >>  8) & 0xff] ^ Te3[s2 & 0xff] ^ rk[ 7];\n    /* round 2: */\n    s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >>  8) & 0xff] ^ Te3[t3 & 0xff] ^ rk[ 8];\n    s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >>  8) & 0xff] ^ Te3[t0 & 0xff] ^ rk[ 9];\n    s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >>  8) & 0xff] ^ Te3[t1 & 0xff] ^ rk[10];\n    s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >>  8) & 0xff] ^ Te3[t2 & 0xff] ^ rk[11];\n    /* round 3: */\n    t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >>  8) & 0xff] ^ Te3[s3 & 0xff] ^ rk[12];\n    t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >>  8) & 0xff] ^ Te3[s0 & 0xff] ^ rk[13];\n    t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >>  8) & 0xff] ^ Te3[s1 & 0xff] ^ rk[14];\n    t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >>  8) & 0xff] ^ Te3[s2 & 0xff] ^ rk[15];\n    /* round 4: */\n    s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >>  8) & 0xff] ^ Te3[t3 & 0xff] ^ rk[16];\n    s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >>  8) & 0xff] ^ Te3[t0 & 0xff] ^ rk[17];\n    s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >>  8) & 0xff] ^ Te3[t1 & 0xff] ^ rk[18];\n    s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >>  8) & 0xff] ^ Te3[t2 & 0xff] ^ rk[19];\n    /* round 5: */\n    t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >>  8) & 0xff] ^ Te3[s3 & 0xff] ^ rk[20];\n    t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >>  8) & 0xff] ^ Te3[s0 & 0xff] ^ rk[21];\n    t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >>  8) & 0xff] ^ Te3[s1 & 0xff] ^ rk[22];\n    t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >>  8) & 0xff] ^ Te3[s2 & 0xff] ^ rk[23];\n    /* round 6: */\n    s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >>  8) & 0xff] ^ Te3[t3 & 0xff] ^ rk[24];\n    s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >>  8) & 0xff] ^ Te3[t0 & 0xff] ^ rk[25];\n    s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >>  8) & 0xff] ^ Te3[t1 & 0xff] ^ rk[26];\n    s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >>  8) & 0xff] ^ Te3[t2 & 0xff] ^ rk[27];\n    /* round 7: */\n    t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >>  8) & 0xff] ^ Te3[s3 & 0xff] ^ rk[28];\n    t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >>  8) & 0xff] ^ Te3[s0 & 0xff] ^ rk[29];\n    t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >>  8) & 0xff] ^ Te3[s1 & 0xff] ^ rk[30];\n    t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >>  8) & 0xff] ^ Te3[s2 & 0xff] ^ rk[31];\n    /* round 8: */\n    s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >>  8) & 0xff] ^ Te3[t3 & 0xff] ^ rk[32];\n    s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >>  8) & 0xff] ^ Te3[t0 & 0xff] ^ rk[33];\n    s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >>  8) & 0xff] ^ Te3[t1 & 0xff] ^ rk[34];\n    s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >>  8) & 0xff] ^ Te3[t2 & 0xff] ^ rk[35];\n    /* round 9: */\n    t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >>  8) & 0xff] ^ Te3[s3 & 0xff] ^ rk[36];\n    t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >>  8) & 0xff] ^ Te3[s0 & 0xff] ^ rk[37];\n    t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >>  8) & 0xff] ^ Te3[s1 & 0xff] ^ rk[38];\n    t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >>  8) & 0xff] ^ Te3[s2 & 0xff] ^ rk[39];\n    if (key->rounds > 10) {\n        /* round 10: */\n        s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >>  8) & 0xff] ^ Te3[t3 & 0xff] ^ rk[40];\n        s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >>  8) & 0xff] ^ Te3[t0 & 0xff] ^ rk[41];\n        s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >>  8) & 0xff] ^ Te3[t1 & 0xff] ^ rk[42];\n        s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >>  8) & 0xff] ^ Te3[t2 & 0xff] ^ rk[43];\n        /* round 11: */\n        t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >>  8) & 0xff] ^ Te3[s3 & 0xff] ^ rk[44];\n        t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >>  8) & 0xff] ^ Te3[s0 & 0xff] ^ rk[45];\n        t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >>  8) & 0xff] ^ Te3[s1 & 0xff] ^ rk[46];\n        t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >>  8) & 0xff] ^ Te3[s2 & 0xff] ^ rk[47];\n        if (key->rounds > 12) {\n            /* round 12: */\n            s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >>  8) & 0xff] ^ Te3[t3 & 0xff] ^ rk[48];\n            s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >>  8) & 0xff] ^ Te3[t0 & 0xff] ^ rk[49];\n            s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >>  8) & 0xff] ^ Te3[t1 & 0xff] ^ rk[50];\n            s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >>  8) & 0xff] ^ Te3[t2 & 0xff] ^ rk[51];\n            /* round 13: */\n            t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >>  8) & 0xff] ^ Te3[s3 & 0xff] ^ rk[52];\n            t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >>  8) & 0xff] ^ Te3[s0 & 0xff] ^ rk[53];\n            t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >>  8) & 0xff] ^ Te3[s1 & 0xff] ^ rk[54];\n            t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >>  8) & 0xff] ^ Te3[s2 & 0xff] ^ rk[55];\n        }\n    }\n    rk += key->rounds << 2;\n#else  /* !FULL_UNROLL */\n    /*\n     * Nr - 1 full rounds:\n     */\n    r = key->rounds >> 1;\n    for (;;) {\n        t0 =\n            Te0[(s0 >> 24)       ] ^\n            Te1[(s1 >> 16) & 0xff] ^\n            Te2[(s2 >>  8) & 0xff] ^\n            Te3[(s3      ) & 0xff] ^\n            rk[4];\n        t1 =\n            Te0[(s1 >> 24)       ] ^\n            Te1[(s2 >> 16) & 0xff] ^\n            Te2[(s3 >>  8) & 0xff] ^\n            Te3[(s0      ) & 0xff] ^\n            rk[5];\n        t2 =\n            Te0[(s2 >> 24)       ] ^\n            Te1[(s3 >> 16) & 0xff] ^\n            Te2[(s0 >>  8) & 0xff] ^\n            Te3[(s1      ) & 0xff] ^\n            rk[6];\n        t3 =\n            Te0[(s3 >> 24)       ] ^\n            Te1[(s0 >> 16) & 0xff] ^\n            Te2[(s1 >>  8) & 0xff] ^\n            Te3[(s2      ) & 0xff] ^\n            rk[7];\n\n        rk += 8;\n        if (--r == 0) {\n            break;\n        }\n    \n        s0 =\n            Te0[(t0 >> 24)       ] ^\n            Te1[(t1 >> 16) & 0xff] ^\n            Te2[(t2 >>  8) & 0xff] ^\n            Te3[(t3      ) & 0xff] ^\n            rk[0];\n        s1 =\n            Te0[(t1 >> 24)       ] ^\n            Te1[(t2 >> 16) & 0xff] ^\n            Te2[(t3 >>  8) & 0xff] ^\n            Te3[(t0      ) & 0xff] ^\n            rk[1];\n        s2 =\n            Te0[(t2 >> 24)       ] ^\n            Te1[(t3 >> 16) & 0xff] ^\n            Te2[(t0 >>  8) & 0xff] ^\n            Te3[(t1      ) & 0xff] ^\n            rk[2];\n        s3 =\n            Te0[(t3 >> 24)       ] ^\n            Te1[(t0 >> 16) & 0xff] ^\n            Te2[(t1 >>  8) & 0xff] ^\n            Te3[(t2      ) & 0xff] ^\n            rk[3];\n    }\n\n#endif /* ?FULL_UNROLL */\n    /*\n\n   * apply last round and\n      map cipher state to byte array block:\n          */\n         s0 =\n     (Te2[(t0 >> 24)       ] & 0xff000000) ^\n     (Te3[(t1 >> 16) & 0xff] & 0x00ff0000) ^\n     (Te0[(t2 >>  8) & 0xff] & 0x0000ff00) ^\n     (Te1[(t3      ) & 0xff] & 0x000000ff) ^\n     rk[0];\n         PUTU32(out     , s0);\n         s1 =\n     (Te2[(t1 >> 24)       ] & 0xff000000) ^\n     (Te3[(t2 >> 16) & 0xff] & 0x00ff0000) ^\n     (Te0[(t3 >>  8) & 0xff] & 0x0000ff00) ^\n     (Te1[(t0      ) & 0xff] & 0x000000ff) ^\n     rk[1];\n         PUTU32(out +  4, s1);\n         s2 =\n     (Te2[(t2 >> 24)       ] & 0xff000000) ^\n     (Te3[(t3 >> 16) & 0xff] & 0x00ff0000) ^\n     (Te0[(t0 >>  8) & 0xff] & 0x0000ff00) ^\n     (Te1[(t1      ) & 0xff] & 0x000000ff) ^\n     rk[2];\n         PUTU32(out +  8, s2);\n         s3 =\n     (Te2[(t3 >> 24)       ] & 0xff000000) ^\n     (Te3[(t0 >> 16) & 0xff] & 0x00ff0000) ^\n     (Te0[(t1 >>  8) & 0xff] & 0x0000ff00) ^\n     (Te1[(t2      ) & 0xff] & 0x000000ff) ^\n     rk[3];\n         PUTU32(out + 12, s3);\n     }\n```\n\n可以从图中很明显看出符合signature的特征\n\n![image-20220118172332974](AES.assets/image-20220118172332974.png)\n\n## \n","source":"_posts/AES.md","raw":"---\ntitle: AES\ndate: 2022-01-23 19:00:00\ntags: \n  - crypto\n  - algorithm\n  - CryptoDetect\ncategories:\n  - [CryptoDetect,algorithm]\nkeywords: \n\t- AES\ndescription:\ntop_img:\ncomments:\ncover: https://scorpionre.github.io/2022/01/23/AES/AES.assets/aes_details.jpg\ntoc:\ntoc_number:\ncopyright:\nmathjax:\nkatex: true\nhide:\n---\n\n# AES\n\n### 算法\n\n- 输入：128bit\n\n- 输出：128bit\n\n- 密钥长度与迭代轮数有关\n\n  ![image-20220115160053585](AES.assets/image-20220115160053585.png)\n\n加解密流程：\n\n\n\n![img](AES.assets/aes_details.jpg)每一轮主要包括：\n\n- 轮密钥加，AddRoundKey：将128位轮密钥Ki同状态矩阵中的数据进行逐位异或操作\n- 字节替换，SubBytes：查表S盒。把字节的高4位作为行值（0），低4位作为列值（8），取出S盒或者逆S盒中对应的元素（30）作为输出\n- 行移位，ShiftRows：简单的左循环移位。当密钥长度为128比特时，状态矩阵的第0行左移0字节，第1行左移1字节，第2行左移2字节，第3行左移3字节\n- 列混淆，MixColumns：经行移位后的状态矩阵与固定的矩阵相乘，得到混淆后的状态矩阵。其中，矩阵元素的乘法和加法都是定义在基于GF(2^8)上的二元运算。\n\n$$\nb(x) = a(x)c(x) mod (x^4+1)\n\\\\ 其中c(x) = 03x^3+01x^2+01x+02\n\\\\ c(x)与x^4+1互素，保证存在逆多项式d(x)，满足c(x)d(x)=1 mod (x^4+1 )。\n\\\\只有逆多项式d(x)存在，才能正确进行解密\n$$\n\n密钥扩展：\n\n1. 首先将初始密钥输入到一个4*4的状态矩阵，每一列的4个字节组成一个字，依次为w[0],w[1],w[2],w[3]\n\n2. 接着，对W数组扩充40个新列，构成总共44列的扩展密钥数组。新列i的产生方式如下\n   $$\n   i不是4的倍数\n   \\\\ w[i] = w[i-4] \\ xor\\ w[i-1]\n   \\\\i是4的倍数\n   \\\\ w[i] = w[i-4]\\ xor \\ T(w[i-1])\n   $$\n   其中函数T由以下三部分组成：\n\n   - 字循环：将1个字中的4个字节循环左移1个字节\n   - 字节代换：对字循环的结果使用S盒进行字节代换\n   - 轮常量异或：将前两步的结果与轮常量Rcon[j]异或，其中j表示轮数\n\n   ![image-20220118145857240](AES.assets/image-20220118145857240.png)\n\n比如上述初始密钥\n$$\nw[0]:2b \\ 7e \\ 15 \\ 16\n\\\\ w[1]:28 \\ ae \\ d2 \\ a6\n\\\\ w[2]: ab \\ f7 \\ 15 \\ 88\n\\\\ w[3]: 09 \\ cf \\ 4f \\ 3c\n\\\\求扩展的第一轮的子密钥w[4],w[5],w[6],w[7]\n\\\\w[4] = w[0] xor T(w[3])\n\\\\ T(w[3])计算过程如下：\n\\\\1. w[3]循环左移1个字节得到cf \\ 4f \\ 3c \\ 09\n\\\\2.字节代换得到8a \\ 84 \\ eb \\ 01\n\\\\3.与轮常量异或再与w[0]异或最后得到a0 \\ fa \\ fe \\ 17\n$$\n\n\n### signature\n\nsignature定义用到快速软件实现——查表法。将行移位、列混合和S盒结合得到4个4bytes*256项的查找表（T盒）。\n\n列变换中，\n\n![image-20220118160907434](AES.assets/image-20220118160907434.png)\n\n将其按列向量拆开，对于每一列，都有：\n\n![image-20220118160943225](AES.assets/image-20220118160943225.png)\n\n所以得到：其中Wk0为本轮子密钥ki中对应的4字节\n\n![image-20220118161013057](AES.assets/image-20220118161013057.png)\n\nT盒定义为\n\n![image-20220118161112688](AES.assets/image-20220118161112688.png)\n\n所以轮操作变为：\n\n![image-20220118161222708](AES.assets/image-20220118161222708.png)\n\n根据上述理论，预定义的结构如下\n\n![image-20220118151325836](AES.assets/image-20220118151325836.png)\n\n![image-20220118151417023](AES.assets/image-20220118151417023.png)\n\n### 测试\n\nAES_encrypt\n\n```c\nvoid AES_encrypt(const unsigned char *in, unsigned char *out,\n                 const AES_KEY *key) {\n\n    const u32 *rk;\n    u32 s0, s1, s2, s3, t0, t1, t2, t3;\n\n#ifndef FULL_UNROLL\n    int r;\n#endif /* ?FULL_UNROLL */\n\n    assert(in && out && key);\n    rk = key->rd_key;\n    \n    /*\n     * map byte array block to cipher state\n     * and add initial round key:\n     */\n    s0 = GETU32(in     ) ^ rk[0];\n    s1 = GETU32(in +  4) ^ rk[1];\n    s2 = GETU32(in +  8) ^ rk[2];\n    s3 = GETU32(in + 12) ^ rk[3];\n\n#ifdef FULL_UNROLL\n    /* round 1: */\n    t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >>  8) & 0xff] ^ Te3[s3 & 0xff] ^ rk[ 4];\n    t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >>  8) & 0xff] ^ Te3[s0 & 0xff] ^ rk[ 5];\n    t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >>  8) & 0xff] ^ Te3[s1 & 0xff] ^ rk[ 6];\n    t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >>  8) & 0xff] ^ Te3[s2 & 0xff] ^ rk[ 7];\n    /* round 2: */\n    s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >>  8) & 0xff] ^ Te3[t3 & 0xff] ^ rk[ 8];\n    s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >>  8) & 0xff] ^ Te3[t0 & 0xff] ^ rk[ 9];\n    s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >>  8) & 0xff] ^ Te3[t1 & 0xff] ^ rk[10];\n    s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >>  8) & 0xff] ^ Te3[t2 & 0xff] ^ rk[11];\n    /* round 3: */\n    t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >>  8) & 0xff] ^ Te3[s3 & 0xff] ^ rk[12];\n    t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >>  8) & 0xff] ^ Te3[s0 & 0xff] ^ rk[13];\n    t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >>  8) & 0xff] ^ Te3[s1 & 0xff] ^ rk[14];\n    t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >>  8) & 0xff] ^ Te3[s2 & 0xff] ^ rk[15];\n    /* round 4: */\n    s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >>  8) & 0xff] ^ Te3[t3 & 0xff] ^ rk[16];\n    s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >>  8) & 0xff] ^ Te3[t0 & 0xff] ^ rk[17];\n    s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >>  8) & 0xff] ^ Te3[t1 & 0xff] ^ rk[18];\n    s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >>  8) & 0xff] ^ Te3[t2 & 0xff] ^ rk[19];\n    /* round 5: */\n    t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >>  8) & 0xff] ^ Te3[s3 & 0xff] ^ rk[20];\n    t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >>  8) & 0xff] ^ Te3[s0 & 0xff] ^ rk[21];\n    t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >>  8) & 0xff] ^ Te3[s1 & 0xff] ^ rk[22];\n    t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >>  8) & 0xff] ^ Te3[s2 & 0xff] ^ rk[23];\n    /* round 6: */\n    s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >>  8) & 0xff] ^ Te3[t3 & 0xff] ^ rk[24];\n    s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >>  8) & 0xff] ^ Te3[t0 & 0xff] ^ rk[25];\n    s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >>  8) & 0xff] ^ Te3[t1 & 0xff] ^ rk[26];\n    s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >>  8) & 0xff] ^ Te3[t2 & 0xff] ^ rk[27];\n    /* round 7: */\n    t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >>  8) & 0xff] ^ Te3[s3 & 0xff] ^ rk[28];\n    t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >>  8) & 0xff] ^ Te3[s0 & 0xff] ^ rk[29];\n    t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >>  8) & 0xff] ^ Te3[s1 & 0xff] ^ rk[30];\n    t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >>  8) & 0xff] ^ Te3[s2 & 0xff] ^ rk[31];\n    /* round 8: */\n    s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >>  8) & 0xff] ^ Te3[t3 & 0xff] ^ rk[32];\n    s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >>  8) & 0xff] ^ Te3[t0 & 0xff] ^ rk[33];\n    s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >>  8) & 0xff] ^ Te3[t1 & 0xff] ^ rk[34];\n    s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >>  8) & 0xff] ^ Te3[t2 & 0xff] ^ rk[35];\n    /* round 9: */\n    t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >>  8) & 0xff] ^ Te3[s3 & 0xff] ^ rk[36];\n    t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >>  8) & 0xff] ^ Te3[s0 & 0xff] ^ rk[37];\n    t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >>  8) & 0xff] ^ Te3[s1 & 0xff] ^ rk[38];\n    t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >>  8) & 0xff] ^ Te3[s2 & 0xff] ^ rk[39];\n    if (key->rounds > 10) {\n        /* round 10: */\n        s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >>  8) & 0xff] ^ Te3[t3 & 0xff] ^ rk[40];\n        s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >>  8) & 0xff] ^ Te3[t0 & 0xff] ^ rk[41];\n        s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >>  8) & 0xff] ^ Te3[t1 & 0xff] ^ rk[42];\n        s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >>  8) & 0xff] ^ Te3[t2 & 0xff] ^ rk[43];\n        /* round 11: */\n        t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >>  8) & 0xff] ^ Te3[s3 & 0xff] ^ rk[44];\n        t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >>  8) & 0xff] ^ Te3[s0 & 0xff] ^ rk[45];\n        t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >>  8) & 0xff] ^ Te3[s1 & 0xff] ^ rk[46];\n        t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >>  8) & 0xff] ^ Te3[s2 & 0xff] ^ rk[47];\n        if (key->rounds > 12) {\n            /* round 12: */\n            s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >>  8) & 0xff] ^ Te3[t3 & 0xff] ^ rk[48];\n            s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >>  8) & 0xff] ^ Te3[t0 & 0xff] ^ rk[49];\n            s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >>  8) & 0xff] ^ Te3[t1 & 0xff] ^ rk[50];\n            s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >>  8) & 0xff] ^ Te3[t2 & 0xff] ^ rk[51];\n            /* round 13: */\n            t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >>  8) & 0xff] ^ Te3[s3 & 0xff] ^ rk[52];\n            t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >>  8) & 0xff] ^ Te3[s0 & 0xff] ^ rk[53];\n            t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >>  8) & 0xff] ^ Te3[s1 & 0xff] ^ rk[54];\n            t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >>  8) & 0xff] ^ Te3[s2 & 0xff] ^ rk[55];\n        }\n    }\n    rk += key->rounds << 2;\n#else  /* !FULL_UNROLL */\n    /*\n     * Nr - 1 full rounds:\n     */\n    r = key->rounds >> 1;\n    for (;;) {\n        t0 =\n            Te0[(s0 >> 24)       ] ^\n            Te1[(s1 >> 16) & 0xff] ^\n            Te2[(s2 >>  8) & 0xff] ^\n            Te3[(s3      ) & 0xff] ^\n            rk[4];\n        t1 =\n            Te0[(s1 >> 24)       ] ^\n            Te1[(s2 >> 16) & 0xff] ^\n            Te2[(s3 >>  8) & 0xff] ^\n            Te3[(s0      ) & 0xff] ^\n            rk[5];\n        t2 =\n            Te0[(s2 >> 24)       ] ^\n            Te1[(s3 >> 16) & 0xff] ^\n            Te2[(s0 >>  8) & 0xff] ^\n            Te3[(s1      ) & 0xff] ^\n            rk[6];\n        t3 =\n            Te0[(s3 >> 24)       ] ^\n            Te1[(s0 >> 16) & 0xff] ^\n            Te2[(s1 >>  8) & 0xff] ^\n            Te3[(s2      ) & 0xff] ^\n            rk[7];\n\n        rk += 8;\n        if (--r == 0) {\n            break;\n        }\n    \n        s0 =\n            Te0[(t0 >> 24)       ] ^\n            Te1[(t1 >> 16) & 0xff] ^\n            Te2[(t2 >>  8) & 0xff] ^\n            Te3[(t3      ) & 0xff] ^\n            rk[0];\n        s1 =\n            Te0[(t1 >> 24)       ] ^\n            Te1[(t2 >> 16) & 0xff] ^\n            Te2[(t3 >>  8) & 0xff] ^\n            Te3[(t0      ) & 0xff] ^\n            rk[1];\n        s2 =\n            Te0[(t2 >> 24)       ] ^\n            Te1[(t3 >> 16) & 0xff] ^\n            Te2[(t0 >>  8) & 0xff] ^\n            Te3[(t1      ) & 0xff] ^\n            rk[2];\n        s3 =\n            Te0[(t3 >> 24)       ] ^\n            Te1[(t0 >> 16) & 0xff] ^\n            Te2[(t1 >>  8) & 0xff] ^\n            Te3[(t2      ) & 0xff] ^\n            rk[3];\n    }\n\n#endif /* ?FULL_UNROLL */\n    /*\n\n   * apply last round and\n      map cipher state to byte array block:\n          */\n         s0 =\n     (Te2[(t0 >> 24)       ] & 0xff000000) ^\n     (Te3[(t1 >> 16) & 0xff] & 0x00ff0000) ^\n     (Te0[(t2 >>  8) & 0xff] & 0x0000ff00) ^\n     (Te1[(t3      ) & 0xff] & 0x000000ff) ^\n     rk[0];\n         PUTU32(out     , s0);\n         s1 =\n     (Te2[(t1 >> 24)       ] & 0xff000000) ^\n     (Te3[(t2 >> 16) & 0xff] & 0x00ff0000) ^\n     (Te0[(t3 >>  8) & 0xff] & 0x0000ff00) ^\n     (Te1[(t0      ) & 0xff] & 0x000000ff) ^\n     rk[1];\n         PUTU32(out +  4, s1);\n         s2 =\n     (Te2[(t2 >> 24)       ] & 0xff000000) ^\n     (Te3[(t3 >> 16) & 0xff] & 0x00ff0000) ^\n     (Te0[(t0 >>  8) & 0xff] & 0x0000ff00) ^\n     (Te1[(t1      ) & 0xff] & 0x000000ff) ^\n     rk[2];\n         PUTU32(out +  8, s2);\n         s3 =\n     (Te2[(t3 >> 24)       ] & 0xff000000) ^\n     (Te3[(t0 >> 16) & 0xff] & 0x00ff0000) ^\n     (Te0[(t1 >>  8) & 0xff] & 0x0000ff00) ^\n     (Te1[(t2      ) & 0xff] & 0x000000ff) ^\n     rk[3];\n         PUTU32(out + 12, s3);\n     }\n```\n\n可以从图中很明显看出符合signature的特征\n\n![image-20220118172332974](AES.assets/image-20220118172332974.png)\n\n## \n","slug":"AES","published":1,"updated":"2022-01-24T19:43:40.000Z","layout":"post","photos":[],"link":"","_id":"cletwjohn0001ri3s514hetpe","content":"<h1>AES</h1>\n<h3 id=\"算法\">算法</h3>\n<ul>\n<li>\n<p>输入：128bit</p>\n</li>\n<li>\n<p>输出：128bit</p>\n</li>\n<li>\n<p>密钥长度与迭代轮数有关</p>\n<p><img src=\"AES.assets/image-20220115160053585.png\" alt=\"image-20220115160053585\"></p>\n</li>\n</ul>\n<p>加解密流程：</p>\n<p><img src=\"AES.assets/aes_details.jpg\" alt=\"img\">每一轮主要包括：</p>\n<ul>\n<li>轮密钥加，AddRoundKey：将128位轮密钥Ki同状态矩阵中的数据进行逐位异或操作</li>\n<li>字节替换，SubBytes：查表S盒。把字节的高4位作为行值（0），低4位作为列值（8），取出S盒或者逆S盒中对应的元素（30）作为输出</li>\n<li>行移位，ShiftRows：简单的左循环移位。当密钥长度为128比特时，状态矩阵的第0行左移0字节，第1行左移1字节，第2行左移2字节，第3行左移3字节</li>\n<li>列混淆，MixColumns：经行移位后的状态矩阵与固定的矩阵相乘，得到混淆后的状态矩阵。其中，矩阵元素的乘法和加法都是定义在基于GF(2^8)上的二元运算。</li>\n</ul>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>b</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>a</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi>c</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy=\"false\">(</mo><msup><mi>x</mi><mn>4</mn></msup><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><mtext>其中</mtext><mi>c</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>03</mn><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mn>01</mn><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>01</mn><mi>x</mi><mo>+</mo><mn>02</mn><mspace linebreak=\"newline\"></mspace><mi>c</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mtext>与</mtext><msup><mi>x</mi><mn>4</mn></msup><mo>+</mo><mn>1</mn><mtext>互素，保证存在逆多项式</mtext><mi>d</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mtext>，满足</mtext><mi>c</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi>d</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy=\"false\">(</mo><msup><mi>x</mi><mn>4</mn></msup><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mtext>。</mtext><mspace linebreak=\"newline\"></mspace><mtext>只有逆多项式</mtext><mi>d</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mtext>存在，才能正确进行解密</mtext></mrow><annotation encoding=\"application/x-tex\">b(x) = a(x)c(x) mod (x^4+1)\n\\\\ 其中c(x) = 03x^3+01x^2+01x+02\n\\\\ c(x)与x^4+1互素，保证存在逆多项式d(x)，满足c(x)d(x)=1 mod (x^4+1 )。\n\\\\只有逆多项式d(x)存在，才能正确进行解密\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">c</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\">其中</span><span class=\"mord mathnormal\">c</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474em;vertical-align:-0.0833em;\"></span><span class=\"mord\">03</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474em;vertical-align:-0.0833em;\"></span><span class=\"mord\">01</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">01</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">02</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord cjk_fallback\">与</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord cjk_fallback\">互素，保证存在逆多项式</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord cjk_fallback\">，满足</span><span class=\"mord mathnormal\">c</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord cjk_fallback\">。</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\">只有逆多项式</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord cjk_fallback\">存在，才能正确进行解密</span></span></span></span></span></p>\n<p>密钥扩展：</p>\n<ol>\n<li>\n<p>首先将初始密钥输入到一个4*4的状态矩阵，每一列的4个字节组成一个字，依次为w[0],w[1],w[2],w[3]</p>\n</li>\n<li>\n<p>接着，对W数组扩充40个新列，构成总共44列的扩展密钥数组。新列i的产生方式如下</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>i</mi><mtext>不是</mtext><mn>4</mn><mtext>的倍数</mtext><mspace linebreak=\"newline\"></mspace><mi>w</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>w</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>4</mn><mo stretchy=\"false\">]</mo><mtext> </mtext><mi>x</mi><mi>o</mi><mi>r</mi><mtext> </mtext><mi>w</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mspace linebreak=\"newline\"></mspace><mi>i</mi><mtext>是</mtext><mn>4</mn><mtext>的倍数</mtext><mspace linebreak=\"newline\"></mspace><mi>w</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>w</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>4</mn><mo stretchy=\"false\">]</mo><mtext> </mtext><mi>x</mi><mi>o</mi><mi>r</mi><mtext> </mtext><mi>T</mi><mo stretchy=\"false\">(</mo><mi>w</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">i不是4的倍数\n\\\\ w[i] = w[i-4] \\ xor\\ w[i-1]\n\\\\i是4的倍数\n\\\\ w[i] = w[i-4]\\ xor \\ T(w[i-1])\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord cjk_fallback\">不是</span><span class=\"mord\">4</span><span class=\"mord cjk_fallback\">的倍数</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">4</span><span class=\"mclose\">]</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">or</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord\">4</span><span class=\"mord cjk_fallback\">的倍数</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">4</span><span class=\"mclose\">]</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">or</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">])</span></span></span></span></span></p>\n<p>其中函数T由以下三部分组成：</p>\n<ul>\n<li>字循环：将1个字中的4个字节循环左移1个字节</li>\n<li>字节代换：对字循环的结果使用S盒进行字节代换</li>\n<li>轮常量异或：将前两步的结果与轮常量Rcon[j]异或，其中j表示轮数</li>\n</ul>\n<p><img src=\"AES.assets/image-20220118145857240.png\" alt=\"image-20220118145857240\"></p>\n</li>\n</ol>\n<p>比如上述初始密钥</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>w</mi><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo><mo>:</mo><mn>2</mn><mi>b</mi><mtext> </mtext><mn>7</mn><mi>e</mi><mtext> </mtext><mn>15</mn><mtext> </mtext><mn>16</mn><mspace linebreak=\"newline\"></mspace><mi>w</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>:</mo><mn>28</mn><mtext> </mtext><mi>a</mi><mi>e</mi><mtext> </mtext><mi>d</mi><mn>2</mn><mtext> </mtext><mi>a</mi><mn>6</mn><mspace linebreak=\"newline\"></mspace><mi>w</mi><mo stretchy=\"false\">[</mo><mn>2</mn><mo stretchy=\"false\">]</mo><mo>:</mo><mi>a</mi><mi>b</mi><mtext> </mtext><mi>f</mi><mn>7</mn><mtext> </mtext><mn>15</mn><mtext> </mtext><mn>88</mn><mspace linebreak=\"newline\"></mspace><mi>w</mi><mo stretchy=\"false\">[</mo><mn>3</mn><mo stretchy=\"false\">]</mo><mo>:</mo><mn>09</mn><mtext> </mtext><mi>c</mi><mi>f</mi><mtext> </mtext><mn>4</mn><mi>f</mi><mtext> </mtext><mn>3</mn><mi>c</mi><mspace linebreak=\"newline\"></mspace><mtext>求扩展的第一轮的子密钥</mtext><mi>w</mi><mo stretchy=\"false\">[</mo><mn>4</mn><mo stretchy=\"false\">]</mo><mo separator=\"true\">,</mo><mi>w</mi><mo stretchy=\"false\">[</mo><mn>5</mn><mo stretchy=\"false\">]</mo><mo separator=\"true\">,</mo><mi>w</mi><mo stretchy=\"false\">[</mo><mn>6</mn><mo stretchy=\"false\">]</mo><mo separator=\"true\">,</mo><mi>w</mi><mo stretchy=\"false\">[</mo><mn>7</mn><mo stretchy=\"false\">]</mo><mspace linebreak=\"newline\"></mspace><mi>w</mi><mo stretchy=\"false\">[</mo><mn>4</mn><mo stretchy=\"false\">]</mo><mo>=</mo><mi>w</mi><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo><mi>x</mi><mi>o</mi><mi>r</mi><mi>T</mi><mo stretchy=\"false\">(</mo><mi>w</mi><mo stretchy=\"false\">[</mo><mn>3</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><mi>T</mi><mo stretchy=\"false\">(</mo><mi>w</mi><mo stretchy=\"false\">[</mo><mn>3</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo><mtext>计算过程如下：</mtext><mspace linebreak=\"newline\"></mspace><mn>1.</mn><mi>w</mi><mo stretchy=\"false\">[</mo><mn>3</mn><mo stretchy=\"false\">]</mo><mtext>循环左移</mtext><mn>1</mn><mtext>个字节得到</mtext><mi>c</mi><mi>f</mi><mtext> </mtext><mn>4</mn><mi>f</mi><mtext> </mtext><mn>3</mn><mi>c</mi><mtext> </mtext><mn>09</mn><mspace linebreak=\"newline\"></mspace><mn>2.</mn><mtext>字节代换得到</mtext><mn>8</mn><mi>a</mi><mtext> </mtext><mn>84</mn><mtext> </mtext><mi>e</mi><mi>b</mi><mtext> </mtext><mn>01</mn><mspace linebreak=\"newline\"></mspace><mn>3.</mn><mtext>与轮常量异或再与</mtext><mi>w</mi><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo><mtext>异或最后得到</mtext><mi>a</mi><mn>0</mn><mtext> </mtext><mi>f</mi><mi>a</mi><mtext> </mtext><mi>f</mi><mi>e</mi><mtext> </mtext><mn>17</mn></mrow><annotation encoding=\"application/x-tex\">w[0]:2b \\ 7e \\ 15 \\ 16\n\\\\ w[1]:28 \\ ae \\ d2 \\ a6\n\\\\ w[2]: ab \\ f7 \\ 15 \\ 88\n\\\\ w[3]: 09 \\ cf \\ 4f \\ 3c\n\\\\求扩展的第一轮的子密钥w[4],w[5],w[6],w[7]\n\\\\w[4] = w[0] xor T(w[3])\n\\\\ T(w[3])计算过程如下：\n\\\\1. w[3]循环左移1个字节得到cf \\ 4f \\ 3c \\ 09\n\\\\2.字节代换得到8a \\ 84 \\ eb \\ 01\n\\\\3.与轮常量异或再与w[0]异或最后得到a0 \\ fa \\ fe \\ 17\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">b</span><span class=\"mspace\"> </span><span class=\"mord\">7</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\"> </span><span class=\"mord\">15</span><span class=\"mspace\"> </span><span class=\"mord\">16</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">28</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">d</span><span class=\"mord\">2</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">a</span><span class=\"mord\">6</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord\">2</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">ab</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord\">7</span><span class=\"mspace\"> </span><span class=\"mord\">15</span><span class=\"mspace\"> </span><span class=\"mord\">88</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord\">3</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">09</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\"> </span><span class=\"mord\">4</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\"> </span><span class=\"mord\">3</span><span class=\"mord mathnormal\">c</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\">求扩展的第一轮的子密钥</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord\">4</span><span class=\"mclose\">]</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord\">5</span><span class=\"mclose\">]</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord\">6</span><span class=\"mclose\">]</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord\">7</span><span class=\"mclose\">]</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord\">4</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">or</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord\">3</span><span class=\"mclose\">])</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord\">3</span><span class=\"mclose\">])</span><span class=\"mord cjk_fallback\">计算过程如下：</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1.</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord\">3</span><span class=\"mclose\">]</span><span class=\"mord cjk_fallback\">循环左移</span><span class=\"mord\">1</span><span class=\"mord cjk_fallback\">个字节得到</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\"> </span><span class=\"mord\">4</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\"> </span><span class=\"mord\">3</span><span class=\"mord mathnormal\">c</span><span class=\"mspace\"> </span><span class=\"mord\">09</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">2.</span><span class=\"mord cjk_fallback\">字节代换得到</span><span class=\"mord\">8</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\"> </span><span class=\"mord\">84</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">b</span><span class=\"mspace\"> </span><span class=\"mord\">01</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">3.</span><span class=\"mord cjk_fallback\">与轮常量异或再与</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span><span class=\"mord cjk_fallback\">异或最后得到</span><span class=\"mord mathnormal\">a</span><span class=\"mord\">0</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\"> </span><span class=\"mord\">17</span></span></span></span></span></p>\n<h3 id=\"signature\">signature</h3>\n<p>signature定义用到快速软件实现——查表法。将行移位、列混合和S盒结合得到4个4bytes*256项的查找表（T盒）。</p>\n<p>列变换中，</p>\n<p><img src=\"AES.assets/image-20220118160907434.png\" alt=\"image-20220118160907434\"></p>\n<p>将其按列向量拆开，对于每一列，都有：</p>\n<p><img src=\"AES.assets/image-20220118160943225.png\" alt=\"image-20220118160943225\"></p>\n<p>所以得到：其中Wk0为本轮子密钥ki中对应的4字节</p>\n<p><img src=\"AES.assets/image-20220118161013057.png\" alt=\"image-20220118161013057\"></p>\n<p>T盒定义为</p>\n<p><img src=\"AES.assets/image-20220118161112688.png\" alt=\"image-20220118161112688\"></p>\n<p>所以轮操作变为：</p>\n<p><img src=\"AES.assets/image-20220118161222708.png\" alt=\"image-20220118161222708\"></p>\n<p>根据上述理论，预定义的结构如下</p>\n<p><img src=\"AES.assets/image-20220118151325836.png\" alt=\"image-20220118151325836\"></p>\n<p><img src=\"AES.assets/image-20220118151417023.png\" alt=\"image-20220118151417023\"></p>\n<h3 id=\"测试\">测试</h3>\n<p>AES_encrypt</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">AES_encrypt</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *in, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *out,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                 <span class=\"keyword\">const</span> AES_KEY *key)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> u32 *rk;</span><br><span class=\"line\">    u32 s0, s1, s2, s3, t0, t1, t2, t3;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> FULL_UNROLL</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> r;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/* ?FULL_UNROLL */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    assert(in &amp;&amp; out &amp;&amp; key);</span><br><span class=\"line\">    rk = key-&gt;rd_key;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * map byte array block to cipher state</span></span><br><span class=\"line\"><span class=\"comment\">     * and add initial round key:</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    s0 = GETU32(in     ) ^ rk[<span class=\"number\">0</span>];</span><br><span class=\"line\">    s1 = GETU32(in +  <span class=\"number\">4</span>) ^ rk[<span class=\"number\">1</span>];</span><br><span class=\"line\">    s2 = GETU32(in +  <span class=\"number\">8</span>) ^ rk[<span class=\"number\">2</span>];</span><br><span class=\"line\">    s3 = GETU32(in + <span class=\"number\">12</span>) ^ rk[<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> FULL_UNROLL</span></span><br><span class=\"line\">    <span class=\"comment\">/* round 1: */</span></span><br><span class=\"line\">    t0 = Te0[s0 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s1 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s2 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s3 &amp; <span class=\"number\">0xff</span>] ^ rk[ <span class=\"number\">4</span>];</span><br><span class=\"line\">    t1 = Te0[s1 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s2 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s3 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s0 &amp; <span class=\"number\">0xff</span>] ^ rk[ <span class=\"number\">5</span>];</span><br><span class=\"line\">    t2 = Te0[s2 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s3 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s0 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s1 &amp; <span class=\"number\">0xff</span>] ^ rk[ <span class=\"number\">6</span>];</span><br><span class=\"line\">    t3 = Te0[s3 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s0 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s1 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s2 &amp; <span class=\"number\">0xff</span>] ^ rk[ <span class=\"number\">7</span>];</span><br><span class=\"line\">    <span class=\"comment\">/* round 2: */</span></span><br><span class=\"line\">    s0 = Te0[t0 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t1 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t2 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t3 &amp; <span class=\"number\">0xff</span>] ^ rk[ <span class=\"number\">8</span>];</span><br><span class=\"line\">    s1 = Te0[t1 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t2 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t3 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t0 &amp; <span class=\"number\">0xff</span>] ^ rk[ <span class=\"number\">9</span>];</span><br><span class=\"line\">    s2 = Te0[t2 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t3 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t0 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t1 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">10</span>];</span><br><span class=\"line\">    s3 = Te0[t3 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t0 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t1 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t2 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">11</span>];</span><br><span class=\"line\">    <span class=\"comment\">/* round 3: */</span></span><br><span class=\"line\">    t0 = Te0[s0 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s1 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s2 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s3 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">12</span>];</span><br><span class=\"line\">    t1 = Te0[s1 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s2 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s3 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s0 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">13</span>];</span><br><span class=\"line\">    t2 = Te0[s2 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s3 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s0 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s1 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">14</span>];</span><br><span class=\"line\">    t3 = Te0[s3 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s0 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s1 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s2 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">15</span>];</span><br><span class=\"line\">    <span class=\"comment\">/* round 4: */</span></span><br><span class=\"line\">    s0 = Te0[t0 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t1 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t2 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t3 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">16</span>];</span><br><span class=\"line\">    s1 = Te0[t1 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t2 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t3 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t0 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">17</span>];</span><br><span class=\"line\">    s2 = Te0[t2 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t3 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t0 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t1 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">18</span>];</span><br><span class=\"line\">    s3 = Te0[t3 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t0 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t1 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t2 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">19</span>];</span><br><span class=\"line\">    <span class=\"comment\">/* round 5: */</span></span><br><span class=\"line\">    t0 = Te0[s0 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s1 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s2 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s3 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">20</span>];</span><br><span class=\"line\">    t1 = Te0[s1 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s2 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s3 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s0 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">21</span>];</span><br><span class=\"line\">    t2 = Te0[s2 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s3 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s0 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s1 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">22</span>];</span><br><span class=\"line\">    t3 = Te0[s3 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s0 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s1 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s2 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">23</span>];</span><br><span class=\"line\">    <span class=\"comment\">/* round 6: */</span></span><br><span class=\"line\">    s0 = Te0[t0 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t1 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t2 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t3 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">24</span>];</span><br><span class=\"line\">    s1 = Te0[t1 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t2 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t3 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t0 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">25</span>];</span><br><span class=\"line\">    s2 = Te0[t2 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t3 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t0 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t1 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">26</span>];</span><br><span class=\"line\">    s3 = Te0[t3 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t0 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t1 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t2 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">27</span>];</span><br><span class=\"line\">    <span class=\"comment\">/* round 7: */</span></span><br><span class=\"line\">    t0 = Te0[s0 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s1 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s2 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s3 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">28</span>];</span><br><span class=\"line\">    t1 = Te0[s1 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s2 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s3 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s0 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">29</span>];</span><br><span class=\"line\">    t2 = Te0[s2 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s3 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s0 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s1 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">30</span>];</span><br><span class=\"line\">    t3 = Te0[s3 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s0 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s1 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s2 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">31</span>];</span><br><span class=\"line\">    <span class=\"comment\">/* round 8: */</span></span><br><span class=\"line\">    s0 = Te0[t0 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t1 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t2 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t3 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">32</span>];</span><br><span class=\"line\">    s1 = Te0[t1 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t2 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t3 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t0 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">33</span>];</span><br><span class=\"line\">    s2 = Te0[t2 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t3 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t0 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t1 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">34</span>];</span><br><span class=\"line\">    s3 = Te0[t3 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t0 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t1 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t2 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">35</span>];</span><br><span class=\"line\">    <span class=\"comment\">/* round 9: */</span></span><br><span class=\"line\">    t0 = Te0[s0 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s1 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s2 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s3 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">36</span>];</span><br><span class=\"line\">    t1 = Te0[s1 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s2 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s3 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s0 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">37</span>];</span><br><span class=\"line\">    t2 = Te0[s2 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s3 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s0 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s1 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">38</span>];</span><br><span class=\"line\">    t3 = Te0[s3 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s0 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s1 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s2 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">39</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key-&gt;rounds &gt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* round 10: */</span></span><br><span class=\"line\">        s0 = Te0[t0 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t1 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t2 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t3 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">40</span>];</span><br><span class=\"line\">        s1 = Te0[t1 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t2 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t3 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t0 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">41</span>];</span><br><span class=\"line\">        s2 = Te0[t2 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t3 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t0 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t1 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">42</span>];</span><br><span class=\"line\">        s3 = Te0[t3 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t0 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t1 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t2 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">43</span>];</span><br><span class=\"line\">        <span class=\"comment\">/* round 11: */</span></span><br><span class=\"line\">        t0 = Te0[s0 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s1 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s2 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s3 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">44</span>];</span><br><span class=\"line\">        t1 = Te0[s1 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s2 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s3 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s0 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">45</span>];</span><br><span class=\"line\">        t2 = Te0[s2 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s3 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s0 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s1 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">46</span>];</span><br><span class=\"line\">        t3 = Te0[s3 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s0 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s1 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s2 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">47</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key-&gt;rounds &gt; <span class=\"number\">12</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/* round 12: */</span></span><br><span class=\"line\">            s0 = Te0[t0 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t1 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t2 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t3 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">48</span>];</span><br><span class=\"line\">            s1 = Te0[t1 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t2 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t3 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t0 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">49</span>];</span><br><span class=\"line\">            s2 = Te0[t2 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t3 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t0 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t1 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">50</span>];</span><br><span class=\"line\">            s3 = Te0[t3 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t0 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t1 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t2 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">51</span>];</span><br><span class=\"line\">            <span class=\"comment\">/* round 13: */</span></span><br><span class=\"line\">            t0 = Te0[s0 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s1 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s2 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s3 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">52</span>];</span><br><span class=\"line\">            t1 = Te0[s1 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s2 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s3 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s0 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">53</span>];</span><br><span class=\"line\">            t2 = Te0[s2 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s3 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s0 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s1 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">54</span>];</span><br><span class=\"line\">            t3 = Te0[s3 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s0 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s1 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s2 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">55</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    rk += key-&gt;rounds &lt;&lt; <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span>  <span class=\"comment\">/* !FULL_UNROLL */</span></span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Nr - 1 full rounds:</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    r = key-&gt;rounds &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        t0 =</span><br><span class=\"line\">            Te0[(s0 &gt;&gt; <span class=\"number\">24</span>)       ] ^</span><br><span class=\"line\">            Te1[(s1 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            Te2[(s2 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            Te3[(s3      ) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            rk[<span class=\"number\">4</span>];</span><br><span class=\"line\">        t1 =</span><br><span class=\"line\">            Te0[(s1 &gt;&gt; <span class=\"number\">24</span>)       ] ^</span><br><span class=\"line\">            Te1[(s2 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            Te2[(s3 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            Te3[(s0      ) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            rk[<span class=\"number\">5</span>];</span><br><span class=\"line\">        t2 =</span><br><span class=\"line\">            Te0[(s2 &gt;&gt; <span class=\"number\">24</span>)       ] ^</span><br><span class=\"line\">            Te1[(s3 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            Te2[(s0 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            Te3[(s1      ) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            rk[<span class=\"number\">6</span>];</span><br><span class=\"line\">        t3 =</span><br><span class=\"line\">            Te0[(s3 &gt;&gt; <span class=\"number\">24</span>)       ] ^</span><br><span class=\"line\">            Te1[(s0 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            Te2[(s1 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            Te3[(s2      ) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            rk[<span class=\"number\">7</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        rk += <span class=\"number\">8</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (--r == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        s0 =</span><br><span class=\"line\">            Te0[(t0 &gt;&gt; <span class=\"number\">24</span>)       ] ^</span><br><span class=\"line\">            Te1[(t1 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            Te2[(t2 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            Te3[(t3      ) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            rk[<span class=\"number\">0</span>];</span><br><span class=\"line\">        s1 =</span><br><span class=\"line\">            Te0[(t1 &gt;&gt; <span class=\"number\">24</span>)       ] ^</span><br><span class=\"line\">            Te1[(t2 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            Te2[(t3 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            Te3[(t0      ) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            rk[<span class=\"number\">1</span>];</span><br><span class=\"line\">        s2 =</span><br><span class=\"line\">            Te0[(t2 &gt;&gt; <span class=\"number\">24</span>)       ] ^</span><br><span class=\"line\">            Te1[(t3 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            Te2[(t0 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            Te3[(t1      ) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            rk[<span class=\"number\">2</span>];</span><br><span class=\"line\">        s3 =</span><br><span class=\"line\">            Te0[(t3 &gt;&gt; <span class=\"number\">24</span>)       ] ^</span><br><span class=\"line\">            Te1[(t0 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            Te2[(t1 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            Te3[(t2      ) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            rk[<span class=\"number\">3</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/* ?FULL_UNROLL */</span></span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">   * apply last round and</span></span><br><span class=\"line\"><span class=\"comment\">      map cipher state to byte array block:</span></span><br><span class=\"line\"><span class=\"comment\">          */</span></span><br><span class=\"line\">         s0 =</span><br><span class=\"line\">     (Te2[(t0 &gt;&gt; <span class=\"number\">24</span>)       ] &amp; <span class=\"number\">0xff000000</span>) ^</span><br><span class=\"line\">     (Te3[(t1 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] &amp; <span class=\"number\">0x00ff0000</span>) ^</span><br><span class=\"line\">     (Te0[(t2 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] &amp; <span class=\"number\">0x0000ff00</span>) ^</span><br><span class=\"line\">     (Te1[(t3      ) &amp; <span class=\"number\">0xff</span>] &amp; <span class=\"number\">0x000000ff</span>) ^</span><br><span class=\"line\">     rk[<span class=\"number\">0</span>];</span><br><span class=\"line\">         PUTU32(out     , s0);</span><br><span class=\"line\">         s1 =</span><br><span class=\"line\">     (Te2[(t1 &gt;&gt; <span class=\"number\">24</span>)       ] &amp; <span class=\"number\">0xff000000</span>) ^</span><br><span class=\"line\">     (Te3[(t2 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] &amp; <span class=\"number\">0x00ff0000</span>) ^</span><br><span class=\"line\">     (Te0[(t3 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] &amp; <span class=\"number\">0x0000ff00</span>) ^</span><br><span class=\"line\">     (Te1[(t0      ) &amp; <span class=\"number\">0xff</span>] &amp; <span class=\"number\">0x000000ff</span>) ^</span><br><span class=\"line\">     rk[<span class=\"number\">1</span>];</span><br><span class=\"line\">         PUTU32(out +  <span class=\"number\">4</span>, s1);</span><br><span class=\"line\">         s2 =</span><br><span class=\"line\">     (Te2[(t2 &gt;&gt; <span class=\"number\">24</span>)       ] &amp; <span class=\"number\">0xff000000</span>) ^</span><br><span class=\"line\">     (Te3[(t3 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] &amp; <span class=\"number\">0x00ff0000</span>) ^</span><br><span class=\"line\">     (Te0[(t0 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] &amp; <span class=\"number\">0x0000ff00</span>) ^</span><br><span class=\"line\">     (Te1[(t1      ) &amp; <span class=\"number\">0xff</span>] &amp; <span class=\"number\">0x000000ff</span>) ^</span><br><span class=\"line\">     rk[<span class=\"number\">2</span>];</span><br><span class=\"line\">         PUTU32(out +  <span class=\"number\">8</span>, s2);</span><br><span class=\"line\">         s3 =</span><br><span class=\"line\">     (Te2[(t3 &gt;&gt; <span class=\"number\">24</span>)       ] &amp; <span class=\"number\">0xff000000</span>) ^</span><br><span class=\"line\">     (Te3[(t0 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] &amp; <span class=\"number\">0x00ff0000</span>) ^</span><br><span class=\"line\">     (Te0[(t1 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] &amp; <span class=\"number\">0x0000ff00</span>) ^</span><br><span class=\"line\">     (Te1[(t2      ) &amp; <span class=\"number\">0xff</span>] &amp; <span class=\"number\">0x000000ff</span>) ^</span><br><span class=\"line\">     rk[<span class=\"number\">3</span>];</span><br><span class=\"line\">         PUTU32(out + <span class=\"number\">12</span>, s3);</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n<p>可以从图中很明显看出符合signature的特征</p>\n<p><img src=\"AES.assets/image-20220118172332974.png\" alt=\"image-20220118172332974\"></p>\n<h2 id=\"\"></h2>\n","site":{"data":{"about":{"class":{"class_name":"about","link_list":{"-1":{"name":"Scorpion","avatar":"/image/avatar.jpg","link":null,"descr":"�����ƹ������ë��̨��ɢ�򣬻�ѩ���������ݣ����ֲ�Ƭ����Ƭ�赸��Ƶ��ҵ����Ӱ���Ǻð�ȫ��"}}}},"link":{"class":{"class_name":"友情链接","link_list":{"-1":{"name":"M4tsuri","link":"https://M4tsuri.io","avatar":"/image/m4tsuri.jpg","descr":"pwn,blockchain"}}}}}},"excerpt":"","more":"<h1>AES</h1>\n<h3 id=\"算法\">算法</h3>\n<ul>\n<li>\n<p>输入：128bit</p>\n</li>\n<li>\n<p>输出：128bit</p>\n</li>\n<li>\n<p>密钥长度与迭代轮数有关</p>\n<p><img src=\"AES.assets/image-20220115160053585.png\" alt=\"image-20220115160053585\"></p>\n</li>\n</ul>\n<p>加解密流程：</p>\n<p><img src=\"AES.assets/aes_details.jpg\" alt=\"img\">每一轮主要包括：</p>\n<ul>\n<li>轮密钥加，AddRoundKey：将128位轮密钥Ki同状态矩阵中的数据进行逐位异或操作</li>\n<li>字节替换，SubBytes：查表S盒。把字节的高4位作为行值（0），低4位作为列值（8），取出S盒或者逆S盒中对应的元素（30）作为输出</li>\n<li>行移位，ShiftRows：简单的左循环移位。当密钥长度为128比特时，状态矩阵的第0行左移0字节，第1行左移1字节，第2行左移2字节，第3行左移3字节</li>\n<li>列混淆，MixColumns：经行移位后的状态矩阵与固定的矩阵相乘，得到混淆后的状态矩阵。其中，矩阵元素的乘法和加法都是定义在基于GF(2^8)上的二元运算。</li>\n</ul>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>b</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>a</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi>c</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy=\"false\">(</mo><msup><mi>x</mi><mn>4</mn></msup><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><mtext>其中</mtext><mi>c</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>03</mn><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mn>01</mn><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>01</mn><mi>x</mi><mo>+</mo><mn>02</mn><mspace linebreak=\"newline\"></mspace><mi>c</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mtext>与</mtext><msup><mi>x</mi><mn>4</mn></msup><mo>+</mo><mn>1</mn><mtext>互素，保证存在逆多项式</mtext><mi>d</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mtext>，满足</mtext><mi>c</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi>d</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy=\"false\">(</mo><msup><mi>x</mi><mn>4</mn></msup><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mtext>。</mtext><mspace linebreak=\"newline\"></mspace><mtext>只有逆多项式</mtext><mi>d</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mtext>存在，才能正确进行解密</mtext></mrow><annotation encoding=\"application/x-tex\">b(x) = a(x)c(x) mod (x^4+1)\n\\\\ 其中c(x) = 03x^3+01x^2+01x+02\n\\\\ c(x)与x^4+1互素，保证存在逆多项式d(x)，满足c(x)d(x)=1 mod (x^4+1 )。\n\\\\只有逆多项式d(x)存在，才能正确进行解密\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">c</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\">其中</span><span class=\"mord mathnormal\">c</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474em;vertical-align:-0.0833em;\"></span><span class=\"mord\">03</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474em;vertical-align:-0.0833em;\"></span><span class=\"mord\">01</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">01</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">02</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord cjk_fallback\">与</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord cjk_fallback\">互素，保证存在逆多项式</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord cjk_fallback\">，满足</span><span class=\"mord mathnormal\">c</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord cjk_fallback\">。</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\">只有逆多项式</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord cjk_fallback\">存在，才能正确进行解密</span></span></span></span></span></p>\n<p>密钥扩展：</p>\n<ol>\n<li>\n<p>首先将初始密钥输入到一个4*4的状态矩阵，每一列的4个字节组成一个字，依次为w[0],w[1],w[2],w[3]</p>\n</li>\n<li>\n<p>接着，对W数组扩充40个新列，构成总共44列的扩展密钥数组。新列i的产生方式如下</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>i</mi><mtext>不是</mtext><mn>4</mn><mtext>的倍数</mtext><mspace linebreak=\"newline\"></mspace><mi>w</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>w</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>4</mn><mo stretchy=\"false\">]</mo><mtext> </mtext><mi>x</mi><mi>o</mi><mi>r</mi><mtext> </mtext><mi>w</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mspace linebreak=\"newline\"></mspace><mi>i</mi><mtext>是</mtext><mn>4</mn><mtext>的倍数</mtext><mspace linebreak=\"newline\"></mspace><mi>w</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>w</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>4</mn><mo stretchy=\"false\">]</mo><mtext> </mtext><mi>x</mi><mi>o</mi><mi>r</mi><mtext> </mtext><mi>T</mi><mo stretchy=\"false\">(</mo><mi>w</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">i不是4的倍数\n\\\\ w[i] = w[i-4] \\ xor\\ w[i-1]\n\\\\i是4的倍数\n\\\\ w[i] = w[i-4]\\ xor \\ T(w[i-1])\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord cjk_fallback\">不是</span><span class=\"mord\">4</span><span class=\"mord cjk_fallback\">的倍数</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">4</span><span class=\"mclose\">]</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">or</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord\">4</span><span class=\"mord cjk_fallback\">的倍数</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">4</span><span class=\"mclose\">]</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">or</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">])</span></span></span></span></span></p>\n<p>其中函数T由以下三部分组成：</p>\n<ul>\n<li>字循环：将1个字中的4个字节循环左移1个字节</li>\n<li>字节代换：对字循环的结果使用S盒进行字节代换</li>\n<li>轮常量异或：将前两步的结果与轮常量Rcon[j]异或，其中j表示轮数</li>\n</ul>\n<p><img src=\"AES.assets/image-20220118145857240.png\" alt=\"image-20220118145857240\"></p>\n</li>\n</ol>\n<p>比如上述初始密钥</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>w</mi><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo><mo>:</mo><mn>2</mn><mi>b</mi><mtext> </mtext><mn>7</mn><mi>e</mi><mtext> </mtext><mn>15</mn><mtext> </mtext><mn>16</mn><mspace linebreak=\"newline\"></mspace><mi>w</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>:</mo><mn>28</mn><mtext> </mtext><mi>a</mi><mi>e</mi><mtext> </mtext><mi>d</mi><mn>2</mn><mtext> </mtext><mi>a</mi><mn>6</mn><mspace linebreak=\"newline\"></mspace><mi>w</mi><mo stretchy=\"false\">[</mo><mn>2</mn><mo stretchy=\"false\">]</mo><mo>:</mo><mi>a</mi><mi>b</mi><mtext> </mtext><mi>f</mi><mn>7</mn><mtext> </mtext><mn>15</mn><mtext> </mtext><mn>88</mn><mspace linebreak=\"newline\"></mspace><mi>w</mi><mo stretchy=\"false\">[</mo><mn>3</mn><mo stretchy=\"false\">]</mo><mo>:</mo><mn>09</mn><mtext> </mtext><mi>c</mi><mi>f</mi><mtext> </mtext><mn>4</mn><mi>f</mi><mtext> </mtext><mn>3</mn><mi>c</mi><mspace linebreak=\"newline\"></mspace><mtext>求扩展的第一轮的子密钥</mtext><mi>w</mi><mo stretchy=\"false\">[</mo><mn>4</mn><mo stretchy=\"false\">]</mo><mo separator=\"true\">,</mo><mi>w</mi><mo stretchy=\"false\">[</mo><mn>5</mn><mo stretchy=\"false\">]</mo><mo separator=\"true\">,</mo><mi>w</mi><mo stretchy=\"false\">[</mo><mn>6</mn><mo stretchy=\"false\">]</mo><mo separator=\"true\">,</mo><mi>w</mi><mo stretchy=\"false\">[</mo><mn>7</mn><mo stretchy=\"false\">]</mo><mspace linebreak=\"newline\"></mspace><mi>w</mi><mo stretchy=\"false\">[</mo><mn>4</mn><mo stretchy=\"false\">]</mo><mo>=</mo><mi>w</mi><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo><mi>x</mi><mi>o</mi><mi>r</mi><mi>T</mi><mo stretchy=\"false\">(</mo><mi>w</mi><mo stretchy=\"false\">[</mo><mn>3</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><mi>T</mi><mo stretchy=\"false\">(</mo><mi>w</mi><mo stretchy=\"false\">[</mo><mn>3</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo><mtext>计算过程如下：</mtext><mspace linebreak=\"newline\"></mspace><mn>1.</mn><mi>w</mi><mo stretchy=\"false\">[</mo><mn>3</mn><mo stretchy=\"false\">]</mo><mtext>循环左移</mtext><mn>1</mn><mtext>个字节得到</mtext><mi>c</mi><mi>f</mi><mtext> </mtext><mn>4</mn><mi>f</mi><mtext> </mtext><mn>3</mn><mi>c</mi><mtext> </mtext><mn>09</mn><mspace linebreak=\"newline\"></mspace><mn>2.</mn><mtext>字节代换得到</mtext><mn>8</mn><mi>a</mi><mtext> </mtext><mn>84</mn><mtext> </mtext><mi>e</mi><mi>b</mi><mtext> </mtext><mn>01</mn><mspace linebreak=\"newline\"></mspace><mn>3.</mn><mtext>与轮常量异或再与</mtext><mi>w</mi><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo><mtext>异或最后得到</mtext><mi>a</mi><mn>0</mn><mtext> </mtext><mi>f</mi><mi>a</mi><mtext> </mtext><mi>f</mi><mi>e</mi><mtext> </mtext><mn>17</mn></mrow><annotation encoding=\"application/x-tex\">w[0]:2b \\ 7e \\ 15 \\ 16\n\\\\ w[1]:28 \\ ae \\ d2 \\ a6\n\\\\ w[2]: ab \\ f7 \\ 15 \\ 88\n\\\\ w[3]: 09 \\ cf \\ 4f \\ 3c\n\\\\求扩展的第一轮的子密钥w[4],w[5],w[6],w[7]\n\\\\w[4] = w[0] xor T(w[3])\n\\\\ T(w[3])计算过程如下：\n\\\\1. w[3]循环左移1个字节得到cf \\ 4f \\ 3c \\ 09\n\\\\2.字节代换得到8a \\ 84 \\ eb \\ 01\n\\\\3.与轮常量异或再与w[0]异或最后得到a0 \\ fa \\ fe \\ 17\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">b</span><span class=\"mspace\"> </span><span class=\"mord\">7</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\"> </span><span class=\"mord\">15</span><span class=\"mspace\"> </span><span class=\"mord\">16</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">28</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">d</span><span class=\"mord\">2</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">a</span><span class=\"mord\">6</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord\">2</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">ab</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord\">7</span><span class=\"mspace\"> </span><span class=\"mord\">15</span><span class=\"mspace\"> </span><span class=\"mord\">88</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord\">3</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">09</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\"> </span><span class=\"mord\">4</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\"> </span><span class=\"mord\">3</span><span class=\"mord mathnormal\">c</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\">求扩展的第一轮的子密钥</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord\">4</span><span class=\"mclose\">]</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord\">5</span><span class=\"mclose\">]</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord\">6</span><span class=\"mclose\">]</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord\">7</span><span class=\"mclose\">]</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord\">4</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">or</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord\">3</span><span class=\"mclose\">])</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord\">3</span><span class=\"mclose\">])</span><span class=\"mord cjk_fallback\">计算过程如下：</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1.</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord\">3</span><span class=\"mclose\">]</span><span class=\"mord cjk_fallback\">循环左移</span><span class=\"mord\">1</span><span class=\"mord cjk_fallback\">个字节得到</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\"> </span><span class=\"mord\">4</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\"> </span><span class=\"mord\">3</span><span class=\"mord mathnormal\">c</span><span class=\"mspace\"> </span><span class=\"mord\">09</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">2.</span><span class=\"mord cjk_fallback\">字节代换得到</span><span class=\"mord\">8</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\"> </span><span class=\"mord\">84</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">b</span><span class=\"mspace\"> </span><span class=\"mord\">01</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">3.</span><span class=\"mord cjk_fallback\">与轮常量异或再与</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span><span class=\"mord cjk_fallback\">异或最后得到</span><span class=\"mord mathnormal\">a</span><span class=\"mord\">0</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\"> </span><span class=\"mord\">17</span></span></span></span></span></p>\n<h3 id=\"signature\">signature</h3>\n<p>signature定义用到快速软件实现——查表法。将行移位、列混合和S盒结合得到4个4bytes*256项的查找表（T盒）。</p>\n<p>列变换中，</p>\n<p><img src=\"AES.assets/image-20220118160907434.png\" alt=\"image-20220118160907434\"></p>\n<p>将其按列向量拆开，对于每一列，都有：</p>\n<p><img src=\"AES.assets/image-20220118160943225.png\" alt=\"image-20220118160943225\"></p>\n<p>所以得到：其中Wk0为本轮子密钥ki中对应的4字节</p>\n<p><img src=\"AES.assets/image-20220118161013057.png\" alt=\"image-20220118161013057\"></p>\n<p>T盒定义为</p>\n<p><img src=\"AES.assets/image-20220118161112688.png\" alt=\"image-20220118161112688\"></p>\n<p>所以轮操作变为：</p>\n<p><img src=\"AES.assets/image-20220118161222708.png\" alt=\"image-20220118161222708\"></p>\n<p>根据上述理论，预定义的结构如下</p>\n<p><img src=\"AES.assets/image-20220118151325836.png\" alt=\"image-20220118151325836\"></p>\n<p><img src=\"AES.assets/image-20220118151417023.png\" alt=\"image-20220118151417023\"></p>\n<h3 id=\"测试\">测试</h3>\n<p>AES_encrypt</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">AES_encrypt</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *in, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *out,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                 <span class=\"keyword\">const</span> AES_KEY *key)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> u32 *rk;</span><br><span class=\"line\">    u32 s0, s1, s2, s3, t0, t1, t2, t3;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> FULL_UNROLL</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> r;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/* ?FULL_UNROLL */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    assert(in &amp;&amp; out &amp;&amp; key);</span><br><span class=\"line\">    rk = key-&gt;rd_key;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * map byte array block to cipher state</span></span><br><span class=\"line\"><span class=\"comment\">     * and add initial round key:</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    s0 = GETU32(in     ) ^ rk[<span class=\"number\">0</span>];</span><br><span class=\"line\">    s1 = GETU32(in +  <span class=\"number\">4</span>) ^ rk[<span class=\"number\">1</span>];</span><br><span class=\"line\">    s2 = GETU32(in +  <span class=\"number\">8</span>) ^ rk[<span class=\"number\">2</span>];</span><br><span class=\"line\">    s3 = GETU32(in + <span class=\"number\">12</span>) ^ rk[<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> FULL_UNROLL</span></span><br><span class=\"line\">    <span class=\"comment\">/* round 1: */</span></span><br><span class=\"line\">    t0 = Te0[s0 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s1 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s2 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s3 &amp; <span class=\"number\">0xff</span>] ^ rk[ <span class=\"number\">4</span>];</span><br><span class=\"line\">    t1 = Te0[s1 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s2 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s3 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s0 &amp; <span class=\"number\">0xff</span>] ^ rk[ <span class=\"number\">5</span>];</span><br><span class=\"line\">    t2 = Te0[s2 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s3 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s0 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s1 &amp; <span class=\"number\">0xff</span>] ^ rk[ <span class=\"number\">6</span>];</span><br><span class=\"line\">    t3 = Te0[s3 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s0 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s1 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s2 &amp; <span class=\"number\">0xff</span>] ^ rk[ <span class=\"number\">7</span>];</span><br><span class=\"line\">    <span class=\"comment\">/* round 2: */</span></span><br><span class=\"line\">    s0 = Te0[t0 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t1 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t2 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t3 &amp; <span class=\"number\">0xff</span>] ^ rk[ <span class=\"number\">8</span>];</span><br><span class=\"line\">    s1 = Te0[t1 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t2 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t3 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t0 &amp; <span class=\"number\">0xff</span>] ^ rk[ <span class=\"number\">9</span>];</span><br><span class=\"line\">    s2 = Te0[t2 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t3 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t0 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t1 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">10</span>];</span><br><span class=\"line\">    s3 = Te0[t3 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t0 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t1 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t2 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">11</span>];</span><br><span class=\"line\">    <span class=\"comment\">/* round 3: */</span></span><br><span class=\"line\">    t0 = Te0[s0 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s1 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s2 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s3 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">12</span>];</span><br><span class=\"line\">    t1 = Te0[s1 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s2 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s3 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s0 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">13</span>];</span><br><span class=\"line\">    t2 = Te0[s2 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s3 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s0 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s1 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">14</span>];</span><br><span class=\"line\">    t3 = Te0[s3 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s0 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s1 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s2 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">15</span>];</span><br><span class=\"line\">    <span class=\"comment\">/* round 4: */</span></span><br><span class=\"line\">    s0 = Te0[t0 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t1 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t2 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t3 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">16</span>];</span><br><span class=\"line\">    s1 = Te0[t1 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t2 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t3 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t0 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">17</span>];</span><br><span class=\"line\">    s2 = Te0[t2 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t3 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t0 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t1 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">18</span>];</span><br><span class=\"line\">    s3 = Te0[t3 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t0 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t1 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t2 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">19</span>];</span><br><span class=\"line\">    <span class=\"comment\">/* round 5: */</span></span><br><span class=\"line\">    t0 = Te0[s0 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s1 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s2 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s3 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">20</span>];</span><br><span class=\"line\">    t1 = Te0[s1 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s2 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s3 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s0 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">21</span>];</span><br><span class=\"line\">    t2 = Te0[s2 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s3 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s0 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s1 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">22</span>];</span><br><span class=\"line\">    t3 = Te0[s3 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s0 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s1 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s2 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">23</span>];</span><br><span class=\"line\">    <span class=\"comment\">/* round 6: */</span></span><br><span class=\"line\">    s0 = Te0[t0 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t1 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t2 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t3 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">24</span>];</span><br><span class=\"line\">    s1 = Te0[t1 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t2 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t3 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t0 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">25</span>];</span><br><span class=\"line\">    s2 = Te0[t2 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t3 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t0 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t1 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">26</span>];</span><br><span class=\"line\">    s3 = Te0[t3 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t0 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t1 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t2 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">27</span>];</span><br><span class=\"line\">    <span class=\"comment\">/* round 7: */</span></span><br><span class=\"line\">    t0 = Te0[s0 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s1 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s2 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s3 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">28</span>];</span><br><span class=\"line\">    t1 = Te0[s1 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s2 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s3 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s0 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">29</span>];</span><br><span class=\"line\">    t2 = Te0[s2 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s3 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s0 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s1 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">30</span>];</span><br><span class=\"line\">    t3 = Te0[s3 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s0 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s1 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s2 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">31</span>];</span><br><span class=\"line\">    <span class=\"comment\">/* round 8: */</span></span><br><span class=\"line\">    s0 = Te0[t0 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t1 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t2 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t3 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">32</span>];</span><br><span class=\"line\">    s1 = Te0[t1 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t2 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t3 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t0 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">33</span>];</span><br><span class=\"line\">    s2 = Te0[t2 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t3 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t0 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t1 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">34</span>];</span><br><span class=\"line\">    s3 = Te0[t3 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t0 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t1 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t2 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">35</span>];</span><br><span class=\"line\">    <span class=\"comment\">/* round 9: */</span></span><br><span class=\"line\">    t0 = Te0[s0 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s1 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s2 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s3 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">36</span>];</span><br><span class=\"line\">    t1 = Te0[s1 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s2 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s3 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s0 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">37</span>];</span><br><span class=\"line\">    t2 = Te0[s2 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s3 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s0 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s1 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">38</span>];</span><br><span class=\"line\">    t3 = Te0[s3 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s0 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s1 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s2 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">39</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key-&gt;rounds &gt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* round 10: */</span></span><br><span class=\"line\">        s0 = Te0[t0 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t1 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t2 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t3 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">40</span>];</span><br><span class=\"line\">        s1 = Te0[t1 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t2 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t3 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t0 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">41</span>];</span><br><span class=\"line\">        s2 = Te0[t2 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t3 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t0 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t1 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">42</span>];</span><br><span class=\"line\">        s3 = Te0[t3 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t0 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t1 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t2 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">43</span>];</span><br><span class=\"line\">        <span class=\"comment\">/* round 11: */</span></span><br><span class=\"line\">        t0 = Te0[s0 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s1 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s2 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s3 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">44</span>];</span><br><span class=\"line\">        t1 = Te0[s1 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s2 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s3 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s0 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">45</span>];</span><br><span class=\"line\">        t2 = Te0[s2 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s3 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s0 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s1 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">46</span>];</span><br><span class=\"line\">        t3 = Te0[s3 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s0 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s1 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s2 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">47</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key-&gt;rounds &gt; <span class=\"number\">12</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/* round 12: */</span></span><br><span class=\"line\">            s0 = Te0[t0 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t1 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t2 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t3 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">48</span>];</span><br><span class=\"line\">            s1 = Te0[t1 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t2 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t3 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t0 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">49</span>];</span><br><span class=\"line\">            s2 = Te0[t2 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t3 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t0 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t1 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">50</span>];</span><br><span class=\"line\">            s3 = Te0[t3 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(t0 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(t1 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[t2 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">51</span>];</span><br><span class=\"line\">            <span class=\"comment\">/* round 13: */</span></span><br><span class=\"line\">            t0 = Te0[s0 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s1 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s2 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s3 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">52</span>];</span><br><span class=\"line\">            t1 = Te0[s1 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s2 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s3 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s0 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">53</span>];</span><br><span class=\"line\">            t2 = Te0[s2 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s3 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s0 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s1 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">54</span>];</span><br><span class=\"line\">            t3 = Te0[s3 &gt;&gt; <span class=\"number\">24</span>] ^ Te1[(s0 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^ Te2[(s1 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^ Te3[s2 &amp; <span class=\"number\">0xff</span>] ^ rk[<span class=\"number\">55</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    rk += key-&gt;rounds &lt;&lt; <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span>  <span class=\"comment\">/* !FULL_UNROLL */</span></span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Nr - 1 full rounds:</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    r = key-&gt;rounds &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        t0 =</span><br><span class=\"line\">            Te0[(s0 &gt;&gt; <span class=\"number\">24</span>)       ] ^</span><br><span class=\"line\">            Te1[(s1 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            Te2[(s2 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            Te3[(s3      ) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            rk[<span class=\"number\">4</span>];</span><br><span class=\"line\">        t1 =</span><br><span class=\"line\">            Te0[(s1 &gt;&gt; <span class=\"number\">24</span>)       ] ^</span><br><span class=\"line\">            Te1[(s2 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            Te2[(s3 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            Te3[(s0      ) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            rk[<span class=\"number\">5</span>];</span><br><span class=\"line\">        t2 =</span><br><span class=\"line\">            Te0[(s2 &gt;&gt; <span class=\"number\">24</span>)       ] ^</span><br><span class=\"line\">            Te1[(s3 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            Te2[(s0 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            Te3[(s1      ) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            rk[<span class=\"number\">6</span>];</span><br><span class=\"line\">        t3 =</span><br><span class=\"line\">            Te0[(s3 &gt;&gt; <span class=\"number\">24</span>)       ] ^</span><br><span class=\"line\">            Te1[(s0 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            Te2[(s1 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            Te3[(s2      ) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            rk[<span class=\"number\">7</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        rk += <span class=\"number\">8</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (--r == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        s0 =</span><br><span class=\"line\">            Te0[(t0 &gt;&gt; <span class=\"number\">24</span>)       ] ^</span><br><span class=\"line\">            Te1[(t1 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            Te2[(t2 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            Te3[(t3      ) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            rk[<span class=\"number\">0</span>];</span><br><span class=\"line\">        s1 =</span><br><span class=\"line\">            Te0[(t1 &gt;&gt; <span class=\"number\">24</span>)       ] ^</span><br><span class=\"line\">            Te1[(t2 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            Te2[(t3 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            Te3[(t0      ) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            rk[<span class=\"number\">1</span>];</span><br><span class=\"line\">        s2 =</span><br><span class=\"line\">            Te0[(t2 &gt;&gt; <span class=\"number\">24</span>)       ] ^</span><br><span class=\"line\">            Te1[(t3 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            Te2[(t0 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            Te3[(t1      ) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            rk[<span class=\"number\">2</span>];</span><br><span class=\"line\">        s3 =</span><br><span class=\"line\">            Te0[(t3 &gt;&gt; <span class=\"number\">24</span>)       ] ^</span><br><span class=\"line\">            Te1[(t0 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            Te2[(t1 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            Te3[(t2      ) &amp; <span class=\"number\">0xff</span>] ^</span><br><span class=\"line\">            rk[<span class=\"number\">3</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/* ?FULL_UNROLL */</span></span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">   * apply last round and</span></span><br><span class=\"line\"><span class=\"comment\">      map cipher state to byte array block:</span></span><br><span class=\"line\"><span class=\"comment\">          */</span></span><br><span class=\"line\">         s0 =</span><br><span class=\"line\">     (Te2[(t0 &gt;&gt; <span class=\"number\">24</span>)       ] &amp; <span class=\"number\">0xff000000</span>) ^</span><br><span class=\"line\">     (Te3[(t1 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] &amp; <span class=\"number\">0x00ff0000</span>) ^</span><br><span class=\"line\">     (Te0[(t2 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] &amp; <span class=\"number\">0x0000ff00</span>) ^</span><br><span class=\"line\">     (Te1[(t3      ) &amp; <span class=\"number\">0xff</span>] &amp; <span class=\"number\">0x000000ff</span>) ^</span><br><span class=\"line\">     rk[<span class=\"number\">0</span>];</span><br><span class=\"line\">         PUTU32(out     , s0);</span><br><span class=\"line\">         s1 =</span><br><span class=\"line\">     (Te2[(t1 &gt;&gt; <span class=\"number\">24</span>)       ] &amp; <span class=\"number\">0xff000000</span>) ^</span><br><span class=\"line\">     (Te3[(t2 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] &amp; <span class=\"number\">0x00ff0000</span>) ^</span><br><span class=\"line\">     (Te0[(t3 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] &amp; <span class=\"number\">0x0000ff00</span>) ^</span><br><span class=\"line\">     (Te1[(t0      ) &amp; <span class=\"number\">0xff</span>] &amp; <span class=\"number\">0x000000ff</span>) ^</span><br><span class=\"line\">     rk[<span class=\"number\">1</span>];</span><br><span class=\"line\">         PUTU32(out +  <span class=\"number\">4</span>, s1);</span><br><span class=\"line\">         s2 =</span><br><span class=\"line\">     (Te2[(t2 &gt;&gt; <span class=\"number\">24</span>)       ] &amp; <span class=\"number\">0xff000000</span>) ^</span><br><span class=\"line\">     (Te3[(t3 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] &amp; <span class=\"number\">0x00ff0000</span>) ^</span><br><span class=\"line\">     (Te0[(t0 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] &amp; <span class=\"number\">0x0000ff00</span>) ^</span><br><span class=\"line\">     (Te1[(t1      ) &amp; <span class=\"number\">0xff</span>] &amp; <span class=\"number\">0x000000ff</span>) ^</span><br><span class=\"line\">     rk[<span class=\"number\">2</span>];</span><br><span class=\"line\">         PUTU32(out +  <span class=\"number\">8</span>, s2);</span><br><span class=\"line\">         s3 =</span><br><span class=\"line\">     (Te2[(t3 &gt;&gt; <span class=\"number\">24</span>)       ] &amp; <span class=\"number\">0xff000000</span>) ^</span><br><span class=\"line\">     (Te3[(t0 &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>] &amp; <span class=\"number\">0x00ff0000</span>) ^</span><br><span class=\"line\">     (Te0[(t1 &gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>] &amp; <span class=\"number\">0x0000ff00</span>) ^</span><br><span class=\"line\">     (Te1[(t2      ) &amp; <span class=\"number\">0xff</span>] &amp; <span class=\"number\">0x000000ff</span>) ^</span><br><span class=\"line\">     rk[<span class=\"number\">3</span>];</span><br><span class=\"line\">         PUTU32(out + <span class=\"number\">12</span>, s3);</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n<p>可以从图中很明显看出符合signature的特征</p>\n<p><img src=\"AES.assets/image-20220118172332974.png\" alt=\"image-20220118172332974\"></p>\n<h2 id=\"\"></h2>\n"},{"title":"DES","date":"2022-01-14T12:00:00.000Z","keywords":["DES"],"description":null,"top_img":null,"comments":1,"cover":"https://scorpionre.github.io/2022/01/14/DES/DES.assets/image-20220112114938574.png","toc":null,"toc_number":null,"copyright":null,"mathjax":null,"katex":true,"hide":null,"_content":"\n# DES\n\n### 算法原理\n\n- 输入 64 位。\n- 输出 64 位。\n\n- 密钥长64位，密钥事实上是56位参与DES运算（第8、16、24、32、40、48、56、64位是校验位， 使得每个密钥都有奇数个1）\n\n\n\n算法流程图如下：\n\n![image-20220112114938574](DES.assets/image-20220112114938574.png)\n\n\n\n#### 密钥生成\n\n1. 选择置换：不考虑每个字节的第8位，DES的密钥由64位减至56位，每个字节的第8位作为奇偶校验位\n\n   ![image-20220112132946201](DES.assets/image-20220112132946201.png)\n\n2. 循环移位：根据轮数，将两部分分别循环左移1位或2位。\n\n   ![image-20220112133041770](DES.assets/image-20220112133041770.png)\n\n3. 置换：移位后，从56位中选出48位\n\n   ![image-20220112133518482](DES.assets/image-20220112133518482.png)\n\n#### 加密\n\n1. IP置换：将输入的64位数据块按位重新组合，并把输出分为L0、R0两部分，每部分各长32位。比如以下置换规则表，表示此位置的数据在原数据中的位置，即原数据块的第58位放到新数据的第1位\n\n![image-20220112133802349](DES.assets/image-20220112133802349.png)\n\n2. Feistel\n\n   ![image-20220112134612622](DES.assets/image-20220112134612622.png)\n\n   - E（扩张置换）：将32位的半块R0扩展到48位，其输出包括8个6位的块，每块包含4位对应的输入位，加上两个邻接的块中紧邻的位。然后与子密钥异或。\n\n     目的有两个：生成与密钥相同长度的数据以进行异或运算；提供更长的结果，在后续的替代运算中可以进行压缩\n\n     ![image-20220112133737845](DES.assets/image-20220112133737845.png)\n\n   - S盒：替代运算。（非线性，提供安全性）每个S盒将6位输入变为4位输出。给定输入后，输出行由外侧 2 位确定，列由内侧的 4 位确定，例如“011011”的输入的外侧位为“01”，内侧位为“1101”，而每张表的第一行为“00”，第一列为“0000”，输出S盒的第2行，第14列\n\n     |        | x0000x | x0001x | x0010x | x0011x | x0100x | x0101x | x0110x | x0111x | x1000x | x1001x | x1010x | x1011x | x1100x | x1101x | x1110x | x1111x |\n     | ------ | ------ | ------ | ------ | ------ | ------ | ------ | ------ | ------ | ------ | ------ | ------ | ------ | ------ | ------ | ------ | ------ |\n     | 0yyyy0 | 14     | 4      | 13     | 1      | 2      | 15     | 11     | 8      | 3      | 10     | 6      | 12     | 5      | 9      | 0      | 7      |\n     | 0yyyy1 | 0      | 15     | 7      | 4      | 14     | 2      | 13     | 1      | 10     | 6      | 12     | 11     | 9      | 5      | 3      | 8      |\n     | 1yyyy0 | 4      | 1      | 14     | 8      | 13     | 6      | 2      | 11     | 15     | 12     | 9      | 7      | 3      | 10     | 5      | 0      |\n     | 1yyyy1 | 15     | 12     | 8      | 2      | 4      | 9      | 1      | 7      | 5      | 11     | 3      | 14     | 10     | 0      | 6      | 13     |\n\n   - P置换：将32位的半块数据重新排列\n\n     ![image-20220112134549104](DES.assets/image-20220112134549104.png)\n\n3. FP置换（IP置换的逆过程）\n\n   ![image-20220112134705510](DES.assets/image-20220112134705510.png)\n\n### signature\n\nFeistel网络结构\n\n![image-20220113142045280](DES.assets/image-20220113142045280.png)\n\n适用的加密算法\n\n![image-20220112135218512](DES.assets/image-20220112135218512.png)\n\nDSL描述\n\n![image-20220112135026479](DES.assets/image-20220112135026479.png)\n\n### 效果\n\nlibcrypto.so.1.1(openssl)\n\n![image-20220112165741033](DES.assets/image-20220112165741033.png)\n\n\n\nopenssl中查看源代码\n\n```c\n//des_local.h\n# define D_ENCRYPT(LL,R,S) { \\\n        LOAD_DATA_tmp(R,S,u,t,E0,E1); \\\n        t=ROTATE(t,4); \\\n        LL^= \\\n            DES_SPtrans[0][(u>> 2L)&0x3f]^ \\\n            DES_SPtrans[2][(u>>10L)&0x3f]^ \\\n            DES_SPtrans[4][(u>>18L)&0x3f]^ \\\n            DES_SPtrans[6][(u>>26L)&0x3f]^ \\\n            DES_SPtrans[1][(t>> 2L)&0x3f]^ \\\n            DES_SPtrans[3][(t>>10L)&0x3f]^ \\\n            DES_SPtrans[5][(t>>18L)&0x3f]^ \\\n            DES_SPtrans[7][(t>>26L)&0x3f]; }\n        \n//des_enc.c\nvoid DES_encrypt2(DES_LONG *data, DES_key_schedule *ks, int enc)\n{\n    register DES_LONG l, r, t, u;\n    register DES_LONG *s;\n\n    r = data[0];\n    l = data[1];\n\n    /*\n     * Things have been modified so that the initial rotate is done outside\n     * the loop.  This required the DES_SPtrans values in sp.h to be rotated\n     * 1 bit to the right. One perl script later and things have a 5% speed\n     * up on a sparc2. Thanks to Richard Outerbridge for pointing this out.\n     */\n    /* clear the top bits on machines with 8byte longs */\n    r = ROTATE(r, 29) & 0xffffffffL;\n    l = ROTATE(l, 29) & 0xffffffffL;\n\n    s = ks->ks->deslong;\n    /*\n     * I don't know if it is worth the effort of loop unrolling the inner\n     * loop\n     */\n    if (enc) {\n        D_ENCRYPT(l, r, 0);     /* 1 */\n        D_ENCRYPT(r, l, 2);     /* 2 */\n        D_ENCRYPT(l, r, 4);     /* 3 */\n        D_ENCRYPT(r, l, 6);     /* 4 */\n        D_ENCRYPT(l, r, 8);     /* 5 */\n        D_ENCRYPT(r, l, 10);    /* 6 */\n        D_ENCRYPT(l, r, 12);    /* 7 */\n        D_ENCRYPT(r, l, 14);    /* 8 */\n        D_ENCRYPT(l, r, 16);    /* 9 */\n        D_ENCRYPT(r, l, 18);    /* 10 */\n        D_ENCRYPT(l, r, 20);    /* 11 */\n        D_ENCRYPT(r, l, 22);    /* 12 */\n        D_ENCRYPT(l, r, 24);    /* 13 */\n        D_ENCRYPT(r, l, 26);    /* 14 */\n        D_ENCRYPT(l, r, 28);    /* 15 */\n        D_ENCRYPT(r, l, 30);    /* 16 */\n    } else {\n        D_ENCRYPT(l, r, 30);    /* 16 */\n        D_ENCRYPT(r, l, 28);    /* 15 */\n        D_ENCRYPT(l, r, 26);    /* 14 */\n        D_ENCRYPT(r, l, 24);    /* 13 */\n        D_ENCRYPT(l, r, 22);    /* 12 */\n        D_ENCRYPT(r, l, 20);    /* 11 */\n        D_ENCRYPT(l, r, 18);    /* 10 */\n        D_ENCRYPT(r, l, 16);    /* 9 */\n        D_ENCRYPT(l, r, 14);    /* 8 */\n        D_ENCRYPT(r, l, 12);    /* 7 */\n        D_ENCRYPT(l, r, 10);    /* 6 */\n        D_ENCRYPT(r, l, 8);     /* 5 */\n        D_ENCRYPT(l, r, 6);     /* 4 */\n        D_ENCRYPT(r, l, 4);     /* 3 */\n        D_ENCRYPT(l, r, 2);     /* 2 */\n        D_ENCRYPT(r, l, 0);     /* 1 */\n    }\n    /* rotate and clear the top bits on machines with 8byte longs */\n    data[0] = ROTATE(l, 3) & 0xffffffffL;\n    data[1] = ROTATE(r, 3) & 0xffffffffL;\n    l = r = t = u = 0;\n}\n\nvoid DES_encrypt3(DES_LONG *data, DES_key_schedule *ks1,\n                  DES_key_schedule *ks2, DES_key_schedule *ks3)\n{\n    register DES_LONG l, r;\n\n    l = data[0];\n    r = data[1];\n    IP(l, r);\n    data[0] = l;\n    data[1] = r;\n    DES_encrypt2((DES_LONG *)data, ks1, DES_ENCRYPT);\n    DES_encrypt2((DES_LONG *)data, ks2, DES_DECRYPT);\n    DES_encrypt2((DES_LONG *)data, ks3, DES_ENCRYPT);\n    l = data[0];\n    r = data[1];\n    FP(r, l);\n    data[0] = l;\n    data[1] = r;\n}\nvoid DES_ede3_cbc_encrypt(const unsigned char *input, unsigned char *output,\n                          long length, DES_key_schedule *ks1,\n                          DES_key_schedule *ks2, DES_key_schedule *ks3,\n                          DES_cblock *ivec, int enc)\n{\n    register DES_LONG tin0, tin1;\n    register DES_LONG tout0, tout1, xor0, xor1;\n    register const unsigned char *in;\n    unsigned char *out;\n    register long l = length;\n    DES_LONG tin[2];\n    unsigned char *iv;\n\n    in = input;\n    out = output;\n    iv = &(*ivec)[0];\n\n    if (enc) {\n        c2l(iv, tout0);\n        c2l(iv, tout1);\n        for (l -= 8; l >= 0; l -= 8) {\n            c2l(in, tin0);\n            c2l(in, tin1);\n            tin0 ^= tout0;\n            tin1 ^= tout1;\n\n            tin[0] = tin0;\n            tin[1] = tin1;\n            DES_encrypt3((DES_LONG *)tin, ks1, ks2, ks3);\n            tout0 = tin[0];\n            tout1 = tin[1];\n\n            l2c(tout0, out);\n            l2c(tout1, out);\n        }\n        if (l != -8) {\n            c2ln(in, tin0, tin1, l + 8);\n            tin0 ^= tout0;\n            tin1 ^= tout1;\n\n            tin[0] = tin0;\n            tin[1] = tin1;\n            DES_encrypt3((DES_LONG *)tin, ks1, ks2, ks3);\n            tout0 = tin[0];\n            tout1 = tin[1];\n\n            l2c(tout0, out);\n            l2c(tout1, out);\n        }\n        iv = &(*ivec)[0];\n        l2c(tout0, iv);\n        l2c(tout1, iv);\n    } else {\n        register DES_LONG t0, t1;\n\n        c2l(iv, xor0);\n        c2l(iv, xor1);\n        for (l -= 8; l >= 0; l -= 8) {\n            c2l(in, tin0);\n            c2l(in, tin1);\n\n            t0 = tin0;\n            t1 = tin1;\n\n            tin[0] = tin0;\n            tin[1] = tin1;\n            DES_decrypt3((DES_LONG *)tin, ks1, ks2, ks3);\n            tout0 = tin[0];\n            tout1 = tin[1];\n\n            tout0 ^= xor0;\n            tout1 ^= xor1;\n            l2c(tout0, out);\n            l2c(tout1, out);\n            xor0 = t0;\n            xor1 = t1;\n        }\n        if (l != -8) {\n            c2l(in, tin0);\n            c2l(in, tin1);\n\n            t0 = tin0;\n            t1 = tin1;\n\n            tin[0] = tin0;\n            tin[1] = tin1;\n            DES_decrypt3((DES_LONG *)tin, ks1, ks2, ks3);\n            tout0 = tin[0];\n            tout1 = tin[1];\n\n            tout0 ^= xor0;\n            tout1 ^= xor1;\n            l2cn(tout0, tout1, out, l + 8);\n            xor0 = t0;\n            xor1 = t1;\n        }\n\n        iv = &(*ivec)[0];\n        l2c(xor0, iv);\n        l2c(xor1, iv);\n    }\n    tin0 = tin1 = tout0 = tout1 = xor0 = xor1 = 0;\n    tin[0] = tin[1] = 0;\n}\n\n#endif                          /* DES_DEFAULT_OPTIONS */\n\n//\n\n```\n\n该图匹配到了feistel VARIANT B,根据常量看好像是encrypt3中的最后一部分，感觉不太明白子图和具体代码构建出来的图![image-20220113124310851](DES.assets/image-20220113124310851.png)\n\n\n\n新的代码\n\n![image-20220113141131473](DES.assets/image-20220113141131473.png)\n\n```c\nuint64_t raw_des(uint64_t text, uint64_t key, uint8_t mode){\n    uint64_t* subkeys = (uint64_t*)malloc(sizeof(uint64_t)*16);\n    generateSubkeys(key, subkeys);\n    uint32_t L = 0, R = 0, SR = 0, PR = 0, tmp = 0;\n    uint64_t ER = 0, output = 0, subkey = 0;\n    text = ip(text);\n    L = (text >> 32) & 0x00000000ffffffff;\n    R = text & 0x00000000ffffffff;\n    for (int i = 0; i < 16; i ++){\n        ER = extend(R);\n        subkey = (mode == 0) ? subkeys[i] : subkeys[15-i];\n        ER = ER ^ subkey;\n        SR = s(ER);\n        PR = p(SR);\n        tmp = R;\n        R = L ^ PR;\n        L = tmp;\n    }\n    free(subkeys);\n    output = inv_ip(((uint64_t)(R) << 32 ) | (uint64_t)(L));\n    return output;\n}\nuint64_t des_ede2(uint64_t text, uint64_t key1, uint64_t key2, uint8_t mode){\n    uint64_t result;\n    result = (mode == 0) ? raw_des(text, key1, 0) : raw_des(text, key1, 1);\n    result = (mode == 0) ? raw_des(result, key2, 1) : raw_des(result, key2, 0);\n    result = (mode == 0) ? raw_des(result, key1, 0) : raw_des(result, key1, 1);\n    return result;\n}\n```\n\n这个的图结构看起来就更清晰，符合feistel网络结构，也符合定义的signature的VARIANT C\n\n![image-20220113141442031](DES.assets/image-20220113141442031.png)\n\n每轮加密\n\n![image-20220113142202479](DES.assets/image-20220113142202479.png)\n\n![image-20220113142344671](DES.assets/image-20220113142344671.png)\n\n\n\n`发现好像有的函数会代入图中，有的不会（都是BL调用函数）`\n","source":"_posts/DES.md","raw":"---\ntitle: DES\ndate: 2022-01-14 20:00:00\ntags: \n  - crypto\n  - algorithm\n  - CryptoDetect\ncategories:\n  - [CryptoDetect,algorithm]\nkeywords:\n\t- DES\ndescription:\ntop_img:\ncomments:\ncover:  https://scorpionre.github.io/2022/01/14/DES/DES.assets/image-20220112114938574.png\ntoc:\ntoc_number:\ncopyright:\nmathjax: \nkatex:  true\nhide:\n---\n\n# DES\n\n### 算法原理\n\n- 输入 64 位。\n- 输出 64 位。\n\n- 密钥长64位，密钥事实上是56位参与DES运算（第8、16、24、32、40、48、56、64位是校验位， 使得每个密钥都有奇数个1）\n\n\n\n算法流程图如下：\n\n![image-20220112114938574](DES.assets/image-20220112114938574.png)\n\n\n\n#### 密钥生成\n\n1. 选择置换：不考虑每个字节的第8位，DES的密钥由64位减至56位，每个字节的第8位作为奇偶校验位\n\n   ![image-20220112132946201](DES.assets/image-20220112132946201.png)\n\n2. 循环移位：根据轮数，将两部分分别循环左移1位或2位。\n\n   ![image-20220112133041770](DES.assets/image-20220112133041770.png)\n\n3. 置换：移位后，从56位中选出48位\n\n   ![image-20220112133518482](DES.assets/image-20220112133518482.png)\n\n#### 加密\n\n1. IP置换：将输入的64位数据块按位重新组合，并把输出分为L0、R0两部分，每部分各长32位。比如以下置换规则表，表示此位置的数据在原数据中的位置，即原数据块的第58位放到新数据的第1位\n\n![image-20220112133802349](DES.assets/image-20220112133802349.png)\n\n2. Feistel\n\n   ![image-20220112134612622](DES.assets/image-20220112134612622.png)\n\n   - E（扩张置换）：将32位的半块R0扩展到48位，其输出包括8个6位的块，每块包含4位对应的输入位，加上两个邻接的块中紧邻的位。然后与子密钥异或。\n\n     目的有两个：生成与密钥相同长度的数据以进行异或运算；提供更长的结果，在后续的替代运算中可以进行压缩\n\n     ![image-20220112133737845](DES.assets/image-20220112133737845.png)\n\n   - S盒：替代运算。（非线性，提供安全性）每个S盒将6位输入变为4位输出。给定输入后，输出行由外侧 2 位确定，列由内侧的 4 位确定，例如“011011”的输入的外侧位为“01”，内侧位为“1101”，而每张表的第一行为“00”，第一列为“0000”，输出S盒的第2行，第14列\n\n     |        | x0000x | x0001x | x0010x | x0011x | x0100x | x0101x | x0110x | x0111x | x1000x | x1001x | x1010x | x1011x | x1100x | x1101x | x1110x | x1111x |\n     | ------ | ------ | ------ | ------ | ------ | ------ | ------ | ------ | ------ | ------ | ------ | ------ | ------ | ------ | ------ | ------ | ------ |\n     | 0yyyy0 | 14     | 4      | 13     | 1      | 2      | 15     | 11     | 8      | 3      | 10     | 6      | 12     | 5      | 9      | 0      | 7      |\n     | 0yyyy1 | 0      | 15     | 7      | 4      | 14     | 2      | 13     | 1      | 10     | 6      | 12     | 11     | 9      | 5      | 3      | 8      |\n     | 1yyyy0 | 4      | 1      | 14     | 8      | 13     | 6      | 2      | 11     | 15     | 12     | 9      | 7      | 3      | 10     | 5      | 0      |\n     | 1yyyy1 | 15     | 12     | 8      | 2      | 4      | 9      | 1      | 7      | 5      | 11     | 3      | 14     | 10     | 0      | 6      | 13     |\n\n   - P置换：将32位的半块数据重新排列\n\n     ![image-20220112134549104](DES.assets/image-20220112134549104.png)\n\n3. FP置换（IP置换的逆过程）\n\n   ![image-20220112134705510](DES.assets/image-20220112134705510.png)\n\n### signature\n\nFeistel网络结构\n\n![image-20220113142045280](DES.assets/image-20220113142045280.png)\n\n适用的加密算法\n\n![image-20220112135218512](DES.assets/image-20220112135218512.png)\n\nDSL描述\n\n![image-20220112135026479](DES.assets/image-20220112135026479.png)\n\n### 效果\n\nlibcrypto.so.1.1(openssl)\n\n![image-20220112165741033](DES.assets/image-20220112165741033.png)\n\n\n\nopenssl中查看源代码\n\n```c\n//des_local.h\n# define D_ENCRYPT(LL,R,S) { \\\n        LOAD_DATA_tmp(R,S,u,t,E0,E1); \\\n        t=ROTATE(t,4); \\\n        LL^= \\\n            DES_SPtrans[0][(u>> 2L)&0x3f]^ \\\n            DES_SPtrans[2][(u>>10L)&0x3f]^ \\\n            DES_SPtrans[4][(u>>18L)&0x3f]^ \\\n            DES_SPtrans[6][(u>>26L)&0x3f]^ \\\n            DES_SPtrans[1][(t>> 2L)&0x3f]^ \\\n            DES_SPtrans[3][(t>>10L)&0x3f]^ \\\n            DES_SPtrans[5][(t>>18L)&0x3f]^ \\\n            DES_SPtrans[7][(t>>26L)&0x3f]; }\n        \n//des_enc.c\nvoid DES_encrypt2(DES_LONG *data, DES_key_schedule *ks, int enc)\n{\n    register DES_LONG l, r, t, u;\n    register DES_LONG *s;\n\n    r = data[0];\n    l = data[1];\n\n    /*\n     * Things have been modified so that the initial rotate is done outside\n     * the loop.  This required the DES_SPtrans values in sp.h to be rotated\n     * 1 bit to the right. One perl script later and things have a 5% speed\n     * up on a sparc2. Thanks to Richard Outerbridge for pointing this out.\n     */\n    /* clear the top bits on machines with 8byte longs */\n    r = ROTATE(r, 29) & 0xffffffffL;\n    l = ROTATE(l, 29) & 0xffffffffL;\n\n    s = ks->ks->deslong;\n    /*\n     * I don't know if it is worth the effort of loop unrolling the inner\n     * loop\n     */\n    if (enc) {\n        D_ENCRYPT(l, r, 0);     /* 1 */\n        D_ENCRYPT(r, l, 2);     /* 2 */\n        D_ENCRYPT(l, r, 4);     /* 3 */\n        D_ENCRYPT(r, l, 6);     /* 4 */\n        D_ENCRYPT(l, r, 8);     /* 5 */\n        D_ENCRYPT(r, l, 10);    /* 6 */\n        D_ENCRYPT(l, r, 12);    /* 7 */\n        D_ENCRYPT(r, l, 14);    /* 8 */\n        D_ENCRYPT(l, r, 16);    /* 9 */\n        D_ENCRYPT(r, l, 18);    /* 10 */\n        D_ENCRYPT(l, r, 20);    /* 11 */\n        D_ENCRYPT(r, l, 22);    /* 12 */\n        D_ENCRYPT(l, r, 24);    /* 13 */\n        D_ENCRYPT(r, l, 26);    /* 14 */\n        D_ENCRYPT(l, r, 28);    /* 15 */\n        D_ENCRYPT(r, l, 30);    /* 16 */\n    } else {\n        D_ENCRYPT(l, r, 30);    /* 16 */\n        D_ENCRYPT(r, l, 28);    /* 15 */\n        D_ENCRYPT(l, r, 26);    /* 14 */\n        D_ENCRYPT(r, l, 24);    /* 13 */\n        D_ENCRYPT(l, r, 22);    /* 12 */\n        D_ENCRYPT(r, l, 20);    /* 11 */\n        D_ENCRYPT(l, r, 18);    /* 10 */\n        D_ENCRYPT(r, l, 16);    /* 9 */\n        D_ENCRYPT(l, r, 14);    /* 8 */\n        D_ENCRYPT(r, l, 12);    /* 7 */\n        D_ENCRYPT(l, r, 10);    /* 6 */\n        D_ENCRYPT(r, l, 8);     /* 5 */\n        D_ENCRYPT(l, r, 6);     /* 4 */\n        D_ENCRYPT(r, l, 4);     /* 3 */\n        D_ENCRYPT(l, r, 2);     /* 2 */\n        D_ENCRYPT(r, l, 0);     /* 1 */\n    }\n    /* rotate and clear the top bits on machines with 8byte longs */\n    data[0] = ROTATE(l, 3) & 0xffffffffL;\n    data[1] = ROTATE(r, 3) & 0xffffffffL;\n    l = r = t = u = 0;\n}\n\nvoid DES_encrypt3(DES_LONG *data, DES_key_schedule *ks1,\n                  DES_key_schedule *ks2, DES_key_schedule *ks3)\n{\n    register DES_LONG l, r;\n\n    l = data[0];\n    r = data[1];\n    IP(l, r);\n    data[0] = l;\n    data[1] = r;\n    DES_encrypt2((DES_LONG *)data, ks1, DES_ENCRYPT);\n    DES_encrypt2((DES_LONG *)data, ks2, DES_DECRYPT);\n    DES_encrypt2((DES_LONG *)data, ks3, DES_ENCRYPT);\n    l = data[0];\n    r = data[1];\n    FP(r, l);\n    data[0] = l;\n    data[1] = r;\n}\nvoid DES_ede3_cbc_encrypt(const unsigned char *input, unsigned char *output,\n                          long length, DES_key_schedule *ks1,\n                          DES_key_schedule *ks2, DES_key_schedule *ks3,\n                          DES_cblock *ivec, int enc)\n{\n    register DES_LONG tin0, tin1;\n    register DES_LONG tout0, tout1, xor0, xor1;\n    register const unsigned char *in;\n    unsigned char *out;\n    register long l = length;\n    DES_LONG tin[2];\n    unsigned char *iv;\n\n    in = input;\n    out = output;\n    iv = &(*ivec)[0];\n\n    if (enc) {\n        c2l(iv, tout0);\n        c2l(iv, tout1);\n        for (l -= 8; l >= 0; l -= 8) {\n            c2l(in, tin0);\n            c2l(in, tin1);\n            tin0 ^= tout0;\n            tin1 ^= tout1;\n\n            tin[0] = tin0;\n            tin[1] = tin1;\n            DES_encrypt3((DES_LONG *)tin, ks1, ks2, ks3);\n            tout0 = tin[0];\n            tout1 = tin[1];\n\n            l2c(tout0, out);\n            l2c(tout1, out);\n        }\n        if (l != -8) {\n            c2ln(in, tin0, tin1, l + 8);\n            tin0 ^= tout0;\n            tin1 ^= tout1;\n\n            tin[0] = tin0;\n            tin[1] = tin1;\n            DES_encrypt3((DES_LONG *)tin, ks1, ks2, ks3);\n            tout0 = tin[0];\n            tout1 = tin[1];\n\n            l2c(tout0, out);\n            l2c(tout1, out);\n        }\n        iv = &(*ivec)[0];\n        l2c(tout0, iv);\n        l2c(tout1, iv);\n    } else {\n        register DES_LONG t0, t1;\n\n        c2l(iv, xor0);\n        c2l(iv, xor1);\n        for (l -= 8; l >= 0; l -= 8) {\n            c2l(in, tin0);\n            c2l(in, tin1);\n\n            t0 = tin0;\n            t1 = tin1;\n\n            tin[0] = tin0;\n            tin[1] = tin1;\n            DES_decrypt3((DES_LONG *)tin, ks1, ks2, ks3);\n            tout0 = tin[0];\n            tout1 = tin[1];\n\n            tout0 ^= xor0;\n            tout1 ^= xor1;\n            l2c(tout0, out);\n            l2c(tout1, out);\n            xor0 = t0;\n            xor1 = t1;\n        }\n        if (l != -8) {\n            c2l(in, tin0);\n            c2l(in, tin1);\n\n            t0 = tin0;\n            t1 = tin1;\n\n            tin[0] = tin0;\n            tin[1] = tin1;\n            DES_decrypt3((DES_LONG *)tin, ks1, ks2, ks3);\n            tout0 = tin[0];\n            tout1 = tin[1];\n\n            tout0 ^= xor0;\n            tout1 ^= xor1;\n            l2cn(tout0, tout1, out, l + 8);\n            xor0 = t0;\n            xor1 = t1;\n        }\n\n        iv = &(*ivec)[0];\n        l2c(xor0, iv);\n        l2c(xor1, iv);\n    }\n    tin0 = tin1 = tout0 = tout1 = xor0 = xor1 = 0;\n    tin[0] = tin[1] = 0;\n}\n\n#endif                          /* DES_DEFAULT_OPTIONS */\n\n//\n\n```\n\n该图匹配到了feistel VARIANT B,根据常量看好像是encrypt3中的最后一部分，感觉不太明白子图和具体代码构建出来的图![image-20220113124310851](DES.assets/image-20220113124310851.png)\n\n\n\n新的代码\n\n![image-20220113141131473](DES.assets/image-20220113141131473.png)\n\n```c\nuint64_t raw_des(uint64_t text, uint64_t key, uint8_t mode){\n    uint64_t* subkeys = (uint64_t*)malloc(sizeof(uint64_t)*16);\n    generateSubkeys(key, subkeys);\n    uint32_t L = 0, R = 0, SR = 0, PR = 0, tmp = 0;\n    uint64_t ER = 0, output = 0, subkey = 0;\n    text = ip(text);\n    L = (text >> 32) & 0x00000000ffffffff;\n    R = text & 0x00000000ffffffff;\n    for (int i = 0; i < 16; i ++){\n        ER = extend(R);\n        subkey = (mode == 0) ? subkeys[i] : subkeys[15-i];\n        ER = ER ^ subkey;\n        SR = s(ER);\n        PR = p(SR);\n        tmp = R;\n        R = L ^ PR;\n        L = tmp;\n    }\n    free(subkeys);\n    output = inv_ip(((uint64_t)(R) << 32 ) | (uint64_t)(L));\n    return output;\n}\nuint64_t des_ede2(uint64_t text, uint64_t key1, uint64_t key2, uint8_t mode){\n    uint64_t result;\n    result = (mode == 0) ? raw_des(text, key1, 0) : raw_des(text, key1, 1);\n    result = (mode == 0) ? raw_des(result, key2, 1) : raw_des(result, key2, 0);\n    result = (mode == 0) ? raw_des(result, key1, 0) : raw_des(result, key1, 1);\n    return result;\n}\n```\n\n这个的图结构看起来就更清晰，符合feistel网络结构，也符合定义的signature的VARIANT C\n\n![image-20220113141442031](DES.assets/image-20220113141442031.png)\n\n每轮加密\n\n![image-20220113142202479](DES.assets/image-20220113142202479.png)\n\n![image-20220113142344671](DES.assets/image-20220113142344671.png)\n\n\n\n`发现好像有的函数会代入图中，有的不会（都是BL调用函数）`\n","slug":"DES","published":1,"updated":"2022-01-24T19:38:32.000Z","layout":"post","photos":[],"link":"","_id":"cletwjohr0003ri3s7xys0zwf","content":"<h1>DES</h1>\n<h3 id=\"算法原理\">算法原理</h3>\n<ul>\n<li>\n<p>输入 64 位。</p>\n</li>\n<li>\n<p>输出 64 位。</p>\n</li>\n<li>\n<p>密钥长64位，密钥事实上是56位参与DES运算（第8、16、24、32、40、48、56、64位是校验位， 使得每个密钥都有奇数个1）</p>\n</li>\n</ul>\n<p>算法流程图如下：</p>\n<p><img src=\"DES.assets/image-20220112114938574.png\" alt=\"image-20220112114938574\"></p>\n<h4 id=\"密钥生成\">密钥生成</h4>\n<ol>\n<li>\n<p>选择置换：不考虑每个字节的第8位，DES的密钥由64位减至56位，每个字节的第8位作为奇偶校验位</p>\n<p><img src=\"DES.assets/image-20220112132946201.png\" alt=\"image-20220112132946201\"></p>\n</li>\n<li>\n<p>循环移位：根据轮数，将两部分分别循环左移1位或2位。</p>\n<p><img src=\"DES.assets/image-20220112133041770.png\" alt=\"image-20220112133041770\"></p>\n</li>\n<li>\n<p>置换：移位后，从56位中选出48位</p>\n<p><img src=\"DES.assets/image-20220112133518482.png\" alt=\"image-20220112133518482\"></p>\n</li>\n</ol>\n<h4 id=\"加密\">加密</h4>\n<ol>\n<li>IP置换：将输入的64位数据块按位重新组合，并把输出分为L0、R0两部分，每部分各长32位。比如以下置换规则表，表示此位置的数据在原数据中的位置，即原数据块的第58位放到新数据的第1位</li>\n</ol>\n<p><img src=\"DES.assets/image-20220112133802349.png\" alt=\"image-20220112133802349\"></p>\n<ol start=\"2\">\n<li>\n<p>Feistel</p>\n<p><img src=\"DES.assets/image-20220112134612622.png\" alt=\"image-20220112134612622\"></p>\n<ul>\n<li>\n<p>E（扩张置换）：将32位的半块R0扩展到48位，其输出包括8个6位的块，每块包含4位对应的输入位，加上两个邻接的块中紧邻的位。然后与子密钥异或。</p>\n<p>目的有两个：生成与密钥相同长度的数据以进行异或运算；提供更长的结果，在后续的替代运算中可以进行压缩</p>\n<p><img src=\"DES.assets/image-20220112133737845.png\" alt=\"image-20220112133737845\"></p>\n</li>\n<li>\n<p>S盒：替代运算。（非线性，提供安全性）每个S盒将6位输入变为4位输出。给定输入后，输出行由外侧 2 位确定，列由内侧的 4 位确定，例如“011011”的输入的外侧位为“01”，内侧位为“1101”，而每张表的第一行为“00”，第一列为“0000”，输出S盒的第2行，第14列</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>x0000x</th>\n<th>x0001x</th>\n<th>x0010x</th>\n<th>x0011x</th>\n<th>x0100x</th>\n<th>x0101x</th>\n<th>x0110x</th>\n<th>x0111x</th>\n<th>x1000x</th>\n<th>x1001x</th>\n<th>x1010x</th>\n<th>x1011x</th>\n<th>x1100x</th>\n<th>x1101x</th>\n<th>x1110x</th>\n<th>x1111x</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0yyyy0</td>\n<td>14</td>\n<td>4</td>\n<td>13</td>\n<td>1</td>\n<td>2</td>\n<td>15</td>\n<td>11</td>\n<td>8</td>\n<td>3</td>\n<td>10</td>\n<td>6</td>\n<td>12</td>\n<td>5</td>\n<td>9</td>\n<td>0</td>\n<td>7</td>\n</tr>\n<tr>\n<td>0yyyy1</td>\n<td>0</td>\n<td>15</td>\n<td>7</td>\n<td>4</td>\n<td>14</td>\n<td>2</td>\n<td>13</td>\n<td>1</td>\n<td>10</td>\n<td>6</td>\n<td>12</td>\n<td>11</td>\n<td>9</td>\n<td>5</td>\n<td>3</td>\n<td>8</td>\n</tr>\n<tr>\n<td>1yyyy0</td>\n<td>4</td>\n<td>1</td>\n<td>14</td>\n<td>8</td>\n<td>13</td>\n<td>6</td>\n<td>2</td>\n<td>11</td>\n<td>15</td>\n<td>12</td>\n<td>9</td>\n<td>7</td>\n<td>3</td>\n<td>10</td>\n<td>5</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1yyyy1</td>\n<td>15</td>\n<td>12</td>\n<td>8</td>\n<td>2</td>\n<td>4</td>\n<td>9</td>\n<td>1</td>\n<td>7</td>\n<td>5</td>\n<td>11</td>\n<td>3</td>\n<td>14</td>\n<td>10</td>\n<td>0</td>\n<td>6</td>\n<td>13</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>P置换：将32位的半块数据重新排列</p>\n<p><img src=\"DES.assets/image-20220112134549104.png\" alt=\"image-20220112134549104\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>FP置换（IP置换的逆过程）</p>\n<p><img src=\"DES.assets/image-20220112134705510.png\" alt=\"image-20220112134705510\"></p>\n</li>\n</ol>\n<h3 id=\"signature-2\">signature</h3>\n<p>Feistel网络结构</p>\n<p><img src=\"DES.assets/image-20220113142045280.png\" alt=\"image-20220113142045280\"></p>\n<p>适用的加密算法</p>\n<p><img src=\"DES.assets/image-20220112135218512.png\" alt=\"image-20220112135218512\"></p>\n<p>DSL描述</p>\n<p><img src=\"DES.assets/image-20220112135026479.png\" alt=\"image-20220112135026479\"></p>\n<h3 id=\"效果\">效果</h3>\n<p>libcrypto.so.1.1(openssl)</p>\n<p><img src=\"DES.assets/image-20220112165741033.png\" alt=\"image-20220112165741033\"></p>\n<p>openssl中查看源代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//des_local.h</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">define</span> D_ENCRYPT(LL,R,S) &#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">        LOAD_DATA_tmp(R,S,u,t,E0,E1); \\</span></span><br><span class=\"line\"><span class=\"meta\">        t=ROTATE(t,4); \\</span></span><br><span class=\"line\"><span class=\"meta\">        LL^= \\</span></span><br><span class=\"line\"><span class=\"meta\">            DES_SPtrans[0][(u&gt;&gt; 2L)&amp;0x3f]^ \\</span></span><br><span class=\"line\"><span class=\"meta\">            DES_SPtrans[2][(u&gt;&gt;10L)&amp;0x3f]^ \\</span></span><br><span class=\"line\"><span class=\"meta\">            DES_SPtrans[4][(u&gt;&gt;18L)&amp;0x3f]^ \\</span></span><br><span class=\"line\"><span class=\"meta\">            DES_SPtrans[6][(u&gt;&gt;26L)&amp;0x3f]^ \\</span></span><br><span class=\"line\"><span class=\"meta\">            DES_SPtrans[1][(t&gt;&gt; 2L)&amp;0x3f]^ \\</span></span><br><span class=\"line\"><span class=\"meta\">            DES_SPtrans[3][(t&gt;&gt;10L)&amp;0x3f]^ \\</span></span><br><span class=\"line\"><span class=\"meta\">            DES_SPtrans[5][(t&gt;&gt;18L)&amp;0x3f]^ \\</span></span><br><span class=\"line\"><span class=\"meta\">            DES_SPtrans[7][(t&gt;&gt;26L)&amp;0x3f]; &#125;</span></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"comment\">//des_enc.c</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DES_encrypt2</span><span class=\"params\">(DES_LONG *data, DES_key_schedule *ks, <span class=\"keyword\">int</span> enc)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> DES_LONG l, r, t, u;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> DES_LONG *s;</span><br><span class=\"line\"></span><br><span class=\"line\">    r = data[<span class=\"number\">0</span>];</span><br><span class=\"line\">    l = data[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Things have been modified so that the initial rotate is done outside</span></span><br><span class=\"line\"><span class=\"comment\">     * the loop.  This required the DES_SPtrans values in sp.h to be rotated</span></span><br><span class=\"line\"><span class=\"comment\">     * 1 bit to the right. One perl script later and things have a 5% speed</span></span><br><span class=\"line\"><span class=\"comment\">     * up on a sparc2. Thanks to Richard Outerbridge for pointing this out.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">/* clear the top bits on machines with 8byte longs */</span></span><br><span class=\"line\">    r = ROTATE(r, <span class=\"number\">29</span>) &amp; <span class=\"number\">0xffffffff</span>L;</span><br><span class=\"line\">    l = ROTATE(l, <span class=\"number\">29</span>) &amp; <span class=\"number\">0xffffffff</span>L;</span><br><span class=\"line\"></span><br><span class=\"line\">    s = ks-&gt;ks-&gt;deslong;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * I don&#x27;t know if it is worth the effort of loop unrolling the inner</span></span><br><span class=\"line\"><span class=\"comment\">     * loop</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (enc) &#123;</span><br><span class=\"line\">        D_ENCRYPT(l, r, <span class=\"number\">0</span>);     <span class=\"comment\">/* 1 */</span></span><br><span class=\"line\">        D_ENCRYPT(r, l, <span class=\"number\">2</span>);     <span class=\"comment\">/* 2 */</span></span><br><span class=\"line\">        D_ENCRYPT(l, r, <span class=\"number\">4</span>);     <span class=\"comment\">/* 3 */</span></span><br><span class=\"line\">        D_ENCRYPT(r, l, <span class=\"number\">6</span>);     <span class=\"comment\">/* 4 */</span></span><br><span class=\"line\">        D_ENCRYPT(l, r, <span class=\"number\">8</span>);     <span class=\"comment\">/* 5 */</span></span><br><span class=\"line\">        D_ENCRYPT(r, l, <span class=\"number\">10</span>);    <span class=\"comment\">/* 6 */</span></span><br><span class=\"line\">        D_ENCRYPT(l, r, <span class=\"number\">12</span>);    <span class=\"comment\">/* 7 */</span></span><br><span class=\"line\">        D_ENCRYPT(r, l, <span class=\"number\">14</span>);    <span class=\"comment\">/* 8 */</span></span><br><span class=\"line\">        D_ENCRYPT(l, r, <span class=\"number\">16</span>);    <span class=\"comment\">/* 9 */</span></span><br><span class=\"line\">        D_ENCRYPT(r, l, <span class=\"number\">18</span>);    <span class=\"comment\">/* 10 */</span></span><br><span class=\"line\">        D_ENCRYPT(l, r, <span class=\"number\">20</span>);    <span class=\"comment\">/* 11 */</span></span><br><span class=\"line\">        D_ENCRYPT(r, l, <span class=\"number\">22</span>);    <span class=\"comment\">/* 12 */</span></span><br><span class=\"line\">        D_ENCRYPT(l, r, <span class=\"number\">24</span>);    <span class=\"comment\">/* 13 */</span></span><br><span class=\"line\">        D_ENCRYPT(r, l, <span class=\"number\">26</span>);    <span class=\"comment\">/* 14 */</span></span><br><span class=\"line\">        D_ENCRYPT(l, r, <span class=\"number\">28</span>);    <span class=\"comment\">/* 15 */</span></span><br><span class=\"line\">        D_ENCRYPT(r, l, <span class=\"number\">30</span>);    <span class=\"comment\">/* 16 */</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        D_ENCRYPT(l, r, <span class=\"number\">30</span>);    <span class=\"comment\">/* 16 */</span></span><br><span class=\"line\">        D_ENCRYPT(r, l, <span class=\"number\">28</span>);    <span class=\"comment\">/* 15 */</span></span><br><span class=\"line\">        D_ENCRYPT(l, r, <span class=\"number\">26</span>);    <span class=\"comment\">/* 14 */</span></span><br><span class=\"line\">        D_ENCRYPT(r, l, <span class=\"number\">24</span>);    <span class=\"comment\">/* 13 */</span></span><br><span class=\"line\">        D_ENCRYPT(l, r, <span class=\"number\">22</span>);    <span class=\"comment\">/* 12 */</span></span><br><span class=\"line\">        D_ENCRYPT(r, l, <span class=\"number\">20</span>);    <span class=\"comment\">/* 11 */</span></span><br><span class=\"line\">        D_ENCRYPT(l, r, <span class=\"number\">18</span>);    <span class=\"comment\">/* 10 */</span></span><br><span class=\"line\">        D_ENCRYPT(r, l, <span class=\"number\">16</span>);    <span class=\"comment\">/* 9 */</span></span><br><span class=\"line\">        D_ENCRYPT(l, r, <span class=\"number\">14</span>);    <span class=\"comment\">/* 8 */</span></span><br><span class=\"line\">        D_ENCRYPT(r, l, <span class=\"number\">12</span>);    <span class=\"comment\">/* 7 */</span></span><br><span class=\"line\">        D_ENCRYPT(l, r, <span class=\"number\">10</span>);    <span class=\"comment\">/* 6 */</span></span><br><span class=\"line\">        D_ENCRYPT(r, l, <span class=\"number\">8</span>);     <span class=\"comment\">/* 5 */</span></span><br><span class=\"line\">        D_ENCRYPT(l, r, <span class=\"number\">6</span>);     <span class=\"comment\">/* 4 */</span></span><br><span class=\"line\">        D_ENCRYPT(r, l, <span class=\"number\">4</span>);     <span class=\"comment\">/* 3 */</span></span><br><span class=\"line\">        D_ENCRYPT(l, r, <span class=\"number\">2</span>);     <span class=\"comment\">/* 2 */</span></span><br><span class=\"line\">        D_ENCRYPT(r, l, <span class=\"number\">0</span>);     <span class=\"comment\">/* 1 */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/* rotate and clear the top bits on machines with 8byte longs */</span></span><br><span class=\"line\">    data[<span class=\"number\">0</span>] = ROTATE(l, <span class=\"number\">3</span>) &amp; <span class=\"number\">0xffffffff</span>L;</span><br><span class=\"line\">    data[<span class=\"number\">1</span>] = ROTATE(r, <span class=\"number\">3</span>) &amp; <span class=\"number\">0xffffffff</span>L;</span><br><span class=\"line\">    l = r = t = u = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DES_encrypt3</span><span class=\"params\">(DES_LONG *data, DES_key_schedule *ks1,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                  DES_key_schedule *ks2, DES_key_schedule *ks3)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> DES_LONG l, r;</span><br><span class=\"line\"></span><br><span class=\"line\">    l = data[<span class=\"number\">0</span>];</span><br><span class=\"line\">    r = data[<span class=\"number\">1</span>];</span><br><span class=\"line\">    IP(l, r);</span><br><span class=\"line\">    data[<span class=\"number\">0</span>] = l;</span><br><span class=\"line\">    data[<span class=\"number\">1</span>] = r;</span><br><span class=\"line\">    DES_encrypt2((DES_LONG *)data, ks1, DES_ENCRYPT);</span><br><span class=\"line\">    DES_encrypt2((DES_LONG *)data, ks2, DES_DECRYPT);</span><br><span class=\"line\">    DES_encrypt2((DES_LONG *)data, ks3, DES_ENCRYPT);</span><br><span class=\"line\">    l = data[<span class=\"number\">0</span>];</span><br><span class=\"line\">    r = data[<span class=\"number\">1</span>];</span><br><span class=\"line\">    FP(r, l);</span><br><span class=\"line\">    data[<span class=\"number\">0</span>] = l;</span><br><span class=\"line\">    data[<span class=\"number\">1</span>] = r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DES_ede3_cbc_encrypt</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *input, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *output,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                          <span class=\"keyword\">long</span> length, DES_key_schedule *ks1,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                          DES_key_schedule *ks2, DES_key_schedule *ks3,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                          DES_cblock *ivec, <span class=\"keyword\">int</span> enc)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> DES_LONG tin0, tin1;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> DES_LONG tout0, tout1, xor0, xor1;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"keyword\">const</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *in;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *out;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"keyword\">long</span> l = length;</span><br><span class=\"line\">    DES_LONG tin[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *iv;</span><br><span class=\"line\"></span><br><span class=\"line\">    in = input;</span><br><span class=\"line\">    out = output;</span><br><span class=\"line\">    iv = &amp;(*ivec)[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (enc) &#123;</span><br><span class=\"line\">        c2l(iv, tout0);</span><br><span class=\"line\">        c2l(iv, tout1);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (l -= <span class=\"number\">8</span>; l &gt;= <span class=\"number\">0</span>; l -= <span class=\"number\">8</span>) &#123;</span><br><span class=\"line\">            c2l(in, tin0);</span><br><span class=\"line\">            c2l(in, tin1);</span><br><span class=\"line\">            tin0 ^= tout0;</span><br><span class=\"line\">            tin1 ^= tout1;</span><br><span class=\"line\"></span><br><span class=\"line\">            tin[<span class=\"number\">0</span>] = tin0;</span><br><span class=\"line\">            tin[<span class=\"number\">1</span>] = tin1;</span><br><span class=\"line\">            DES_encrypt3((DES_LONG *)tin, ks1, ks2, ks3);</span><br><span class=\"line\">            tout0 = tin[<span class=\"number\">0</span>];</span><br><span class=\"line\">            tout1 = tin[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            l2c(tout0, out);</span><br><span class=\"line\">            l2c(tout1, out);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l != <span class=\"number\">-8</span>) &#123;</span><br><span class=\"line\">            c2ln(in, tin0, tin1, l + <span class=\"number\">8</span>);</span><br><span class=\"line\">            tin0 ^= tout0;</span><br><span class=\"line\">            tin1 ^= tout1;</span><br><span class=\"line\"></span><br><span class=\"line\">            tin[<span class=\"number\">0</span>] = tin0;</span><br><span class=\"line\">            tin[<span class=\"number\">1</span>] = tin1;</span><br><span class=\"line\">            DES_encrypt3((DES_LONG *)tin, ks1, ks2, ks3);</span><br><span class=\"line\">            tout0 = tin[<span class=\"number\">0</span>];</span><br><span class=\"line\">            tout1 = tin[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            l2c(tout0, out);</span><br><span class=\"line\">            l2c(tout1, out);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        iv = &amp;(*ivec)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        l2c(tout0, iv);</span><br><span class=\"line\">        l2c(tout1, iv);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">register</span> DES_LONG t0, t1;</span><br><span class=\"line\"></span><br><span class=\"line\">        c2l(iv, xor0);</span><br><span class=\"line\">        c2l(iv, xor1);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (l -= <span class=\"number\">8</span>; l &gt;= <span class=\"number\">0</span>; l -= <span class=\"number\">8</span>) &#123;</span><br><span class=\"line\">            c2l(in, tin0);</span><br><span class=\"line\">            c2l(in, tin1);</span><br><span class=\"line\"></span><br><span class=\"line\">            t0 = tin0;</span><br><span class=\"line\">            t1 = tin1;</span><br><span class=\"line\"></span><br><span class=\"line\">            tin[<span class=\"number\">0</span>] = tin0;</span><br><span class=\"line\">            tin[<span class=\"number\">1</span>] = tin1;</span><br><span class=\"line\">            DES_decrypt3((DES_LONG *)tin, ks1, ks2, ks3);</span><br><span class=\"line\">            tout0 = tin[<span class=\"number\">0</span>];</span><br><span class=\"line\">            tout1 = tin[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            tout0 ^= xor0;</span><br><span class=\"line\">            tout1 ^= xor1;</span><br><span class=\"line\">            l2c(tout0, out);</span><br><span class=\"line\">            l2c(tout1, out);</span><br><span class=\"line\">            xor0 = t0;</span><br><span class=\"line\">            xor1 = t1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l != <span class=\"number\">-8</span>) &#123;</span><br><span class=\"line\">            c2l(in, tin0);</span><br><span class=\"line\">            c2l(in, tin1);</span><br><span class=\"line\"></span><br><span class=\"line\">            t0 = tin0;</span><br><span class=\"line\">            t1 = tin1;</span><br><span class=\"line\"></span><br><span class=\"line\">            tin[<span class=\"number\">0</span>] = tin0;</span><br><span class=\"line\">            tin[<span class=\"number\">1</span>] = tin1;</span><br><span class=\"line\">            DES_decrypt3((DES_LONG *)tin, ks1, ks2, ks3);</span><br><span class=\"line\">            tout0 = tin[<span class=\"number\">0</span>];</span><br><span class=\"line\">            tout1 = tin[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            tout0 ^= xor0;</span><br><span class=\"line\">            tout1 ^= xor1;</span><br><span class=\"line\">            l2cn(tout0, tout1, out, l + <span class=\"number\">8</span>);</span><br><span class=\"line\">            xor0 = t0;</span><br><span class=\"line\">            xor1 = t1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        iv = &amp;(*ivec)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        l2c(xor0, iv);</span><br><span class=\"line\">        l2c(xor1, iv);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tin0 = tin1 = tout0 = tout1 = xor0 = xor1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    tin[<span class=\"number\">0</span>] = tin[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span>                          <span class=\"comment\">/* DES_DEFAULT_OPTIONS */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>该图匹配到了feistel VARIANT B,根据常量看好像是encrypt3中的最后一部分，感觉不太明白子图和具体代码构建出来的图<img src=\"DES.assets/image-20220113124310851.png\" alt=\"image-20220113124310851\"></p>\n<p>新的代码</p>\n<p><img src=\"DES.assets/image-20220113141131473.png\" alt=\"image-20220113141131473\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">uint64_t</span> <span class=\"title\">raw_des</span><span class=\"params\">(<span class=\"keyword\">uint64_t</span> text, <span class=\"keyword\">uint64_t</span> key, <span class=\"keyword\">uint8_t</span> mode)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span>* subkeys = (<span class=\"keyword\">uint64_t</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint64_t</span>)*<span class=\"number\">16</span>);</span><br><span class=\"line\">    generateSubkeys(key, subkeys);</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> L = <span class=\"number\">0</span>, R = <span class=\"number\">0</span>, SR = <span class=\"number\">0</span>, PR = <span class=\"number\">0</span>, tmp = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span> ER = <span class=\"number\">0</span>, output = <span class=\"number\">0</span>, subkey = <span class=\"number\">0</span>;</span><br><span class=\"line\">    text = ip(text);</span><br><span class=\"line\">    L = (text &gt;&gt; <span class=\"number\">32</span>) &amp; <span class=\"number\">0x00000000ffffffff</span>;</span><br><span class=\"line\">    R = text &amp; <span class=\"number\">0x00000000ffffffff</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">16</span>; i ++)&#123;</span><br><span class=\"line\">        ER = extend(R);</span><br><span class=\"line\">        subkey = (mode == <span class=\"number\">0</span>) ? subkeys[i] : subkeys[<span class=\"number\">15</span>-i];</span><br><span class=\"line\">        ER = ER ^ subkey;</span><br><span class=\"line\">        SR = s(ER);</span><br><span class=\"line\">        PR = p(SR);</span><br><span class=\"line\">        tmp = R;</span><br><span class=\"line\">        R = L ^ PR;</span><br><span class=\"line\">        L = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(subkeys);</span><br><span class=\"line\">    output = inv_ip(((<span class=\"keyword\">uint64_t</span>)(R) &lt;&lt; <span class=\"number\">32</span> ) | (<span class=\"keyword\">uint64_t</span>)(L));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> output;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">uint64_t</span> <span class=\"title\">des_ede2</span><span class=\"params\">(<span class=\"keyword\">uint64_t</span> text, <span class=\"keyword\">uint64_t</span> key1, <span class=\"keyword\">uint64_t</span> key2, <span class=\"keyword\">uint8_t</span> mode)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span> result;</span><br><span class=\"line\">    result = (mode == <span class=\"number\">0</span>) ? raw_des(text, key1, <span class=\"number\">0</span>) : raw_des(text, key1, <span class=\"number\">1</span>);</span><br><span class=\"line\">    result = (mode == <span class=\"number\">0</span>) ? raw_des(result, key2, <span class=\"number\">1</span>) : raw_des(result, key2, <span class=\"number\">0</span>);</span><br><span class=\"line\">    result = (mode == <span class=\"number\">0</span>) ? raw_des(result, key1, <span class=\"number\">0</span>) : raw_des(result, key1, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个的图结构看起来就更清晰，符合feistel网络结构，也符合定义的signature的VARIANT C</p>\n<p><img src=\"DES.assets/image-20220113141442031.png\" alt=\"image-20220113141442031\"></p>\n<p>每轮加密</p>\n<p><img src=\"DES.assets/image-20220113142202479.png\" alt=\"image-20220113142202479\"></p>\n<p><img src=\"DES.assets/image-20220113142344671.png\" alt=\"image-20220113142344671\"></p>\n<p><code>发现好像有的函数会代入图中，有的不会（都是BL调用函数）</code></p>\n","site":{"data":{"about":{"class":{"class_name":"about","link_list":{"-1":{"name":"Scorpion","avatar":"/image/avatar.jpg","link":null,"descr":"�����ƹ������ë��̨��ɢ�򣬻�ѩ���������ݣ����ֲ�Ƭ����Ƭ�赸��Ƶ��ҵ����Ӱ���Ǻð�ȫ��"}}}},"link":{"class":{"class_name":"友情链接","link_list":{"-1":{"name":"M4tsuri","link":"https://M4tsuri.io","avatar":"/image/m4tsuri.jpg","descr":"pwn,blockchain"}}}}}},"excerpt":"","more":"<h1>DES</h1>\n<h3 id=\"算法原理\">算法原理</h3>\n<ul>\n<li>\n<p>输入 64 位。</p>\n</li>\n<li>\n<p>输出 64 位。</p>\n</li>\n<li>\n<p>密钥长64位，密钥事实上是56位参与DES运算（第8、16、24、32、40、48、56、64位是校验位， 使得每个密钥都有奇数个1）</p>\n</li>\n</ul>\n<p>算法流程图如下：</p>\n<p><img src=\"DES.assets/image-20220112114938574.png\" alt=\"image-20220112114938574\"></p>\n<h4 id=\"密钥生成\">密钥生成</h4>\n<ol>\n<li>\n<p>选择置换：不考虑每个字节的第8位，DES的密钥由64位减至56位，每个字节的第8位作为奇偶校验位</p>\n<p><img src=\"DES.assets/image-20220112132946201.png\" alt=\"image-20220112132946201\"></p>\n</li>\n<li>\n<p>循环移位：根据轮数，将两部分分别循环左移1位或2位。</p>\n<p><img src=\"DES.assets/image-20220112133041770.png\" alt=\"image-20220112133041770\"></p>\n</li>\n<li>\n<p>置换：移位后，从56位中选出48位</p>\n<p><img src=\"DES.assets/image-20220112133518482.png\" alt=\"image-20220112133518482\"></p>\n</li>\n</ol>\n<h4 id=\"加密\">加密</h4>\n<ol>\n<li>IP置换：将输入的64位数据块按位重新组合，并把输出分为L0、R0两部分，每部分各长32位。比如以下置换规则表，表示此位置的数据在原数据中的位置，即原数据块的第58位放到新数据的第1位</li>\n</ol>\n<p><img src=\"DES.assets/image-20220112133802349.png\" alt=\"image-20220112133802349\"></p>\n<ol start=\"2\">\n<li>\n<p>Feistel</p>\n<p><img src=\"DES.assets/image-20220112134612622.png\" alt=\"image-20220112134612622\"></p>\n<ul>\n<li>\n<p>E（扩张置换）：将32位的半块R0扩展到48位，其输出包括8个6位的块，每块包含4位对应的输入位，加上两个邻接的块中紧邻的位。然后与子密钥异或。</p>\n<p>目的有两个：生成与密钥相同长度的数据以进行异或运算；提供更长的结果，在后续的替代运算中可以进行压缩</p>\n<p><img src=\"DES.assets/image-20220112133737845.png\" alt=\"image-20220112133737845\"></p>\n</li>\n<li>\n<p>S盒：替代运算。（非线性，提供安全性）每个S盒将6位输入变为4位输出。给定输入后，输出行由外侧 2 位确定，列由内侧的 4 位确定，例如“011011”的输入的外侧位为“01”，内侧位为“1101”，而每张表的第一行为“00”，第一列为“0000”，输出S盒的第2行，第14列</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>x0000x</th>\n<th>x0001x</th>\n<th>x0010x</th>\n<th>x0011x</th>\n<th>x0100x</th>\n<th>x0101x</th>\n<th>x0110x</th>\n<th>x0111x</th>\n<th>x1000x</th>\n<th>x1001x</th>\n<th>x1010x</th>\n<th>x1011x</th>\n<th>x1100x</th>\n<th>x1101x</th>\n<th>x1110x</th>\n<th>x1111x</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0yyyy0</td>\n<td>14</td>\n<td>4</td>\n<td>13</td>\n<td>1</td>\n<td>2</td>\n<td>15</td>\n<td>11</td>\n<td>8</td>\n<td>3</td>\n<td>10</td>\n<td>6</td>\n<td>12</td>\n<td>5</td>\n<td>9</td>\n<td>0</td>\n<td>7</td>\n</tr>\n<tr>\n<td>0yyyy1</td>\n<td>0</td>\n<td>15</td>\n<td>7</td>\n<td>4</td>\n<td>14</td>\n<td>2</td>\n<td>13</td>\n<td>1</td>\n<td>10</td>\n<td>6</td>\n<td>12</td>\n<td>11</td>\n<td>9</td>\n<td>5</td>\n<td>3</td>\n<td>8</td>\n</tr>\n<tr>\n<td>1yyyy0</td>\n<td>4</td>\n<td>1</td>\n<td>14</td>\n<td>8</td>\n<td>13</td>\n<td>6</td>\n<td>2</td>\n<td>11</td>\n<td>15</td>\n<td>12</td>\n<td>9</td>\n<td>7</td>\n<td>3</td>\n<td>10</td>\n<td>5</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1yyyy1</td>\n<td>15</td>\n<td>12</td>\n<td>8</td>\n<td>2</td>\n<td>4</td>\n<td>9</td>\n<td>1</td>\n<td>7</td>\n<td>5</td>\n<td>11</td>\n<td>3</td>\n<td>14</td>\n<td>10</td>\n<td>0</td>\n<td>6</td>\n<td>13</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>P置换：将32位的半块数据重新排列</p>\n<p><img src=\"DES.assets/image-20220112134549104.png\" alt=\"image-20220112134549104\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>FP置换（IP置换的逆过程）</p>\n<p><img src=\"DES.assets/image-20220112134705510.png\" alt=\"image-20220112134705510\"></p>\n</li>\n</ol>\n<h3 id=\"signature-2\">signature</h3>\n<p>Feistel网络结构</p>\n<p><img src=\"DES.assets/image-20220113142045280.png\" alt=\"image-20220113142045280\"></p>\n<p>适用的加密算法</p>\n<p><img src=\"DES.assets/image-20220112135218512.png\" alt=\"image-20220112135218512\"></p>\n<p>DSL描述</p>\n<p><img src=\"DES.assets/image-20220112135026479.png\" alt=\"image-20220112135026479\"></p>\n<h3 id=\"效果\">效果</h3>\n<p>libcrypto.so.1.1(openssl)</p>\n<p><img src=\"DES.assets/image-20220112165741033.png\" alt=\"image-20220112165741033\"></p>\n<p>openssl中查看源代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//des_local.h</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">define</span> D_ENCRYPT(LL,R,S) &#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">        LOAD_DATA_tmp(R,S,u,t,E0,E1); \\</span></span><br><span class=\"line\"><span class=\"meta\">        t=ROTATE(t,4); \\</span></span><br><span class=\"line\"><span class=\"meta\">        LL^= \\</span></span><br><span class=\"line\"><span class=\"meta\">            DES_SPtrans[0][(u&gt;&gt; 2L)&amp;0x3f]^ \\</span></span><br><span class=\"line\"><span class=\"meta\">            DES_SPtrans[2][(u&gt;&gt;10L)&amp;0x3f]^ \\</span></span><br><span class=\"line\"><span class=\"meta\">            DES_SPtrans[4][(u&gt;&gt;18L)&amp;0x3f]^ \\</span></span><br><span class=\"line\"><span class=\"meta\">            DES_SPtrans[6][(u&gt;&gt;26L)&amp;0x3f]^ \\</span></span><br><span class=\"line\"><span class=\"meta\">            DES_SPtrans[1][(t&gt;&gt; 2L)&amp;0x3f]^ \\</span></span><br><span class=\"line\"><span class=\"meta\">            DES_SPtrans[3][(t&gt;&gt;10L)&amp;0x3f]^ \\</span></span><br><span class=\"line\"><span class=\"meta\">            DES_SPtrans[5][(t&gt;&gt;18L)&amp;0x3f]^ \\</span></span><br><span class=\"line\"><span class=\"meta\">            DES_SPtrans[7][(t&gt;&gt;26L)&amp;0x3f]; &#125;</span></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"comment\">//des_enc.c</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DES_encrypt2</span><span class=\"params\">(DES_LONG *data, DES_key_schedule *ks, <span class=\"keyword\">int</span> enc)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> DES_LONG l, r, t, u;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> DES_LONG *s;</span><br><span class=\"line\"></span><br><span class=\"line\">    r = data[<span class=\"number\">0</span>];</span><br><span class=\"line\">    l = data[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Things have been modified so that the initial rotate is done outside</span></span><br><span class=\"line\"><span class=\"comment\">     * the loop.  This required the DES_SPtrans values in sp.h to be rotated</span></span><br><span class=\"line\"><span class=\"comment\">     * 1 bit to the right. One perl script later and things have a 5% speed</span></span><br><span class=\"line\"><span class=\"comment\">     * up on a sparc2. Thanks to Richard Outerbridge for pointing this out.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">/* clear the top bits on machines with 8byte longs */</span></span><br><span class=\"line\">    r = ROTATE(r, <span class=\"number\">29</span>) &amp; <span class=\"number\">0xffffffff</span>L;</span><br><span class=\"line\">    l = ROTATE(l, <span class=\"number\">29</span>) &amp; <span class=\"number\">0xffffffff</span>L;</span><br><span class=\"line\"></span><br><span class=\"line\">    s = ks-&gt;ks-&gt;deslong;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * I don&#x27;t know if it is worth the effort of loop unrolling the inner</span></span><br><span class=\"line\"><span class=\"comment\">     * loop</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (enc) &#123;</span><br><span class=\"line\">        D_ENCRYPT(l, r, <span class=\"number\">0</span>);     <span class=\"comment\">/* 1 */</span></span><br><span class=\"line\">        D_ENCRYPT(r, l, <span class=\"number\">2</span>);     <span class=\"comment\">/* 2 */</span></span><br><span class=\"line\">        D_ENCRYPT(l, r, <span class=\"number\">4</span>);     <span class=\"comment\">/* 3 */</span></span><br><span class=\"line\">        D_ENCRYPT(r, l, <span class=\"number\">6</span>);     <span class=\"comment\">/* 4 */</span></span><br><span class=\"line\">        D_ENCRYPT(l, r, <span class=\"number\">8</span>);     <span class=\"comment\">/* 5 */</span></span><br><span class=\"line\">        D_ENCRYPT(r, l, <span class=\"number\">10</span>);    <span class=\"comment\">/* 6 */</span></span><br><span class=\"line\">        D_ENCRYPT(l, r, <span class=\"number\">12</span>);    <span class=\"comment\">/* 7 */</span></span><br><span class=\"line\">        D_ENCRYPT(r, l, <span class=\"number\">14</span>);    <span class=\"comment\">/* 8 */</span></span><br><span class=\"line\">        D_ENCRYPT(l, r, <span class=\"number\">16</span>);    <span class=\"comment\">/* 9 */</span></span><br><span class=\"line\">        D_ENCRYPT(r, l, <span class=\"number\">18</span>);    <span class=\"comment\">/* 10 */</span></span><br><span class=\"line\">        D_ENCRYPT(l, r, <span class=\"number\">20</span>);    <span class=\"comment\">/* 11 */</span></span><br><span class=\"line\">        D_ENCRYPT(r, l, <span class=\"number\">22</span>);    <span class=\"comment\">/* 12 */</span></span><br><span class=\"line\">        D_ENCRYPT(l, r, <span class=\"number\">24</span>);    <span class=\"comment\">/* 13 */</span></span><br><span class=\"line\">        D_ENCRYPT(r, l, <span class=\"number\">26</span>);    <span class=\"comment\">/* 14 */</span></span><br><span class=\"line\">        D_ENCRYPT(l, r, <span class=\"number\">28</span>);    <span class=\"comment\">/* 15 */</span></span><br><span class=\"line\">        D_ENCRYPT(r, l, <span class=\"number\">30</span>);    <span class=\"comment\">/* 16 */</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        D_ENCRYPT(l, r, <span class=\"number\">30</span>);    <span class=\"comment\">/* 16 */</span></span><br><span class=\"line\">        D_ENCRYPT(r, l, <span class=\"number\">28</span>);    <span class=\"comment\">/* 15 */</span></span><br><span class=\"line\">        D_ENCRYPT(l, r, <span class=\"number\">26</span>);    <span class=\"comment\">/* 14 */</span></span><br><span class=\"line\">        D_ENCRYPT(r, l, <span class=\"number\">24</span>);    <span class=\"comment\">/* 13 */</span></span><br><span class=\"line\">        D_ENCRYPT(l, r, <span class=\"number\">22</span>);    <span class=\"comment\">/* 12 */</span></span><br><span class=\"line\">        D_ENCRYPT(r, l, <span class=\"number\">20</span>);    <span class=\"comment\">/* 11 */</span></span><br><span class=\"line\">        D_ENCRYPT(l, r, <span class=\"number\">18</span>);    <span class=\"comment\">/* 10 */</span></span><br><span class=\"line\">        D_ENCRYPT(r, l, <span class=\"number\">16</span>);    <span class=\"comment\">/* 9 */</span></span><br><span class=\"line\">        D_ENCRYPT(l, r, <span class=\"number\">14</span>);    <span class=\"comment\">/* 8 */</span></span><br><span class=\"line\">        D_ENCRYPT(r, l, <span class=\"number\">12</span>);    <span class=\"comment\">/* 7 */</span></span><br><span class=\"line\">        D_ENCRYPT(l, r, <span class=\"number\">10</span>);    <span class=\"comment\">/* 6 */</span></span><br><span class=\"line\">        D_ENCRYPT(r, l, <span class=\"number\">8</span>);     <span class=\"comment\">/* 5 */</span></span><br><span class=\"line\">        D_ENCRYPT(l, r, <span class=\"number\">6</span>);     <span class=\"comment\">/* 4 */</span></span><br><span class=\"line\">        D_ENCRYPT(r, l, <span class=\"number\">4</span>);     <span class=\"comment\">/* 3 */</span></span><br><span class=\"line\">        D_ENCRYPT(l, r, <span class=\"number\">2</span>);     <span class=\"comment\">/* 2 */</span></span><br><span class=\"line\">        D_ENCRYPT(r, l, <span class=\"number\">0</span>);     <span class=\"comment\">/* 1 */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/* rotate and clear the top bits on machines with 8byte longs */</span></span><br><span class=\"line\">    data[<span class=\"number\">0</span>] = ROTATE(l, <span class=\"number\">3</span>) &amp; <span class=\"number\">0xffffffff</span>L;</span><br><span class=\"line\">    data[<span class=\"number\">1</span>] = ROTATE(r, <span class=\"number\">3</span>) &amp; <span class=\"number\">0xffffffff</span>L;</span><br><span class=\"line\">    l = r = t = u = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DES_encrypt3</span><span class=\"params\">(DES_LONG *data, DES_key_schedule *ks1,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                  DES_key_schedule *ks2, DES_key_schedule *ks3)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> DES_LONG l, r;</span><br><span class=\"line\"></span><br><span class=\"line\">    l = data[<span class=\"number\">0</span>];</span><br><span class=\"line\">    r = data[<span class=\"number\">1</span>];</span><br><span class=\"line\">    IP(l, r);</span><br><span class=\"line\">    data[<span class=\"number\">0</span>] = l;</span><br><span class=\"line\">    data[<span class=\"number\">1</span>] = r;</span><br><span class=\"line\">    DES_encrypt2((DES_LONG *)data, ks1, DES_ENCRYPT);</span><br><span class=\"line\">    DES_encrypt2((DES_LONG *)data, ks2, DES_DECRYPT);</span><br><span class=\"line\">    DES_encrypt2((DES_LONG *)data, ks3, DES_ENCRYPT);</span><br><span class=\"line\">    l = data[<span class=\"number\">0</span>];</span><br><span class=\"line\">    r = data[<span class=\"number\">1</span>];</span><br><span class=\"line\">    FP(r, l);</span><br><span class=\"line\">    data[<span class=\"number\">0</span>] = l;</span><br><span class=\"line\">    data[<span class=\"number\">1</span>] = r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DES_ede3_cbc_encrypt</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *input, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *output,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                          <span class=\"keyword\">long</span> length, DES_key_schedule *ks1,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                          DES_key_schedule *ks2, DES_key_schedule *ks3,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                          DES_cblock *ivec, <span class=\"keyword\">int</span> enc)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> DES_LONG tin0, tin1;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> DES_LONG tout0, tout1, xor0, xor1;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"keyword\">const</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *in;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *out;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"keyword\">long</span> l = length;</span><br><span class=\"line\">    DES_LONG tin[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *iv;</span><br><span class=\"line\"></span><br><span class=\"line\">    in = input;</span><br><span class=\"line\">    out = output;</span><br><span class=\"line\">    iv = &amp;(*ivec)[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (enc) &#123;</span><br><span class=\"line\">        c2l(iv, tout0);</span><br><span class=\"line\">        c2l(iv, tout1);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (l -= <span class=\"number\">8</span>; l &gt;= <span class=\"number\">0</span>; l -= <span class=\"number\">8</span>) &#123;</span><br><span class=\"line\">            c2l(in, tin0);</span><br><span class=\"line\">            c2l(in, tin1);</span><br><span class=\"line\">            tin0 ^= tout0;</span><br><span class=\"line\">            tin1 ^= tout1;</span><br><span class=\"line\"></span><br><span class=\"line\">            tin[<span class=\"number\">0</span>] = tin0;</span><br><span class=\"line\">            tin[<span class=\"number\">1</span>] = tin1;</span><br><span class=\"line\">            DES_encrypt3((DES_LONG *)tin, ks1, ks2, ks3);</span><br><span class=\"line\">            tout0 = tin[<span class=\"number\">0</span>];</span><br><span class=\"line\">            tout1 = tin[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            l2c(tout0, out);</span><br><span class=\"line\">            l2c(tout1, out);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l != <span class=\"number\">-8</span>) &#123;</span><br><span class=\"line\">            c2ln(in, tin0, tin1, l + <span class=\"number\">8</span>);</span><br><span class=\"line\">            tin0 ^= tout0;</span><br><span class=\"line\">            tin1 ^= tout1;</span><br><span class=\"line\"></span><br><span class=\"line\">            tin[<span class=\"number\">0</span>] = tin0;</span><br><span class=\"line\">            tin[<span class=\"number\">1</span>] = tin1;</span><br><span class=\"line\">            DES_encrypt3((DES_LONG *)tin, ks1, ks2, ks3);</span><br><span class=\"line\">            tout0 = tin[<span class=\"number\">0</span>];</span><br><span class=\"line\">            tout1 = tin[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            l2c(tout0, out);</span><br><span class=\"line\">            l2c(tout1, out);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        iv = &amp;(*ivec)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        l2c(tout0, iv);</span><br><span class=\"line\">        l2c(tout1, iv);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">register</span> DES_LONG t0, t1;</span><br><span class=\"line\"></span><br><span class=\"line\">        c2l(iv, xor0);</span><br><span class=\"line\">        c2l(iv, xor1);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (l -= <span class=\"number\">8</span>; l &gt;= <span class=\"number\">0</span>; l -= <span class=\"number\">8</span>) &#123;</span><br><span class=\"line\">            c2l(in, tin0);</span><br><span class=\"line\">            c2l(in, tin1);</span><br><span class=\"line\"></span><br><span class=\"line\">            t0 = tin0;</span><br><span class=\"line\">            t1 = tin1;</span><br><span class=\"line\"></span><br><span class=\"line\">            tin[<span class=\"number\">0</span>] = tin0;</span><br><span class=\"line\">            tin[<span class=\"number\">1</span>] = tin1;</span><br><span class=\"line\">            DES_decrypt3((DES_LONG *)tin, ks1, ks2, ks3);</span><br><span class=\"line\">            tout0 = tin[<span class=\"number\">0</span>];</span><br><span class=\"line\">            tout1 = tin[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            tout0 ^= xor0;</span><br><span class=\"line\">            tout1 ^= xor1;</span><br><span class=\"line\">            l2c(tout0, out);</span><br><span class=\"line\">            l2c(tout1, out);</span><br><span class=\"line\">            xor0 = t0;</span><br><span class=\"line\">            xor1 = t1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l != <span class=\"number\">-8</span>) &#123;</span><br><span class=\"line\">            c2l(in, tin0);</span><br><span class=\"line\">            c2l(in, tin1);</span><br><span class=\"line\"></span><br><span class=\"line\">            t0 = tin0;</span><br><span class=\"line\">            t1 = tin1;</span><br><span class=\"line\"></span><br><span class=\"line\">            tin[<span class=\"number\">0</span>] = tin0;</span><br><span class=\"line\">            tin[<span class=\"number\">1</span>] = tin1;</span><br><span class=\"line\">            DES_decrypt3((DES_LONG *)tin, ks1, ks2, ks3);</span><br><span class=\"line\">            tout0 = tin[<span class=\"number\">0</span>];</span><br><span class=\"line\">            tout1 = tin[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            tout0 ^= xor0;</span><br><span class=\"line\">            tout1 ^= xor1;</span><br><span class=\"line\">            l2cn(tout0, tout1, out, l + <span class=\"number\">8</span>);</span><br><span class=\"line\">            xor0 = t0;</span><br><span class=\"line\">            xor1 = t1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        iv = &amp;(*ivec)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        l2c(xor0, iv);</span><br><span class=\"line\">        l2c(xor1, iv);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tin0 = tin1 = tout0 = tout1 = xor0 = xor1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    tin[<span class=\"number\">0</span>] = tin[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span>                          <span class=\"comment\">/* DES_DEFAULT_OPTIONS */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>该图匹配到了feistel VARIANT B,根据常量看好像是encrypt3中的最后一部分，感觉不太明白子图和具体代码构建出来的图<img src=\"DES.assets/image-20220113124310851.png\" alt=\"image-20220113124310851\"></p>\n<p>新的代码</p>\n<p><img src=\"DES.assets/image-20220113141131473.png\" alt=\"image-20220113141131473\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">uint64_t</span> <span class=\"title\">raw_des</span><span class=\"params\">(<span class=\"keyword\">uint64_t</span> text, <span class=\"keyword\">uint64_t</span> key, <span class=\"keyword\">uint8_t</span> mode)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span>* subkeys = (<span class=\"keyword\">uint64_t</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint64_t</span>)*<span class=\"number\">16</span>);</span><br><span class=\"line\">    generateSubkeys(key, subkeys);</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> L = <span class=\"number\">0</span>, R = <span class=\"number\">0</span>, SR = <span class=\"number\">0</span>, PR = <span class=\"number\">0</span>, tmp = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span> ER = <span class=\"number\">0</span>, output = <span class=\"number\">0</span>, subkey = <span class=\"number\">0</span>;</span><br><span class=\"line\">    text = ip(text);</span><br><span class=\"line\">    L = (text &gt;&gt; <span class=\"number\">32</span>) &amp; <span class=\"number\">0x00000000ffffffff</span>;</span><br><span class=\"line\">    R = text &amp; <span class=\"number\">0x00000000ffffffff</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">16</span>; i ++)&#123;</span><br><span class=\"line\">        ER = extend(R);</span><br><span class=\"line\">        subkey = (mode == <span class=\"number\">0</span>) ? subkeys[i] : subkeys[<span class=\"number\">15</span>-i];</span><br><span class=\"line\">        ER = ER ^ subkey;</span><br><span class=\"line\">        SR = s(ER);</span><br><span class=\"line\">        PR = p(SR);</span><br><span class=\"line\">        tmp = R;</span><br><span class=\"line\">        R = L ^ PR;</span><br><span class=\"line\">        L = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(subkeys);</span><br><span class=\"line\">    output = inv_ip(((<span class=\"keyword\">uint64_t</span>)(R) &lt;&lt; <span class=\"number\">32</span> ) | (<span class=\"keyword\">uint64_t</span>)(L));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> output;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">uint64_t</span> <span class=\"title\">des_ede2</span><span class=\"params\">(<span class=\"keyword\">uint64_t</span> text, <span class=\"keyword\">uint64_t</span> key1, <span class=\"keyword\">uint64_t</span> key2, <span class=\"keyword\">uint8_t</span> mode)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span> result;</span><br><span class=\"line\">    result = (mode == <span class=\"number\">0</span>) ? raw_des(text, key1, <span class=\"number\">0</span>) : raw_des(text, key1, <span class=\"number\">1</span>);</span><br><span class=\"line\">    result = (mode == <span class=\"number\">0</span>) ? raw_des(result, key2, <span class=\"number\">1</span>) : raw_des(result, key2, <span class=\"number\">0</span>);</span><br><span class=\"line\">    result = (mode == <span class=\"number\">0</span>) ? raw_des(result, key1, <span class=\"number\">0</span>) : raw_des(result, key1, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个的图结构看起来就更清晰，符合feistel网络结构，也符合定义的signature的VARIANT C</p>\n<p><img src=\"DES.assets/image-20220113141442031.png\" alt=\"image-20220113141442031\"></p>\n<p>每轮加密</p>\n<p><img src=\"DES.assets/image-20220113142202479.png\" alt=\"image-20220113142202479\"></p>\n<p><img src=\"DES.assets/image-20220113142344671.png\" alt=\"image-20220113142344671\"></p>\n<p><code>发现好像有的函数会代入图中，有的不会（都是BL调用函数）</code></p>\n"},{"title":"[BUUCTF-crypto]writeup【loading】","date":"2022-01-24T05:32:00.000Z","keywords":["crypto","writeup"],"description":null,"top_img":null,"comments":1,"cover":"/image/star.jpg","toc":null,"toc_number":null,"copyright":null,"mathjax":null,"katex":true,"hide":null,"_content":"\n# [BUUCTF-crypto]writeup\n\n## 数学\n\n### [WUSTCTF2020]大数计算\n\n![image-20211107125148733](BUUCTF-crypto-writeup-md.assets/image-20211107125148733.png)\n\nNote：理解问题，题目说要十六进制，前8位不知道是取十进制的前八位然后转换还是取十六进制的前八位，所以（错误就得多试试\n\n```python\na = math.factorial(2020)\nprint(a)\nprint(hex(int(str(a)[:8])))\n\nx = pow(520,1314) + pow(2333,666)\nprint(x)\nprint(hex(int(str(x)[:8])))\n```\n\n宇宙终极问题：x³＋y³＋z³＝42\n\n(-80538738812075974)³ + 80435758145817515³ + 12602123297335631³ = 42\n\npart-4，简单的积分，计算面积即可，再加36得520\n\n\n\n## 编码\n\n### 鸡藤椒盐味  【汉明码】\n\n设将要进行检测的二进制代码为n位，为使其具有纠错能力，需要再加上k位的检测位，组成n+k位的代码。那么，新增加的检测位数k应满足：\n\n2k≥n+k+1或2k-1≥n+k\n\n![image-20211121185128493](BUUCTF-crypto-writeup-md.assets/image-20211121185128493.png)\n\n\n\n## 古典\n\n### [INSHack2018]Crypt0r part 1【tcp流+简单替换】\n\n![image-20220118215319029](BUUCTF-crypto-writeup-md.assets/image-20220118215319029.png)\n\n给出pcap文件\n\n使用wireshark打开，并分析tcp数据流\n\n![image-20220118215352072](BUUCTF-crypto-writeup-md.assets/image-20220118215352072.png)\n\nquipquip直接频率分析得到的结果不太对，再仔细观察可能用到的为第二行中的\n\n```python\ndef replacement(s,cipher):\n    # s为m中对应的字母\n    m = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n    x = string.ascii_letters.maketrans(s, m)\n    print(cipher.translate(x))\n    \ns = 'PMSFADNIJKBXQCGYWETOVHRULZ'\ns += s.lower()\nreplacement()\n```\n\n### [UTCTF2020]basic-crypto\n\n打开文件是二进制形式，先转十六进制，再转ASCII试试\n\n![image-20211107144120942](BUUCTF-crypto-writeup-md.assets/image-20211107144120942.png)\n\n提示很明显base64\n\n![image-20211107144143545](BUUCTF-crypto-writeup-md.assets/image-20211107144143545.png)\n\n提示移位以及Roman，试试凯撒\n\n![image-20211107144221290](BUUCTF-crypto-writeup-md.assets/image-20211107144221290.png)\n\n提示进行词频分析\n\n![image-20211107144251417](BUUCTF-crypto-writeup-md.assets/image-20211107144251417.png)\n\n### 达芬奇密码 【换位】\n\n根据电影简介，看到斐波那契数列\n\n观察给出的一列数字，为32位，flag也是32位，\n\n写一个函数，输出32个斐波那契数列的数\n\n```python\ndef fib(n):\n    if n == 0 or n == 1:\n        return 1\n    return fib(n-1) + fib(n-2)\n\nfor i in range(50):\n    print(fib(i),end=' ')\n```\n\n![image-20211121110325817](BUUCTF-crypto-writeup-md.assets/image-20211121110325817.png)\n\n原文flag通过移位得到密文c\n\n第0位均为1，位置不变\n\n原fib数列的233（12位）变换到第1位\n\n因此只需要找到f在原数列哪个位置，再把c对应的数字放回原位即可，注意有两个1，而第0位不变，因此可以把第0位修改为0或其他没有冲突的数字\n\n```python\nfib = \"0 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309\"\n\nf = \"0 233 3 2584 1346269 144 5 196418 21 1597 610 377 10946 89 514229 987 8 55 6765 2178309 121393 317811 46368 4181 1 832040 2 28657 75025 34 13 17711\"\n\nc = \"36968853882116725547342176952286\"\n\nm = ['3']*32\n\nfib = fib.split(' ')\nf = f.split(' ')\n\nfor i in range(len(f)):\n    m[fib.index(f[i])] = c[i]\nfor i in m:\n    print(i,end='')\n```\n\n### ?[UTCTF2020]hill\n\n未知密钥，猜测\n\n```python\ns='wznqcaduqopfkqnwofDbzgeu'\n#未给密钥的自己猜测\nflag_pre='utflag'\ndef getit(a1,b1,c1,a2,b2,c2,a3,b3,c3):\n    for i in range(26):\n        for j in range(26):\n            if (a1 * i + b1 * j) % 26 == c1 and (a2 * i + b2 * j) % 26 == c2 and (a3 * i+b3*j) % 26 == c3:\n                return (i,j)\nx1=getit(22,25,20,13,16,5,2,0,0)\nx2=getit(22,25,19,13,16,11,2,0,6)\nimport string\nflag=''\nfor i in range(0, len(s),2):\n    flag+=string.ascii_letters[(x1[0]*string.ascii_letters.index(s[i])+x1[1]*string.ascii_letters.index(s[i+1]))%26]\n    flag+=string.ascii_letters[(x2[0]*string.ascii_letters.index(s[i])+x2[1]*string.ascii_letters.index(s[i+1]))%26]\nprint(flag)\n```\n\n### [XNUCA2018]baby_crypto【重合指数、词频分析】\n\n题目:26个字母用0-25分别表示，有两串密钥，长度未知，然后一个用作乘数，一个用作加数对明文进行加密\n\n\n\nhttps://blog.csdn.net/weixin_44110537/article/details/107947158\n\n\n\n\n\n## 块密码\n\n### [ACTF新生赛2020]crypto-aes\n\n因为\n\n```python\nkey=os.urandom(2)*16\niv=os.urandom(16)\n```\n\nkey是**32bytes**,**256bits** ；iv是**16bytes ,128bits**\n\n由于os.urandom（size） \n\n参数： size:字符串随机字节的大小 返回值：该方法返回一个字符串，该字符串表示适合加密使用的随机字节。\n\n所以可以根据key的高128位得到key值，低128位和结果异或便得到iv\n\n最后进行解密即可\n\n```python\nfrom Crypto.Cipher import AES\nimport os\nfrom gmpy2 import*\nfrom Crypto.Util.number import*\n\nxor = 91144196586662942563895769614300232343026691029427747065707381728622849079757\nenc_flag = b'\\x8c-\\xcd\\xde\\xa7\\xe9\\x7f.b\\x8aKs\\xf1\\xba\\xc75\\xc4d\\x13\\x07\\xac\\xa4&\\xd6\\x91\\xfe\\xf3\\x14\\x10|\\xf8p'\nout = long_to_bytes(xor)\nprint(out)\nkey = out[:16]*2\nprint(key)\niv = bytes_to_long(key[16:])^bytes_to_long(out[16:])\nprint(iv)\niv = long_to_bytes(iv)\nprint(iv)\naes = AES.new(key,AES.MODE_CBC,iv)\nflag = aes.decrypt(enc_flag)\nprint(flag)\n```\n\n### [AFCTF2018]MyOwnCBC【AES-CBC】\n\n加密过程是用上一级的密文，作为下一次加密的密钥key,所以初始密钥key可以知道就是题目给的密文前32个\n\n\n\n### [美团CTF]\n\n\n\n### [ACTF新生赛2020]crypto-des\n\nc语言中数据在内存中的存储（大小端）\n\n\n\n\n\n有轮密钥，直接解密即可\n\n## 流密码\n\n### ?[AFCTF2018]你听过一次一密么？\n\n一次一密（One-Time-Pad）：xor key  明文多长，密文就多长（适合少量明文消息）\n\nMany-Time-Pad攻击：多个明文异或同样的key\n\nhttps://www.ruanx.net/many-time-pad/\n\n攻击思想：对于每一条密文Ci，拿去异或其他所有密文。然后去数每一列有多少个英文字符，作为“Mi在这一位是空格”的评分。依据评分从大到小排序，依次利用 “某个明文的某一位是空格” 这种信息恢复出所有明文的那一列。如果产生冲突，则舍弃掉评分小的\n\n\n\n**修复语句太绝了**\n\n\n\n### ？[De1CTF2019]xorz 【频率分析/break repeating-key】\n\n**法一：流密码**\n\n参考\n\nhttps://www.anquanke.com/post/id/161171#h3-\n\nhttp://socold.cn/index.php/archives/65/\n\n#### 一.猜测密钥长度\n\n1.暴力破解：\n\nhttps://www.ruanx.net/many-time-pad/\n\n给的是 m[i]⊕k[i]⊕s[i], 其中 s 已知，故实际上我们拿到了 m[i]⊕k[i]. 在这里 k 是有周期的，且周期不超过38。如果知道了 k 的周期，那么用 Many-Time-Pad 就可以成功攻击。由于 `len(key)` 并不大，从大到小枚举 `len(key)`，肉眼判断是否为flag即可。最后发现 `len(key)=30` 是满足要求的。\n\n但是这种方法过于耗时费力\n\n2.汉明距离：一组二进制数据变成另一组数据所需的步骤数。对两组二进制数据进行异或运算，并统计结果为1的个数，那么这个数就是汉明距离。\n\n- 根据扩展资料：\n\n  - 两个以ascii编码的英文字符的汉明距离是2-3之间，也就是说正常英文字母的平均汉明距离为2-3（每比特），任意字符（非纯字母）的两两汉明距离平均为4。\n\n  - 正确分组的密文与密文的汉明距离等于明文与明文的汉明距离（可以通过按正确密钥长度分组的密文与密文异或等于明文与明文异或证明）\n\n    因此，当我们使用了正确的密钥长度后，两两字母进行计算汉明距离，那么这个值应该是趋于最小。为了增加效率，我们不需要对每一对分组都计算汉明距离，只需取出前几对就可说明问题。当然为了排除偶然误差，结果不应该只取最小的那一个密钥长度，而是酌情多取几组\n\n\n\n#### 二.根据猜出的密文长度进行解密\n\n两种方法：\n\n- 合理利用明文的空格\n\n  在使用异或加密的形式下，使用相同密钥加密的明文和秘文间存在这个规律，密文和密文异或等于明文和明文异或,并且二者的汉明距离一样。\n\n  空格和所有小写字母异或结果是相应的大写字母，空格和所有大写字母异或是相应的小写字母。\n\n  ![img](BUUCTF-crypto-writeup-md.assets/t01dd9c90c1ecde8471.jpg)\n\n  ![img](BUUCTF-crypto-writeup-md.assets/t0189dac1c8ab2412c8.jpg)\n\n \t1. 使用取模运算把密文分成n个分组（其中n是密钥长度），如此以来，我们就有了n个独立的凯撒加密式的密文组（因为每个分组里面的值是使用同一个密钥字节明文异或）。这样就把问题简化成了破解n个独立的凯撒加密模式的单字节抑或密码方式。这一步可以直接使用爆破，但是效率不高。我们采取另一种姿势。 \n \t2. 将2中的每个分组做如下的操作：每个分组做嵌套循环，内循环，外循环。设置外循环计数值possible*_space=0，max_*possible=0，设置内循环计数值maxpossible=0,依次取出每个分组中的每一个字节做与其他字节两两抑或进行内循环，如果结果是字母，我们就把内循环计数值maxpossible+1,在每个内循环结束后进行max*_possible的更新（与内循环maxpossible做对比），并记录当前字节的位置到possible_*space，然后外循环继续。直至遍历完所有的字节。取出max*_possible对应的字节位置possible_*space处的字节码，我们把它对应的明文假设成空格（根据之前的讨论）然后将该位置的字节和0x20（空格）异或;找出相应位置的密钥字节。 \n\n3. 重复2中的步骤，依次根据每个分组找出每位的密钥字节，至此密钥破解完毕 \n\n4. 将找出的密钥用于破解密文。当密文足够多，可以发现破解的准确率很高，基本可以做到无差别破解。\n\n\n\n**词频分析**\n\nhttps://codeleading.com/article/68135872581/\n\n\n\n### ？[SUCTF2019]MT【移位】\n\nhttps://blog.csdn.net/m0_49109277/article/details/117324488\n\n\n\n### [AFCTF2018]tinylfsr\n\n根据给出的文件，发现两次文件加密\n\n- plain->cipher\n- flag->flag_encode\n\n查看encrypt.py，加密方式为\n\n- 前一部分：key与plain的前一部分xor\n- 后一部分：lfsr生成的密钥流与plain的后一部分xor\n\n进一步分析，可以发现key与mask位数是相同的，看了一下mask的位数是二进制64位，那么key的位数就是16进制16位，也就是8位ASCII字符.\n\n(不知道key长度的话，也可以遍历一下，再用该key对plain加密看是否与cipher相同)\n\n```python\ncip = open('cipher.txt', 'rb').read()\nmsg = open('Plain.txt', 'rb').read()\n\nprint(codecs.encode(strxor(cip, msg)[:8], 'hex'))\n```\n\n接下来可以生成lfsr的密钥流，再依次解密（R要初始化为key）\n\n```python\nkey = '0123456789abcdef'\nR = int(key, 16)\nmask = 0b1101100000000000000000000000000000000000000000000000000000000000\n\n\ndef lfsr(R, mask):\n    # 左移1位：保留末尾 63 位，在最后添加一个0\n    output = (R << 1) & 0xffffffffffffffff\n\n    # i：保留 R 的前 0、1、3、4位\n    i = (R & mask) & 0xffffffffffffffff\n\n    lastbit = 0\n    while i != 0:\n        lastbit ^= (i & 1)\n        i = i >> 1\n    # lastbit：统计 i 里面有多少个1, 奇数个则为1, 偶数个则为0\n\n    # output: R 左移1位，再添加 lastbit\n    output ^= lastbit\n    return (output, lastbit)\n\n\ncip = open('flag_encode.txt', 'rb').read()\na = ''.join([chr(int(b, 16)) for b in [key[i:i + 2] for i in range(0, len(key), 2)]])\n\nans = \"\"\n\nfor i in range(len(a)):\n    ans += (chr((cip[i] ^ ord(a[i]))))\n\nlent = len(cip)\n\nfor i in range(len(a), lent):\n    tmp = 0\n    for j in range(8):\n        (R, out) = lfsr(R, mask)\n        tmp = (tmp << 1) ^ out\n    ans += (chr(tmp ^ cip[i]))\n\nprint(ans)\n\n```\n\n\n\n## 秘密共享的门限方案\n\n秘密共享的思想是将秘密以适当的方式拆分，拆分后的每一个份额由不同的参与者管理，单个参与者无法恢复秘密信息，只有若干个参与者一同协作才能恢复秘密消息。更重要的是，当其中任何相应范围内参与者出问题时，秘密仍可以完整恢复。\n\n秘密共享是一种将秘密分割存储的密码技术，目的是阻止秘密过于集中，以达到分散风险和容忍入侵的目的，是信息安全和数据保密中的重要手段\n\n### ？[AFCTF2018]花开藏宝地【bloom方案】\n\nhttps://webencrypt.org/secretsharing/#bloom\n\nhttp://www.matrix67.com/blog/archives/1261\n\n```python\na1 =100459779913520540098065407420629954816677926423356769524759072632219106155849450125185205557491138357760494272691949199099803239098119602186117878931534968435982565071570831032814288620974807498206233914826253433847572703407678712965098320122549759579566316372220959610814573945698083909575005303253205653244238542300266460559790606278310650849881421791081944960157781855164700773081375247\nd1 =347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820820091\na2 =305345133911395218573790903508296238659147802274031796643017539011648802808763162902335644195648525375518941848430114497150082025133000033835083076541927530829557051524161069423494451667848236452337271862085346869364976989047180532167560796470067549915390773271207901537847213882479997325575278672917648417868759077150999044891099206133296336190476413164240995177077671480352739572539631359\nd2 =347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820813413\na3 = 152012681270682340051690627924586232702552460810030322267827401771304907469802591861912921281833890613186317787813611372838066924894691892444503039545946728621696590087591246339208248647926966446848123290344911662916758039134817404720512465817867255277476717353439505243247568126193361558042940352204093381260402400739429050280526212446967632582771424597203000629197487733610187359662268583\nd3 =347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820818553\n\ndd = d1*d2*d3\nt1 = pow(dd//d1,d1-2,d1)\nassert(t1*d2*d3%d1 == 1)\nt2 = pow(dd//d2,d2-2,d2)\nassert(t2*d1*d3%d2 == 1)\nt3 = pow(dd//d3,d3-2,d3)\nassert(t3*d2*d1%d3 == 1)\ns = a1*t1*d2*d3+a2*t2*d1*d3+a3*t3*d1*d2\np = 80804238007977405688648566160504278593148666302626415149704905628622876270862865768337953835725801963142685182510812938072115996355782396318303927020705623120652014080032809421180400984242061592520733710243483947230962631945045134540159517488288781666622635328316972979183761952842010806304748313326215619695085380586052550443025074501971925005072999275628549710915357400946408857\ns %= dd\n# print(hex(s))\ns %= p\ns = hex(s)[2:]\nflag = list(bytearray.fromhex(s))\nfor i in flag:\n    print(chr(i),end=\"\")\n```\n\n\n\n## RSA\n\n#### [HDCTF2019]together  【多文件共模攻击】\n\n先分别分析两个公钥文件\n\n```python\nwith open(\"pubkey2.pem\",'rb') as f:\n    pub = RSA.importKey(f.read())\n    n = pub.n\n    e = pub.e\n    print(n,'\\n',e)\n```\n\n发现n相同，e不同。可以利用共模攻击。读取myflag文件后需要base64解码\n\n```python\ne1 = 2333\ne2 = 23333\nn = 14853081277902411240991719582265437298941606850989432655928075747449227799832389574251190347654658701773951599098366248661597113015221566041305501996451638624389417055956926238595947885740084994809382932733556986107653499144588614105694518150594105711438983069306254763078820574239989253573144558449346681620784979079971559976102366527270867527423001083169127402157598183442923364480383742653117285643026319914244072975557200353546060352744263637867557162046429886176035616570590229646013789737629785488326501654202429466891022723268768841320111152381619260637023031430545168618446134188815113100443559425057634959299\nwith open('myflag1','rb') as f:\n    c1 = base64.b64decode(f.read())\n    print(c1)\nwith open('myflag2','rb') as f:\n    c2 = base64.b64decode(f.read())\n    print(c2)\ngcd,s,t = gmpy2.gcdext(e1,e2)\nc1 = libnum.s2n(c1)\nc2 = libnum.s2n(c2)\nif s < 0:\n    s = -s\n    c1 = gmpy2.invert(c1,n)\nif t < 0:\n    t = -t\n    c2 = gmpy2.invert(c2,n)\n\nM = gmpy2.powmod(c1,s,n)*gmpy2.powmod(c2,t,n) % n\nm = hex(M)\nprint(m)\nprint(codecs.decode(m[2:],'hex'))\nm = m[2:]\nmissing_padding = 4 - len(m) % 4\nif missing_padding:\n    m += '=' * missing_padding\nprint(base64.b64decode(m))\n```\n\n\n\n#### [MRCTF2020]babyRSA 【数学计算】\n\n看脚本\n\n![image-20211115232410660](BUUCTF-crypto-writeup-md.assets/image-20211115232410660.png)\n\n过程都是和rsa一样，因此得到p，q即可正常解密\n\n![image-20211115232440411](BUUCTF-crypto-writeup-md.assets/image-20211115232440411.png)\n\n生成p的方式中间有的和rsa类似，因此类比，phi为(P[i]-1)乘积\n\n```python\nP = [0 for i in range(17)]\nP[9] = 206027926847308612719677572554991143421\nn = 206027926847308612719677572554991143421\nphi = 206027926847308612719677572554991143420\nc = 213671742765908980787116579976289600595864704574134469173111790965233629909513884704158446946409910475727584342641848597858942209151114627306286393390259700239698869487469080881267182803062488043469138252786381822646126962323295676431679988602406971858136496624861228526070581338082202663895710929460596143281673761666804565161435963957655012011051936180536581488499059517946308650135300428672486819645279969693519039407892941672784362868653243632727928279698588177694171797254644864554162848696210763681197279758130811723700154618280764123396312330032986093579531909363210692564988076206283296967165522152288770019720928264542910922693728918198338839\nfor i in range(10,17):\n    P[i] = sympy.nextprime(P[i-1])\n    print(i, P[i])\n    n*= P[i]\n    phi *= P[i]-1\nfor i in range(8,0,-1):\n    P[i] = sympy.prevprime(P[i+1])\n    print(i,P[i])\n    n *= P[i]\n    phi *= P[i]-1\nprint(n)\ne = 65537\nd = gmpy2.invert(e,phi)\np = pow(c,d,n)\nprint(p)\nprint(sympy.nextprime(p))\n```\n\nq直接根据计算即可\n\n```\nq = pow(sub_q,q2,q1)\n```\n\n#### [De1CTF2019]babyrsa 【综合】\n\n依次分析所需要的参数\n\n![image-20211126163520911](BUUCTF-crypto-writeup-md.assets/image-20211126163520911.png)\n\n根据中国剩余定理求得p^4，开四次方求得p为\n\n```python\nfrom sympy.ntheory.modular import crt\nm = [\n    20129615352491765499340112943188317180548761597861300847305827141510465619670536844634558246439230371658836928103063432870245707180355907194284861510906071265352409579441048101084995923962148527097370705452070577098780246282820065573711015664291991372085157016901209114191068574208680397710042842835940428451949500607613634682684113208766694028789275748528254287705759528498986306494267817198340658241873024800336013946294891687591013414935237821291805123285905335762719823771647853378892868896078424572232934360940672962436849523915563328779942134504499568866135266628078485232098208237036724121481835035731201383423,\n    31221650155627849964466413749414700613823841060149524451234901677160009099014018926581094879840097248543411980533066831976617023676225625067854003317018794041723612556008471579060428898117790587991055681380408263382761841625714415879087478072771968160384909919958010983669368360788505288855946124159513118847747998656422521414980295212646675850690937883764000571667574381419144372824211798018586804674824564606122592483286575800685232128273820087791811663878057827386379787882962763290066072231248814920468264741654086011072638211075445447843691049847262485759393290853117072868406861840793895816215956869523289231421,\n    29944537515397953361520922774124192605524711306753835303703478890414163510777460559798334313021216389356251874917792007638299225821018849648520673813786772452822809546571129816310207232883239771324122884804993418958309460009406342872173189008449237959577469114158991202433476710581356243815713762802478454390273808377430685157110095496727966308001254107517967559384019734279861840997239176254236069001453544559786063915970071130087811123912044312219535513880663913831358790376650439083660611831156205113873793106880255882114422025746986403355066996567909581710647746463994280444700922867397754748628425967488232530303,\n    25703437855600135215185778453583925446912731661604054184163883272265503323016295700357253105301146726667897497435532579974951478354570415554221401778536104737296154316056314039449116386494323668483749833147800557403368489542273169489080222009368903993658498263905567516798684211462607069796613434661148186901892016282065916190920443378756167250809872483501712225782004396969996983057423942607174314132598421269169722518224478248836881076484639837343079324636997145199835034833367743079935361276149990997875905313642775214486046381368619638551892292787783137622261433528915269333426768947358552919740901860982679180791]\nr = [\n    19131432661217908470262338421299691998526157790583544156741981238822158563988520225986915234570037383888112724408392918113942721994125505014727545946133307329781747600302829588248042922635714391033431930411180545085316438084317927348705241927570432757892985091396044950085462429575440060652967253845041398399648442340042970814415571904057667028157512971079384601724816308078631844480110201787343583073815186771790477712040051157180318804422120472007636722063989315320863580631330647116993819777750684150950416298085261478841177681677867236865666207391847046483954029213495373613490690687473081930148461830425717614569,\n    15341898433226638235160072029875733826956799982958107910250055958334922460202554924743144122170018355117452459472017133614642242411479849369061482860570279863692425621526056862808425135267608544855833358314071200687340442512856575278712986641573012456729402660597339609443771145347181268285050728925993518704899005416187250003304581230701444705157412790787027926810710998646191467130550713600765898234392350153965811595060656753711278308005193370936296124790772689433773414703645703910742193898471800081321469055211709339846392500706523670145259024267858368216902176489814789679472227343363035428541915118378163012031,\n    18715065071648040017967211297231106538139985087685358555650567057715550586464814763683688299037897182845007578571401359061213777645114414642903077003568155508465819628553747173244235936586812445440095450755154357646737087071605811984163416590278352605433362327949048243722556262979909488202442530307505819371594747936223835233586945423522256938701002370646382097846105014981763307729234675737702252155130837154876831885888669150418885088089324534892506199724486783446267336789872782137895552509353583305880144947714110009893134162185382309992604435664777436197587312317224862723813510974493087450281755452428746194446,\n    2282284561224858293138480447463319262474918847630148770112472703128549032592187797289965592615199709857879008271766433462032328498580340968871260189669707518557157836592424973257334362931639831072584824103123486522582531666152363874396482744561758133655406410364442174983227005501860927820871260711861008830120617056883514525798709601744088135999465598338635794275123149165498933580159945032363880613524921913023341209439657145962332213468573402863796920571812418200814817086234262280338221161622789516829363805084715652121739036183264026120868756523770196284142271849879003202190966150390061195469351716819539183797]\n\na = crt(m,r)\nprint(a[0])\nprint(gmpy2.mpz(pow(a[0],1/4)))\n```\n\n109935857933867829728985398563235455481120300859311421762540858762721955038310117609456763338082237907005937380873151279351831600225270995344096532750271070807051984097524900957809427861441436796934012393707770012556604479065826879107677002380580866325868240270494148512743861326447181476633546419262340100453\n\n![image-20211126162739647](BUUCTF-crypto-writeup-md.assets/image-20211126162739647.png)\n\n可以根据小公钥指数加密（m^e<n 相对而言）\n\n解出e2=381791429275130\n\ne1 = 15218928658178\n\n![image-20211126162708811](BUUCTF-crypto-writeup-md.assets/image-20211126162708811.png)\n\n分解n\n\nq1p即q1为127587319253436643569312142058559706815497211661083866592534217079310497260365307426095661281103710042392775453866174657404985539066741684196020137840472950102380232067786400322600902938984916355631714439668326671310160916766472897536055371474076089779472372913037040153356437528808922911484049460342088834871\n\n得到hint为\n\n**orz...you.found.me.but.sorry.no.hint...keep.on.and.enjoy.it!**\n\n最后，根据给出的条件看，一般情况用一个式子即可求解，但是报错无法求逆元d。发现gcd(e1,(p-1)(q1-1))=14。因此需要进行变形\n$$\nc1=m^{e1}\\ mod\\ (p*q1)=(m^{14})^{e1\\div14}\\mod\\ (p*q1)\n$$\n可以在此条件下求出m14 的通解(显然最小特解很大可能不是答案,因为这个解还需要满足第二个方程)\n\n第二个方程同理，用中国剩余定理求得m^14\n\n将同余方程组进行细化\n\nm^14 ☰a1 mod p\nm^14 ☰ a1 mod q1\nm^14 ☰ a2 mod p\nm^14 ☰ a2 mod q2\n\n由于m的指数过大,我们尝试通过构造一个新的rsa式子来降解m的指数.理论上4个方程有6种合并方式.但是通过计算**gcd(p-1,7)!=1**所以如果选择p的话显然是行不通的.于是舍弃p,选择q1,q2进行合并.得到一个全新的方程以后再通过一般求解rsa的方法就可以了\n\nm^14 = (m^2)^7 mod (q1*q2)\n\n看作新的rsa，e为7，c为之前求得m^14，最后求得m^2，再分解即可\n\n#### [NPUCTF2020]认清形势，建立信心【选择明文攻击】\n\n![image-20211128152817403](BUUCTF-crypto-writeup-md.assets/image-20211128152817403.png)\n\n\n\n#### [NPUCTF2020]共模攻击 【coppersmith]\n\nCoppersmith定理的内容为：在一个e阶的mod n多项式f(x)中，如果有一个根小于n^1/e，就可以运用一个O(log n)的算法求出这些根\n\ntask中我们可以获取的信息有：\n\n\n$$\nc1 = m^p\\ mod\\ n = m^p\\ mod \\ p*q\n$$\n\n$$\nc2 = m^q\\ mod\\ n = m^q\\ mod\\ p*q\n$$\n\n因为p、q为素数，所以由费马定理可得：\n\n\n$$\nm^p ≡ m\\ mod\\ p\n$$\n\n$$\nm^q ≡ m\\ mod\\ q\n$$\n\n所以，又有：\n\n　　c1 = m + ip + xpq，可整理成 c1 = m + ip \n\n　　c2 = m + jq + ypq，可整理成 c2 = m + jq\n\n因此：\n\n　　c1 * c2 = m2 + (ip + jq)m + ijn\n\n　　(c1 + c2)m = 2m2 + (ip+jq)m \n\n　　有： m2 - (c1 + c2)m + c1 * c2 = ijn ≡ 0 mod n\n\n最终的任务就是求m的值。\n\n```python\nn=128205304743751985889679351195836799434324346996129753896234917982647254577214018524580290192396070591032007818847697193260130051396080104704981594190602854241936777324431673564677900773992273463534717009587530152480725448774018550562603894883079711995434332008363470321069097619786793617099517770260029108149\nc1=96860654235275202217368130195089839608037558388884522737500611121271571335123981588807994043800468529002147570655597610639680977780779494880330669466389788497046710319213376228391138021976388925171307760030058456934898771589435836261317283743951614505136840364638706914424433566782044926111639955612412134198\nc2=9566853166416448316408476072940703716510748416699965603380497338943730666656667456274146023583837768495637484138572090891246105018219222267465595710692705776272469703739932909158740030049375350999465338363044226512016686534246611049299981674236577960786526527933966681954486377462298197949323271904405241585\n\nPR.<m> = PolynomialRing(Zmod(n))\n#Zmod(n):指定模，定义界限为n的环；Z表示整数；指定模是划定这个环的界限，就是有效的数字只有从0到n，其他的都通过与n取模来保证在0～n这个范围内；Zmod代表这是一个整数域中的n模环\n#ZZ：整数环；QQ：有理数环；RR：实数环；CC：复数环\n#PR：只是一个指针，指向用polynomialring指定的那个环（可以使用任意字符）\n#PolynomialRing：这个就是说建立多项式环\n#.<m>：指定一个变量的意思（可以用任意字符）\nf = m^2-(c1+c2)*m+c1*c2\nx0 = f.small_roots(X=2^400)\n#x的绝对边界，因为m<400bits，所以设为2^400\nprint(x0)\n```\n\nhttps://xz.aliyun.com/t/6813\n\ncoppersmith攻击总结https://www.ruanx.net/coppersmith/\n\n#### [QCTF2018]Xman-RSA\n\n查看encryption.encrypted，看代码应该是作了一个简单的替换加密，使用quipquip进行频率分析，还原出代码（其中大写的T没有作替换）\n\n```python\nfrom gmpy2 import is_prime \nfrom os import urandom \nimport base64 \ndef bytes_to_num(b): \n\treturn int(b.encode('hex'), 16) \n\ndef num_to_bytes(n): \n\tb = hex(n)[2:-1] \n\tb = '0' + b if len(b)%2 == 1 else b \n\treturn b.decode('hex') \n\ndef get_a_prime(l): \n\trandom_seed = urandom(l) \n\tnum = bytes_to_num(random_seed) \n\twhile True: \n\t\tif is_prime(num): \n\t\t\tbreak \n\t\tnum+=1 \n\treturn num \n\ndef encrypt(s, e, n): \n\tp = bytes_to_num(s) \n\tp = pow(p, e, n) \n\treturn num_to_bytes(p).encode('hex') \n\ndef separate(n): \n\tp = n % 4 \n\tt = (p*p) % 4 \n\treturn t == 1 \n\nf = open('flag.txt', 'r') \nflag = f.read() \n\nmsg1 = \"\" \nmsg2 = \"\" \nfor i in range(len(flag)): \n\tif separate(i): \n\t\tmsg2 += flag[i] \n\telse: \n\t\tmsg1 += flag[i]\n\np1 = get_a_prime(128) \np2 = get_a_prime(128) \np3 = get_a_prime(128) \nn1 = p1*p2 \nn2 = p1*p3 \ne = 0x1001 \nc1 = encrypt(msg1, e, n1) \nc2 = encrypt(msg2, e, n2) \nprint(c1) \nprint(c2) \ne1 = 0x1001 \ne2 = 0x101 \np4 = get_a_prime(128) \np5 = get_a_prime(128) \nn3 = p4*p5 \nc1 = num_to_bytes(pow(n1, e1, n3)).encode('hex') \nc2 = num_to_bytes(pow(n1, e2, n3)).encode('hex') \nprint(c1) \nprint(c2) \nprint(base64.b64encode(num_to_bytes(n2))) \nprint(base64.b64encode(num_to_bytes(n3)))\n```\n\n进一步分析文件，n1中的应该是59、60行中的c1、c2，ciphertext是上面真正和flag有关的的c1、c2，最后是n2和n3\n\n先求得n2和n3的值\n\n```python\nn2 = \"PVNHb2BfGAnmxLrbKhgsYXRwWIL9eOj6K0s3I0slKHCTXTAUtZh3T0r+RoSlhpO3+77AY8P7WETYz2Jzuv5FV/mMODoFrM5fMyQsNt90VynR6J3Jv+fnPJPsm2hJ1Fqt7EKaVRwCbt6a4BdcRoHJsYN/+eh7k/X+FL5XM7viyvQxyFawQrhSV79FIoX6xfjtGW+uAeVF7DScRcl49dlwODhFD7SeLqzoYDJPIQS+VSb3YtvrDgdV+EhuS1bfWvkkXRijlJEpLrgWYmMdfsYX8u/+Ylf5xcBGn3hv1YhQrBCg77AHuUF2w/gJ/ADHFiMcH3ux3nqOsuwnbGSr7jA6Cw==\"\nn3 = \"TmNVbWUhCXR1od3gBpM+HGMKK/4ErfIKITxomQ/QmNCZlzmmsNyPXQBiMEeUB8udO7lWjQTYGjD6k21xjThHTNDG4z6C2cNNPz73VIaNTGz0hrh6CmqDowFbyrk+rv53QSkVKPa8EZnFKwGz9B3zXimm1D+01cov7V/ZDfrHrEjsDkgK4ZlrQxPpZAPl+yqGlRK8soBKhY/PF3/GjbquRYeYKbagpUmWOhLnF4/+DP33ve/EpaSAPirZXzf8hyatL4/5tAZ0uNq9W6T4GoMG+N7aS2GeyUA2sLJMHymW4cFK5l5kUvjslRdXOHTmz5eHxqIV6TmSBQRgovUijlNamQ==\"\nn2 = bytes_to_long(base64.b64decode(n2))\nn3 = bytes_to_long(base64.b64decode(n3))\nprint(n2)\nprint(n3)\n```\n\n然后共模攻击，求得n1的值\n\n```python\nc1 = \"2639c28e3609a4a8c953cca9c326e8e062756305ae8aee6efcd346458aade3ee8c2106ab9dfe5f470804f366af738aa493fd2dc26cb249a922e121287f3eddec0ed8dea89747dc57aed7cd2089d75c23a69bf601f490a64f73f6a583081ae3a7ed52238c13a95d3322065adba9053ee5b12f1de1873dbad9fbf4a50a2f58088df0fddfe2ed8ca1118c81268c8c0fd5572494276f4e48b5eb424f116e6f5e9d66da1b6b3a8f102539b690c1636e82906a46f3c5434d5b04ed7938861f8d453908970eccef07bf13f723d6fdd26a61be8b9462d0ddfbedc91886df194ea022e56c1780aa6c76b9f1c7d5ea743dc75cec3c805324e90ea577fa396a1effdafa3090\"\nc2 = \"42ff1157363d9cd10da64eb4382b6457ebb740dbef40ade9b24a174d0145adaa0115d86aa2fc2a41257f2b62486eaebb655925dac78dd8d13ab405aef5b8b8f9830094c712193500db49fb801e1368c73f88f6d8533c99c8e7259f8b9d1c926c47215ed327114f235ba8c873af7a0052aa2d32c52880db55c5615e5a1793b690c37efdd5e503f717bb8de716303e4d6c4116f62d81be852c5d36ef282a958d8c82cf3b458dcc8191dcc7b490f227d1562b1d57fbcf7bf4b78a5d90cd385fd79c8ca4688e7d62b3204aeaf9692ba4d4e44875eaa63642775846434f9ce51d138ca702d907849823b1e86896e4ea6223f93fae68b026cfe5fa5a665569a9e3948a\"\nc1 = codecs.decode(c1,'hex')\nc1 = bytes_to_long(c1)\nc2 = bytes_to_long(codecs.decode(c2,'hex'))\ne1 = 0x1001\ne2 = 0x101\nn = n3\ngcd,s,t = gmpy2.gcdext(e1,e2)\nif s < 0:\n    s = -s\n    c1 = gmpy2.invert(c1,n)\nif t < 0:\n    t = -t\n    c2 = gmpy2.invert(c2,n)\n\nM = gmpy2.powmod(c1,s,n)*gmpy2.powmod(c2,t,n) % n\nprint(M)\nn1 = M\n```\n\n最后求解得到msg1，msg2。再分析separate函数，发现只是交错分割flag\n\n所以还原即可。\n\n注意字节码需要decode()转换为字符串。\n\n给到的函数num_to_bytes不知道为什么可能有一点小问题，最后需要改用long_to_bytes\n\n```python\np = gmpy2.gcd(n1,n2)\n\n\ndef decrypt(c,e,n):\n    c = bytes_to_num(codecs.decode(c,'hex'))\n    q = divmod(n,p)[0]\n    phi_n = (p-1)*(q-1)\n    d = gmpy2.invert(e,phi_n)\n    m = pow(c,d,n)\n\n    return long_to_bytes(m)\n\n\nc1 = \"1240198b148089290e375b999569f0d53c32d356b2e95f5acee070f016b3bef243d0b5e46d9ad7aa7dfe2f21bda920d0ac7ce7b1e48f22b2de410c6f391ce7c4347c65ffc9704ecb3068005e9f35cbbb7b27e0f7a18f4f42ae572d77aaa3ee189418d6a07bab7d93beaa365c98349d8599eb68d21313795f380f05f5b3dfdc6272635ede1f83d308c0fdb2baf444b9ee138132d0d532c3c7e60efb25b9bf9cb62dba9833aa3706344229bd6045f0877661a073b6deef2763452d0ad7ab3404ba494b93fd6dfdf4c28e4fe83a72884a99ddf15ca030ace978f2da87b79b4f504f1d15b5b96c654f6cd5179b72ed5f84d3a16a8f0d5bf6774e7fd98d27bf3c9839\"\nc2 = \"129d5d4ab3f9e8017d4e6761702467bbeb1b884b6c4f8ff397d078a8c41186a3d52977fa2307d5b6a0ad01fedfc3ba7b70f776ba3790a43444fb954e5afd64b1a3abeb6507cf70a5eb44678a886adf81cb4848a35afb4db7cd7818f566c7e6e2911f5ababdbdd2d4ff9825827e58d48d5466e021a64599b3e867840c07e29582961f81643df07f678a61a9f9027ebd34094e272dfbdc4619fa0ac60f0189af785df77e7ec784e086cf692a7bf7113a7fb8446a65efa8b431c6f72c14bcfa49c9b491fb1d87f2570059e0f13166a85bb555b40549f45f04bc5dbd09d8b858a5382be6497d88197ffb86381085756365bd757ec3cdfa8a77ba1728ec2de596c5ab\"\ne = 0x1001\nmsg1 = decrypt(c1,e,n1).decode()\nmsg2 = decrypt(c2,e,n2).decode()\n\nprint()\n\nflag = \"\"\nlen = len(msg2) + len(msg1)\ntmp1 = 0\ntmp2 = 0\nfor i in range(len//2):\n    flag += str(msg1[tmp1])\n    flag += str(msg2[tmp2])\n    tmp1+=1\n    tmp2+=1\n\nprint(flag)\n```\n\n#### [羊城杯 2020]RRRRRRRSA 【wiener attack】\n\nwiener attack：依靠连分数进行攻击，适用于非常接近某一值（如1）时，求一个比例关系，通过该比例关系再反推关键信息。\n\n适用于解密指数d很小，满足以下条件\n$$\nd < 1/3\\ * N^{1/4}\n\\\\\nq < p < 2q\n$$\n一般用法：根据\n$$\ned\\ mod\\ phi(n) = 1\n$$\n得到\n\n$$\ne*d = 1 + k*phi(n) \\\\\n即\\ e/phi(n) = k/d + 1/d*phi(n)\n\\\\ 而\\ phi(n)接近于n \n\\\\ e/n - k/d = 1/d*phi(n)\n\\\\ e/n 与 k/d非常接近\n\\\\ \n$$\n而e/N又是已知的,因此对e/N进行连分数展开，得到的一串分数的分母很有可能就是d，只要检验一下 ed mod phi(n) 看它是不是1就知道对不对了。\n\n\n\n本题特殊之处：e与N并没有近到相除约为1的地步，相差还是很大的，也就是说解密指数d也许还是很大的，这样就解不出来。但是N1和N2的关系却适合。\n$$\nN1/N2=(p1/p2)^2\\ * (q1/q2)\n$$\n显然我们可以知道的是N1/N2 <Q1/Q2，所以在Q1/Q2在区间(N1/N2,1)之间，尝试对N1/N2进行连分数展开并求其各项渐进分数，其中某个连分数的分母可能就是Q1（这个可以依靠N%Q来验证）\n\n```python\n        N1 =\n        N2 =\n        #求连分数的项\n        def continuedfra(x,y):\n            cf = []\n            while y:\n                cf += [x//y]\n                x,y = y,x%y\n            return cf\n        #得到分子和分母\n        def simplify(c):\n            numrator = 0 #分子\n            denominator = 1 #分母\n            for x in c[::-1]: #倒序遍历？\n                numrator,denominator = denominator,x * denominator + numrator\n            return (numrator,denominator) #连分数生成分子和算出来的分母？\n\n        def getit(c):\n            cf = []\n            for i in range(len(c)):\n                cf.append(simplify(c[:i]))\n            return cf\n\n        def wiener(e,n):\n            cf = []\n            for (Q2,Q1) in getit(cf):\n                if Q1 == 0:\n                    continue\n                if N1%Q1 == 0 and Q1 != 1:\n                    return Q1\n            print(\"not found\")\n            return 0\n        Q1 = wiener(N1,N2)\n```\n\n \t\n\n\n\n#### ！[watevrCTF 2019]Swedish RSA【多项式】\n\nhttps://blog.csdn.net/MikeCoke/article/details/113800879\n\n多项式的欧拉函数：对于多项式P(y)来讲，欧拉函数phi(P(y))表示所有不高于P(y)幂级的环内所有多项式中，与P(y)无（除1以外）公因式的其他多项式的个数。\n\n#### [美团CTF]hambersa 【PP】\n\nx, y = len(str§), len(str(q))\nP = 10^x * p + p\nQ = 10^y * q + q\n同理\nPP = 10^x’ * P + Q\nQQ = 10^y’ * Q + P\n\nN = 10^(x+x'+y+y')pq+...+pq\n\n\n\nsage代码\n\n```python\nfrom Crypto.Util.number import *\nfrom tqdm import tqdm\n\ndef decrypt_RSA(c, e, p, q):\n    phi = (p-1) * (q-1)\n    d = inverse(e, phi)\n    m = pow(c, d, p*q)\n    print(long_to_bytes(m))\n\nn = 177269125756508652546242326065138402971542751112423326033880862868822164234452280738170245589798474033047460920552550018968571267978283756742722231922451193\nc = 47718022601324543399078395957095083753201631332808949406927091589044837556469300807728484035581447960954603540348152501053100067139486887367207461593404096\n\n\nlow = str(n)[-18:]\nhigh = str(n)[:18]\npq_prob = []\n\nfor i in range(10):\n    for j in range(10):\n        for k in range(10):\n            pq_prob.append(int(high + str(i) + str(j)+ str(k) + low))\n\nfor x in tqdm(pq_prob):\n    f = factor(x)\n    if (len(f) == 2 and f[0][0].nbits() == 64):\n        p, q = f[0][0], f[1][0]\n        break\n\nP = int(str(p) + str(p))\nprint(P)\nQ = int(str(q) + str(q))\nPP = int(str(P) + str(Q))\nQQ = int(str(Q) + str(P))\nN = PP * QQ\nprint(N == n)\ndecrypt_RSA(c, 65537, PP, QQ)```\n```\n\n#### [NCTF2019]easyrsa【e，phi不互素】\n\nhttp://yulige.top/?p=752#easyRSA909pt_2solvers\n\n然而本题则为`e`和`p-1`(或`q-1`)的最大公约数就是`e`本身，也就是说`e | p-1`，只有对`c`开`e`次方根才行，但是e很大，暴力计算所需时间很长。\n可以将同余方程\n$$\nm^e \\equiv c \\quad (\\text{mod}\\ n)\n$$\n\n$$\n化成\\\\ \n\\begin{aligned}\nm^e &\\equiv c \\quad (\\text{mod}\\ p)\\newline\nm^e &\\equiv c \\quad (\\text{mod}\\ q)\n\\end{aligned}\n$$\n\n然后分别在`GF(p)`和`GF(q)`上对`c`开`e=0x1337`次方根，再用`CRT`组合一下即可得到在`mod n`下的解\n\n\n\n\n\n**有限域内开根： **\n\ne与p-1和q-1都不互素，不能简单求个逆元\n\n开平方根可以用 `Tonelli-Shanks`算法，可以扩展到开n次方根\n\n这篇[paper](https://arxiv.org/pdf/1111.4877.pdf) 里给出了具体的算法：`Adleman-Manders-Miller rth Root Extraction Method`\n\n![Adleman-Manders-Miller cubic root extraction method](BUUCTF-crypto-writeup-md.assets/QNy9EWc7K4enJGu.jpg)\n\n[数学证明以后再看吧2333](https://jayxv.github.io/2019/12/04/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%B5%85%E6%9E%90On%20r-th%20Root%20Extraction%20Algorithm%20in%20Fq/)\n\n```python\ndef AMM(o, r, q):\n    start = time.time()\n    print('\\n----------------------------------------------------------------------------------')\n    print('Start to run Adleman-Manders-Miller Root Extraction Method')\n    print('Try to find one {:#x}th root of {} modulo {}'.format(r, o, q))\n    g = GF(q)\n    o = g(o)\n    p = g(random.randint(1, q))\n    while p ^ ((q-1) // r) == 1:\n        p = g(random.randint(1, q))\n    print('[+] Find p:{}'.format(p))\n    t = 0\n    s = q - 1\n    while s % r == 0:\n        t += 1\n        s = s // r\n    print('[+] Find s:{}, t:{}'.format(s, t))\n    k = 1\n    while (k * s + 1) % r != 0:\n        k += 1\n    alp = (k * s + 1) // r\n    print('[+] Find alp:{}'.format(alp))\n    a = p ^ (r**(t-1) * s)\n    b = o ^ (r*alp - 1)\n    c = p ^ s\n    h = 1\n    for i in range(1, t):\n        d = b ^ (r^(t-1-i))\n        if d == 1:\n            j = 0\n        else:\n            print('[+] Calculating DLP...')\n            j = - discrete_log(d, a)\n            print('[+] Finish DLP...')\n        b = b * (c^r)^j\n        h = h * c^j\n        c = c^r\n    result = o^alp * h\n    end = time.time()\n    print(\"Finished in {} seconds.\".format(end - start))\n    print('Find one solution: {}'.format(result))\n    return result\n```\n\n\n\n但该算法只能求得一个根，实际上开0x1337次方，最多会有0x1337个根。\n\n那么如何找到其他根呢？\n\n先找到所有0x1336个proot使得\n$$\nproot^e = 1 (mod\\ p)\n$$\n然后乘以上面求得的根即可。\n\n由于\n$$\n(proot^{p-1/e})^e = proot^{p-1} = 1 (mod\\ p)\n$$\n所以只需要\n\n```python\ndef findAllPRoot(p, e):\n    print(\"Start to find all the Primitive {:#x}th root of 1 modulo {}.\".format(e, p))\n    start = time.time()\n    proot = set()\n    while len(proot) < e:\n        g = pow(random.randint(2, p-1), (p-1)//e, p)\n        if pow(g,e//2,p) != 1:\n            proot.add(g)\n    end = time.time()\n    print(\"Finished in {} seconds.\".format(end - start))\n    return proot\n```\n\n完整sage代码如下\n\n\n\n#### [百度2021]time【p，q相近+随机数遍历】\n\n首先看到q是p的下一个素数，可以发现p，q非常相近，所以\n\n![image-20211228131817914](BUUCTF-crypto-writeup-md.assets/image-20211228131817914.png)\n$$\n|p-q|很小\\\\\n（p+q)/2 与 \\sqrt[2]{n}很接近\\\\\n从\\sqrt[2]{n}开始直到找到一个x，使得x^2-n=y^2即可\\\\\np = x-y \\\\\nq = x + y\n$$\n\n```python\npp = gmpy2.iroot(n,2)[0]\nfor x in range(pp+1,pp+3):\n    yy = pow(x,2)-n\n    if gmpy2.iroot(yy,2)[1]:\n        y = gmpy2.iroot(yy,2)[0]\n        p = (x-y)\n        q = x + y\n        print(\"p:\",p)\n        print(\"q:\",q)\nphi = (p-1)*(q-1)\nd = gmpy2.invert(e,phi)\nm = pow(c,d,n)\nprint(m)\nprint(long_to_bytes(m))\n\n```\n\n得到hint\n\n`localtime为time.struct_time(tm_year=2021, tm_mon=4, tm_mday=28, tm_hour=20, tm_min=42, tm_sec=6, tm_wday=2, tm_yday=118, tm_isdst=0)`\n\n`time()-a1 = 3.1603143215179443`\n\nrandome.seed设置的种子相同的话，最后得到的随机数也相同，所以只需要进行遍历即可\n\n```python\nlt = time.mktime((2021,4,28,20,42,6,2,118,0))\nprint(lt)\na1 = 3.1603143215179443\ns = 0\nfor i in range(3):\n    for j in range(100000):\n        random.seed(s)\n        x = random.getrandbits(2048)\n        s = int(lt) - i + j * 10 ** -5\n        if n % x == 0:\n            p = x\n            print(p)\n            q = n//p\n            phi = (p-1)*(q-1)\n            d = gmpy2.invert(e,phi)\n            m = pow(c,d,n)\n            print(long_to_bytes(m))\n            break\n        \n```\n\n\n\n#### [百度ichunqiu]whitegiveCMA【数论+共模】\n\n\n\n\n\n#### [GKCTF2021]RRRsa【数学式子化简】\n\n1）拿到两个式子后，先把**括号去掉**，然后把**常数项去掉**；\n2）之后得到的式子应该是**俩个只含p或q的式子**，让两个式子的p（或q）的**指数**和**系数**相同；\n3）将两个式子相加或相减**消掉p**,剩下的式子应该只剩下q,与n进行gcd（）求出q\n\n```python\nimport gmpy2\nimport Rsa\nt= 202020*212121\nh3=25590923416756813543880554963887576960707333607377889401033718419301278802157204881039116350321872162118977797069089653428121479486603744700519830597186045931412652681572060953439655868476311798368015878628002547540835719870081007505735499581449077950263721606955524302365518362434928190394924399683131242077\nh4=104100726926923869566862741238876132366916970864374562947844669556403268955625670105641264367038885706425427864941392601593437305258297198111819227915453081797889565662276003122901139755153002219126366611021736066016741562232998047253335141676203376521742965365133597943669838076210444485458296240951668402513\nn2 = 114535923043375970380117920548097404729043079895540320742847840364455024050473125998926311644172960176471193602850427607899191810616953021324742137492746159921284982146320175356395325890407704697018412456350862990849606200323084717352630282539156670636025924425865741196506478163922312894384285889848355244489\nh = pow(2021,t,n2)*pow(h3,212121,n2)-pow(2020,t,n2)*pow(h4,202020,n2)\nq2 = gmpy2.gcd(n2,h)\nprint(q2)\np2 = n2//q2\nprint(p2)\nc2 = 67054203666901691181215262587447180910225473339143260100831118313521471029889304176235434129632237116993910316978096018724911531011857469325115308802162172965564951703583450817489247675458024801774590728726471567407812572210421642171456850352167810755440990035255967091145950569246426544351461548548423025004\nd = Rsa.get_d(65537,p2,q2,n2)\nq = Rsa.decrypt(c2,d,n2)\n\nn1=75003557379080252219517825998990183226659117019770735080523409561757225883651040882547519748107588719498261922816865626714101556207649929655822889945870341168644508079317582220034374613066751916750036253423990673764234066999306874078424803774652754587494762629397701664706287999727238636073466137405374927829\nc1=68111901092027813007099627893896838517426971082877204047110404787823279211508183783468891474661365139933325981191524511345219830693064573462115529345012970089065201176142417462299650761299758078141504126185921304526414911455395289228444974516503526507906721378965227166653195076209418852399008741560796631569\nhint1=23552090716381769484990784116875558895715552896983313406764042416318710076256166472426553520240265023978449945974218435787929202289208329156594838420190890104226497263852461928474756025539394996288951828172126419569993301524866753797584032740426259804002564701319538183190684075289055345581960776903740881951\nhint2=52723229698530767897979433914470831153268827008372307239630387100752226850798023362444499211944996778363894528759290565718266340188582253307004810850030833752132728256929572703630431232622151200855160886614350000115704689605102500273815157636476901150408355565958834764444192860513855376978491299658773170270\nq1 = gmpy2.gcd(n1,pow(hint2-212121,202020,n1)*pow(2020,202020,n1)-hint1*pow(2021,202020,n1))\nprint(q1)\np1 = n1//q1\nd = Rsa.get_d(65537,p1,q1,n1)\np = Rsa.decrypt(c1,d,n1)\n\nc = 13492392717469817866883431475453770951837476241371989714683737558395769731416522300851917887957945766132864151382877462142018129852703437240533684604508379950293643294877725773675505912622208813435625177696614781601216465807569201380151669942605208425645258372134465547452376467465833013387018542999562042758\nd = Rsa.get_d(65537,p,q,p*q)\nm = Rsa.decrypt(c,d,p*q)\n```\n\n\n\n## ELgamal\n\n\n\n\n\n## Hash\n\n\n\n## 脑洞\n\n","source":"_posts/BUUCTF-crypto-writeup-md.md","raw":"---\ntitle: \"[BUUCTF-crypto]writeup【loading】\"\ndate: 2022-01-24 13:32:00\ntags: \n\t- crypto\n\t- ctf\n\t- writeup\ncategories:\n\t- [crypto,ctf]\nkeywords:\n\t- crypto\n\t- writeup\ndescription:\ntop_img:\ncomments:\ncover:\ntoc:\ntoc_number:\ncopyright:\nmathjax:\nkatex: true\nhide:\n---\n\n# [BUUCTF-crypto]writeup\n\n## 数学\n\n### [WUSTCTF2020]大数计算\n\n![image-20211107125148733](BUUCTF-crypto-writeup-md.assets/image-20211107125148733.png)\n\nNote：理解问题，题目说要十六进制，前8位不知道是取十进制的前八位然后转换还是取十六进制的前八位，所以（错误就得多试试\n\n```python\na = math.factorial(2020)\nprint(a)\nprint(hex(int(str(a)[:8])))\n\nx = pow(520,1314) + pow(2333,666)\nprint(x)\nprint(hex(int(str(x)[:8])))\n```\n\n宇宙终极问题：x³＋y³＋z³＝42\n\n(-80538738812075974)³ + 80435758145817515³ + 12602123297335631³ = 42\n\npart-4，简单的积分，计算面积即可，再加36得520\n\n\n\n## 编码\n\n### 鸡藤椒盐味  【汉明码】\n\n设将要进行检测的二进制代码为n位，为使其具有纠错能力，需要再加上k位的检测位，组成n+k位的代码。那么，新增加的检测位数k应满足：\n\n2k≥n+k+1或2k-1≥n+k\n\n![image-20211121185128493](BUUCTF-crypto-writeup-md.assets/image-20211121185128493.png)\n\n\n\n## 古典\n\n### [INSHack2018]Crypt0r part 1【tcp流+简单替换】\n\n![image-20220118215319029](BUUCTF-crypto-writeup-md.assets/image-20220118215319029.png)\n\n给出pcap文件\n\n使用wireshark打开，并分析tcp数据流\n\n![image-20220118215352072](BUUCTF-crypto-writeup-md.assets/image-20220118215352072.png)\n\nquipquip直接频率分析得到的结果不太对，再仔细观察可能用到的为第二行中的\n\n```python\ndef replacement(s,cipher):\n    # s为m中对应的字母\n    m = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n    x = string.ascii_letters.maketrans(s, m)\n    print(cipher.translate(x))\n    \ns = 'PMSFADNIJKBXQCGYWETOVHRULZ'\ns += s.lower()\nreplacement()\n```\n\n### [UTCTF2020]basic-crypto\n\n打开文件是二进制形式，先转十六进制，再转ASCII试试\n\n![image-20211107144120942](BUUCTF-crypto-writeup-md.assets/image-20211107144120942.png)\n\n提示很明显base64\n\n![image-20211107144143545](BUUCTF-crypto-writeup-md.assets/image-20211107144143545.png)\n\n提示移位以及Roman，试试凯撒\n\n![image-20211107144221290](BUUCTF-crypto-writeup-md.assets/image-20211107144221290.png)\n\n提示进行词频分析\n\n![image-20211107144251417](BUUCTF-crypto-writeup-md.assets/image-20211107144251417.png)\n\n### 达芬奇密码 【换位】\n\n根据电影简介，看到斐波那契数列\n\n观察给出的一列数字，为32位，flag也是32位，\n\n写一个函数，输出32个斐波那契数列的数\n\n```python\ndef fib(n):\n    if n == 0 or n == 1:\n        return 1\n    return fib(n-1) + fib(n-2)\n\nfor i in range(50):\n    print(fib(i),end=' ')\n```\n\n![image-20211121110325817](BUUCTF-crypto-writeup-md.assets/image-20211121110325817.png)\n\n原文flag通过移位得到密文c\n\n第0位均为1，位置不变\n\n原fib数列的233（12位）变换到第1位\n\n因此只需要找到f在原数列哪个位置，再把c对应的数字放回原位即可，注意有两个1，而第0位不变，因此可以把第0位修改为0或其他没有冲突的数字\n\n```python\nfib = \"0 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309\"\n\nf = \"0 233 3 2584 1346269 144 5 196418 21 1597 610 377 10946 89 514229 987 8 55 6765 2178309 121393 317811 46368 4181 1 832040 2 28657 75025 34 13 17711\"\n\nc = \"36968853882116725547342176952286\"\n\nm = ['3']*32\n\nfib = fib.split(' ')\nf = f.split(' ')\n\nfor i in range(len(f)):\n    m[fib.index(f[i])] = c[i]\nfor i in m:\n    print(i,end='')\n```\n\n### ?[UTCTF2020]hill\n\n未知密钥，猜测\n\n```python\ns='wznqcaduqopfkqnwofDbzgeu'\n#未给密钥的自己猜测\nflag_pre='utflag'\ndef getit(a1,b1,c1,a2,b2,c2,a3,b3,c3):\n    for i in range(26):\n        for j in range(26):\n            if (a1 * i + b1 * j) % 26 == c1 and (a2 * i + b2 * j) % 26 == c2 and (a3 * i+b3*j) % 26 == c3:\n                return (i,j)\nx1=getit(22,25,20,13,16,5,2,0,0)\nx2=getit(22,25,19,13,16,11,2,0,6)\nimport string\nflag=''\nfor i in range(0, len(s),2):\n    flag+=string.ascii_letters[(x1[0]*string.ascii_letters.index(s[i])+x1[1]*string.ascii_letters.index(s[i+1]))%26]\n    flag+=string.ascii_letters[(x2[0]*string.ascii_letters.index(s[i])+x2[1]*string.ascii_letters.index(s[i+1]))%26]\nprint(flag)\n```\n\n### [XNUCA2018]baby_crypto【重合指数、词频分析】\n\n题目:26个字母用0-25分别表示，有两串密钥，长度未知，然后一个用作乘数，一个用作加数对明文进行加密\n\n\n\nhttps://blog.csdn.net/weixin_44110537/article/details/107947158\n\n\n\n\n\n## 块密码\n\n### [ACTF新生赛2020]crypto-aes\n\n因为\n\n```python\nkey=os.urandom(2)*16\niv=os.urandom(16)\n```\n\nkey是**32bytes**,**256bits** ；iv是**16bytes ,128bits**\n\n由于os.urandom（size） \n\n参数： size:字符串随机字节的大小 返回值：该方法返回一个字符串，该字符串表示适合加密使用的随机字节。\n\n所以可以根据key的高128位得到key值，低128位和结果异或便得到iv\n\n最后进行解密即可\n\n```python\nfrom Crypto.Cipher import AES\nimport os\nfrom gmpy2 import*\nfrom Crypto.Util.number import*\n\nxor = 91144196586662942563895769614300232343026691029427747065707381728622849079757\nenc_flag = b'\\x8c-\\xcd\\xde\\xa7\\xe9\\x7f.b\\x8aKs\\xf1\\xba\\xc75\\xc4d\\x13\\x07\\xac\\xa4&\\xd6\\x91\\xfe\\xf3\\x14\\x10|\\xf8p'\nout = long_to_bytes(xor)\nprint(out)\nkey = out[:16]*2\nprint(key)\niv = bytes_to_long(key[16:])^bytes_to_long(out[16:])\nprint(iv)\niv = long_to_bytes(iv)\nprint(iv)\naes = AES.new(key,AES.MODE_CBC,iv)\nflag = aes.decrypt(enc_flag)\nprint(flag)\n```\n\n### [AFCTF2018]MyOwnCBC【AES-CBC】\n\n加密过程是用上一级的密文，作为下一次加密的密钥key,所以初始密钥key可以知道就是题目给的密文前32个\n\n\n\n### [美团CTF]\n\n\n\n### [ACTF新生赛2020]crypto-des\n\nc语言中数据在内存中的存储（大小端）\n\n\n\n\n\n有轮密钥，直接解密即可\n\n## 流密码\n\n### ?[AFCTF2018]你听过一次一密么？\n\n一次一密（One-Time-Pad）：xor key  明文多长，密文就多长（适合少量明文消息）\n\nMany-Time-Pad攻击：多个明文异或同样的key\n\nhttps://www.ruanx.net/many-time-pad/\n\n攻击思想：对于每一条密文Ci，拿去异或其他所有密文。然后去数每一列有多少个英文字符，作为“Mi在这一位是空格”的评分。依据评分从大到小排序，依次利用 “某个明文的某一位是空格” 这种信息恢复出所有明文的那一列。如果产生冲突，则舍弃掉评分小的\n\n\n\n**修复语句太绝了**\n\n\n\n### ？[De1CTF2019]xorz 【频率分析/break repeating-key】\n\n**法一：流密码**\n\n参考\n\nhttps://www.anquanke.com/post/id/161171#h3-\n\nhttp://socold.cn/index.php/archives/65/\n\n#### 一.猜测密钥长度\n\n1.暴力破解：\n\nhttps://www.ruanx.net/many-time-pad/\n\n给的是 m[i]⊕k[i]⊕s[i], 其中 s 已知，故实际上我们拿到了 m[i]⊕k[i]. 在这里 k 是有周期的，且周期不超过38。如果知道了 k 的周期，那么用 Many-Time-Pad 就可以成功攻击。由于 `len(key)` 并不大，从大到小枚举 `len(key)`，肉眼判断是否为flag即可。最后发现 `len(key)=30` 是满足要求的。\n\n但是这种方法过于耗时费力\n\n2.汉明距离：一组二进制数据变成另一组数据所需的步骤数。对两组二进制数据进行异或运算，并统计结果为1的个数，那么这个数就是汉明距离。\n\n- 根据扩展资料：\n\n  - 两个以ascii编码的英文字符的汉明距离是2-3之间，也就是说正常英文字母的平均汉明距离为2-3（每比特），任意字符（非纯字母）的两两汉明距离平均为4。\n\n  - 正确分组的密文与密文的汉明距离等于明文与明文的汉明距离（可以通过按正确密钥长度分组的密文与密文异或等于明文与明文异或证明）\n\n    因此，当我们使用了正确的密钥长度后，两两字母进行计算汉明距离，那么这个值应该是趋于最小。为了增加效率，我们不需要对每一对分组都计算汉明距离，只需取出前几对就可说明问题。当然为了排除偶然误差，结果不应该只取最小的那一个密钥长度，而是酌情多取几组\n\n\n\n#### 二.根据猜出的密文长度进行解密\n\n两种方法：\n\n- 合理利用明文的空格\n\n  在使用异或加密的形式下，使用相同密钥加密的明文和秘文间存在这个规律，密文和密文异或等于明文和明文异或,并且二者的汉明距离一样。\n\n  空格和所有小写字母异或结果是相应的大写字母，空格和所有大写字母异或是相应的小写字母。\n\n  ![img](BUUCTF-crypto-writeup-md.assets/t01dd9c90c1ecde8471.jpg)\n\n  ![img](BUUCTF-crypto-writeup-md.assets/t0189dac1c8ab2412c8.jpg)\n\n \t1. 使用取模运算把密文分成n个分组（其中n是密钥长度），如此以来，我们就有了n个独立的凯撒加密式的密文组（因为每个分组里面的值是使用同一个密钥字节明文异或）。这样就把问题简化成了破解n个独立的凯撒加密模式的单字节抑或密码方式。这一步可以直接使用爆破，但是效率不高。我们采取另一种姿势。 \n \t2. 将2中的每个分组做如下的操作：每个分组做嵌套循环，内循环，外循环。设置外循环计数值possible*_space=0，max_*possible=0，设置内循环计数值maxpossible=0,依次取出每个分组中的每一个字节做与其他字节两两抑或进行内循环，如果结果是字母，我们就把内循环计数值maxpossible+1,在每个内循环结束后进行max*_possible的更新（与内循环maxpossible做对比），并记录当前字节的位置到possible_*space，然后外循环继续。直至遍历完所有的字节。取出max*_possible对应的字节位置possible_*space处的字节码，我们把它对应的明文假设成空格（根据之前的讨论）然后将该位置的字节和0x20（空格）异或;找出相应位置的密钥字节。 \n\n3. 重复2中的步骤，依次根据每个分组找出每位的密钥字节，至此密钥破解完毕 \n\n4. 将找出的密钥用于破解密文。当密文足够多，可以发现破解的准确率很高，基本可以做到无差别破解。\n\n\n\n**词频分析**\n\nhttps://codeleading.com/article/68135872581/\n\n\n\n### ？[SUCTF2019]MT【移位】\n\nhttps://blog.csdn.net/m0_49109277/article/details/117324488\n\n\n\n### [AFCTF2018]tinylfsr\n\n根据给出的文件，发现两次文件加密\n\n- plain->cipher\n- flag->flag_encode\n\n查看encrypt.py，加密方式为\n\n- 前一部分：key与plain的前一部分xor\n- 后一部分：lfsr生成的密钥流与plain的后一部分xor\n\n进一步分析，可以发现key与mask位数是相同的，看了一下mask的位数是二进制64位，那么key的位数就是16进制16位，也就是8位ASCII字符.\n\n(不知道key长度的话，也可以遍历一下，再用该key对plain加密看是否与cipher相同)\n\n```python\ncip = open('cipher.txt', 'rb').read()\nmsg = open('Plain.txt', 'rb').read()\n\nprint(codecs.encode(strxor(cip, msg)[:8], 'hex'))\n```\n\n接下来可以生成lfsr的密钥流，再依次解密（R要初始化为key）\n\n```python\nkey = '0123456789abcdef'\nR = int(key, 16)\nmask = 0b1101100000000000000000000000000000000000000000000000000000000000\n\n\ndef lfsr(R, mask):\n    # 左移1位：保留末尾 63 位，在最后添加一个0\n    output = (R << 1) & 0xffffffffffffffff\n\n    # i：保留 R 的前 0、1、3、4位\n    i = (R & mask) & 0xffffffffffffffff\n\n    lastbit = 0\n    while i != 0:\n        lastbit ^= (i & 1)\n        i = i >> 1\n    # lastbit：统计 i 里面有多少个1, 奇数个则为1, 偶数个则为0\n\n    # output: R 左移1位，再添加 lastbit\n    output ^= lastbit\n    return (output, lastbit)\n\n\ncip = open('flag_encode.txt', 'rb').read()\na = ''.join([chr(int(b, 16)) for b in [key[i:i + 2] for i in range(0, len(key), 2)]])\n\nans = \"\"\n\nfor i in range(len(a)):\n    ans += (chr((cip[i] ^ ord(a[i]))))\n\nlent = len(cip)\n\nfor i in range(len(a), lent):\n    tmp = 0\n    for j in range(8):\n        (R, out) = lfsr(R, mask)\n        tmp = (tmp << 1) ^ out\n    ans += (chr(tmp ^ cip[i]))\n\nprint(ans)\n\n```\n\n\n\n## 秘密共享的门限方案\n\n秘密共享的思想是将秘密以适当的方式拆分，拆分后的每一个份额由不同的参与者管理，单个参与者无法恢复秘密信息，只有若干个参与者一同协作才能恢复秘密消息。更重要的是，当其中任何相应范围内参与者出问题时，秘密仍可以完整恢复。\n\n秘密共享是一种将秘密分割存储的密码技术，目的是阻止秘密过于集中，以达到分散风险和容忍入侵的目的，是信息安全和数据保密中的重要手段\n\n### ？[AFCTF2018]花开藏宝地【bloom方案】\n\nhttps://webencrypt.org/secretsharing/#bloom\n\nhttp://www.matrix67.com/blog/archives/1261\n\n```python\na1 =100459779913520540098065407420629954816677926423356769524759072632219106155849450125185205557491138357760494272691949199099803239098119602186117878931534968435982565071570831032814288620974807498206233914826253433847572703407678712965098320122549759579566316372220959610814573945698083909575005303253205653244238542300266460559790606278310650849881421791081944960157781855164700773081375247\nd1 =347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820820091\na2 =305345133911395218573790903508296238659147802274031796643017539011648802808763162902335644195648525375518941848430114497150082025133000033835083076541927530829557051524161069423494451667848236452337271862085346869364976989047180532167560796470067549915390773271207901537847213882479997325575278672917648417868759077150999044891099206133296336190476413164240995177077671480352739572539631359\nd2 =347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820813413\na3 = 152012681270682340051690627924586232702552460810030322267827401771304907469802591861912921281833890613186317787813611372838066924894691892444503039545946728621696590087591246339208248647926966446848123290344911662916758039134817404720512465817867255277476717353439505243247568126193361558042940352204093381260402400739429050280526212446967632582771424597203000629197487733610187359662268583\nd3 =347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820818553\n\ndd = d1*d2*d3\nt1 = pow(dd//d1,d1-2,d1)\nassert(t1*d2*d3%d1 == 1)\nt2 = pow(dd//d2,d2-2,d2)\nassert(t2*d1*d3%d2 == 1)\nt3 = pow(dd//d3,d3-2,d3)\nassert(t3*d2*d1%d3 == 1)\ns = a1*t1*d2*d3+a2*t2*d1*d3+a3*t3*d1*d2\np = 80804238007977405688648566160504278593148666302626415149704905628622876270862865768337953835725801963142685182510812938072115996355782396318303927020705623120652014080032809421180400984242061592520733710243483947230962631945045134540159517488288781666622635328316972979183761952842010806304748313326215619695085380586052550443025074501971925005072999275628549710915357400946408857\ns %= dd\n# print(hex(s))\ns %= p\ns = hex(s)[2:]\nflag = list(bytearray.fromhex(s))\nfor i in flag:\n    print(chr(i),end=\"\")\n```\n\n\n\n## RSA\n\n#### [HDCTF2019]together  【多文件共模攻击】\n\n先分别分析两个公钥文件\n\n```python\nwith open(\"pubkey2.pem\",'rb') as f:\n    pub = RSA.importKey(f.read())\n    n = pub.n\n    e = pub.e\n    print(n,'\\n',e)\n```\n\n发现n相同，e不同。可以利用共模攻击。读取myflag文件后需要base64解码\n\n```python\ne1 = 2333\ne2 = 23333\nn = 14853081277902411240991719582265437298941606850989432655928075747449227799832389574251190347654658701773951599098366248661597113015221566041305501996451638624389417055956926238595947885740084994809382932733556986107653499144588614105694518150594105711438983069306254763078820574239989253573144558449346681620784979079971559976102366527270867527423001083169127402157598183442923364480383742653117285643026319914244072975557200353546060352744263637867557162046429886176035616570590229646013789737629785488326501654202429466891022723268768841320111152381619260637023031430545168618446134188815113100443559425057634959299\nwith open('myflag1','rb') as f:\n    c1 = base64.b64decode(f.read())\n    print(c1)\nwith open('myflag2','rb') as f:\n    c2 = base64.b64decode(f.read())\n    print(c2)\ngcd,s,t = gmpy2.gcdext(e1,e2)\nc1 = libnum.s2n(c1)\nc2 = libnum.s2n(c2)\nif s < 0:\n    s = -s\n    c1 = gmpy2.invert(c1,n)\nif t < 0:\n    t = -t\n    c2 = gmpy2.invert(c2,n)\n\nM = gmpy2.powmod(c1,s,n)*gmpy2.powmod(c2,t,n) % n\nm = hex(M)\nprint(m)\nprint(codecs.decode(m[2:],'hex'))\nm = m[2:]\nmissing_padding = 4 - len(m) % 4\nif missing_padding:\n    m += '=' * missing_padding\nprint(base64.b64decode(m))\n```\n\n\n\n#### [MRCTF2020]babyRSA 【数学计算】\n\n看脚本\n\n![image-20211115232410660](BUUCTF-crypto-writeup-md.assets/image-20211115232410660.png)\n\n过程都是和rsa一样，因此得到p，q即可正常解密\n\n![image-20211115232440411](BUUCTF-crypto-writeup-md.assets/image-20211115232440411.png)\n\n生成p的方式中间有的和rsa类似，因此类比，phi为(P[i]-1)乘积\n\n```python\nP = [0 for i in range(17)]\nP[9] = 206027926847308612719677572554991143421\nn = 206027926847308612719677572554991143421\nphi = 206027926847308612719677572554991143420\nc = 213671742765908980787116579976289600595864704574134469173111790965233629909513884704158446946409910475727584342641848597858942209151114627306286393390259700239698869487469080881267182803062488043469138252786381822646126962323295676431679988602406971858136496624861228526070581338082202663895710929460596143281673761666804565161435963957655012011051936180536581488499059517946308650135300428672486819645279969693519039407892941672784362868653243632727928279698588177694171797254644864554162848696210763681197279758130811723700154618280764123396312330032986093579531909363210692564988076206283296967165522152288770019720928264542910922693728918198338839\nfor i in range(10,17):\n    P[i] = sympy.nextprime(P[i-1])\n    print(i, P[i])\n    n*= P[i]\n    phi *= P[i]-1\nfor i in range(8,0,-1):\n    P[i] = sympy.prevprime(P[i+1])\n    print(i,P[i])\n    n *= P[i]\n    phi *= P[i]-1\nprint(n)\ne = 65537\nd = gmpy2.invert(e,phi)\np = pow(c,d,n)\nprint(p)\nprint(sympy.nextprime(p))\n```\n\nq直接根据计算即可\n\n```\nq = pow(sub_q,q2,q1)\n```\n\n#### [De1CTF2019]babyrsa 【综合】\n\n依次分析所需要的参数\n\n![image-20211126163520911](BUUCTF-crypto-writeup-md.assets/image-20211126163520911.png)\n\n根据中国剩余定理求得p^4，开四次方求得p为\n\n```python\nfrom sympy.ntheory.modular import crt\nm = [\n    20129615352491765499340112943188317180548761597861300847305827141510465619670536844634558246439230371658836928103063432870245707180355907194284861510906071265352409579441048101084995923962148527097370705452070577098780246282820065573711015664291991372085157016901209114191068574208680397710042842835940428451949500607613634682684113208766694028789275748528254287705759528498986306494267817198340658241873024800336013946294891687591013414935237821291805123285905335762719823771647853378892868896078424572232934360940672962436849523915563328779942134504499568866135266628078485232098208237036724121481835035731201383423,\n    31221650155627849964466413749414700613823841060149524451234901677160009099014018926581094879840097248543411980533066831976617023676225625067854003317018794041723612556008471579060428898117790587991055681380408263382761841625714415879087478072771968160384909919958010983669368360788505288855946124159513118847747998656422521414980295212646675850690937883764000571667574381419144372824211798018586804674824564606122592483286575800685232128273820087791811663878057827386379787882962763290066072231248814920468264741654086011072638211075445447843691049847262485759393290853117072868406861840793895816215956869523289231421,\n    29944537515397953361520922774124192605524711306753835303703478890414163510777460559798334313021216389356251874917792007638299225821018849648520673813786772452822809546571129816310207232883239771324122884804993418958309460009406342872173189008449237959577469114158991202433476710581356243815713762802478454390273808377430685157110095496727966308001254107517967559384019734279861840997239176254236069001453544559786063915970071130087811123912044312219535513880663913831358790376650439083660611831156205113873793106880255882114422025746986403355066996567909581710647746463994280444700922867397754748628425967488232530303,\n    25703437855600135215185778453583925446912731661604054184163883272265503323016295700357253105301146726667897497435532579974951478354570415554221401778536104737296154316056314039449116386494323668483749833147800557403368489542273169489080222009368903993658498263905567516798684211462607069796613434661148186901892016282065916190920443378756167250809872483501712225782004396969996983057423942607174314132598421269169722518224478248836881076484639837343079324636997145199835034833367743079935361276149990997875905313642775214486046381368619638551892292787783137622261433528915269333426768947358552919740901860982679180791]\nr = [\n    19131432661217908470262338421299691998526157790583544156741981238822158563988520225986915234570037383888112724408392918113942721994125505014727545946133307329781747600302829588248042922635714391033431930411180545085316438084317927348705241927570432757892985091396044950085462429575440060652967253845041398399648442340042970814415571904057667028157512971079384601724816308078631844480110201787343583073815186771790477712040051157180318804422120472007636722063989315320863580631330647116993819777750684150950416298085261478841177681677867236865666207391847046483954029213495373613490690687473081930148461830425717614569,\n    15341898433226638235160072029875733826956799982958107910250055958334922460202554924743144122170018355117452459472017133614642242411479849369061482860570279863692425621526056862808425135267608544855833358314071200687340442512856575278712986641573012456729402660597339609443771145347181268285050728925993518704899005416187250003304581230701444705157412790787027926810710998646191467130550713600765898234392350153965811595060656753711278308005193370936296124790772689433773414703645703910742193898471800081321469055211709339846392500706523670145259024267858368216902176489814789679472227343363035428541915118378163012031,\n    18715065071648040017967211297231106538139985087685358555650567057715550586464814763683688299037897182845007578571401359061213777645114414642903077003568155508465819628553747173244235936586812445440095450755154357646737087071605811984163416590278352605433362327949048243722556262979909488202442530307505819371594747936223835233586945423522256938701002370646382097846105014981763307729234675737702252155130837154876831885888669150418885088089324534892506199724486783446267336789872782137895552509353583305880144947714110009893134162185382309992604435664777436197587312317224862723813510974493087450281755452428746194446,\n    2282284561224858293138480447463319262474918847630148770112472703128549032592187797289965592615199709857879008271766433462032328498580340968871260189669707518557157836592424973257334362931639831072584824103123486522582531666152363874396482744561758133655406410364442174983227005501860927820871260711861008830120617056883514525798709601744088135999465598338635794275123149165498933580159945032363880613524921913023341209439657145962332213468573402863796920571812418200814817086234262280338221161622789516829363805084715652121739036183264026120868756523770196284142271849879003202190966150390061195469351716819539183797]\n\na = crt(m,r)\nprint(a[0])\nprint(gmpy2.mpz(pow(a[0],1/4)))\n```\n\n109935857933867829728985398563235455481120300859311421762540858762721955038310117609456763338082237907005937380873151279351831600225270995344096532750271070807051984097524900957809427861441436796934012393707770012556604479065826879107677002380580866325868240270494148512743861326447181476633546419262340100453\n\n![image-20211126162739647](BUUCTF-crypto-writeup-md.assets/image-20211126162739647.png)\n\n可以根据小公钥指数加密（m^e<n 相对而言）\n\n解出e2=381791429275130\n\ne1 = 15218928658178\n\n![image-20211126162708811](BUUCTF-crypto-writeup-md.assets/image-20211126162708811.png)\n\n分解n\n\nq1p即q1为127587319253436643569312142058559706815497211661083866592534217079310497260365307426095661281103710042392775453866174657404985539066741684196020137840472950102380232067786400322600902938984916355631714439668326671310160916766472897536055371474076089779472372913037040153356437528808922911484049460342088834871\n\n得到hint为\n\n**orz...you.found.me.but.sorry.no.hint...keep.on.and.enjoy.it!**\n\n最后，根据给出的条件看，一般情况用一个式子即可求解，但是报错无法求逆元d。发现gcd(e1,(p-1)(q1-1))=14。因此需要进行变形\n$$\nc1=m^{e1}\\ mod\\ (p*q1)=(m^{14})^{e1\\div14}\\mod\\ (p*q1)\n$$\n可以在此条件下求出m14 的通解(显然最小特解很大可能不是答案,因为这个解还需要满足第二个方程)\n\n第二个方程同理，用中国剩余定理求得m^14\n\n将同余方程组进行细化\n\nm^14 ☰a1 mod p\nm^14 ☰ a1 mod q1\nm^14 ☰ a2 mod p\nm^14 ☰ a2 mod q2\n\n由于m的指数过大,我们尝试通过构造一个新的rsa式子来降解m的指数.理论上4个方程有6种合并方式.但是通过计算**gcd(p-1,7)!=1**所以如果选择p的话显然是行不通的.于是舍弃p,选择q1,q2进行合并.得到一个全新的方程以后再通过一般求解rsa的方法就可以了\n\nm^14 = (m^2)^7 mod (q1*q2)\n\n看作新的rsa，e为7，c为之前求得m^14，最后求得m^2，再分解即可\n\n#### [NPUCTF2020]认清形势，建立信心【选择明文攻击】\n\n![image-20211128152817403](BUUCTF-crypto-writeup-md.assets/image-20211128152817403.png)\n\n\n\n#### [NPUCTF2020]共模攻击 【coppersmith]\n\nCoppersmith定理的内容为：在一个e阶的mod n多项式f(x)中，如果有一个根小于n^1/e，就可以运用一个O(log n)的算法求出这些根\n\ntask中我们可以获取的信息有：\n\n\n$$\nc1 = m^p\\ mod\\ n = m^p\\ mod \\ p*q\n$$\n\n$$\nc2 = m^q\\ mod\\ n = m^q\\ mod\\ p*q\n$$\n\n因为p、q为素数，所以由费马定理可得：\n\n\n$$\nm^p ≡ m\\ mod\\ p\n$$\n\n$$\nm^q ≡ m\\ mod\\ q\n$$\n\n所以，又有：\n\n　　c1 = m + ip + xpq，可整理成 c1 = m + ip \n\n　　c2 = m + jq + ypq，可整理成 c2 = m + jq\n\n因此：\n\n　　c1 * c2 = m2 + (ip + jq)m + ijn\n\n　　(c1 + c2)m = 2m2 + (ip+jq)m \n\n　　有： m2 - (c1 + c2)m + c1 * c2 = ijn ≡ 0 mod n\n\n最终的任务就是求m的值。\n\n```python\nn=128205304743751985889679351195836799434324346996129753896234917982647254577214018524580290192396070591032007818847697193260130051396080104704981594190602854241936777324431673564677900773992273463534717009587530152480725448774018550562603894883079711995434332008363470321069097619786793617099517770260029108149\nc1=96860654235275202217368130195089839608037558388884522737500611121271571335123981588807994043800468529002147570655597610639680977780779494880330669466389788497046710319213376228391138021976388925171307760030058456934898771589435836261317283743951614505136840364638706914424433566782044926111639955612412134198\nc2=9566853166416448316408476072940703716510748416699965603380497338943730666656667456274146023583837768495637484138572090891246105018219222267465595710692705776272469703739932909158740030049375350999465338363044226512016686534246611049299981674236577960786526527933966681954486377462298197949323271904405241585\n\nPR.<m> = PolynomialRing(Zmod(n))\n#Zmod(n):指定模，定义界限为n的环；Z表示整数；指定模是划定这个环的界限，就是有效的数字只有从0到n，其他的都通过与n取模来保证在0～n这个范围内；Zmod代表这是一个整数域中的n模环\n#ZZ：整数环；QQ：有理数环；RR：实数环；CC：复数环\n#PR：只是一个指针，指向用polynomialring指定的那个环（可以使用任意字符）\n#PolynomialRing：这个就是说建立多项式环\n#.<m>：指定一个变量的意思（可以用任意字符）\nf = m^2-(c1+c2)*m+c1*c2\nx0 = f.small_roots(X=2^400)\n#x的绝对边界，因为m<400bits，所以设为2^400\nprint(x0)\n```\n\nhttps://xz.aliyun.com/t/6813\n\ncoppersmith攻击总结https://www.ruanx.net/coppersmith/\n\n#### [QCTF2018]Xman-RSA\n\n查看encryption.encrypted，看代码应该是作了一个简单的替换加密，使用quipquip进行频率分析，还原出代码（其中大写的T没有作替换）\n\n```python\nfrom gmpy2 import is_prime \nfrom os import urandom \nimport base64 \ndef bytes_to_num(b): \n\treturn int(b.encode('hex'), 16) \n\ndef num_to_bytes(n): \n\tb = hex(n)[2:-1] \n\tb = '0' + b if len(b)%2 == 1 else b \n\treturn b.decode('hex') \n\ndef get_a_prime(l): \n\trandom_seed = urandom(l) \n\tnum = bytes_to_num(random_seed) \n\twhile True: \n\t\tif is_prime(num): \n\t\t\tbreak \n\t\tnum+=1 \n\treturn num \n\ndef encrypt(s, e, n): \n\tp = bytes_to_num(s) \n\tp = pow(p, e, n) \n\treturn num_to_bytes(p).encode('hex') \n\ndef separate(n): \n\tp = n % 4 \n\tt = (p*p) % 4 \n\treturn t == 1 \n\nf = open('flag.txt', 'r') \nflag = f.read() \n\nmsg1 = \"\" \nmsg2 = \"\" \nfor i in range(len(flag)): \n\tif separate(i): \n\t\tmsg2 += flag[i] \n\telse: \n\t\tmsg1 += flag[i]\n\np1 = get_a_prime(128) \np2 = get_a_prime(128) \np3 = get_a_prime(128) \nn1 = p1*p2 \nn2 = p1*p3 \ne = 0x1001 \nc1 = encrypt(msg1, e, n1) \nc2 = encrypt(msg2, e, n2) \nprint(c1) \nprint(c2) \ne1 = 0x1001 \ne2 = 0x101 \np4 = get_a_prime(128) \np5 = get_a_prime(128) \nn3 = p4*p5 \nc1 = num_to_bytes(pow(n1, e1, n3)).encode('hex') \nc2 = num_to_bytes(pow(n1, e2, n3)).encode('hex') \nprint(c1) \nprint(c2) \nprint(base64.b64encode(num_to_bytes(n2))) \nprint(base64.b64encode(num_to_bytes(n3)))\n```\n\n进一步分析文件，n1中的应该是59、60行中的c1、c2，ciphertext是上面真正和flag有关的的c1、c2，最后是n2和n3\n\n先求得n2和n3的值\n\n```python\nn2 = \"PVNHb2BfGAnmxLrbKhgsYXRwWIL9eOj6K0s3I0slKHCTXTAUtZh3T0r+RoSlhpO3+77AY8P7WETYz2Jzuv5FV/mMODoFrM5fMyQsNt90VynR6J3Jv+fnPJPsm2hJ1Fqt7EKaVRwCbt6a4BdcRoHJsYN/+eh7k/X+FL5XM7viyvQxyFawQrhSV79FIoX6xfjtGW+uAeVF7DScRcl49dlwODhFD7SeLqzoYDJPIQS+VSb3YtvrDgdV+EhuS1bfWvkkXRijlJEpLrgWYmMdfsYX8u/+Ylf5xcBGn3hv1YhQrBCg77AHuUF2w/gJ/ADHFiMcH3ux3nqOsuwnbGSr7jA6Cw==\"\nn3 = \"TmNVbWUhCXR1od3gBpM+HGMKK/4ErfIKITxomQ/QmNCZlzmmsNyPXQBiMEeUB8udO7lWjQTYGjD6k21xjThHTNDG4z6C2cNNPz73VIaNTGz0hrh6CmqDowFbyrk+rv53QSkVKPa8EZnFKwGz9B3zXimm1D+01cov7V/ZDfrHrEjsDkgK4ZlrQxPpZAPl+yqGlRK8soBKhY/PF3/GjbquRYeYKbagpUmWOhLnF4/+DP33ve/EpaSAPirZXzf8hyatL4/5tAZ0uNq9W6T4GoMG+N7aS2GeyUA2sLJMHymW4cFK5l5kUvjslRdXOHTmz5eHxqIV6TmSBQRgovUijlNamQ==\"\nn2 = bytes_to_long(base64.b64decode(n2))\nn3 = bytes_to_long(base64.b64decode(n3))\nprint(n2)\nprint(n3)\n```\n\n然后共模攻击，求得n1的值\n\n```python\nc1 = \"2639c28e3609a4a8c953cca9c326e8e062756305ae8aee6efcd346458aade3ee8c2106ab9dfe5f470804f366af738aa493fd2dc26cb249a922e121287f3eddec0ed8dea89747dc57aed7cd2089d75c23a69bf601f490a64f73f6a583081ae3a7ed52238c13a95d3322065adba9053ee5b12f1de1873dbad9fbf4a50a2f58088df0fddfe2ed8ca1118c81268c8c0fd5572494276f4e48b5eb424f116e6f5e9d66da1b6b3a8f102539b690c1636e82906a46f3c5434d5b04ed7938861f8d453908970eccef07bf13f723d6fdd26a61be8b9462d0ddfbedc91886df194ea022e56c1780aa6c76b9f1c7d5ea743dc75cec3c805324e90ea577fa396a1effdafa3090\"\nc2 = \"42ff1157363d9cd10da64eb4382b6457ebb740dbef40ade9b24a174d0145adaa0115d86aa2fc2a41257f2b62486eaebb655925dac78dd8d13ab405aef5b8b8f9830094c712193500db49fb801e1368c73f88f6d8533c99c8e7259f8b9d1c926c47215ed327114f235ba8c873af7a0052aa2d32c52880db55c5615e5a1793b690c37efdd5e503f717bb8de716303e4d6c4116f62d81be852c5d36ef282a958d8c82cf3b458dcc8191dcc7b490f227d1562b1d57fbcf7bf4b78a5d90cd385fd79c8ca4688e7d62b3204aeaf9692ba4d4e44875eaa63642775846434f9ce51d138ca702d907849823b1e86896e4ea6223f93fae68b026cfe5fa5a665569a9e3948a\"\nc1 = codecs.decode(c1,'hex')\nc1 = bytes_to_long(c1)\nc2 = bytes_to_long(codecs.decode(c2,'hex'))\ne1 = 0x1001\ne2 = 0x101\nn = n3\ngcd,s,t = gmpy2.gcdext(e1,e2)\nif s < 0:\n    s = -s\n    c1 = gmpy2.invert(c1,n)\nif t < 0:\n    t = -t\n    c2 = gmpy2.invert(c2,n)\n\nM = gmpy2.powmod(c1,s,n)*gmpy2.powmod(c2,t,n) % n\nprint(M)\nn1 = M\n```\n\n最后求解得到msg1，msg2。再分析separate函数，发现只是交错分割flag\n\n所以还原即可。\n\n注意字节码需要decode()转换为字符串。\n\n给到的函数num_to_bytes不知道为什么可能有一点小问题，最后需要改用long_to_bytes\n\n```python\np = gmpy2.gcd(n1,n2)\n\n\ndef decrypt(c,e,n):\n    c = bytes_to_num(codecs.decode(c,'hex'))\n    q = divmod(n,p)[0]\n    phi_n = (p-1)*(q-1)\n    d = gmpy2.invert(e,phi_n)\n    m = pow(c,d,n)\n\n    return long_to_bytes(m)\n\n\nc1 = \"1240198b148089290e375b999569f0d53c32d356b2e95f5acee070f016b3bef243d0b5e46d9ad7aa7dfe2f21bda920d0ac7ce7b1e48f22b2de410c6f391ce7c4347c65ffc9704ecb3068005e9f35cbbb7b27e0f7a18f4f42ae572d77aaa3ee189418d6a07bab7d93beaa365c98349d8599eb68d21313795f380f05f5b3dfdc6272635ede1f83d308c0fdb2baf444b9ee138132d0d532c3c7e60efb25b9bf9cb62dba9833aa3706344229bd6045f0877661a073b6deef2763452d0ad7ab3404ba494b93fd6dfdf4c28e4fe83a72884a99ddf15ca030ace978f2da87b79b4f504f1d15b5b96c654f6cd5179b72ed5f84d3a16a8f0d5bf6774e7fd98d27bf3c9839\"\nc2 = \"129d5d4ab3f9e8017d4e6761702467bbeb1b884b6c4f8ff397d078a8c41186a3d52977fa2307d5b6a0ad01fedfc3ba7b70f776ba3790a43444fb954e5afd64b1a3abeb6507cf70a5eb44678a886adf81cb4848a35afb4db7cd7818f566c7e6e2911f5ababdbdd2d4ff9825827e58d48d5466e021a64599b3e867840c07e29582961f81643df07f678a61a9f9027ebd34094e272dfbdc4619fa0ac60f0189af785df77e7ec784e086cf692a7bf7113a7fb8446a65efa8b431c6f72c14bcfa49c9b491fb1d87f2570059e0f13166a85bb555b40549f45f04bc5dbd09d8b858a5382be6497d88197ffb86381085756365bd757ec3cdfa8a77ba1728ec2de596c5ab\"\ne = 0x1001\nmsg1 = decrypt(c1,e,n1).decode()\nmsg2 = decrypt(c2,e,n2).decode()\n\nprint()\n\nflag = \"\"\nlen = len(msg2) + len(msg1)\ntmp1 = 0\ntmp2 = 0\nfor i in range(len//2):\n    flag += str(msg1[tmp1])\n    flag += str(msg2[tmp2])\n    tmp1+=1\n    tmp2+=1\n\nprint(flag)\n```\n\n#### [羊城杯 2020]RRRRRRRSA 【wiener attack】\n\nwiener attack：依靠连分数进行攻击，适用于非常接近某一值（如1）时，求一个比例关系，通过该比例关系再反推关键信息。\n\n适用于解密指数d很小，满足以下条件\n$$\nd < 1/3\\ * N^{1/4}\n\\\\\nq < p < 2q\n$$\n一般用法：根据\n$$\ned\\ mod\\ phi(n) = 1\n$$\n得到\n\n$$\ne*d = 1 + k*phi(n) \\\\\n即\\ e/phi(n) = k/d + 1/d*phi(n)\n\\\\ 而\\ phi(n)接近于n \n\\\\ e/n - k/d = 1/d*phi(n)\n\\\\ e/n 与 k/d非常接近\n\\\\ \n$$\n而e/N又是已知的,因此对e/N进行连分数展开，得到的一串分数的分母很有可能就是d，只要检验一下 ed mod phi(n) 看它是不是1就知道对不对了。\n\n\n\n本题特殊之处：e与N并没有近到相除约为1的地步，相差还是很大的，也就是说解密指数d也许还是很大的，这样就解不出来。但是N1和N2的关系却适合。\n$$\nN1/N2=(p1/p2)^2\\ * (q1/q2)\n$$\n显然我们可以知道的是N1/N2 <Q1/Q2，所以在Q1/Q2在区间(N1/N2,1)之间，尝试对N1/N2进行连分数展开并求其各项渐进分数，其中某个连分数的分母可能就是Q1（这个可以依靠N%Q来验证）\n\n```python\n        N1 =\n        N2 =\n        #求连分数的项\n        def continuedfra(x,y):\n            cf = []\n            while y:\n                cf += [x//y]\n                x,y = y,x%y\n            return cf\n        #得到分子和分母\n        def simplify(c):\n            numrator = 0 #分子\n            denominator = 1 #分母\n            for x in c[::-1]: #倒序遍历？\n                numrator,denominator = denominator,x * denominator + numrator\n            return (numrator,denominator) #连分数生成分子和算出来的分母？\n\n        def getit(c):\n            cf = []\n            for i in range(len(c)):\n                cf.append(simplify(c[:i]))\n            return cf\n\n        def wiener(e,n):\n            cf = []\n            for (Q2,Q1) in getit(cf):\n                if Q1 == 0:\n                    continue\n                if N1%Q1 == 0 and Q1 != 1:\n                    return Q1\n            print(\"not found\")\n            return 0\n        Q1 = wiener(N1,N2)\n```\n\n \t\n\n\n\n#### ！[watevrCTF 2019]Swedish RSA【多项式】\n\nhttps://blog.csdn.net/MikeCoke/article/details/113800879\n\n多项式的欧拉函数：对于多项式P(y)来讲，欧拉函数phi(P(y))表示所有不高于P(y)幂级的环内所有多项式中，与P(y)无（除1以外）公因式的其他多项式的个数。\n\n#### [美团CTF]hambersa 【PP】\n\nx, y = len(str§), len(str(q))\nP = 10^x * p + p\nQ = 10^y * q + q\n同理\nPP = 10^x’ * P + Q\nQQ = 10^y’ * Q + P\n\nN = 10^(x+x'+y+y')pq+...+pq\n\n\n\nsage代码\n\n```python\nfrom Crypto.Util.number import *\nfrom tqdm import tqdm\n\ndef decrypt_RSA(c, e, p, q):\n    phi = (p-1) * (q-1)\n    d = inverse(e, phi)\n    m = pow(c, d, p*q)\n    print(long_to_bytes(m))\n\nn = 177269125756508652546242326065138402971542751112423326033880862868822164234452280738170245589798474033047460920552550018968571267978283756742722231922451193\nc = 47718022601324543399078395957095083753201631332808949406927091589044837556469300807728484035581447960954603540348152501053100067139486887367207461593404096\n\n\nlow = str(n)[-18:]\nhigh = str(n)[:18]\npq_prob = []\n\nfor i in range(10):\n    for j in range(10):\n        for k in range(10):\n            pq_prob.append(int(high + str(i) + str(j)+ str(k) + low))\n\nfor x in tqdm(pq_prob):\n    f = factor(x)\n    if (len(f) == 2 and f[0][0].nbits() == 64):\n        p, q = f[0][0], f[1][0]\n        break\n\nP = int(str(p) + str(p))\nprint(P)\nQ = int(str(q) + str(q))\nPP = int(str(P) + str(Q))\nQQ = int(str(Q) + str(P))\nN = PP * QQ\nprint(N == n)\ndecrypt_RSA(c, 65537, PP, QQ)```\n```\n\n#### [NCTF2019]easyrsa【e，phi不互素】\n\nhttp://yulige.top/?p=752#easyRSA909pt_2solvers\n\n然而本题则为`e`和`p-1`(或`q-1`)的最大公约数就是`e`本身，也就是说`e | p-1`，只有对`c`开`e`次方根才行，但是e很大，暴力计算所需时间很长。\n可以将同余方程\n$$\nm^e \\equiv c \\quad (\\text{mod}\\ n)\n$$\n\n$$\n化成\\\\ \n\\begin{aligned}\nm^e &\\equiv c \\quad (\\text{mod}\\ p)\\newline\nm^e &\\equiv c \\quad (\\text{mod}\\ q)\n\\end{aligned}\n$$\n\n然后分别在`GF(p)`和`GF(q)`上对`c`开`e=0x1337`次方根，再用`CRT`组合一下即可得到在`mod n`下的解\n\n\n\n\n\n**有限域内开根： **\n\ne与p-1和q-1都不互素，不能简单求个逆元\n\n开平方根可以用 `Tonelli-Shanks`算法，可以扩展到开n次方根\n\n这篇[paper](https://arxiv.org/pdf/1111.4877.pdf) 里给出了具体的算法：`Adleman-Manders-Miller rth Root Extraction Method`\n\n![Adleman-Manders-Miller cubic root extraction method](BUUCTF-crypto-writeup-md.assets/QNy9EWc7K4enJGu.jpg)\n\n[数学证明以后再看吧2333](https://jayxv.github.io/2019/12/04/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%B5%85%E6%9E%90On%20r-th%20Root%20Extraction%20Algorithm%20in%20Fq/)\n\n```python\ndef AMM(o, r, q):\n    start = time.time()\n    print('\\n----------------------------------------------------------------------------------')\n    print('Start to run Adleman-Manders-Miller Root Extraction Method')\n    print('Try to find one {:#x}th root of {} modulo {}'.format(r, o, q))\n    g = GF(q)\n    o = g(o)\n    p = g(random.randint(1, q))\n    while p ^ ((q-1) // r) == 1:\n        p = g(random.randint(1, q))\n    print('[+] Find p:{}'.format(p))\n    t = 0\n    s = q - 1\n    while s % r == 0:\n        t += 1\n        s = s // r\n    print('[+] Find s:{}, t:{}'.format(s, t))\n    k = 1\n    while (k * s + 1) % r != 0:\n        k += 1\n    alp = (k * s + 1) // r\n    print('[+] Find alp:{}'.format(alp))\n    a = p ^ (r**(t-1) * s)\n    b = o ^ (r*alp - 1)\n    c = p ^ s\n    h = 1\n    for i in range(1, t):\n        d = b ^ (r^(t-1-i))\n        if d == 1:\n            j = 0\n        else:\n            print('[+] Calculating DLP...')\n            j = - discrete_log(d, a)\n            print('[+] Finish DLP...')\n        b = b * (c^r)^j\n        h = h * c^j\n        c = c^r\n    result = o^alp * h\n    end = time.time()\n    print(\"Finished in {} seconds.\".format(end - start))\n    print('Find one solution: {}'.format(result))\n    return result\n```\n\n\n\n但该算法只能求得一个根，实际上开0x1337次方，最多会有0x1337个根。\n\n那么如何找到其他根呢？\n\n先找到所有0x1336个proot使得\n$$\nproot^e = 1 (mod\\ p)\n$$\n然后乘以上面求得的根即可。\n\n由于\n$$\n(proot^{p-1/e})^e = proot^{p-1} = 1 (mod\\ p)\n$$\n所以只需要\n\n```python\ndef findAllPRoot(p, e):\n    print(\"Start to find all the Primitive {:#x}th root of 1 modulo {}.\".format(e, p))\n    start = time.time()\n    proot = set()\n    while len(proot) < e:\n        g = pow(random.randint(2, p-1), (p-1)//e, p)\n        if pow(g,e//2,p) != 1:\n            proot.add(g)\n    end = time.time()\n    print(\"Finished in {} seconds.\".format(end - start))\n    return proot\n```\n\n完整sage代码如下\n\n\n\n#### [百度2021]time【p，q相近+随机数遍历】\n\n首先看到q是p的下一个素数，可以发现p，q非常相近，所以\n\n![image-20211228131817914](BUUCTF-crypto-writeup-md.assets/image-20211228131817914.png)\n$$\n|p-q|很小\\\\\n（p+q)/2 与 \\sqrt[2]{n}很接近\\\\\n从\\sqrt[2]{n}开始直到找到一个x，使得x^2-n=y^2即可\\\\\np = x-y \\\\\nq = x + y\n$$\n\n```python\npp = gmpy2.iroot(n,2)[0]\nfor x in range(pp+1,pp+3):\n    yy = pow(x,2)-n\n    if gmpy2.iroot(yy,2)[1]:\n        y = gmpy2.iroot(yy,2)[0]\n        p = (x-y)\n        q = x + y\n        print(\"p:\",p)\n        print(\"q:\",q)\nphi = (p-1)*(q-1)\nd = gmpy2.invert(e,phi)\nm = pow(c,d,n)\nprint(m)\nprint(long_to_bytes(m))\n\n```\n\n得到hint\n\n`localtime为time.struct_time(tm_year=2021, tm_mon=4, tm_mday=28, tm_hour=20, tm_min=42, tm_sec=6, tm_wday=2, tm_yday=118, tm_isdst=0)`\n\n`time()-a1 = 3.1603143215179443`\n\nrandome.seed设置的种子相同的话，最后得到的随机数也相同，所以只需要进行遍历即可\n\n```python\nlt = time.mktime((2021,4,28,20,42,6,2,118,0))\nprint(lt)\na1 = 3.1603143215179443\ns = 0\nfor i in range(3):\n    for j in range(100000):\n        random.seed(s)\n        x = random.getrandbits(2048)\n        s = int(lt) - i + j * 10 ** -5\n        if n % x == 0:\n            p = x\n            print(p)\n            q = n//p\n            phi = (p-1)*(q-1)\n            d = gmpy2.invert(e,phi)\n            m = pow(c,d,n)\n            print(long_to_bytes(m))\n            break\n        \n```\n\n\n\n#### [百度ichunqiu]whitegiveCMA【数论+共模】\n\n\n\n\n\n#### [GKCTF2021]RRRsa【数学式子化简】\n\n1）拿到两个式子后，先把**括号去掉**，然后把**常数项去掉**；\n2）之后得到的式子应该是**俩个只含p或q的式子**，让两个式子的p（或q）的**指数**和**系数**相同；\n3）将两个式子相加或相减**消掉p**,剩下的式子应该只剩下q,与n进行gcd（）求出q\n\n```python\nimport gmpy2\nimport Rsa\nt= 202020*212121\nh3=25590923416756813543880554963887576960707333607377889401033718419301278802157204881039116350321872162118977797069089653428121479486603744700519830597186045931412652681572060953439655868476311798368015878628002547540835719870081007505735499581449077950263721606955524302365518362434928190394924399683131242077\nh4=104100726926923869566862741238876132366916970864374562947844669556403268955625670105641264367038885706425427864941392601593437305258297198111819227915453081797889565662276003122901139755153002219126366611021736066016741562232998047253335141676203376521742965365133597943669838076210444485458296240951668402513\nn2 = 114535923043375970380117920548097404729043079895540320742847840364455024050473125998926311644172960176471193602850427607899191810616953021324742137492746159921284982146320175356395325890407704697018412456350862990849606200323084717352630282539156670636025924425865741196506478163922312894384285889848355244489\nh = pow(2021,t,n2)*pow(h3,212121,n2)-pow(2020,t,n2)*pow(h4,202020,n2)\nq2 = gmpy2.gcd(n2,h)\nprint(q2)\np2 = n2//q2\nprint(p2)\nc2 = 67054203666901691181215262587447180910225473339143260100831118313521471029889304176235434129632237116993910316978096018724911531011857469325115308802162172965564951703583450817489247675458024801774590728726471567407812572210421642171456850352167810755440990035255967091145950569246426544351461548548423025004\nd = Rsa.get_d(65537,p2,q2,n2)\nq = Rsa.decrypt(c2,d,n2)\n\nn1=75003557379080252219517825998990183226659117019770735080523409561757225883651040882547519748107588719498261922816865626714101556207649929655822889945870341168644508079317582220034374613066751916750036253423990673764234066999306874078424803774652754587494762629397701664706287999727238636073466137405374927829\nc1=68111901092027813007099627893896838517426971082877204047110404787823279211508183783468891474661365139933325981191524511345219830693064573462115529345012970089065201176142417462299650761299758078141504126185921304526414911455395289228444974516503526507906721378965227166653195076209418852399008741560796631569\nhint1=23552090716381769484990784116875558895715552896983313406764042416318710076256166472426553520240265023978449945974218435787929202289208329156594838420190890104226497263852461928474756025539394996288951828172126419569993301524866753797584032740426259804002564701319538183190684075289055345581960776903740881951\nhint2=52723229698530767897979433914470831153268827008372307239630387100752226850798023362444499211944996778363894528759290565718266340188582253307004810850030833752132728256929572703630431232622151200855160886614350000115704689605102500273815157636476901150408355565958834764444192860513855376978491299658773170270\nq1 = gmpy2.gcd(n1,pow(hint2-212121,202020,n1)*pow(2020,202020,n1)-hint1*pow(2021,202020,n1))\nprint(q1)\np1 = n1//q1\nd = Rsa.get_d(65537,p1,q1,n1)\np = Rsa.decrypt(c1,d,n1)\n\nc = 13492392717469817866883431475453770951837476241371989714683737558395769731416522300851917887957945766132864151382877462142018129852703437240533684604508379950293643294877725773675505912622208813435625177696614781601216465807569201380151669942605208425645258372134465547452376467465833013387018542999562042758\nd = Rsa.get_d(65537,p,q,p*q)\nm = Rsa.decrypt(c,d,p*q)\n```\n\n\n\n## ELgamal\n\n\n\n\n\n## Hash\n\n\n\n## 脑洞\n\n","slug":"BUUCTF-crypto-writeup-md","published":1,"updated":"2022-01-24T19:37:42.000Z","layout":"post","photos":[],"link":"","_id":"cletwjoht0006ri3s1aclcfs3","content":"<h1>[BUUCTF-crypto]writeup</h1>\n<h2 id=\"数学\">数学</h2>\n<h3 id=\"WUSTCTF2020-大数计算\">[WUSTCTF2020]大数计算</h3>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/image-20211107125148733.png\" alt=\"image-20211107125148733\"></p>\n<p>Note：理解问题，题目说要十六进制，前8位不知道是取十进制的前八位然后转换还是取十六进制的前八位，所以（错误就得多试试</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = math.factorial(<span class=\"number\">2020</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(<span class=\"built_in\">int</span>(<span class=\"built_in\">str</span>(a)[:<span class=\"number\">8</span>])))</span><br><span class=\"line\"></span><br><span class=\"line\">x = <span class=\"built_in\">pow</span>(<span class=\"number\">520</span>,<span class=\"number\">1314</span>) + <span class=\"built_in\">pow</span>(<span class=\"number\">2333</span>,<span class=\"number\">666</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(<span class=\"built_in\">int</span>(<span class=\"built_in\">str</span>(x)[:<span class=\"number\">8</span>])))</span><br></pre></td></tr></table></figure>\n<p>宇宙终极问题：x³＋y³＋z³＝42</p>\n<p>(-80538738812075974)³ + 80435758145817515³ + 12602123297335631³ = 42</p>\n<p>part-4，简单的积分，计算面积即可，再加36得520</p>\n<h2 id=\"编码\">编码</h2>\n<h3 id=\"鸡藤椒盐味-【汉明码】\">鸡藤椒盐味  【汉明码】</h3>\n<p>设将要进行检测的二进制代码为n位，为使其具有纠错能力，需要再加上k位的检测位，组成n+k位的代码。那么，新增加的检测位数k应满足：</p>\n<p>2k≥n+k+1或2k-1≥n+k</p>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/image-20211121185128493.png\" alt=\"image-20211121185128493\"></p>\n<h2 id=\"古典\">古典</h2>\n<h3 id=\"INSHack2018-Crypt0r-part-1【tcp流-简单替换】\">[INSHack2018]Crypt0r part 1【tcp流+简单替换】</h3>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/image-20220118215319029.png\" alt=\"image-20220118215319029\"></p>\n<p>给出pcap文件</p>\n<p>使用wireshark打开，并分析tcp数据流</p>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/image-20220118215352072.png\" alt=\"image-20220118215352072\"></p>\n<p>quipquip直接频率分析得到的结果不太对，再仔细观察可能用到的为第二行中的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">replacement</span>(<span class=\"params\">s,cipher</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># s为m中对应的字母</span></span><br><span class=\"line\">    m = <span class=\"string\">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&#x27;</span></span><br><span class=\"line\">    x = string.ascii_letters.maketrans(s, m)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(cipher.translate(x))</span><br><span class=\"line\">    </span><br><span class=\"line\">s = <span class=\"string\">&#x27;PMSFADNIJKBXQCGYWETOVHRULZ&#x27;</span></span><br><span class=\"line\">s += s.lower()</span><br><span class=\"line\">replacement()</span><br></pre></td></tr></table></figure>\n<h3 id=\"UTCTF2020-basic-crypto\">[UTCTF2020]basic-crypto</h3>\n<p>打开文件是二进制形式，先转十六进制，再转ASCII试试</p>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/image-20211107144120942.png\" alt=\"image-20211107144120942\"></p>\n<p>提示很明显base64</p>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/image-20211107144143545.png\" alt=\"image-20211107144143545\"></p>\n<p>提示移位以及Roman，试试凯撒</p>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/image-20211107144221290.png\" alt=\"image-20211107144221290\"></p>\n<p>提示进行词频分析</p>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/image-20211107144251417.png\" alt=\"image-20211107144251417\"></p>\n<h3 id=\"达芬奇密码-【换位】\">达芬奇密码 【换位】</h3>\n<p>根据电影简介，看到斐波那契数列</p>\n<p>观察给出的一列数字，为32位，flag也是32位，</p>\n<p>写一个函数，输出32个斐波那契数列的数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fib</span>(<span class=\"params\">n</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">0</span> <span class=\"keyword\">or</span> n == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fib(n-<span class=\"number\">1</span>) + fib(n-<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">50</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(fib(i),end=<span class=\"string\">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/image-20211121110325817.png\" alt=\"image-20211121110325817\"></p>\n<p>原文flag通过移位得到密文c</p>\n<p>第0位均为1，位置不变</p>\n<p>原fib数列的233（12位）变换到第1位</p>\n<p>因此只需要找到f在原数列哪个位置，再把c对应的数字放回原位即可，注意有两个1，而第0位不变，因此可以把第0位修改为0或其他没有冲突的数字</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fib = <span class=\"string\">&quot;0 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"string\">&quot;0 233 3 2584 1346269 144 5 196418 21 1597 610 377 10946 89 514229 987 8 55 6765 2178309 121393 317811 46368 4181 1 832040 2 28657 75025 34 13 17711&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">c = <span class=\"string\">&quot;36968853882116725547342176952286&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">m = [<span class=\"string\">&#x27;3&#x27;</span>]*<span class=\"number\">32</span></span><br><span class=\"line\"></span><br><span class=\"line\">fib = fib.split(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">f = f.split(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(f)):</span><br><span class=\"line\">    m[fib.index(f[i])] = c[i]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> m:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i,end=<span class=\"string\">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"UTCTF2020-hill\">?[UTCTF2020]hill</h3>\n<p>未知密钥，猜测</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s=<span class=\"string\">&#x27;wznqcaduqopfkqnwofDbzgeu&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#未给密钥的自己猜测</span></span><br><span class=\"line\">flag_pre=<span class=\"string\">&#x27;utflag&#x27;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getit</span>(<span class=\"params\">a1,b1,c1,a2,b2,c2,a3,b3,c3</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">26</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">26</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a1 * i + b1 * j) % <span class=\"number\">26</span> == c1 <span class=\"keyword\">and</span> (a2 * i + b2 * j) % <span class=\"number\">26</span> == c2 <span class=\"keyword\">and</span> (a3 * i+b3*j) % <span class=\"number\">26</span> == c3:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (i,j)</span><br><span class=\"line\">x1=getit(<span class=\"number\">22</span>,<span class=\"number\">25</span>,<span class=\"number\">20</span>,<span class=\"number\">13</span>,<span class=\"number\">16</span>,<span class=\"number\">5</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">x2=getit(<span class=\"number\">22</span>,<span class=\"number\">25</span>,<span class=\"number\">19</span>,<span class=\"number\">13</span>,<span class=\"number\">16</span>,<span class=\"number\">11</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"keyword\">import</span> string</span><br><span class=\"line\">flag=<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(s),<span class=\"number\">2</span>):</span><br><span class=\"line\">    flag+=string.ascii_letters[(x1[<span class=\"number\">0</span>]*string.ascii_letters.index(s[i])+x1[<span class=\"number\">1</span>]*string.ascii_letters.index(s[i+<span class=\"number\">1</span>]))%<span class=\"number\">26</span>]</span><br><span class=\"line\">    flag+=string.ascii_letters[(x2[<span class=\"number\">0</span>]*string.ascii_letters.index(s[i])+x2[<span class=\"number\">1</span>]*string.ascii_letters.index(s[i+<span class=\"number\">1</span>]))%<span class=\"number\">26</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag)</span><br></pre></td></tr></table></figure>\n<h3 id=\"XNUCA2018-baby-crypto【重合指数、词频分析】\">[XNUCA2018]baby_crypto【重合指数、词频分析】</h3>\n<p>题目:26个字母用0-25分别表示，有两串密钥，长度未知，然后一个用作乘数，一个用作加数对明文进行加密</p>\n<p><a href=\"https://blog.csdn.net/weixin_44110537/article/details/107947158\">https://blog.csdn.net/weixin_44110537/article/details/107947158</a></p>\n<h2 id=\"块密码\">块密码</h2>\n<h3 id=\"ACTF新生赛2020-crypto-aes\">[ACTF新生赛2020]crypto-aes</h3>\n<p>因为</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key=os.urandom(<span class=\"number\">2</span>)*<span class=\"number\">16</span></span><br><span class=\"line\">iv=os.urandom(<span class=\"number\">16</span>)</span><br></pre></td></tr></table></figure>\n<p>key是<strong>32bytes</strong>,<strong>256bits</strong> ；iv是<strong>16bytes ,128bits</strong></p>\n<p>由于os.urandom（size）</p>\n<p>参数： size:字符串随机字节的大小 返回值：该方法返回一个字符串，该字符串表示适合加密使用的随机字节。</p>\n<p>所以可以根据key的高128位得到key值，低128位和结果异或便得到iv</p>\n<p>最后进行解密即可</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Cipher <span class=\"keyword\">import</span> AES</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> gmpy2 <span class=\"keyword\">import</span>*</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">xor = <span class=\"number\">91144196586662942563895769614300232343026691029427747065707381728622849079757</span></span><br><span class=\"line\">enc_flag = <span class=\"string\">b&#x27;\\x8c-\\xcd\\xde\\xa7\\xe9\\x7f.b\\x8aKs\\xf1\\xba\\xc75\\xc4d\\x13\\x07\\xac\\xa4&amp;\\xd6\\x91\\xfe\\xf3\\x14\\x10|\\xf8p&#x27;</span></span><br><span class=\"line\">out = long_to_bytes(xor)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(out)</span><br><span class=\"line\">key = out[:<span class=\"number\">16</span>]*<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(key)</span><br><span class=\"line\">iv = bytes_to_long(key[<span class=\"number\">16</span>:])^bytes_to_long(out[<span class=\"number\">16</span>:])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(iv)</span><br><span class=\"line\">iv = long_to_bytes(iv)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(iv)</span><br><span class=\"line\">aes = AES.new(key,AES.MODE_CBC,iv)</span><br><span class=\"line\">flag = aes.decrypt(enc_flag)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag)</span><br></pre></td></tr></table></figure>\n<h3 id=\"AFCTF2018-MyOwnCBC【AES-CBC】\">[AFCTF2018]MyOwnCBC【AES-CBC】</h3>\n<p>加密过程是用上一级的密文，作为下一次加密的密钥key,所以初始密钥key可以知道就是题目给的密文前32个</p>\n<h3 id=\"美团CTF\">[美团CTF]</h3>\n<h3 id=\"ACTF新生赛2020-crypto-des\">[ACTF新生赛2020]crypto-des</h3>\n<p>c语言中数据在内存中的存储（大小端）</p>\n<p>有轮密钥，直接解密即可</p>\n<h2 id=\"流密码\">流密码</h2>\n<h3 id=\"AFCTF2018-你听过一次一密么？\">?[AFCTF2018]你听过一次一密么？</h3>\n<p>一次一密（One-Time-Pad）：xor key  明文多长，密文就多长（适合少量明文消息）</p>\n<p>Many-Time-Pad攻击：多个明文异或同样的key</p>\n<p><a href=\"https://www.ruanx.net/many-time-pad/\">https://www.ruanx.net/many-time-pad/</a></p>\n<p>攻击思想：对于每一条密文Ci，拿去异或其他所有密文。然后去数每一列有多少个英文字符，作为“Mi在这一位是空格”的评分。依据评分从大到小排序，依次利用 “某个明文的某一位是空格” 这种信息恢复出所有明文的那一列。如果产生冲突，则舍弃掉评分小的</p>\n<p><strong>修复语句太绝了</strong></p>\n<h3 id=\"？-De1CTF2019-xorz-【频率分析-break-repeating-key】\">？[De1CTF2019]xorz 【频率分析/break repeating-key】</h3>\n<p><strong>法一：流密码</strong></p>\n<p>参考</p>\n<p><a href=\"https://www.anquanke.com/post/id/161171#h3-\">https://www.anquanke.com/post/id/161171#h3-</a></p>\n<p><a href=\"http://socold.cn/index.php/archives/65/\">http://socold.cn/index.php/archives/65/</a></p>\n<h4 id=\"一-猜测密钥长度\">一.猜测密钥长度</h4>\n<p>1.暴力破解：</p>\n<p><a href=\"https://www.ruanx.net/many-time-pad/\">https://www.ruanx.net/many-time-pad/</a></p>\n<p>给的是 m[i]⊕k[i]⊕s[i], 其中 s 已知，故实际上我们拿到了 m[i]⊕k[i]. 在这里 k 是有周期的，且周期不超过38。如果知道了 k 的周期，那么用 Many-Time-Pad 就可以成功攻击。由于 <code>len(key)</code> 并不大，从大到小枚举 <code>len(key)</code>，肉眼判断是否为flag即可。最后发现 <code>len(key)=30</code> 是满足要求的。</p>\n<p>但是这种方法过于耗时费力</p>\n<p>2.汉明距离：一组二进制数据变成另一组数据所需的步骤数。对两组二进制数据进行异或运算，并统计结果为1的个数，那么这个数就是汉明距离。</p>\n<ul>\n<li>\n<p>根据扩展资料：</p>\n<ul>\n<li>\n<p>两个以ascii编码的英文字符的汉明距离是2-3之间，也就是说正常英文字母的平均汉明距离为2-3（每比特），任意字符（非纯字母）的两两汉明距离平均为4。</p>\n</li>\n<li>\n<p>正确分组的密文与密文的汉明距离等于明文与明文的汉明距离（可以通过按正确密钥长度分组的密文与密文异或等于明文与明文异或证明）</p>\n<p>因此，当我们使用了正确的密钥长度后，两两字母进行计算汉明距离，那么这个值应该是趋于最小。为了增加效率，我们不需要对每一对分组都计算汉明距离，只需取出前几对就可说明问题。当然为了排除偶然误差，结果不应该只取最小的那一个密钥长度，而是酌情多取几组</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"二-根据猜出的密文长度进行解密\">二.根据猜出的密文长度进行解密</h4>\n<p>两种方法：</p>\n<ul>\n<li>\n<p>合理利用明文的空格</p>\n<p>在使用异或加密的形式下，使用相同密钥加密的明文和秘文间存在这个规律，密文和密文异或等于明文和明文异或,并且二者的汉明距离一样。</p>\n<p>空格和所有小写字母异或结果是相应的大写字母，空格和所有大写字母异或是相应的小写字母。</p>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/t01dd9c90c1ecde8471.jpg\" alt=\"img\"></p>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/t0189dac1c8ab2412c8.jpg\" alt=\"img\"></p>\n<ol>\n<li>使用取模运算把密文分成n个分组（其中n是密钥长度），如此以来，我们就有了n个独立的凯撒加密式的密文组（因为每个分组里面的值是使用同一个密钥字节明文异或）。这样就把问题简化成了破解n个独立的凯撒加密模式的单字节抑或密码方式。这一步可以直接使用爆破，但是效率不高。我们采取另一种姿势。</li>\n<li>将2中的每个分组做如下的操作：每个分组做嵌套循环，内循环，外循环。设置外循环计数值possible*<em>space=0，max</em><em>possible=0，设置内循环计数值maxpossible=0,依次取出每个分组中的每一个字节做与其他字节两两抑或进行内循环，如果结果是字母，我们就把内循环计数值maxpossible+1,在每个内循环结束后进行max</em><em>possible的更新（与内循环maxpossible做对比），并记录当前字节的位置到possible</em><em>space，然后外循环继续。直至遍历完所有的字节。取出max</em><em>possible对应的字节位置possible</em>*space处的字节码，我们把它对应的明文假设成空格（根据之前的讨论）然后将该位置的字节和0x20（空格）异或;找出相应位置的密钥字节。</li>\n</ol>\n</li>\n</ul>\n<ol start=\"3\">\n<li>\n<p>重复2中的步骤，依次根据每个分组找出每位的密钥字节，至此密钥破解完毕</p>\n</li>\n<li>\n<p>将找出的密钥用于破解密文。当密文足够多，可以发现破解的准确率很高，基本可以做到无差别破解。</p>\n</li>\n</ol>\n<p><strong>词频分析</strong></p>\n<p><a href=\"https://codeleading.com/article/68135872581/\">https://codeleading.com/article/68135872581/</a></p>\n<h3 id=\"？-SUCTF2019-MT【移位】\">？[SUCTF2019]MT【移位】</h3>\n<p><a href=\"https://blog.csdn.net/m0_49109277/article/details/117324488\">https://blog.csdn.net/m0_49109277/article/details/117324488</a></p>\n<h3 id=\"AFCTF2018-tinylfsr\">[AFCTF2018]tinylfsr</h3>\n<p>根据给出的文件，发现两次文件加密</p>\n<ul>\n<li>plain-&gt;cipher</li>\n<li>flag-&gt;flag_encode</li>\n</ul>\n<p><a href=\"http://xn--encrypt-c46ow40i.py\">查看encrypt.py</a>，加密方式为</p>\n<ul>\n<li>前一部分：key与plain的前一部分xor</li>\n<li>后一部分：lfsr生成的密钥流与plain的后一部分xor</li>\n</ul>\n<p>进一步分析，可以发现key与mask位数是相同的，看了一下mask的位数是二进制64位，那么key的位数就是16进制16位，也就是8位ASCII字符.</p>\n<p>(不知道key长度的话，也可以遍历一下，再用该key对plain加密看是否与cipher相同)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cip = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;cipher.txt&#x27;</span>, <span class=\"string\">&#x27;rb&#x27;</span>).read()</span><br><span class=\"line\">msg = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;Plain.txt&#x27;</span>, <span class=\"string\">&#x27;rb&#x27;</span>).read()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(codecs.encode(strxor(cip, msg)[:<span class=\"number\">8</span>], <span class=\"string\">&#x27;hex&#x27;</span>))</span><br></pre></td></tr></table></figure>\n<p>接下来可以生成lfsr的密钥流，再依次解密（R要初始化为key）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key = <span class=\"string\">&#x27;0123456789abcdef&#x27;</span></span><br><span class=\"line\">R = <span class=\"built_in\">int</span>(key, <span class=\"number\">16</span>)</span><br><span class=\"line\">mask = <span class=\"number\">0b1101100000000000000000000000000000000000000000000000000000000000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">lfsr</span>(<span class=\"params\">R, mask</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># 左移1位：保留末尾 63 位，在最后添加一个0</span></span><br><span class=\"line\">    output = (R &lt;&lt; <span class=\"number\">1</span>) &amp; <span class=\"number\">0xffffffffffffffff</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># i：保留 R 的前 0、1、3、4位</span></span><br><span class=\"line\">    i = (R &amp; mask) &amp; <span class=\"number\">0xffffffffffffffff</span></span><br><span class=\"line\"></span><br><span class=\"line\">    lastbit = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> i != <span class=\"number\">0</span>:</span><br><span class=\"line\">        lastbit ^= (i &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">        i = i &gt;&gt; <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\"># lastbit：统计 i 里面有多少个1, 奇数个则为1, 偶数个则为0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># output: R 左移1位，再添加 lastbit</span></span><br><span class=\"line\">    output ^= lastbit</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (output, lastbit)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">cip = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;flag_encode.txt&#x27;</span>, <span class=\"string\">&#x27;rb&#x27;</span>).read()</span><br><span class=\"line\">a = <span class=\"string\">&#x27;&#x27;</span>.join([<span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(b, <span class=\"number\">16</span>)) <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> [key[i:i + <span class=\"number\">2</span>] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(key), <span class=\"number\">2</span>)]])</span><br><span class=\"line\"></span><br><span class=\"line\">ans = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(a)):</span><br><span class=\"line\">    ans += (<span class=\"built_in\">chr</span>((cip[i] ^ <span class=\"built_in\">ord</span>(a[i]))))</span><br><span class=\"line\"></span><br><span class=\"line\">lent = <span class=\"built_in\">len</span>(cip)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(a), lent):</span><br><span class=\"line\">    tmp = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">8</span>):</span><br><span class=\"line\">        (R, out) = lfsr(R, mask)</span><br><span class=\"line\">        tmp = (tmp &lt;&lt; <span class=\"number\">1</span>) ^ out</span><br><span class=\"line\">    ans += (<span class=\"built_in\">chr</span>(tmp ^ cip[i]))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(ans)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"秘密共享的门限方案\">秘密共享的门限方案</h2>\n<p>秘密共享的思想是将秘密以适当的方式拆分，拆分后的每一个份额由不同的参与者管理，单个参与者无法恢复秘密信息，只有若干个参与者一同协作才能恢复秘密消息。更重要的是，当其中任何相应范围内参与者出问题时，秘密仍可以完整恢复。</p>\n<p>秘密共享是一种将秘密分割存储的密码技术，目的是阻止秘密过于集中，以达到分散风险和容忍入侵的目的，是信息安全和数据保密中的重要手段</p>\n<h3 id=\"？-AFCTF2018-花开藏宝地【bloom方案】\">？[AFCTF2018]花开藏宝地【bloom方案】</h3>\n<p><a href=\"https://webencrypt.org/secretsharing/#bloom\">https://webencrypt.org/secretsharing/#bloom</a></p>\n<p><a href=\"http://www.matrix67.com/blog/archives/1261\">http://www.matrix67.com/blog/archives/1261</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a1 =<span class=\"number\">100459779913520540098065407420629954816677926423356769524759072632219106155849450125185205557491138357760494272691949199099803239098119602186117878931534968435982565071570831032814288620974807498206233914826253433847572703407678712965098320122549759579566316372220959610814573945698083909575005303253205653244238542300266460559790606278310650849881421791081944960157781855164700773081375247</span></span><br><span class=\"line\">d1 =<span class=\"number\">347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820820091</span></span><br><span class=\"line\">a2 =<span class=\"number\">305345133911395218573790903508296238659147802274031796643017539011648802808763162902335644195648525375518941848430114497150082025133000033835083076541927530829557051524161069423494451667848236452337271862085346869364976989047180532167560796470067549915390773271207901537847213882479997325575278672917648417868759077150999044891099206133296336190476413164240995177077671480352739572539631359</span></span><br><span class=\"line\">d2 =<span class=\"number\">347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820813413</span></span><br><span class=\"line\">a3 = <span class=\"number\">152012681270682340051690627924586232702552460810030322267827401771304907469802591861912921281833890613186317787813611372838066924894691892444503039545946728621696590087591246339208248647926966446848123290344911662916758039134817404720512465817867255277476717353439505243247568126193361558042940352204093381260402400739429050280526212446967632582771424597203000629197487733610187359662268583</span></span><br><span class=\"line\">d3 =<span class=\"number\">347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820818553</span></span><br><span class=\"line\"></span><br><span class=\"line\">dd = d1*d2*d3</span><br><span class=\"line\">t1 = <span class=\"built_in\">pow</span>(dd//d1,d1-<span class=\"number\">2</span>,d1)</span><br><span class=\"line\"><span class=\"keyword\">assert</span>(t1*d2*d3%d1 == <span class=\"number\">1</span>)</span><br><span class=\"line\">t2 = <span class=\"built_in\">pow</span>(dd//d2,d2-<span class=\"number\">2</span>,d2)</span><br><span class=\"line\"><span class=\"keyword\">assert</span>(t2*d1*d3%d2 == <span class=\"number\">1</span>)</span><br><span class=\"line\">t3 = <span class=\"built_in\">pow</span>(dd//d3,d3-<span class=\"number\">2</span>,d3)</span><br><span class=\"line\"><span class=\"keyword\">assert</span>(t3*d2*d1%d3 == <span class=\"number\">1</span>)</span><br><span class=\"line\">s = a1*t1*d2*d3+a2*t2*d1*d3+a3*t3*d1*d2</span><br><span class=\"line\">p = <span class=\"number\">80804238007977405688648566160504278593148666302626415149704905628622876270862865768337953835725801963142685182510812938072115996355782396318303927020705623120652014080032809421180400984242061592520733710243483947230962631945045134540159517488288781666622635328316972979183761952842010806304748313326215619695085380586052550443025074501971925005072999275628549710915357400946408857</span></span><br><span class=\"line\">s %= dd</span><br><span class=\"line\"><span class=\"comment\"># print(hex(s))</span></span><br><span class=\"line\">s %= p</span><br><span class=\"line\">s = <span class=\"built_in\">hex</span>(s)[<span class=\"number\">2</span>:]</span><br><span class=\"line\">flag = <span class=\"built_in\">list</span>(<span class=\"built_in\">bytearray</span>.fromhex(s))</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> flag:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">chr</span>(i),end=<span class=\"string\">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"RSA\">RSA</h2>\n<h4 id=\"HDCTF2019-together-【多文件共模攻击】\">[HDCTF2019]together  【多文件共模攻击】</h4>\n<p>先分别分析两个公钥文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;pubkey2.pem&quot;</span>,<span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    pub = RSA.importKey(f.read())</span><br><span class=\"line\">    n = pub.n</span><br><span class=\"line\">    e = pub.e</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(n,<span class=\"string\">&#x27;\\n&#x27;</span>,e)</span><br></pre></td></tr></table></figure>\n<p>发现n相同，e不同。可以利用共模攻击。读取myflag文件后需要base64解码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e1 = <span class=\"number\">2333</span></span><br><span class=\"line\">e2 = <span class=\"number\">23333</span></span><br><span class=\"line\">n = <span class=\"number\">14853081277902411240991719582265437298941606850989432655928075747449227799832389574251190347654658701773951599098366248661597113015221566041305501996451638624389417055956926238595947885740084994809382932733556986107653499144588614105694518150594105711438983069306254763078820574239989253573144558449346681620784979079971559976102366527270867527423001083169127402157598183442923364480383742653117285643026319914244072975557200353546060352744263637867557162046429886176035616570590229646013789737629785488326501654202429466891022723268768841320111152381619260637023031430545168618446134188815113100443559425057634959299</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;myflag1&#x27;</span>,<span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    c1 = base64.b64decode(f.read())</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(c1)</span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;myflag2&#x27;</span>,<span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    c2 = base64.b64decode(f.read())</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(c2)</span><br><span class=\"line\">gcd,s,t = gmpy2.gcdext(e1,e2)</span><br><span class=\"line\">c1 = libnum.s2n(c1)</span><br><span class=\"line\">c2 = libnum.s2n(c2)</span><br><span class=\"line\"><span class=\"keyword\">if</span> s &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">    s = -s</span><br><span class=\"line\">    c1 = gmpy2.invert(c1,n)</span><br><span class=\"line\"><span class=\"keyword\">if</span> t &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">    t = -t</span><br><span class=\"line\">    c2 = gmpy2.invert(c2,n)</span><br><span class=\"line\"></span><br><span class=\"line\">M = gmpy2.powmod(c1,s,n)*gmpy2.powmod(c2,t,n) % n</span><br><span class=\"line\">m = <span class=\"built_in\">hex</span>(M)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(m)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(codecs.decode(m[<span class=\"number\">2</span>:],<span class=\"string\">&#x27;hex&#x27;</span>))</span><br><span class=\"line\">m = m[<span class=\"number\">2</span>:]</span><br><span class=\"line\">missing_padding = <span class=\"number\">4</span> - <span class=\"built_in\">len</span>(m) % <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> missing_padding:</span><br><span class=\"line\">    m += <span class=\"string\">&#x27;=&#x27;</span> * missing_padding</span><br><span class=\"line\"><span class=\"built_in\">print</span>(base64.b64decode(m))</span><br></pre></td></tr></table></figure>\n<h4 id=\"MRCTF2020-babyRSA-【数学计算】\">[MRCTF2020]babyRSA 【数学计算】</h4>\n<p>看脚本</p>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/image-20211115232410660.png\" alt=\"image-20211115232410660\"></p>\n<p>过程都是和rsa一样，因此得到p，q即可正常解密</p>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/image-20211115232440411.png\" alt=\"image-20211115232440411\"></p>\n<p>生成p的方式中间有的和rsa类似，因此类比，phi为(P[i]-1)乘积</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">P = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">17</span>)]</span><br><span class=\"line\">P[<span class=\"number\">9</span>] = <span class=\"number\">206027926847308612719677572554991143421</span></span><br><span class=\"line\">n = <span class=\"number\">206027926847308612719677572554991143421</span></span><br><span class=\"line\">phi = <span class=\"number\">206027926847308612719677572554991143420</span></span><br><span class=\"line\">c = <span class=\"number\">213671742765908980787116579976289600595864704574134469173111790965233629909513884704158446946409910475727584342641848597858942209151114627306286393390259700239698869487469080881267182803062488043469138252786381822646126962323295676431679988602406971858136496624861228526070581338082202663895710929460596143281673761666804565161435963957655012011051936180536581488499059517946308650135300428672486819645279969693519039407892941672784362868653243632727928279698588177694171797254644864554162848696210763681197279758130811723700154618280764123396312330032986093579531909363210692564988076206283296967165522152288770019720928264542910922693728918198338839</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>,<span class=\"number\">17</span>):</span><br><span class=\"line\">    P[i] = sympy.nextprime(P[i-<span class=\"number\">1</span>])</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i, P[i])</span><br><span class=\"line\">    n*= P[i]</span><br><span class=\"line\">    phi *= P[i]-<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">8</span>,<span class=\"number\">0</span>,-<span class=\"number\">1</span>):</span><br><span class=\"line\">    P[i] = sympy.prevprime(P[i+<span class=\"number\">1</span>])</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i,P[i])</span><br><span class=\"line\">    n *= P[i]</span><br><span class=\"line\">    phi *= P[i]-<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(n)</span><br><span class=\"line\">e = <span class=\"number\">65537</span></span><br><span class=\"line\">d = gmpy2.invert(e,phi)</span><br><span class=\"line\">p = <span class=\"built_in\">pow</span>(c,d,n)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(p)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sympy.nextprime(p))</span><br></pre></td></tr></table></figure>\n<p>q直接根据计算即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q = pow(sub_q,q2,q1)</span><br></pre></td></tr></table></figure>\n<h4 id=\"De1CTF2019-babyrsa-【综合】\">[De1CTF2019]babyrsa 【综合】</h4>\n<p>依次分析所需要的参数</p>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/image-20211126163520911.png\" alt=\"image-20211126163520911\"></p>\n<p>根据中国剩余定理求得p^4，开四次方求得p为</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sympy.ntheory.modular <span class=\"keyword\">import</span> crt</span><br><span class=\"line\">m = [</span><br><span class=\"line\">    <span class=\"number\">20129615352491765499340112943188317180548761597861300847305827141510465619670536844634558246439230371658836928103063432870245707180355907194284861510906071265352409579441048101084995923962148527097370705452070577098780246282820065573711015664291991372085157016901209114191068574208680397710042842835940428451949500607613634682684113208766694028789275748528254287705759528498986306494267817198340658241873024800336013946294891687591013414935237821291805123285905335762719823771647853378892868896078424572232934360940672962436849523915563328779942134504499568866135266628078485232098208237036724121481835035731201383423</span>,</span><br><span class=\"line\">    <span class=\"number\">31221650155627849964466413749414700613823841060149524451234901677160009099014018926581094879840097248543411980533066831976617023676225625067854003317018794041723612556008471579060428898117790587991055681380408263382761841625714415879087478072771968160384909919958010983669368360788505288855946124159513118847747998656422521414980295212646675850690937883764000571667574381419144372824211798018586804674824564606122592483286575800685232128273820087791811663878057827386379787882962763290066072231248814920468264741654086011072638211075445447843691049847262485759393290853117072868406861840793895816215956869523289231421</span>,</span><br><span class=\"line\">    <span class=\"number\">29944537515397953361520922774124192605524711306753835303703478890414163510777460559798334313021216389356251874917792007638299225821018849648520673813786772452822809546571129816310207232883239771324122884804993418958309460009406342872173189008449237959577469114158991202433476710581356243815713762802478454390273808377430685157110095496727966308001254107517967559384019734279861840997239176254236069001453544559786063915970071130087811123912044312219535513880663913831358790376650439083660611831156205113873793106880255882114422025746986403355066996567909581710647746463994280444700922867397754748628425967488232530303</span>,</span><br><span class=\"line\">    <span class=\"number\">25703437855600135215185778453583925446912731661604054184163883272265503323016295700357253105301146726667897497435532579974951478354570415554221401778536104737296154316056314039449116386494323668483749833147800557403368489542273169489080222009368903993658498263905567516798684211462607069796613434661148186901892016282065916190920443378756167250809872483501712225782004396969996983057423942607174314132598421269169722518224478248836881076484639837343079324636997145199835034833367743079935361276149990997875905313642775214486046381368619638551892292787783137622261433528915269333426768947358552919740901860982679180791</span>]</span><br><span class=\"line\">r = [</span><br><span class=\"line\">    <span class=\"number\">19131432661217908470262338421299691998526157790583544156741981238822158563988520225986915234570037383888112724408392918113942721994125505014727545946133307329781747600302829588248042922635714391033431930411180545085316438084317927348705241927570432757892985091396044950085462429575440060652967253845041398399648442340042970814415571904057667028157512971079384601724816308078631844480110201787343583073815186771790477712040051157180318804422120472007636722063989315320863580631330647116993819777750684150950416298085261478841177681677867236865666207391847046483954029213495373613490690687473081930148461830425717614569</span>,</span><br><span class=\"line\">    <span class=\"number\">15341898433226638235160072029875733826956799982958107910250055958334922460202554924743144122170018355117452459472017133614642242411479849369061482860570279863692425621526056862808425135267608544855833358314071200687340442512856575278712986641573012456729402660597339609443771145347181268285050728925993518704899005416187250003304581230701444705157412790787027926810710998646191467130550713600765898234392350153965811595060656753711278308005193370936296124790772689433773414703645703910742193898471800081321469055211709339846392500706523670145259024267858368216902176489814789679472227343363035428541915118378163012031</span>,</span><br><span class=\"line\">    <span class=\"number\">18715065071648040017967211297231106538139985087685358555650567057715550586464814763683688299037897182845007578571401359061213777645114414642903077003568155508465819628553747173244235936586812445440095450755154357646737087071605811984163416590278352605433362327949048243722556262979909488202442530307505819371594747936223835233586945423522256938701002370646382097846105014981763307729234675737702252155130837154876831885888669150418885088089324534892506199724486783446267336789872782137895552509353583305880144947714110009893134162185382309992604435664777436197587312317224862723813510974493087450281755452428746194446</span>,</span><br><span class=\"line\">    <span class=\"number\">2282284561224858293138480447463319262474918847630148770112472703128549032592187797289965592615199709857879008271766433462032328498580340968871260189669707518557157836592424973257334362931639831072584824103123486522582531666152363874396482744561758133655406410364442174983227005501860927820871260711861008830120617056883514525798709601744088135999465598338635794275123149165498933580159945032363880613524921913023341209439657145962332213468573402863796920571812418200814817086234262280338221161622789516829363805084715652121739036183264026120868756523770196284142271849879003202190966150390061195469351716819539183797</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">a = crt(m,r)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(gmpy2.mpz(<span class=\"built_in\">pow</span>(a[<span class=\"number\">0</span>],<span class=\"number\">1</span>/<span class=\"number\">4</span>)))</span><br></pre></td></tr></table></figure>\n<p>109935857933867829728985398563235455481120300859311421762540858762721955038310117609456763338082237907005937380873151279351831600225270995344096532750271070807051984097524900957809427861441436796934012393707770012556604479065826879107677002380580866325868240270494148512743861326447181476633546419262340100453</p>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/image-20211126162739647.png\" alt=\"image-20211126162739647\"></p>\n<p>可以根据小公钥指数加密（m^e&lt;n 相对而言）</p>\n<p>解出e2=381791429275130</p>\n<p>e1 = 15218928658178</p>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/image-20211126162708811.png\" alt=\"image-20211126162708811\"></p>\n<p>分解n</p>\n<p>q1p即q1为127587319253436643569312142058559706815497211661083866592534217079310497260365307426095661281103710042392775453866174657404985539066741684196020137840472950102380232067786400322600902938984916355631714439668326671310160916766472897536055371474076089779472372913037040153356437528808922911484049460342088834871</p>\n<p>得到hint为</p>\n<p><strong>orz…you.found.me.but.sorry.no.hint…keep.on.and.enjoy.it!</strong></p>\n<p>最后，根据给出的条件看，一般情况用一个式子即可求解，但是报错无法求逆元d。发现gcd(e1,(p-1)(q1-1))=14。因此需要进行变形</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>c</mi><mn>1</mn><mo>=</mo><msup><mi>m</mi><mrow><mi>e</mi><mn>1</mn></mrow></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>p</mi><mo>∗</mo><mi>q</mi><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><msup><mi>m</mi><mn>14</mn></msup><msup><mo stretchy=\"false\">)</mo><mrow><mi>e</mi><mn>1</mn><mo>÷</mo><mn>14</mn></mrow></msup><mspace></mspace><mspace width=\"1em\"/><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mtext> </mtext><mtext> </mtext><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>p</mi><mo>∗</mo><mi>q</mi><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">c1=m^{e1}\\ mod\\ (p*q1)=(m^{14})^{e1\\div14}\\mod\\ (p*q1)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">14</span></span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">÷</span><span class=\"mord mtight\">14</span></span></span></span></span></span></span></span></span><span class=\"mspace allowbreak\"></span><span class=\"mspace\" style=\"margin-right:1em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">mod</span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>可以在此条件下求出m14 的通解(显然最小特解很大可能不是答案,因为这个解还需要满足第二个方程)</p>\n<p>第二个方程同理，用中国剩余定理求得m^14</p>\n<p>将同余方程组进行细化</p>\n<p>m^14 ☰a1 mod p<br>\nm^14 ☰ a1 mod q1<br>\nm^14 ☰ a2 mod p<br>\nm^14 ☰ a2 mod q2</p>\n<p>由于m的指数过大,我们尝试通过构造一个新的rsa式子来降解m的指数.理论上4个方程有6种合并方式.但是通过计算<strong>gcd(p-1,7)!=1</strong>所以如果选择p的话显然是行不通的.于是舍弃p,选择q1,q2进行合并.得到一个全新的方程以后再通过一般求解rsa的方法就可以了</p>\n<p>m^14 = (m^2)^7 mod (q1*q2)</p>\n<p>看作新的rsa，e为7，c为之前求得m^14，最后求得m^2，再分解即可</p>\n<h4 id=\"NPUCTF2020-认清形势，建立信心【选择明文攻击】\">[NPUCTF2020]认清形势，建立信心【选择明文攻击】</h4>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/image-20211128152817403.png\" alt=\"image-20211128152817403\"></p>\n<h4 id=\"NPUCTF2020-共模攻击-【coppersmith\">[NPUCTF2020]共模攻击 【coppersmith]</h4>\n<p>Coppersmith定理的内容为：在一个e阶的mod n多项式f(x)中，如果有一个根小于n^1/e，就可以运用一个O(log n)的算法求出这些根</p>\n<p>task中我们可以获取的信息有：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>c</mi><mn>1</mn><mo>=</mo><msup><mi>m</mi><mi>p</mi></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mo>=</mo><msup><mi>m</mi><mi>p</mi></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo>∗</mo><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">c1 = m^p\\ mod\\ n = m^p\\ mod \\ p*q\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7144em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9088em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>c</mi><mn>2</mn><mo>=</mo><msup><mi>m</mi><mi>q</mi></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mo>=</mo><msup><mi>m</mi><mi>q</mi></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo>∗</mo><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">c2 = m^q\\ mod\\ n = m^q\\ mod\\ p*q\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7144em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9088em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span></p>\n<p>因为p、q为素数，所以由费马定理可得：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msup><mi>m</mi><mi>p</mi></msup><mo>≡</mo><mi>m</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">m^p ≡ m\\ mod\\ p\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7144em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">p</span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msup><mi>m</mi><mi>q</mi></msup><mo>≡</mo><mi>m</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">m^q ≡ m\\ mod\\ q\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7144em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span></p>\n<p>所以，又有：</p>\n<p>c1 = m + ip + xpq，可整理成 c1 = m + ip</p>\n<p>c2 = m + jq + ypq，可整理成 c2 = m + jq</p>\n<p>因此：</p>\n<p>c1 * c2 = m2 + (ip + jq)m + ijn</p>\n<p>(c1 + c2)m = 2m2 + (ip+jq)m</p>\n<p>有： m2 - (c1 + c2)m + c1 * c2 = ijn ≡ 0 mod n</p>\n<p>最终的任务就是求m的值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n=<span class=\"number\">128205304743751985889679351195836799434324346996129753896234917982647254577214018524580290192396070591032007818847697193260130051396080104704981594190602854241936777324431673564677900773992273463534717009587530152480725448774018550562603894883079711995434332008363470321069097619786793617099517770260029108149</span></span><br><span class=\"line\">c1=<span class=\"number\">96860654235275202217368130195089839608037558388884522737500611121271571335123981588807994043800468529002147570655597610639680977780779494880330669466389788497046710319213376228391138021976388925171307760030058456934898771589435836261317283743951614505136840364638706914424433566782044926111639955612412134198</span></span><br><span class=\"line\">c2=<span class=\"number\">9566853166416448316408476072940703716510748416699965603380497338943730666656667456274146023583837768495637484138572090891246105018219222267465595710692705776272469703739932909158740030049375350999465338363044226512016686534246611049299981674236577960786526527933966681954486377462298197949323271904405241585</span></span><br><span class=\"line\"></span><br><span class=\"line\">PR.&lt;m&gt; = PolynomialRing(Zmod(n))</span><br><span class=\"line\"><span class=\"comment\">#Zmod(n):指定模，定义界限为n的环；Z表示整数；指定模是划定这个环的界限，就是有效的数字只有从0到n，其他的都通过与n取模来保证在0～n这个范围内；Zmod代表这是一个整数域中的n模环</span></span><br><span class=\"line\"><span class=\"comment\">#ZZ：整数环；QQ：有理数环；RR：实数环；CC：复数环</span></span><br><span class=\"line\"><span class=\"comment\">#PR：只是一个指针，指向用polynomialring指定的那个环（可以使用任意字符）</span></span><br><span class=\"line\"><span class=\"comment\">#PolynomialRing：这个就是说建立多项式环</span></span><br><span class=\"line\"><span class=\"comment\">#.&lt;m&gt;：指定一个变量的意思（可以用任意字符）</span></span><br><span class=\"line\">f = m^<span class=\"number\">2</span>-(c1+c2)*m+c1*c2</span><br><span class=\"line\">x0 = f.small_roots(X=<span class=\"number\">2</span>^<span class=\"number\">400</span>)</span><br><span class=\"line\"><span class=\"comment\">#x的绝对边界，因为m&lt;400bits，所以设为2^400</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(x0)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://xz.aliyun.com/t/6813\">https://xz.aliyun.com/t/6813</a></p>\n<p>coppersmith攻击总结https://www.ruanx.net/coppersmith/</p>\n<h4 id=\"QCTF2018-Xman-RSA\">[QCTF2018]Xman-RSA</h4>\n<p>查看encryption.encrypted，看代码应该是作了一个简单的替换加密，使用quipquip进行频率分析，还原出代码（其中大写的T没有作替换）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> gmpy2 <span class=\"keyword\">import</span> is_prime </span><br><span class=\"line\"><span class=\"keyword\">from</span> os <span class=\"keyword\">import</span> urandom </span><br><span class=\"line\"><span class=\"keyword\">import</span> base64 </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bytes_to_num</span>(<span class=\"params\">b</span>):</span> </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">int</span>(b.encode(<span class=\"string\">&#x27;hex&#x27;</span>), <span class=\"number\">16</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">num_to_bytes</span>(<span class=\"params\">n</span>):</span> </span><br><span class=\"line\">\tb = <span class=\"built_in\">hex</span>(n)[<span class=\"number\">2</span>:-<span class=\"number\">1</span>] </span><br><span class=\"line\">\tb = <span class=\"string\">&#x27;0&#x27;</span> + b <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(b)%<span class=\"number\">2</span> == <span class=\"number\">1</span> <span class=\"keyword\">else</span> b </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> b.decode(<span class=\"string\">&#x27;hex&#x27;</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_a_prime</span>(<span class=\"params\">l</span>):</span> </span><br><span class=\"line\">\trandom_seed = urandom(l) </span><br><span class=\"line\">\tnum = bytes_to_num(random_seed) </span><br><span class=\"line\">\t<span class=\"keyword\">while</span> <span class=\"literal\">True</span>: </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> is_prime(num): </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span> </span><br><span class=\"line\">\t\tnum+=<span class=\"number\">1</span> </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> num </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">encrypt</span>(<span class=\"params\">s, e, n</span>):</span> </span><br><span class=\"line\">\tp = bytes_to_num(s) </span><br><span class=\"line\">\tp = <span class=\"built_in\">pow</span>(p, e, n) </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> num_to_bytes(p).encode(<span class=\"string\">&#x27;hex&#x27;</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">separate</span>(<span class=\"params\">n</span>):</span> </span><br><span class=\"line\">\tp = n % <span class=\"number\">4</span> </span><br><span class=\"line\">\tt = (p*p) % <span class=\"number\">4</span> </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> t == <span class=\"number\">1</span> </span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;flag.txt&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>) </span><br><span class=\"line\">flag = f.read() </span><br><span class=\"line\"></span><br><span class=\"line\">msg1 = <span class=\"string\">&quot;&quot;</span> </span><br><span class=\"line\">msg2 = <span class=\"string\">&quot;&quot;</span> </span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(flag)): </span><br><span class=\"line\">\t<span class=\"keyword\">if</span> separate(i): </span><br><span class=\"line\">\t\tmsg2 += flag[i] </span><br><span class=\"line\">\t<span class=\"keyword\">else</span>: </span><br><span class=\"line\">\t\tmsg1 += flag[i]</span><br><span class=\"line\"></span><br><span class=\"line\">p1 = get_a_prime(<span class=\"number\">128</span>) </span><br><span class=\"line\">p2 = get_a_prime(<span class=\"number\">128</span>) </span><br><span class=\"line\">p3 = get_a_prime(<span class=\"number\">128</span>) </span><br><span class=\"line\">n1 = p1*p2 </span><br><span class=\"line\">n2 = p1*p3 </span><br><span class=\"line\">e = <span class=\"number\">0x1001</span> </span><br><span class=\"line\">c1 = encrypt(msg1, e, n1) </span><br><span class=\"line\">c2 = encrypt(msg2, e, n2) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(c1) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(c2) </span><br><span class=\"line\">e1 = <span class=\"number\">0x1001</span> </span><br><span class=\"line\">e2 = <span class=\"number\">0x101</span> </span><br><span class=\"line\">p4 = get_a_prime(<span class=\"number\">128</span>) </span><br><span class=\"line\">p5 = get_a_prime(<span class=\"number\">128</span>) </span><br><span class=\"line\">n3 = p4*p5 </span><br><span class=\"line\">c1 = num_to_bytes(<span class=\"built_in\">pow</span>(n1, e1, n3)).encode(<span class=\"string\">&#x27;hex&#x27;</span>) </span><br><span class=\"line\">c2 = num_to_bytes(<span class=\"built_in\">pow</span>(n1, e2, n3)).encode(<span class=\"string\">&#x27;hex&#x27;</span>) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(c1) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(c2) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(base64.b64encode(num_to_bytes(n2))) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(base64.b64encode(num_to_bytes(n3)))</span><br></pre></td></tr></table></figure>\n<p>进一步分析文件，n1中的应该是59、60行中的c1、c2，ciphertext是上面真正和flag有关的的c1、c2，最后是n2和n3</p>\n<p>先求得n2和n3的值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n2 = <span class=\"string\">&quot;PVNHb2BfGAnmxLrbKhgsYXRwWIL9eOj6K0s3I0slKHCTXTAUtZh3T0r+RoSlhpO3+77AY8P7WETYz2Jzuv5FV/mMODoFrM5fMyQsNt90VynR6J3Jv+fnPJPsm2hJ1Fqt7EKaVRwCbt6a4BdcRoHJsYN/+eh7k/X+FL5XM7viyvQxyFawQrhSV79FIoX6xfjtGW+uAeVF7DScRcl49dlwODhFD7SeLqzoYDJPIQS+VSb3YtvrDgdV+EhuS1bfWvkkXRijlJEpLrgWYmMdfsYX8u/+Ylf5xcBGn3hv1YhQrBCg77AHuUF2w/gJ/ADHFiMcH3ux3nqOsuwnbGSr7jA6Cw==&quot;</span></span><br><span class=\"line\">n3 = <span class=\"string\">&quot;TmNVbWUhCXR1od3gBpM+HGMKK/4ErfIKITxomQ/QmNCZlzmmsNyPXQBiMEeUB8udO7lWjQTYGjD6k21xjThHTNDG4z6C2cNNPz73VIaNTGz0hrh6CmqDowFbyrk+rv53QSkVKPa8EZnFKwGz9B3zXimm1D+01cov7V/ZDfrHrEjsDkgK4ZlrQxPpZAPl+yqGlRK8soBKhY/PF3/GjbquRYeYKbagpUmWOhLnF4/+DP33ve/EpaSAPirZXzf8hyatL4/5tAZ0uNq9W6T4GoMG+N7aS2GeyUA2sLJMHymW4cFK5l5kUvjslRdXOHTmz5eHxqIV6TmSBQRgovUijlNamQ==&quot;</span></span><br><span class=\"line\">n2 = bytes_to_long(base64.b64decode(n2))</span><br><span class=\"line\">n3 = bytes_to_long(base64.b64decode(n3))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(n2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(n3)</span><br></pre></td></tr></table></figure>\n<p>然后共模攻击，求得n1的值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c1 = <span class=\"string\">&quot;2639c28e3609a4a8c953cca9c326e8e062756305ae8aee6efcd346458aade3ee8c2106ab9dfe5f470804f366af738aa493fd2dc26cb249a922e121287f3eddec0ed8dea89747dc57aed7cd2089d75c23a69bf601f490a64f73f6a583081ae3a7ed52238c13a95d3322065adba9053ee5b12f1de1873dbad9fbf4a50a2f58088df0fddfe2ed8ca1118c81268c8c0fd5572494276f4e48b5eb424f116e6f5e9d66da1b6b3a8f102539b690c1636e82906a46f3c5434d5b04ed7938861f8d453908970eccef07bf13f723d6fdd26a61be8b9462d0ddfbedc91886df194ea022e56c1780aa6c76b9f1c7d5ea743dc75cec3c805324e90ea577fa396a1effdafa3090&quot;</span></span><br><span class=\"line\">c2 = <span class=\"string\">&quot;42ff1157363d9cd10da64eb4382b6457ebb740dbef40ade9b24a174d0145adaa0115d86aa2fc2a41257f2b62486eaebb655925dac78dd8d13ab405aef5b8b8f9830094c712193500db49fb801e1368c73f88f6d8533c99c8e7259f8b9d1c926c47215ed327114f235ba8c873af7a0052aa2d32c52880db55c5615e5a1793b690c37efdd5e503f717bb8de716303e4d6c4116f62d81be852c5d36ef282a958d8c82cf3b458dcc8191dcc7b490f227d1562b1d57fbcf7bf4b78a5d90cd385fd79c8ca4688e7d62b3204aeaf9692ba4d4e44875eaa63642775846434f9ce51d138ca702d907849823b1e86896e4ea6223f93fae68b026cfe5fa5a665569a9e3948a&quot;</span></span><br><span class=\"line\">c1 = codecs.decode(c1,<span class=\"string\">&#x27;hex&#x27;</span>)</span><br><span class=\"line\">c1 = bytes_to_long(c1)</span><br><span class=\"line\">c2 = bytes_to_long(codecs.decode(c2,<span class=\"string\">&#x27;hex&#x27;</span>))</span><br><span class=\"line\">e1 = <span class=\"number\">0x1001</span></span><br><span class=\"line\">e2 = <span class=\"number\">0x101</span></span><br><span class=\"line\">n = n3</span><br><span class=\"line\">gcd,s,t = gmpy2.gcdext(e1,e2)</span><br><span class=\"line\"><span class=\"keyword\">if</span> s &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">    s = -s</span><br><span class=\"line\">    c1 = gmpy2.invert(c1,n)</span><br><span class=\"line\"><span class=\"keyword\">if</span> t &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">    t = -t</span><br><span class=\"line\">    c2 = gmpy2.invert(c2,n)</span><br><span class=\"line\"></span><br><span class=\"line\">M = gmpy2.powmod(c1,s,n)*gmpy2.powmod(c2,t,n) % n</span><br><span class=\"line\"><span class=\"built_in\">print</span>(M)</span><br><span class=\"line\">n1 = M</span><br></pre></td></tr></table></figure>\n<p>最后求解得到msg1，msg2。再分析separate函数，发现只是交错分割flag</p>\n<p>所以还原即可。</p>\n<p>注意字节码需要decode()转换为字符串。</p>\n<p>给到的函数num_to_bytes不知道为什么可能有一点小问题，最后需要改用long_to_bytes</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = gmpy2.gcd(n1,n2)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decrypt</span>(<span class=\"params\">c,e,n</span>):</span></span><br><span class=\"line\">    c = bytes_to_num(codecs.decode(c,<span class=\"string\">&#x27;hex&#x27;</span>))</span><br><span class=\"line\">    q = <span class=\"built_in\">divmod</span>(n,p)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    phi_n = (p-<span class=\"number\">1</span>)*(q-<span class=\"number\">1</span>)</span><br><span class=\"line\">    d = gmpy2.invert(e,phi_n)</span><br><span class=\"line\">    m = <span class=\"built_in\">pow</span>(c,d,n)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> long_to_bytes(m)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">c1 = <span class=\"string\">&quot;1240198b148089290e375b999569f0d53c32d356b2e95f5acee070f016b3bef243d0b5e46d9ad7aa7dfe2f21bda920d0ac7ce7b1e48f22b2de410c6f391ce7c4347c65ffc9704ecb3068005e9f35cbbb7b27e0f7a18f4f42ae572d77aaa3ee189418d6a07bab7d93beaa365c98349d8599eb68d21313795f380f05f5b3dfdc6272635ede1f83d308c0fdb2baf444b9ee138132d0d532c3c7e60efb25b9bf9cb62dba9833aa3706344229bd6045f0877661a073b6deef2763452d0ad7ab3404ba494b93fd6dfdf4c28e4fe83a72884a99ddf15ca030ace978f2da87b79b4f504f1d15b5b96c654f6cd5179b72ed5f84d3a16a8f0d5bf6774e7fd98d27bf3c9839&quot;</span></span><br><span class=\"line\">c2 = <span class=\"string\">&quot;129d5d4ab3f9e8017d4e6761702467bbeb1b884b6c4f8ff397d078a8c41186a3d52977fa2307d5b6a0ad01fedfc3ba7b70f776ba3790a43444fb954e5afd64b1a3abeb6507cf70a5eb44678a886adf81cb4848a35afb4db7cd7818f566c7e6e2911f5ababdbdd2d4ff9825827e58d48d5466e021a64599b3e867840c07e29582961f81643df07f678a61a9f9027ebd34094e272dfbdc4619fa0ac60f0189af785df77e7ec784e086cf692a7bf7113a7fb8446a65efa8b431c6f72c14bcfa49c9b491fb1d87f2570059e0f13166a85bb555b40549f45f04bc5dbd09d8b858a5382be6497d88197ffb86381085756365bd757ec3cdfa8a77ba1728ec2de596c5ab&quot;</span></span><br><span class=\"line\">e = <span class=\"number\">0x1001</span></span><br><span class=\"line\">msg1 = decrypt(c1,e,n1).decode()</span><br><span class=\"line\">msg2 = decrypt(c2,e,n2).decode()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">flag = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">len</span> = <span class=\"built_in\">len</span>(msg2) + <span class=\"built_in\">len</span>(msg1)</span><br><span class=\"line\">tmp1 = <span class=\"number\">0</span></span><br><span class=\"line\">tmp2 = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>//<span class=\"number\">2</span>):</span><br><span class=\"line\">    flag += <span class=\"built_in\">str</span>(msg1[tmp1])</span><br><span class=\"line\">    flag += <span class=\"built_in\">str</span>(msg2[tmp2])</span><br><span class=\"line\">    tmp1+=<span class=\"number\">1</span></span><br><span class=\"line\">    tmp2+=<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag)</span><br></pre></td></tr></table></figure>\n<h4 id=\"羊城杯-2020-RRRRRRRSA-【wiener-attack】\">[羊城杯 2020]RRRRRRRSA 【wiener attack】</h4>\n<p>wiener attack：依靠连分数进行攻击，适用于非常接近某一值（如1）时，求一个比例关系，通过该比例关系再反推关键信息。</p>\n<p>适用于解密指数d很小，满足以下条件</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>d</mi><mo>&lt;</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>3</mn><mtext> </mtext><mo>∗</mo><msup><mi>N</mi><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>4</mn></mrow></msup><mspace linebreak=\"newline\"></mspace><mi>q</mi><mo>&lt;</mo><mi>p</mi><mo>&lt;</mo><mn>2</mn><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">d &lt; 1/3\\ * N^{1/4}\n\\\\\nq &lt; p &lt; 2q\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/3</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.938em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1/4</span></span></span></span></span></span></span></span></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span></p>\n<p>一般用法：根据</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>e</mi><mi>d</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mi>h</mi><mi>i</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">ed\\ mod\\ phi(n) = 1\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">hi</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></span></p>\n<p>得到</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>e</mi><mo>∗</mo><mi>d</mi><mo>=</mo><mn>1</mn><mo>+</mo><mi>k</mi><mo>∗</mo><mi>p</mi><mi>h</mi><mi>i</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><mtext>即 </mtext><mi>e</mi><mi mathvariant=\"normal\">/</mi><mi>p</mi><mi>h</mi><mi>i</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>k</mi><mi mathvariant=\"normal\">/</mi><mi>d</mi><mo>+</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>d</mi><mo>∗</mo><mi>p</mi><mi>h</mi><mi>i</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><mtext>而 </mtext><mi>p</mi><mi>h</mi><mi>i</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mtext>接近于</mtext><mi>n</mi><mspace linebreak=\"newline\"></mspace><mi>e</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi><mo>−</mo><mi>k</mi><mi mathvariant=\"normal\">/</mi><mi>d</mi><mo>=</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>d</mi><mo>∗</mo><mi>p</mi><mi>h</mi><mi>i</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><mi>e</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi><mtext>与</mtext><mi>k</mi><mi mathvariant=\"normal\">/</mi><mi>d</mi><mtext>非常接近</mtext><mspace linebreak=\"newline\"></mspace></mrow><annotation encoding=\"application/x-tex\">e*d = 1 + k*phi(n) \\\\\n即\\ e/phi(n) = k/d + 1/d*phi(n)\n\\\\ 而\\ phi(n)接近于n \n\\\\ e/n - k/d = 1/d*phi(n)\n\\\\ e/n 与 k/d非常接近\n\\\\ \n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4653em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">hi</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\">即</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">e</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">hi</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">hi</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\">而</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">hi</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mord cjk_fallback\">接近于</span><span class=\"mord mathnormal\">n</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">hi</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">n</span><span class=\"mord cjk_fallback\">与</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">d</span><span class=\"mord cjk_fallback\">非常接近</span></span><span class=\"mspace newline\"></span></span></span></span></p>\n<p>而e/N又是已知的,因此对e/N进行连分数展开，得到的一串分数的分母很有可能就是d，只要检验一下 ed mod phi(n) 看它是不是1就知道对不对了。</p>\n<p>本题特殊之处：e与N并没有近到相除约为1的地步，相差还是很大的，也就是说解密指数d也许还是很大的，这样就解不出来。但是N1和N2的关系却适合。</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>N</mi><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>N</mi><mn>2</mn><mo>=</mo><mo stretchy=\"false\">(</mo><mi>p</mi><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>p</mi><mn>2</mn><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mtext> </mtext><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>q</mi><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>q</mi><mn>2</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">N1/N2=(p1/p2)^2\\ * (q1/q2)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord\">1/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mord\">1/</span><span class=\"mord mathnormal\">p</span><span class=\"mord\">2</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mord\">1/</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>显然我们可以知道的是N1/N2 &lt;Q1/Q2，所以在Q1/Q2在区间(N1/N2,1)之间，尝试对N1/N2进行连分数展开并求其各项渐进分数，其中某个连分数的分母可能就是Q1（这个可以依靠N%Q来验证）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">N1 =</span><br><span class=\"line\">N2 =</span><br><span class=\"line\"><span class=\"comment\">#求连分数的项</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">continuedfra</span>(<span class=\"params\">x,y</span>):</span></span><br><span class=\"line\">    cf = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> y:</span><br><span class=\"line\">        cf += [x//y]</span><br><span class=\"line\">        x,y = y,x%y</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cf</span><br><span class=\"line\"><span class=\"comment\">#得到分子和分母</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">simplify</span>(<span class=\"params\">c</span>):</span></span><br><span class=\"line\">    numrator = <span class=\"number\">0</span> <span class=\"comment\">#分子</span></span><br><span class=\"line\">    denominator = <span class=\"number\">1</span> <span class=\"comment\">#分母</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> c[::-<span class=\"number\">1</span>]: <span class=\"comment\">#倒序遍历？</span></span><br><span class=\"line\">        numrator,denominator = denominator,x * denominator + numrator</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (numrator,denominator) <span class=\"comment\">#连分数生成分子和算出来的分母？</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getit</span>(<span class=\"params\">c</span>):</span></span><br><span class=\"line\">    cf = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(c)):</span><br><span class=\"line\">        cf.append(simplify(c[:i]))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wiener</span>(<span class=\"params\">e,n</span>):</span></span><br><span class=\"line\">    cf = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Q2,Q1) <span class=\"keyword\">in</span> getit(cf):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> Q1 == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> N1%Q1 == <span class=\"number\">0</span> <span class=\"keyword\">and</span> Q1 != <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Q1</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;not found&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">Q1 = wiener(N1,N2)</span><br></pre></td></tr></table></figure>\n<h4 id=\"！-watevrCTF-2019-Swedish-RSA【多项式】\">！[watevrCTF 2019]Swedish RSA【多项式】</h4>\n<p><a href=\"https://blog.csdn.net/MikeCoke/article/details/113800879\">https://blog.csdn.net/MikeCoke/article/details/113800879</a></p>\n<p>多项式的欧拉函数：对于多项式P(y)来讲，欧拉函数phi(P(y))表示所有不高于P(y)幂级的环内所有多项式中，与P(y)无（除1以外）公因式的其他多项式的个数。</p>\n<h4 id=\"美团CTF-hambersa-【PP】\">[美团CTF]hambersa 【PP】</h4>\n<p>x, y = len(str§), len(str(q))<br>\nP = 10^x * p + p<br>\nQ = 10^y * q + q<br>\n同理<br>\nPP = 10^x’ * P + Q<br>\nQQ = 10^y’ * Q + P</p>\n<p>N = 10^(x+x’+y+y’)pq+…+pq</p>\n<p>sage代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decrypt_RSA</span>(<span class=\"params\">c, e, p, q</span>):</span></span><br><span class=\"line\">    phi = (p-<span class=\"number\">1</span>) * (q-<span class=\"number\">1</span>)</span><br><span class=\"line\">    d = inverse(e, phi)</span><br><span class=\"line\">    m = <span class=\"built_in\">pow</span>(c, d, p*q)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(long_to_bytes(m))</span><br><span class=\"line\"></span><br><span class=\"line\">n = <span class=\"number\">177269125756508652546242326065138402971542751112423326033880862868822164234452280738170245589798474033047460920552550018968571267978283756742722231922451193</span></span><br><span class=\"line\">c = <span class=\"number\">47718022601324543399078395957095083753201631332808949406927091589044837556469300807728484035581447960954603540348152501053100067139486887367207461593404096</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">low = <span class=\"built_in\">str</span>(n)[-<span class=\"number\">18</span>:]</span><br><span class=\"line\">high = <span class=\"built_in\">str</span>(n)[:<span class=\"number\">18</span>]</span><br><span class=\"line\">pq_prob = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">            pq_prob.append(<span class=\"built_in\">int</span>(high + <span class=\"built_in\">str</span>(i) + <span class=\"built_in\">str</span>(j)+ <span class=\"built_in\">str</span>(k) + low))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> tqdm(pq_prob):</span><br><span class=\"line\">    f = factor(x)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">len</span>(f) == <span class=\"number\">2</span> <span class=\"keyword\">and</span> f[<span class=\"number\">0</span>][<span class=\"number\">0</span>].nbits() == <span class=\"number\">64</span>):</span><br><span class=\"line\">        p, q = f[<span class=\"number\">0</span>][<span class=\"number\">0</span>], f[<span class=\"number\">1</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">P = <span class=\"built_in\">int</span>(<span class=\"built_in\">str</span>(p) + <span class=\"built_in\">str</span>(p))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(P)</span><br><span class=\"line\">Q = <span class=\"built_in\">int</span>(<span class=\"built_in\">str</span>(q) + <span class=\"built_in\">str</span>(q))</span><br><span class=\"line\">PP = <span class=\"built_in\">int</span>(<span class=\"built_in\">str</span>(P) + <span class=\"built_in\">str</span>(Q))</span><br><span class=\"line\">QQ = <span class=\"built_in\">int</span>(<span class=\"built_in\">str</span>(Q) + <span class=\"built_in\">str</span>(P))</span><br><span class=\"line\">N = PP * QQ</span><br><span class=\"line\"><span class=\"built_in\">print</span>(N == n)</span><br><span class=\"line\">decrypt_RSA(c, <span class=\"number\">65537</span>, PP, QQ)```</span><br></pre></td></tr></table></figure>\n<h4 id=\"NCTF2019-easyrsa【e，phi不互素】\">[NCTF2019]easyrsa【e，phi不互素】</h4>\n<p><a href=\"http://yulige.top/?p=752#easyRSA909pt_2solvers\">http://yulige.top/?p=752#easyRSA909pt_2solvers</a></p>\n<p>然而本题则为<code>e</code>和<code>p-1</code>(或<code>q-1</code>)的最大公约数就是<code>e</code>本身，也就是说<code>e | p-1</code>，只有对<code>c</code>开<code>e</code>次方根才行，但是e很大，暴力计算所需时间很长。<br>\n可以将同余方程</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msup><mi>m</mi><mi>e</mi></msup><mo>≡</mo><mi>c</mi><mspace width=\"1em\"/><mo stretchy=\"false\">(</mo><mtext>mod </mtext><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">m^e \\equiv c \\quad (\\text{mod}\\ n)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7144em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">e</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mopen\">(</span><span class=\"mord text\"><span class=\"mord\">mod</span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>化成</mtext><mspace linebreak=\"newline\"></mspace><mtable rowspacing=\"0.25em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msup><mi>m</mi><mi>e</mi></msup></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>≡</mo><mi>c</mi><mspace width=\"1em\"/><mo stretchy=\"false\">(</mo><mtext>mod </mtext><mi>p</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msup><mi>m</mi><mi>e</mi></msup></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>≡</mo><mi>c</mi><mspace width=\"1em\"/><mo stretchy=\"false\">(</mo><mtext>mod </mtext><mi>q</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding=\"application/x-tex\">化成\\\\ \n\\begin{aligned}\nm^e &amp;\\equiv c \\quad (\\text{mod}\\ p)\\newline\nm^e &amp;\\equiv c \\quad (\\text{mod}\\ q)\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\">化成</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:3em;vertical-align:-1.25em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.75em;\"><span style=\"top:-3.91em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">e</span></span></span></span></span></span></span></span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">e</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.25em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.75em;\"><span style=\"top:-3.91em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mopen\">(</span><span class=\"mord text\"><span class=\"mord\">mod</span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mopen\">(</span><span class=\"mord text\"><span class=\"mord\">mod</span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.25em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>然后分别在<code>GF(p)</code>和<code>GF(q)</code>上对<code>c</code>开<code>e=0x1337</code>次方根，再用<code>CRT</code>组合一下即可得到在<code>mod n</code>下的解</p>\n<p>**有限域内开根： **</p>\n<p>e与p-1和q-1都不互素，不能简单求个逆元</p>\n<p>开平方根可以用 <code>Tonelli-Shanks</code>算法，可以扩展到开n次方根</p>\n<p>这篇<a href=\"https://arxiv.org/pdf/1111.4877.pdf\">paper</a> 里给出了具体的算法：<code>Adleman-Manders-Miller rth Root Extraction Method</code></p>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/QNy9EWc7K4enJGu.jpg\" alt=\"Adleman-Manders-Miller cubic root extraction method\"></p>\n<p><a href=\"https://jayxv.github.io/2019/12/04/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%B5%85%E6%9E%90On%20r-th%20Root%20Extraction%20Algorithm%20in%20Fq/\">数学证明以后再看吧2333</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">AMM</span>(<span class=\"params\">o, r, q</span>):</span></span><br><span class=\"line\">    start = time.time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\n----------------------------------------------------------------------------------&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Start to run Adleman-Manders-Miller Root Extraction Method&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Try to find one &#123;:#x&#125;th root of &#123;&#125; modulo &#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(r, o, q))</span><br><span class=\"line\">    g = GF(q)</span><br><span class=\"line\">    o = g(o)</span><br><span class=\"line\">    p = g(random.randint(<span class=\"number\">1</span>, q))</span><br><span class=\"line\">    <span class=\"keyword\">while</span> p ^ ((q-<span class=\"number\">1</span>) // r) == <span class=\"number\">1</span>:</span><br><span class=\"line\">        p = g(random.randint(<span class=\"number\">1</span>, q))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[+] Find p:&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(p))</span><br><span class=\"line\">    t = <span class=\"number\">0</span></span><br><span class=\"line\">    s = q - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> s % r == <span class=\"number\">0</span>:</span><br><span class=\"line\">        t += <span class=\"number\">1</span></span><br><span class=\"line\">        s = s // r</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[+] Find s:&#123;&#125;, t:&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(s, t))</span><br><span class=\"line\">    k = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (k * s + <span class=\"number\">1</span>) % r != <span class=\"number\">0</span>:</span><br><span class=\"line\">        k += <span class=\"number\">1</span></span><br><span class=\"line\">    alp = (k * s + <span class=\"number\">1</span>) // r</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[+] Find alp:&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(alp))</span><br><span class=\"line\">    a = p ^ (r**(t-<span class=\"number\">1</span>) * s)</span><br><span class=\"line\">    b = o ^ (r*alp - <span class=\"number\">1</span>)</span><br><span class=\"line\">    c = p ^ s</span><br><span class=\"line\">    h = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, t):</span><br><span class=\"line\">        d = b ^ (r^(t-<span class=\"number\">1</span>-i))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> d == <span class=\"number\">1</span>:</span><br><span class=\"line\">            j = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[+] Calculating DLP...&#x27;</span>)</span><br><span class=\"line\">            j = - discrete_log(d, a)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[+] Finish DLP...&#x27;</span>)</span><br><span class=\"line\">        b = b * (c^r)^j</span><br><span class=\"line\">        h = h * c^j</span><br><span class=\"line\">        c = c^r</span><br><span class=\"line\">    result = o^alp * h</span><br><span class=\"line\">    end = time.time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Finished in &#123;&#125; seconds.&quot;</span>.<span class=\"built_in\">format</span>(end - start))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Find one solution: &#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(result))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n<p>但该算法只能求得一个根，实际上开0x1337次方，最多会有0x1337个根。</p>\n<p>那么如何找到其他根呢？</p>\n<p>先找到所有0x1336个proot使得</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>p</mi><mi>r</mi><mi>o</mi><mi>o</mi><msup><mi>t</mi><mi>e</mi></msup><mo>=</mo><mn>1</mn><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">proot^e = 1 (mod\\ p)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9088em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">roo</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">e</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>然后乘以上面求得的根即可。</p>\n<p>由于</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>o</mi><msup><mi>t</mi><mrow><mi>p</mi><mo>−</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>e</mi></mrow></msup><msup><mo stretchy=\"false\">)</mo><mi>e</mi></msup><mo>=</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>o</mi><msup><mi>t</mi><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mn>1</mn><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(proot^{p-1/e})^e = proot^{p-1} = 1 (mod\\ p)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.188em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">roo</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1/</span><span class=\"mord mathnormal mtight\">e</span></span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">e</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0585em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">roo</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>所以只需要</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findAllPRoot</span>(<span class=\"params\">p, e</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Start to find all the Primitive &#123;:#x&#125;th root of 1 modulo &#123;&#125;.&quot;</span>.<span class=\"built_in\">format</span>(e, p))</span><br><span class=\"line\">    start = time.time()</span><br><span class=\"line\">    proot = <span class=\"built_in\">set</span>()</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(proot) &lt; e:</span><br><span class=\"line\">        g = <span class=\"built_in\">pow</span>(random.randint(<span class=\"number\">2</span>, p-<span class=\"number\">1</span>), (p-<span class=\"number\">1</span>)//e, p)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">pow</span>(g,e//<span class=\"number\">2</span>,p) != <span class=\"number\">1</span>:</span><br><span class=\"line\">            proot.add(g)</span><br><span class=\"line\">    end = time.time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Finished in &#123;&#125; seconds.&quot;</span>.<span class=\"built_in\">format</span>(end - start))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> proot</span><br></pre></td></tr></table></figure>\n<p>完整sage代码如下</p>\n<h4 id=\"百度2021-time【p，q相近-随机数遍历】\">[百度2021]time【p，q相近+随机数遍历】</h4>\n<p>首先看到q是p的下一个素数，可以发现p，q非常相近，所以</p>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/image-20211228131817914.png\" alt=\"image-20211228131817914\"></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>p</mi><mo>−</mo><mi>q</mi><mi mathvariant=\"normal\">∣</mi><mtext>很小</mtext><mspace linebreak=\"newline\"></mspace><mtext>（</mtext><mi>p</mi><mo>+</mo><mi>q</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mn>2</mn><mtext>与</mtext><mroot><mi>n</mi><mn>2</mn></mroot><mtext>很接近</mtext><mspace linebreak=\"newline\"></mspace><mtext>从</mtext><mroot><mi>n</mi><mn>2</mn></mroot><mtext>开始直到找到一个</mtext><mi>x</mi><mtext>，使得</mtext><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><mi>n</mi><mo>=</mo><msup><mi>y</mi><mn>2</mn></msup><mtext>即可</mtext><mspace linebreak=\"newline\"></mspace><mi>p</mi><mo>=</mo><mi>x</mi><mo>−</mo><mi>y</mi><mspace linebreak=\"newline\"></mspace><mi>q</mi><mo>=</mo><mi>x</mi><mo>+</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">|p-q|很小\\\\\n（p+q)/2 与 \\sqrt[2]{n}很接近\\\\\n从\\sqrt[2]{n}开始直到找到一个x，使得x^2-n=y^2即可\\\\\np = x-y \\\\\nq = x + y\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mord\">∣</span><span class=\"mord cjk_fallback\">很小</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord cjk_fallback\">（</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0992em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mclose\">)</span><span class=\"mord\">/2</span><span class=\"mord cjk_fallback\">与</span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7172em;\"><span style=\"top:-2.895em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8492em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-2.8092em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1908em;\"><span></span></span></span></span></span><span class=\"mord cjk_fallback\">很接近</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1.055em;vertical-align:-0.1908em;\"></span><span class=\"mord cjk_fallback\">从</span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7172em;\"><span style=\"top:-2.895em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8492em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-2.8092em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1908em;\"><span></span></span></span></span></span><span class=\"mord cjk_fallback\">开始直到找到一个</span><span class=\"mord mathnormal\">x</span><span class=\"mord cjk_fallback\">，使得</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0585em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">即可</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pp = gmpy2.iroot(n,<span class=\"number\">2</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(pp+<span class=\"number\">1</span>,pp+<span class=\"number\">3</span>):</span><br><span class=\"line\">    yy = <span class=\"built_in\">pow</span>(x,<span class=\"number\">2</span>)-n</span><br><span class=\"line\">    <span class=\"keyword\">if</span> gmpy2.iroot(yy,<span class=\"number\">2</span>)[<span class=\"number\">1</span>]:</span><br><span class=\"line\">        y = gmpy2.iroot(yy,<span class=\"number\">2</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">        p = (x-y)</span><br><span class=\"line\">        q = x + y</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;p:&quot;</span>,p)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;q:&quot;</span>,q)</span><br><span class=\"line\">phi = (p-<span class=\"number\">1</span>)*(q-<span class=\"number\">1</span>)</span><br><span class=\"line\">d = gmpy2.invert(e,phi)</span><br><span class=\"line\">m = <span class=\"built_in\">pow</span>(c,d,n)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(m)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(long_to_bytes(m))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>得到hint</p>\n<p><code>localtime为time.struct_time(tm_year=2021, tm_mon=4, tm_mday=28, tm_hour=20, tm_min=42, tm_sec=6, tm_wday=2, tm_yday=118, tm_isdst=0)</code></p>\n<p><code>time()-a1 = 3.1603143215179443</code></p>\n<p>randome.seed设置的种子相同的话，最后得到的随机数也相同，所以只需要进行遍历即可</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lt = time.mktime((<span class=\"number\">2021</span>,<span class=\"number\">4</span>,<span class=\"number\">28</span>,<span class=\"number\">20</span>,<span class=\"number\">42</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">118</span>,<span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lt)</span><br><span class=\"line\">a1 = <span class=\"number\">3.1603143215179443</span></span><br><span class=\"line\">s = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100000</span>):</span><br><span class=\"line\">        random.seed(s)</span><br><span class=\"line\">        x = random.getrandbits(<span class=\"number\">2048</span>)</span><br><span class=\"line\">        s = <span class=\"built_in\">int</span>(lt) - i + j * <span class=\"number\">10</span> ** -<span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n % x == <span class=\"number\">0</span>:</span><br><span class=\"line\">            p = x</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(p)</span><br><span class=\"line\">            q = n//p</span><br><span class=\"line\">            phi = (p-<span class=\"number\">1</span>)*(q-<span class=\"number\">1</span>)</span><br><span class=\"line\">            d = gmpy2.invert(e,phi)</span><br><span class=\"line\">            m = <span class=\"built_in\">pow</span>(c,d,n)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(long_to_bytes(m))</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        </span><br></pre></td></tr></table></figure>\n<h4 id=\"百度ichunqiu-whitegiveCMA【数论-共模】\">[百度ichunqiu]whitegiveCMA【数论+共模】</h4>\n<h4 id=\"GKCTF2021-RRRsa【数学式子化简】\">[GKCTF2021]RRRsa【数学式子化简】</h4>\n<p>1）拿到两个式子后，先把<strong>括号去掉</strong>，然后把<strong>常数项去掉</strong>；<br>\n2）之后得到的式子应该是<strong>俩个只含p或q的式子</strong>，让两个式子的p（或q）的<strong>指数</strong>和<strong>系数</strong>相同；<br>\n3）将两个式子相加或相减<strong>消掉p</strong>,剩下的式子应该只剩下q,与n进行gcd（）求出q</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> gmpy2</span><br><span class=\"line\"><span class=\"keyword\">import</span> Rsa</span><br><span class=\"line\">t= <span class=\"number\">202020</span>*<span class=\"number\">212121</span></span><br><span class=\"line\">h3=<span class=\"number\">25590923416756813543880554963887576960707333607377889401033718419301278802157204881039116350321872162118977797069089653428121479486603744700519830597186045931412652681572060953439655868476311798368015878628002547540835719870081007505735499581449077950263721606955524302365518362434928190394924399683131242077</span></span><br><span class=\"line\">h4=<span class=\"number\">104100726926923869566862741238876132366916970864374562947844669556403268955625670105641264367038885706425427864941392601593437305258297198111819227915453081797889565662276003122901139755153002219126366611021736066016741562232998047253335141676203376521742965365133597943669838076210444485458296240951668402513</span></span><br><span class=\"line\">n2 = <span class=\"number\">114535923043375970380117920548097404729043079895540320742847840364455024050473125998926311644172960176471193602850427607899191810616953021324742137492746159921284982146320175356395325890407704697018412456350862990849606200323084717352630282539156670636025924425865741196506478163922312894384285889848355244489</span></span><br><span class=\"line\">h = <span class=\"built_in\">pow</span>(<span class=\"number\">2021</span>,t,n2)*<span class=\"built_in\">pow</span>(h3,<span class=\"number\">212121</span>,n2)-<span class=\"built_in\">pow</span>(<span class=\"number\">2020</span>,t,n2)*<span class=\"built_in\">pow</span>(h4,<span class=\"number\">202020</span>,n2)</span><br><span class=\"line\">q2 = gmpy2.gcd(n2,h)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(q2)</span><br><span class=\"line\">p2 = n2//q2</span><br><span class=\"line\"><span class=\"built_in\">print</span>(p2)</span><br><span class=\"line\">c2 = <span class=\"number\">67054203666901691181215262587447180910225473339143260100831118313521471029889304176235434129632237116993910316978096018724911531011857469325115308802162172965564951703583450817489247675458024801774590728726471567407812572210421642171456850352167810755440990035255967091145950569246426544351461548548423025004</span></span><br><span class=\"line\">d = Rsa.get_d(<span class=\"number\">65537</span>,p2,q2,n2)</span><br><span class=\"line\">q = Rsa.decrypt(c2,d,n2)</span><br><span class=\"line\"></span><br><span class=\"line\">n1=<span class=\"number\">75003557379080252219517825998990183226659117019770735080523409561757225883651040882547519748107588719498261922816865626714101556207649929655822889945870341168644508079317582220034374613066751916750036253423990673764234066999306874078424803774652754587494762629397701664706287999727238636073466137405374927829</span></span><br><span class=\"line\">c1=<span class=\"number\">68111901092027813007099627893896838517426971082877204047110404787823279211508183783468891474661365139933325981191524511345219830693064573462115529345012970089065201176142417462299650761299758078141504126185921304526414911455395289228444974516503526507906721378965227166653195076209418852399008741560796631569</span></span><br><span class=\"line\">hint1=<span class=\"number\">23552090716381769484990784116875558895715552896983313406764042416318710076256166472426553520240265023978449945974218435787929202289208329156594838420190890104226497263852461928474756025539394996288951828172126419569993301524866753797584032740426259804002564701319538183190684075289055345581960776903740881951</span></span><br><span class=\"line\">hint2=<span class=\"number\">52723229698530767897979433914470831153268827008372307239630387100752226850798023362444499211944996778363894528759290565718266340188582253307004810850030833752132728256929572703630431232622151200855160886614350000115704689605102500273815157636476901150408355565958834764444192860513855376978491299658773170270</span></span><br><span class=\"line\">q1 = gmpy2.gcd(n1,<span class=\"built_in\">pow</span>(hint2-<span class=\"number\">212121</span>,<span class=\"number\">202020</span>,n1)*<span class=\"built_in\">pow</span>(<span class=\"number\">2020</span>,<span class=\"number\">202020</span>,n1)-hint1*<span class=\"built_in\">pow</span>(<span class=\"number\">2021</span>,<span class=\"number\">202020</span>,n1))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(q1)</span><br><span class=\"line\">p1 = n1//q1</span><br><span class=\"line\">d = Rsa.get_d(<span class=\"number\">65537</span>,p1,q1,n1)</span><br><span class=\"line\">p = Rsa.decrypt(c1,d,n1)</span><br><span class=\"line\"></span><br><span class=\"line\">c = <span class=\"number\">13492392717469817866883431475453770951837476241371989714683737558395769731416522300851917887957945766132864151382877462142018129852703437240533684604508379950293643294877725773675505912622208813435625177696614781601216465807569201380151669942605208425645258372134465547452376467465833013387018542999562042758</span></span><br><span class=\"line\">d = Rsa.get_d(<span class=\"number\">65537</span>,p,q,p*q)</span><br><span class=\"line\">m = Rsa.decrypt(c,d,p*q)</span><br></pre></td></tr></table></figure>\n<h2 id=\"ELgamal\">ELgamal</h2>\n<h2 id=\"Hash\">Hash</h2>\n<h2 id=\"脑洞\">脑洞</h2>\n","site":{"data":{"about":{"class":{"class_name":"about","link_list":{"-1":{"name":"Scorpion","avatar":"/image/avatar.jpg","link":null,"descr":"�����ƹ������ë��̨��ɢ�򣬻�ѩ���������ݣ����ֲ�Ƭ����Ƭ�赸��Ƶ��ҵ����Ӱ���Ǻð�ȫ��"}}}},"link":{"class":{"class_name":"友情链接","link_list":{"-1":{"name":"M4tsuri","link":"https://M4tsuri.io","avatar":"/image/m4tsuri.jpg","descr":"pwn,blockchain"}}}}}},"excerpt":"","more":"<h1>[BUUCTF-crypto]writeup</h1>\n<h2 id=\"数学\">数学</h2>\n<h3 id=\"WUSTCTF2020-大数计算\">[WUSTCTF2020]大数计算</h3>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/image-20211107125148733.png\" alt=\"image-20211107125148733\"></p>\n<p>Note：理解问题，题目说要十六进制，前8位不知道是取十进制的前八位然后转换还是取十六进制的前八位，所以（错误就得多试试</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = math.factorial(<span class=\"number\">2020</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(<span class=\"built_in\">int</span>(<span class=\"built_in\">str</span>(a)[:<span class=\"number\">8</span>])))</span><br><span class=\"line\"></span><br><span class=\"line\">x = <span class=\"built_in\">pow</span>(<span class=\"number\">520</span>,<span class=\"number\">1314</span>) + <span class=\"built_in\">pow</span>(<span class=\"number\">2333</span>,<span class=\"number\">666</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(<span class=\"built_in\">int</span>(<span class=\"built_in\">str</span>(x)[:<span class=\"number\">8</span>])))</span><br></pre></td></tr></table></figure>\n<p>宇宙终极问题：x³＋y³＋z³＝42</p>\n<p>(-80538738812075974)³ + 80435758145817515³ + 12602123297335631³ = 42</p>\n<p>part-4，简单的积分，计算面积即可，再加36得520</p>\n<h2 id=\"编码\">编码</h2>\n<h3 id=\"鸡藤椒盐味-【汉明码】\">鸡藤椒盐味  【汉明码】</h3>\n<p>设将要进行检测的二进制代码为n位，为使其具有纠错能力，需要再加上k位的检测位，组成n+k位的代码。那么，新增加的检测位数k应满足：</p>\n<p>2k≥n+k+1或2k-1≥n+k</p>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/image-20211121185128493.png\" alt=\"image-20211121185128493\"></p>\n<h2 id=\"古典\">古典</h2>\n<h3 id=\"INSHack2018-Crypt0r-part-1【tcp流-简单替换】\">[INSHack2018]Crypt0r part 1【tcp流+简单替换】</h3>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/image-20220118215319029.png\" alt=\"image-20220118215319029\"></p>\n<p>给出pcap文件</p>\n<p>使用wireshark打开，并分析tcp数据流</p>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/image-20220118215352072.png\" alt=\"image-20220118215352072\"></p>\n<p>quipquip直接频率分析得到的结果不太对，再仔细观察可能用到的为第二行中的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">replacement</span>(<span class=\"params\">s,cipher</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># s为m中对应的字母</span></span><br><span class=\"line\">    m = <span class=\"string\">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&#x27;</span></span><br><span class=\"line\">    x = string.ascii_letters.maketrans(s, m)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(cipher.translate(x))</span><br><span class=\"line\">    </span><br><span class=\"line\">s = <span class=\"string\">&#x27;PMSFADNIJKBXQCGYWETOVHRULZ&#x27;</span></span><br><span class=\"line\">s += s.lower()</span><br><span class=\"line\">replacement()</span><br></pre></td></tr></table></figure>\n<h3 id=\"UTCTF2020-basic-crypto\">[UTCTF2020]basic-crypto</h3>\n<p>打开文件是二进制形式，先转十六进制，再转ASCII试试</p>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/image-20211107144120942.png\" alt=\"image-20211107144120942\"></p>\n<p>提示很明显base64</p>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/image-20211107144143545.png\" alt=\"image-20211107144143545\"></p>\n<p>提示移位以及Roman，试试凯撒</p>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/image-20211107144221290.png\" alt=\"image-20211107144221290\"></p>\n<p>提示进行词频分析</p>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/image-20211107144251417.png\" alt=\"image-20211107144251417\"></p>\n<h3 id=\"达芬奇密码-【换位】\">达芬奇密码 【换位】</h3>\n<p>根据电影简介，看到斐波那契数列</p>\n<p>观察给出的一列数字，为32位，flag也是32位，</p>\n<p>写一个函数，输出32个斐波那契数列的数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fib</span>(<span class=\"params\">n</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">0</span> <span class=\"keyword\">or</span> n == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fib(n-<span class=\"number\">1</span>) + fib(n-<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">50</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(fib(i),end=<span class=\"string\">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/image-20211121110325817.png\" alt=\"image-20211121110325817\"></p>\n<p>原文flag通过移位得到密文c</p>\n<p>第0位均为1，位置不变</p>\n<p>原fib数列的233（12位）变换到第1位</p>\n<p>因此只需要找到f在原数列哪个位置，再把c对应的数字放回原位即可，注意有两个1，而第0位不变，因此可以把第0位修改为0或其他没有冲突的数字</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fib = <span class=\"string\">&quot;0 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"string\">&quot;0 233 3 2584 1346269 144 5 196418 21 1597 610 377 10946 89 514229 987 8 55 6765 2178309 121393 317811 46368 4181 1 832040 2 28657 75025 34 13 17711&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">c = <span class=\"string\">&quot;36968853882116725547342176952286&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">m = [<span class=\"string\">&#x27;3&#x27;</span>]*<span class=\"number\">32</span></span><br><span class=\"line\"></span><br><span class=\"line\">fib = fib.split(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">f = f.split(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(f)):</span><br><span class=\"line\">    m[fib.index(f[i])] = c[i]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> m:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i,end=<span class=\"string\">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"UTCTF2020-hill\">?[UTCTF2020]hill</h3>\n<p>未知密钥，猜测</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s=<span class=\"string\">&#x27;wznqcaduqopfkqnwofDbzgeu&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#未给密钥的自己猜测</span></span><br><span class=\"line\">flag_pre=<span class=\"string\">&#x27;utflag&#x27;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getit</span>(<span class=\"params\">a1,b1,c1,a2,b2,c2,a3,b3,c3</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">26</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">26</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a1 * i + b1 * j) % <span class=\"number\">26</span> == c1 <span class=\"keyword\">and</span> (a2 * i + b2 * j) % <span class=\"number\">26</span> == c2 <span class=\"keyword\">and</span> (a3 * i+b3*j) % <span class=\"number\">26</span> == c3:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (i,j)</span><br><span class=\"line\">x1=getit(<span class=\"number\">22</span>,<span class=\"number\">25</span>,<span class=\"number\">20</span>,<span class=\"number\">13</span>,<span class=\"number\">16</span>,<span class=\"number\">5</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">x2=getit(<span class=\"number\">22</span>,<span class=\"number\">25</span>,<span class=\"number\">19</span>,<span class=\"number\">13</span>,<span class=\"number\">16</span>,<span class=\"number\">11</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"keyword\">import</span> string</span><br><span class=\"line\">flag=<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(s),<span class=\"number\">2</span>):</span><br><span class=\"line\">    flag+=string.ascii_letters[(x1[<span class=\"number\">0</span>]*string.ascii_letters.index(s[i])+x1[<span class=\"number\">1</span>]*string.ascii_letters.index(s[i+<span class=\"number\">1</span>]))%<span class=\"number\">26</span>]</span><br><span class=\"line\">    flag+=string.ascii_letters[(x2[<span class=\"number\">0</span>]*string.ascii_letters.index(s[i])+x2[<span class=\"number\">1</span>]*string.ascii_letters.index(s[i+<span class=\"number\">1</span>]))%<span class=\"number\">26</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag)</span><br></pre></td></tr></table></figure>\n<h3 id=\"XNUCA2018-baby-crypto【重合指数、词频分析】\">[XNUCA2018]baby_crypto【重合指数、词频分析】</h3>\n<p>题目:26个字母用0-25分别表示，有两串密钥，长度未知，然后一个用作乘数，一个用作加数对明文进行加密</p>\n<p><a href=\"https://blog.csdn.net/weixin_44110537/article/details/107947158\">https://blog.csdn.net/weixin_44110537/article/details/107947158</a></p>\n<h2 id=\"块密码\">块密码</h2>\n<h3 id=\"ACTF新生赛2020-crypto-aes\">[ACTF新生赛2020]crypto-aes</h3>\n<p>因为</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key=os.urandom(<span class=\"number\">2</span>)*<span class=\"number\">16</span></span><br><span class=\"line\">iv=os.urandom(<span class=\"number\">16</span>)</span><br></pre></td></tr></table></figure>\n<p>key是<strong>32bytes</strong>,<strong>256bits</strong> ；iv是<strong>16bytes ,128bits</strong></p>\n<p>由于os.urandom（size）</p>\n<p>参数： size:字符串随机字节的大小 返回值：该方法返回一个字符串，该字符串表示适合加密使用的随机字节。</p>\n<p>所以可以根据key的高128位得到key值，低128位和结果异或便得到iv</p>\n<p>最后进行解密即可</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Cipher <span class=\"keyword\">import</span> AES</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> gmpy2 <span class=\"keyword\">import</span>*</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">xor = <span class=\"number\">91144196586662942563895769614300232343026691029427747065707381728622849079757</span></span><br><span class=\"line\">enc_flag = <span class=\"string\">b&#x27;\\x8c-\\xcd\\xde\\xa7\\xe9\\x7f.b\\x8aKs\\xf1\\xba\\xc75\\xc4d\\x13\\x07\\xac\\xa4&amp;\\xd6\\x91\\xfe\\xf3\\x14\\x10|\\xf8p&#x27;</span></span><br><span class=\"line\">out = long_to_bytes(xor)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(out)</span><br><span class=\"line\">key = out[:<span class=\"number\">16</span>]*<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(key)</span><br><span class=\"line\">iv = bytes_to_long(key[<span class=\"number\">16</span>:])^bytes_to_long(out[<span class=\"number\">16</span>:])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(iv)</span><br><span class=\"line\">iv = long_to_bytes(iv)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(iv)</span><br><span class=\"line\">aes = AES.new(key,AES.MODE_CBC,iv)</span><br><span class=\"line\">flag = aes.decrypt(enc_flag)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag)</span><br></pre></td></tr></table></figure>\n<h3 id=\"AFCTF2018-MyOwnCBC【AES-CBC】\">[AFCTF2018]MyOwnCBC【AES-CBC】</h3>\n<p>加密过程是用上一级的密文，作为下一次加密的密钥key,所以初始密钥key可以知道就是题目给的密文前32个</p>\n<h3 id=\"美团CTF\">[美团CTF]</h3>\n<h3 id=\"ACTF新生赛2020-crypto-des\">[ACTF新生赛2020]crypto-des</h3>\n<p>c语言中数据在内存中的存储（大小端）</p>\n<p>有轮密钥，直接解密即可</p>\n<h2 id=\"流密码\">流密码</h2>\n<h3 id=\"AFCTF2018-你听过一次一密么？\">?[AFCTF2018]你听过一次一密么？</h3>\n<p>一次一密（One-Time-Pad）：xor key  明文多长，密文就多长（适合少量明文消息）</p>\n<p>Many-Time-Pad攻击：多个明文异或同样的key</p>\n<p><a href=\"https://www.ruanx.net/many-time-pad/\">https://www.ruanx.net/many-time-pad/</a></p>\n<p>攻击思想：对于每一条密文Ci，拿去异或其他所有密文。然后去数每一列有多少个英文字符，作为“Mi在这一位是空格”的评分。依据评分从大到小排序，依次利用 “某个明文的某一位是空格” 这种信息恢复出所有明文的那一列。如果产生冲突，则舍弃掉评分小的</p>\n<p><strong>修复语句太绝了</strong></p>\n<h3 id=\"？-De1CTF2019-xorz-【频率分析-break-repeating-key】\">？[De1CTF2019]xorz 【频率分析/break repeating-key】</h3>\n<p><strong>法一：流密码</strong></p>\n<p>参考</p>\n<p><a href=\"https://www.anquanke.com/post/id/161171#h3-\">https://www.anquanke.com/post/id/161171#h3-</a></p>\n<p><a href=\"http://socold.cn/index.php/archives/65/\">http://socold.cn/index.php/archives/65/</a></p>\n<h4 id=\"一-猜测密钥长度\">一.猜测密钥长度</h4>\n<p>1.暴力破解：</p>\n<p><a href=\"https://www.ruanx.net/many-time-pad/\">https://www.ruanx.net/many-time-pad/</a></p>\n<p>给的是 m[i]⊕k[i]⊕s[i], 其中 s 已知，故实际上我们拿到了 m[i]⊕k[i]. 在这里 k 是有周期的，且周期不超过38。如果知道了 k 的周期，那么用 Many-Time-Pad 就可以成功攻击。由于 <code>len(key)</code> 并不大，从大到小枚举 <code>len(key)</code>，肉眼判断是否为flag即可。最后发现 <code>len(key)=30</code> 是满足要求的。</p>\n<p>但是这种方法过于耗时费力</p>\n<p>2.汉明距离：一组二进制数据变成另一组数据所需的步骤数。对两组二进制数据进行异或运算，并统计结果为1的个数，那么这个数就是汉明距离。</p>\n<ul>\n<li>\n<p>根据扩展资料：</p>\n<ul>\n<li>\n<p>两个以ascii编码的英文字符的汉明距离是2-3之间，也就是说正常英文字母的平均汉明距离为2-3（每比特），任意字符（非纯字母）的两两汉明距离平均为4。</p>\n</li>\n<li>\n<p>正确分组的密文与密文的汉明距离等于明文与明文的汉明距离（可以通过按正确密钥长度分组的密文与密文异或等于明文与明文异或证明）</p>\n<p>因此，当我们使用了正确的密钥长度后，两两字母进行计算汉明距离，那么这个值应该是趋于最小。为了增加效率，我们不需要对每一对分组都计算汉明距离，只需取出前几对就可说明问题。当然为了排除偶然误差，结果不应该只取最小的那一个密钥长度，而是酌情多取几组</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"二-根据猜出的密文长度进行解密\">二.根据猜出的密文长度进行解密</h4>\n<p>两种方法：</p>\n<ul>\n<li>\n<p>合理利用明文的空格</p>\n<p>在使用异或加密的形式下，使用相同密钥加密的明文和秘文间存在这个规律，密文和密文异或等于明文和明文异或,并且二者的汉明距离一样。</p>\n<p>空格和所有小写字母异或结果是相应的大写字母，空格和所有大写字母异或是相应的小写字母。</p>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/t01dd9c90c1ecde8471.jpg\" alt=\"img\"></p>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/t0189dac1c8ab2412c8.jpg\" alt=\"img\"></p>\n<ol>\n<li>使用取模运算把密文分成n个分组（其中n是密钥长度），如此以来，我们就有了n个独立的凯撒加密式的密文组（因为每个分组里面的值是使用同一个密钥字节明文异或）。这样就把问题简化成了破解n个独立的凯撒加密模式的单字节抑或密码方式。这一步可以直接使用爆破，但是效率不高。我们采取另一种姿势。</li>\n<li>将2中的每个分组做如下的操作：每个分组做嵌套循环，内循环，外循环。设置外循环计数值possible*<em>space=0，max</em><em>possible=0，设置内循环计数值maxpossible=0,依次取出每个分组中的每一个字节做与其他字节两两抑或进行内循环，如果结果是字母，我们就把内循环计数值maxpossible+1,在每个内循环结束后进行max</em><em>possible的更新（与内循环maxpossible做对比），并记录当前字节的位置到possible</em><em>space，然后外循环继续。直至遍历完所有的字节。取出max</em><em>possible对应的字节位置possible</em>*space处的字节码，我们把它对应的明文假设成空格（根据之前的讨论）然后将该位置的字节和0x20（空格）异或;找出相应位置的密钥字节。</li>\n</ol>\n</li>\n</ul>\n<ol start=\"3\">\n<li>\n<p>重复2中的步骤，依次根据每个分组找出每位的密钥字节，至此密钥破解完毕</p>\n</li>\n<li>\n<p>将找出的密钥用于破解密文。当密文足够多，可以发现破解的准确率很高，基本可以做到无差别破解。</p>\n</li>\n</ol>\n<p><strong>词频分析</strong></p>\n<p><a href=\"https://codeleading.com/article/68135872581/\">https://codeleading.com/article/68135872581/</a></p>\n<h3 id=\"？-SUCTF2019-MT【移位】\">？[SUCTF2019]MT【移位】</h3>\n<p><a href=\"https://blog.csdn.net/m0_49109277/article/details/117324488\">https://blog.csdn.net/m0_49109277/article/details/117324488</a></p>\n<h3 id=\"AFCTF2018-tinylfsr\">[AFCTF2018]tinylfsr</h3>\n<p>根据给出的文件，发现两次文件加密</p>\n<ul>\n<li>plain-&gt;cipher</li>\n<li>flag-&gt;flag_encode</li>\n</ul>\n<p><a href=\"http://xn--encrypt-c46ow40i.py\">查看encrypt.py</a>，加密方式为</p>\n<ul>\n<li>前一部分：key与plain的前一部分xor</li>\n<li>后一部分：lfsr生成的密钥流与plain的后一部分xor</li>\n</ul>\n<p>进一步分析，可以发现key与mask位数是相同的，看了一下mask的位数是二进制64位，那么key的位数就是16进制16位，也就是8位ASCII字符.</p>\n<p>(不知道key长度的话，也可以遍历一下，再用该key对plain加密看是否与cipher相同)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cip = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;cipher.txt&#x27;</span>, <span class=\"string\">&#x27;rb&#x27;</span>).read()</span><br><span class=\"line\">msg = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;Plain.txt&#x27;</span>, <span class=\"string\">&#x27;rb&#x27;</span>).read()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(codecs.encode(strxor(cip, msg)[:<span class=\"number\">8</span>], <span class=\"string\">&#x27;hex&#x27;</span>))</span><br></pre></td></tr></table></figure>\n<p>接下来可以生成lfsr的密钥流，再依次解密（R要初始化为key）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key = <span class=\"string\">&#x27;0123456789abcdef&#x27;</span></span><br><span class=\"line\">R = <span class=\"built_in\">int</span>(key, <span class=\"number\">16</span>)</span><br><span class=\"line\">mask = <span class=\"number\">0b1101100000000000000000000000000000000000000000000000000000000000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">lfsr</span>(<span class=\"params\">R, mask</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># 左移1位：保留末尾 63 位，在最后添加一个0</span></span><br><span class=\"line\">    output = (R &lt;&lt; <span class=\"number\">1</span>) &amp; <span class=\"number\">0xffffffffffffffff</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># i：保留 R 的前 0、1、3、4位</span></span><br><span class=\"line\">    i = (R &amp; mask) &amp; <span class=\"number\">0xffffffffffffffff</span></span><br><span class=\"line\"></span><br><span class=\"line\">    lastbit = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> i != <span class=\"number\">0</span>:</span><br><span class=\"line\">        lastbit ^= (i &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">        i = i &gt;&gt; <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\"># lastbit：统计 i 里面有多少个1, 奇数个则为1, 偶数个则为0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># output: R 左移1位，再添加 lastbit</span></span><br><span class=\"line\">    output ^= lastbit</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (output, lastbit)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">cip = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;flag_encode.txt&#x27;</span>, <span class=\"string\">&#x27;rb&#x27;</span>).read()</span><br><span class=\"line\">a = <span class=\"string\">&#x27;&#x27;</span>.join([<span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(b, <span class=\"number\">16</span>)) <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> [key[i:i + <span class=\"number\">2</span>] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(key), <span class=\"number\">2</span>)]])</span><br><span class=\"line\"></span><br><span class=\"line\">ans = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(a)):</span><br><span class=\"line\">    ans += (<span class=\"built_in\">chr</span>((cip[i] ^ <span class=\"built_in\">ord</span>(a[i]))))</span><br><span class=\"line\"></span><br><span class=\"line\">lent = <span class=\"built_in\">len</span>(cip)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(a), lent):</span><br><span class=\"line\">    tmp = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">8</span>):</span><br><span class=\"line\">        (R, out) = lfsr(R, mask)</span><br><span class=\"line\">        tmp = (tmp &lt;&lt; <span class=\"number\">1</span>) ^ out</span><br><span class=\"line\">    ans += (<span class=\"built_in\">chr</span>(tmp ^ cip[i]))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(ans)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"秘密共享的门限方案\">秘密共享的门限方案</h2>\n<p>秘密共享的思想是将秘密以适当的方式拆分，拆分后的每一个份额由不同的参与者管理，单个参与者无法恢复秘密信息，只有若干个参与者一同协作才能恢复秘密消息。更重要的是，当其中任何相应范围内参与者出问题时，秘密仍可以完整恢复。</p>\n<p>秘密共享是一种将秘密分割存储的密码技术，目的是阻止秘密过于集中，以达到分散风险和容忍入侵的目的，是信息安全和数据保密中的重要手段</p>\n<h3 id=\"？-AFCTF2018-花开藏宝地【bloom方案】\">？[AFCTF2018]花开藏宝地【bloom方案】</h3>\n<p><a href=\"https://webencrypt.org/secretsharing/#bloom\">https://webencrypt.org/secretsharing/#bloom</a></p>\n<p><a href=\"http://www.matrix67.com/blog/archives/1261\">http://www.matrix67.com/blog/archives/1261</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a1 =<span class=\"number\">100459779913520540098065407420629954816677926423356769524759072632219106155849450125185205557491138357760494272691949199099803239098119602186117878931534968435982565071570831032814288620974807498206233914826253433847572703407678712965098320122549759579566316372220959610814573945698083909575005303253205653244238542300266460559790606278310650849881421791081944960157781855164700773081375247</span></span><br><span class=\"line\">d1 =<span class=\"number\">347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820820091</span></span><br><span class=\"line\">a2 =<span class=\"number\">305345133911395218573790903508296238659147802274031796643017539011648802808763162902335644195648525375518941848430114497150082025133000033835083076541927530829557051524161069423494451667848236452337271862085346869364976989047180532167560796470067549915390773271207901537847213882479997325575278672917648417868759077150999044891099206133296336190476413164240995177077671480352739572539631359</span></span><br><span class=\"line\">d2 =<span class=\"number\">347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820813413</span></span><br><span class=\"line\">a3 = <span class=\"number\">152012681270682340051690627924586232702552460810030322267827401771304907469802591861912921281833890613186317787813611372838066924894691892444503039545946728621696590087591246339208248647926966446848123290344911662916758039134817404720512465817867255277476717353439505243247568126193361558042940352204093381260402400739429050280526212446967632582771424597203000629197487733610187359662268583</span></span><br><span class=\"line\">d3 =<span class=\"number\">347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820818553</span></span><br><span class=\"line\"></span><br><span class=\"line\">dd = d1*d2*d3</span><br><span class=\"line\">t1 = <span class=\"built_in\">pow</span>(dd//d1,d1-<span class=\"number\">2</span>,d1)</span><br><span class=\"line\"><span class=\"keyword\">assert</span>(t1*d2*d3%d1 == <span class=\"number\">1</span>)</span><br><span class=\"line\">t2 = <span class=\"built_in\">pow</span>(dd//d2,d2-<span class=\"number\">2</span>,d2)</span><br><span class=\"line\"><span class=\"keyword\">assert</span>(t2*d1*d3%d2 == <span class=\"number\">1</span>)</span><br><span class=\"line\">t3 = <span class=\"built_in\">pow</span>(dd//d3,d3-<span class=\"number\">2</span>,d3)</span><br><span class=\"line\"><span class=\"keyword\">assert</span>(t3*d2*d1%d3 == <span class=\"number\">1</span>)</span><br><span class=\"line\">s = a1*t1*d2*d3+a2*t2*d1*d3+a3*t3*d1*d2</span><br><span class=\"line\">p = <span class=\"number\">80804238007977405688648566160504278593148666302626415149704905628622876270862865768337953835725801963142685182510812938072115996355782396318303927020705623120652014080032809421180400984242061592520733710243483947230962631945045134540159517488288781666622635328316972979183761952842010806304748313326215619695085380586052550443025074501971925005072999275628549710915357400946408857</span></span><br><span class=\"line\">s %= dd</span><br><span class=\"line\"><span class=\"comment\"># print(hex(s))</span></span><br><span class=\"line\">s %= p</span><br><span class=\"line\">s = <span class=\"built_in\">hex</span>(s)[<span class=\"number\">2</span>:]</span><br><span class=\"line\">flag = <span class=\"built_in\">list</span>(<span class=\"built_in\">bytearray</span>.fromhex(s))</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> flag:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">chr</span>(i),end=<span class=\"string\">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"RSA\">RSA</h2>\n<h4 id=\"HDCTF2019-together-【多文件共模攻击】\">[HDCTF2019]together  【多文件共模攻击】</h4>\n<p>先分别分析两个公钥文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;pubkey2.pem&quot;</span>,<span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    pub = RSA.importKey(f.read())</span><br><span class=\"line\">    n = pub.n</span><br><span class=\"line\">    e = pub.e</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(n,<span class=\"string\">&#x27;\\n&#x27;</span>,e)</span><br></pre></td></tr></table></figure>\n<p>发现n相同，e不同。可以利用共模攻击。读取myflag文件后需要base64解码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e1 = <span class=\"number\">2333</span></span><br><span class=\"line\">e2 = <span class=\"number\">23333</span></span><br><span class=\"line\">n = <span class=\"number\">14853081277902411240991719582265437298941606850989432655928075747449227799832389574251190347654658701773951599098366248661597113015221566041305501996451638624389417055956926238595947885740084994809382932733556986107653499144588614105694518150594105711438983069306254763078820574239989253573144558449346681620784979079971559976102366527270867527423001083169127402157598183442923364480383742653117285643026319914244072975557200353546060352744263637867557162046429886176035616570590229646013789737629785488326501654202429466891022723268768841320111152381619260637023031430545168618446134188815113100443559425057634959299</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;myflag1&#x27;</span>,<span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    c1 = base64.b64decode(f.read())</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(c1)</span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;myflag2&#x27;</span>,<span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    c2 = base64.b64decode(f.read())</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(c2)</span><br><span class=\"line\">gcd,s,t = gmpy2.gcdext(e1,e2)</span><br><span class=\"line\">c1 = libnum.s2n(c1)</span><br><span class=\"line\">c2 = libnum.s2n(c2)</span><br><span class=\"line\"><span class=\"keyword\">if</span> s &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">    s = -s</span><br><span class=\"line\">    c1 = gmpy2.invert(c1,n)</span><br><span class=\"line\"><span class=\"keyword\">if</span> t &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">    t = -t</span><br><span class=\"line\">    c2 = gmpy2.invert(c2,n)</span><br><span class=\"line\"></span><br><span class=\"line\">M = gmpy2.powmod(c1,s,n)*gmpy2.powmod(c2,t,n) % n</span><br><span class=\"line\">m = <span class=\"built_in\">hex</span>(M)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(m)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(codecs.decode(m[<span class=\"number\">2</span>:],<span class=\"string\">&#x27;hex&#x27;</span>))</span><br><span class=\"line\">m = m[<span class=\"number\">2</span>:]</span><br><span class=\"line\">missing_padding = <span class=\"number\">4</span> - <span class=\"built_in\">len</span>(m) % <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> missing_padding:</span><br><span class=\"line\">    m += <span class=\"string\">&#x27;=&#x27;</span> * missing_padding</span><br><span class=\"line\"><span class=\"built_in\">print</span>(base64.b64decode(m))</span><br></pre></td></tr></table></figure>\n<h4 id=\"MRCTF2020-babyRSA-【数学计算】\">[MRCTF2020]babyRSA 【数学计算】</h4>\n<p>看脚本</p>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/image-20211115232410660.png\" alt=\"image-20211115232410660\"></p>\n<p>过程都是和rsa一样，因此得到p，q即可正常解密</p>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/image-20211115232440411.png\" alt=\"image-20211115232440411\"></p>\n<p>生成p的方式中间有的和rsa类似，因此类比，phi为(P[i]-1)乘积</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">P = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">17</span>)]</span><br><span class=\"line\">P[<span class=\"number\">9</span>] = <span class=\"number\">206027926847308612719677572554991143421</span></span><br><span class=\"line\">n = <span class=\"number\">206027926847308612719677572554991143421</span></span><br><span class=\"line\">phi = <span class=\"number\">206027926847308612719677572554991143420</span></span><br><span class=\"line\">c = <span class=\"number\">213671742765908980787116579976289600595864704574134469173111790965233629909513884704158446946409910475727584342641848597858942209151114627306286393390259700239698869487469080881267182803062488043469138252786381822646126962323295676431679988602406971858136496624861228526070581338082202663895710929460596143281673761666804565161435963957655012011051936180536581488499059517946308650135300428672486819645279969693519039407892941672784362868653243632727928279698588177694171797254644864554162848696210763681197279758130811723700154618280764123396312330032986093579531909363210692564988076206283296967165522152288770019720928264542910922693728918198338839</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>,<span class=\"number\">17</span>):</span><br><span class=\"line\">    P[i] = sympy.nextprime(P[i-<span class=\"number\">1</span>])</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i, P[i])</span><br><span class=\"line\">    n*= P[i]</span><br><span class=\"line\">    phi *= P[i]-<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">8</span>,<span class=\"number\">0</span>,-<span class=\"number\">1</span>):</span><br><span class=\"line\">    P[i] = sympy.prevprime(P[i+<span class=\"number\">1</span>])</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i,P[i])</span><br><span class=\"line\">    n *= P[i]</span><br><span class=\"line\">    phi *= P[i]-<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(n)</span><br><span class=\"line\">e = <span class=\"number\">65537</span></span><br><span class=\"line\">d = gmpy2.invert(e,phi)</span><br><span class=\"line\">p = <span class=\"built_in\">pow</span>(c,d,n)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(p)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sympy.nextprime(p))</span><br></pre></td></tr></table></figure>\n<p>q直接根据计算即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q = pow(sub_q,q2,q1)</span><br></pre></td></tr></table></figure>\n<h4 id=\"De1CTF2019-babyrsa-【综合】\">[De1CTF2019]babyrsa 【综合】</h4>\n<p>依次分析所需要的参数</p>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/image-20211126163520911.png\" alt=\"image-20211126163520911\"></p>\n<p>根据中国剩余定理求得p^4，开四次方求得p为</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sympy.ntheory.modular <span class=\"keyword\">import</span> crt</span><br><span class=\"line\">m = [</span><br><span class=\"line\">    <span class=\"number\">20129615352491765499340112943188317180548761597861300847305827141510465619670536844634558246439230371658836928103063432870245707180355907194284861510906071265352409579441048101084995923962148527097370705452070577098780246282820065573711015664291991372085157016901209114191068574208680397710042842835940428451949500607613634682684113208766694028789275748528254287705759528498986306494267817198340658241873024800336013946294891687591013414935237821291805123285905335762719823771647853378892868896078424572232934360940672962436849523915563328779942134504499568866135266628078485232098208237036724121481835035731201383423</span>,</span><br><span class=\"line\">    <span class=\"number\">31221650155627849964466413749414700613823841060149524451234901677160009099014018926581094879840097248543411980533066831976617023676225625067854003317018794041723612556008471579060428898117790587991055681380408263382761841625714415879087478072771968160384909919958010983669368360788505288855946124159513118847747998656422521414980295212646675850690937883764000571667574381419144372824211798018586804674824564606122592483286575800685232128273820087791811663878057827386379787882962763290066072231248814920468264741654086011072638211075445447843691049847262485759393290853117072868406861840793895816215956869523289231421</span>,</span><br><span class=\"line\">    <span class=\"number\">29944537515397953361520922774124192605524711306753835303703478890414163510777460559798334313021216389356251874917792007638299225821018849648520673813786772452822809546571129816310207232883239771324122884804993418958309460009406342872173189008449237959577469114158991202433476710581356243815713762802478454390273808377430685157110095496727966308001254107517967559384019734279861840997239176254236069001453544559786063915970071130087811123912044312219535513880663913831358790376650439083660611831156205113873793106880255882114422025746986403355066996567909581710647746463994280444700922867397754748628425967488232530303</span>,</span><br><span class=\"line\">    <span class=\"number\">25703437855600135215185778453583925446912731661604054184163883272265503323016295700357253105301146726667897497435532579974951478354570415554221401778536104737296154316056314039449116386494323668483749833147800557403368489542273169489080222009368903993658498263905567516798684211462607069796613434661148186901892016282065916190920443378756167250809872483501712225782004396969996983057423942607174314132598421269169722518224478248836881076484639837343079324636997145199835034833367743079935361276149990997875905313642775214486046381368619638551892292787783137622261433528915269333426768947358552919740901860982679180791</span>]</span><br><span class=\"line\">r = [</span><br><span class=\"line\">    <span class=\"number\">19131432661217908470262338421299691998526157790583544156741981238822158563988520225986915234570037383888112724408392918113942721994125505014727545946133307329781747600302829588248042922635714391033431930411180545085316438084317927348705241927570432757892985091396044950085462429575440060652967253845041398399648442340042970814415571904057667028157512971079384601724816308078631844480110201787343583073815186771790477712040051157180318804422120472007636722063989315320863580631330647116993819777750684150950416298085261478841177681677867236865666207391847046483954029213495373613490690687473081930148461830425717614569</span>,</span><br><span class=\"line\">    <span class=\"number\">15341898433226638235160072029875733826956799982958107910250055958334922460202554924743144122170018355117452459472017133614642242411479849369061482860570279863692425621526056862808425135267608544855833358314071200687340442512856575278712986641573012456729402660597339609443771145347181268285050728925993518704899005416187250003304581230701444705157412790787027926810710998646191467130550713600765898234392350153965811595060656753711278308005193370936296124790772689433773414703645703910742193898471800081321469055211709339846392500706523670145259024267858368216902176489814789679472227343363035428541915118378163012031</span>,</span><br><span class=\"line\">    <span class=\"number\">18715065071648040017967211297231106538139985087685358555650567057715550586464814763683688299037897182845007578571401359061213777645114414642903077003568155508465819628553747173244235936586812445440095450755154357646737087071605811984163416590278352605433362327949048243722556262979909488202442530307505819371594747936223835233586945423522256938701002370646382097846105014981763307729234675737702252155130837154876831885888669150418885088089324534892506199724486783446267336789872782137895552509353583305880144947714110009893134162185382309992604435664777436197587312317224862723813510974493087450281755452428746194446</span>,</span><br><span class=\"line\">    <span class=\"number\">2282284561224858293138480447463319262474918847630148770112472703128549032592187797289965592615199709857879008271766433462032328498580340968871260189669707518557157836592424973257334362931639831072584824103123486522582531666152363874396482744561758133655406410364442174983227005501860927820871260711861008830120617056883514525798709601744088135999465598338635794275123149165498933580159945032363880613524921913023341209439657145962332213468573402863796920571812418200814817086234262280338221161622789516829363805084715652121739036183264026120868756523770196284142271849879003202190966150390061195469351716819539183797</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">a = crt(m,r)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(gmpy2.mpz(<span class=\"built_in\">pow</span>(a[<span class=\"number\">0</span>],<span class=\"number\">1</span>/<span class=\"number\">4</span>)))</span><br></pre></td></tr></table></figure>\n<p>109935857933867829728985398563235455481120300859311421762540858762721955038310117609456763338082237907005937380873151279351831600225270995344096532750271070807051984097524900957809427861441436796934012393707770012556604479065826879107677002380580866325868240270494148512743861326447181476633546419262340100453</p>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/image-20211126162739647.png\" alt=\"image-20211126162739647\"></p>\n<p>可以根据小公钥指数加密（m^e&lt;n 相对而言）</p>\n<p>解出e2=381791429275130</p>\n<p>e1 = 15218928658178</p>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/image-20211126162708811.png\" alt=\"image-20211126162708811\"></p>\n<p>分解n</p>\n<p>q1p即q1为127587319253436643569312142058559706815497211661083866592534217079310497260365307426095661281103710042392775453866174657404985539066741684196020137840472950102380232067786400322600902938984916355631714439668326671310160916766472897536055371474076089779472372913037040153356437528808922911484049460342088834871</p>\n<p>得到hint为</p>\n<p><strong>orz…you.found.me.but.sorry.no.hint…keep.on.and.enjoy.it!</strong></p>\n<p>最后，根据给出的条件看，一般情况用一个式子即可求解，但是报错无法求逆元d。发现gcd(e1,(p-1)(q1-1))=14。因此需要进行变形</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>c</mi><mn>1</mn><mo>=</mo><msup><mi>m</mi><mrow><mi>e</mi><mn>1</mn></mrow></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>p</mi><mo>∗</mo><mi>q</mi><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><msup><mi>m</mi><mn>14</mn></msup><msup><mo stretchy=\"false\">)</mo><mrow><mi>e</mi><mn>1</mn><mo>÷</mo><mn>14</mn></mrow></msup><mspace></mspace><mspace width=\"1em\"/><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mtext> </mtext><mtext> </mtext><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>p</mi><mo>∗</mo><mi>q</mi><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">c1=m^{e1}\\ mod\\ (p*q1)=(m^{14})^{e1\\div14}\\mod\\ (p*q1)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">14</span></span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">÷</span><span class=\"mord mtight\">14</span></span></span></span></span></span></span></span></span><span class=\"mspace allowbreak\"></span><span class=\"mspace\" style=\"margin-right:1em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">mod</span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>可以在此条件下求出m14 的通解(显然最小特解很大可能不是答案,因为这个解还需要满足第二个方程)</p>\n<p>第二个方程同理，用中国剩余定理求得m^14</p>\n<p>将同余方程组进行细化</p>\n<p>m^14 ☰a1 mod p<br>\nm^14 ☰ a1 mod q1<br>\nm^14 ☰ a2 mod p<br>\nm^14 ☰ a2 mod q2</p>\n<p>由于m的指数过大,我们尝试通过构造一个新的rsa式子来降解m的指数.理论上4个方程有6种合并方式.但是通过计算<strong>gcd(p-1,7)!=1</strong>所以如果选择p的话显然是行不通的.于是舍弃p,选择q1,q2进行合并.得到一个全新的方程以后再通过一般求解rsa的方法就可以了</p>\n<p>m^14 = (m^2)^7 mod (q1*q2)</p>\n<p>看作新的rsa，e为7，c为之前求得m^14，最后求得m^2，再分解即可</p>\n<h4 id=\"NPUCTF2020-认清形势，建立信心【选择明文攻击】\">[NPUCTF2020]认清形势，建立信心【选择明文攻击】</h4>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/image-20211128152817403.png\" alt=\"image-20211128152817403\"></p>\n<h4 id=\"NPUCTF2020-共模攻击-【coppersmith\">[NPUCTF2020]共模攻击 【coppersmith]</h4>\n<p>Coppersmith定理的内容为：在一个e阶的mod n多项式f(x)中，如果有一个根小于n^1/e，就可以运用一个O(log n)的算法求出这些根</p>\n<p>task中我们可以获取的信息有：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>c</mi><mn>1</mn><mo>=</mo><msup><mi>m</mi><mi>p</mi></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mo>=</mo><msup><mi>m</mi><mi>p</mi></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo>∗</mo><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">c1 = m^p\\ mod\\ n = m^p\\ mod \\ p*q\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7144em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9088em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>c</mi><mn>2</mn><mo>=</mo><msup><mi>m</mi><mi>q</mi></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mo>=</mo><msup><mi>m</mi><mi>q</mi></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo>∗</mo><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">c2 = m^q\\ mod\\ n = m^q\\ mod\\ p*q\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7144em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9088em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span></p>\n<p>因为p、q为素数，所以由费马定理可得：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msup><mi>m</mi><mi>p</mi></msup><mo>≡</mo><mi>m</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">m^p ≡ m\\ mod\\ p\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7144em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">p</span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msup><mi>m</mi><mi>q</mi></msup><mo>≡</mo><mi>m</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">m^q ≡ m\\ mod\\ q\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7144em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span></p>\n<p>所以，又有：</p>\n<p>c1 = m + ip + xpq，可整理成 c1 = m + ip</p>\n<p>c2 = m + jq + ypq，可整理成 c2 = m + jq</p>\n<p>因此：</p>\n<p>c1 * c2 = m2 + (ip + jq)m + ijn</p>\n<p>(c1 + c2)m = 2m2 + (ip+jq)m</p>\n<p>有： m2 - (c1 + c2)m + c1 * c2 = ijn ≡ 0 mod n</p>\n<p>最终的任务就是求m的值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n=<span class=\"number\">128205304743751985889679351195836799434324346996129753896234917982647254577214018524580290192396070591032007818847697193260130051396080104704981594190602854241936777324431673564677900773992273463534717009587530152480725448774018550562603894883079711995434332008363470321069097619786793617099517770260029108149</span></span><br><span class=\"line\">c1=<span class=\"number\">96860654235275202217368130195089839608037558388884522737500611121271571335123981588807994043800468529002147570655597610639680977780779494880330669466389788497046710319213376228391138021976388925171307760030058456934898771589435836261317283743951614505136840364638706914424433566782044926111639955612412134198</span></span><br><span class=\"line\">c2=<span class=\"number\">9566853166416448316408476072940703716510748416699965603380497338943730666656667456274146023583837768495637484138572090891246105018219222267465595710692705776272469703739932909158740030049375350999465338363044226512016686534246611049299981674236577960786526527933966681954486377462298197949323271904405241585</span></span><br><span class=\"line\"></span><br><span class=\"line\">PR.&lt;m&gt; = PolynomialRing(Zmod(n))</span><br><span class=\"line\"><span class=\"comment\">#Zmod(n):指定模，定义界限为n的环；Z表示整数；指定模是划定这个环的界限，就是有效的数字只有从0到n，其他的都通过与n取模来保证在0～n这个范围内；Zmod代表这是一个整数域中的n模环</span></span><br><span class=\"line\"><span class=\"comment\">#ZZ：整数环；QQ：有理数环；RR：实数环；CC：复数环</span></span><br><span class=\"line\"><span class=\"comment\">#PR：只是一个指针，指向用polynomialring指定的那个环（可以使用任意字符）</span></span><br><span class=\"line\"><span class=\"comment\">#PolynomialRing：这个就是说建立多项式环</span></span><br><span class=\"line\"><span class=\"comment\">#.&lt;m&gt;：指定一个变量的意思（可以用任意字符）</span></span><br><span class=\"line\">f = m^<span class=\"number\">2</span>-(c1+c2)*m+c1*c2</span><br><span class=\"line\">x0 = f.small_roots(X=<span class=\"number\">2</span>^<span class=\"number\">400</span>)</span><br><span class=\"line\"><span class=\"comment\">#x的绝对边界，因为m&lt;400bits，所以设为2^400</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(x0)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://xz.aliyun.com/t/6813\">https://xz.aliyun.com/t/6813</a></p>\n<p>coppersmith攻击总结https://www.ruanx.net/coppersmith/</p>\n<h4 id=\"QCTF2018-Xman-RSA\">[QCTF2018]Xman-RSA</h4>\n<p>查看encryption.encrypted，看代码应该是作了一个简单的替换加密，使用quipquip进行频率分析，还原出代码（其中大写的T没有作替换）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> gmpy2 <span class=\"keyword\">import</span> is_prime </span><br><span class=\"line\"><span class=\"keyword\">from</span> os <span class=\"keyword\">import</span> urandom </span><br><span class=\"line\"><span class=\"keyword\">import</span> base64 </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bytes_to_num</span>(<span class=\"params\">b</span>):</span> </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">int</span>(b.encode(<span class=\"string\">&#x27;hex&#x27;</span>), <span class=\"number\">16</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">num_to_bytes</span>(<span class=\"params\">n</span>):</span> </span><br><span class=\"line\">\tb = <span class=\"built_in\">hex</span>(n)[<span class=\"number\">2</span>:-<span class=\"number\">1</span>] </span><br><span class=\"line\">\tb = <span class=\"string\">&#x27;0&#x27;</span> + b <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(b)%<span class=\"number\">2</span> == <span class=\"number\">1</span> <span class=\"keyword\">else</span> b </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> b.decode(<span class=\"string\">&#x27;hex&#x27;</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_a_prime</span>(<span class=\"params\">l</span>):</span> </span><br><span class=\"line\">\trandom_seed = urandom(l) </span><br><span class=\"line\">\tnum = bytes_to_num(random_seed) </span><br><span class=\"line\">\t<span class=\"keyword\">while</span> <span class=\"literal\">True</span>: </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> is_prime(num): </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span> </span><br><span class=\"line\">\t\tnum+=<span class=\"number\">1</span> </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> num </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">encrypt</span>(<span class=\"params\">s, e, n</span>):</span> </span><br><span class=\"line\">\tp = bytes_to_num(s) </span><br><span class=\"line\">\tp = <span class=\"built_in\">pow</span>(p, e, n) </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> num_to_bytes(p).encode(<span class=\"string\">&#x27;hex&#x27;</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">separate</span>(<span class=\"params\">n</span>):</span> </span><br><span class=\"line\">\tp = n % <span class=\"number\">4</span> </span><br><span class=\"line\">\tt = (p*p) % <span class=\"number\">4</span> </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> t == <span class=\"number\">1</span> </span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;flag.txt&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>) </span><br><span class=\"line\">flag = f.read() </span><br><span class=\"line\"></span><br><span class=\"line\">msg1 = <span class=\"string\">&quot;&quot;</span> </span><br><span class=\"line\">msg2 = <span class=\"string\">&quot;&quot;</span> </span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(flag)): </span><br><span class=\"line\">\t<span class=\"keyword\">if</span> separate(i): </span><br><span class=\"line\">\t\tmsg2 += flag[i] </span><br><span class=\"line\">\t<span class=\"keyword\">else</span>: </span><br><span class=\"line\">\t\tmsg1 += flag[i]</span><br><span class=\"line\"></span><br><span class=\"line\">p1 = get_a_prime(<span class=\"number\">128</span>) </span><br><span class=\"line\">p2 = get_a_prime(<span class=\"number\">128</span>) </span><br><span class=\"line\">p3 = get_a_prime(<span class=\"number\">128</span>) </span><br><span class=\"line\">n1 = p1*p2 </span><br><span class=\"line\">n2 = p1*p3 </span><br><span class=\"line\">e = <span class=\"number\">0x1001</span> </span><br><span class=\"line\">c1 = encrypt(msg1, e, n1) </span><br><span class=\"line\">c2 = encrypt(msg2, e, n2) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(c1) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(c2) </span><br><span class=\"line\">e1 = <span class=\"number\">0x1001</span> </span><br><span class=\"line\">e2 = <span class=\"number\">0x101</span> </span><br><span class=\"line\">p4 = get_a_prime(<span class=\"number\">128</span>) </span><br><span class=\"line\">p5 = get_a_prime(<span class=\"number\">128</span>) </span><br><span class=\"line\">n3 = p4*p5 </span><br><span class=\"line\">c1 = num_to_bytes(<span class=\"built_in\">pow</span>(n1, e1, n3)).encode(<span class=\"string\">&#x27;hex&#x27;</span>) </span><br><span class=\"line\">c2 = num_to_bytes(<span class=\"built_in\">pow</span>(n1, e2, n3)).encode(<span class=\"string\">&#x27;hex&#x27;</span>) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(c1) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(c2) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(base64.b64encode(num_to_bytes(n2))) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(base64.b64encode(num_to_bytes(n3)))</span><br></pre></td></tr></table></figure>\n<p>进一步分析文件，n1中的应该是59、60行中的c1、c2，ciphertext是上面真正和flag有关的的c1、c2，最后是n2和n3</p>\n<p>先求得n2和n3的值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n2 = <span class=\"string\">&quot;PVNHb2BfGAnmxLrbKhgsYXRwWIL9eOj6K0s3I0slKHCTXTAUtZh3T0r+RoSlhpO3+77AY8P7WETYz2Jzuv5FV/mMODoFrM5fMyQsNt90VynR6J3Jv+fnPJPsm2hJ1Fqt7EKaVRwCbt6a4BdcRoHJsYN/+eh7k/X+FL5XM7viyvQxyFawQrhSV79FIoX6xfjtGW+uAeVF7DScRcl49dlwODhFD7SeLqzoYDJPIQS+VSb3YtvrDgdV+EhuS1bfWvkkXRijlJEpLrgWYmMdfsYX8u/+Ylf5xcBGn3hv1YhQrBCg77AHuUF2w/gJ/ADHFiMcH3ux3nqOsuwnbGSr7jA6Cw==&quot;</span></span><br><span class=\"line\">n3 = <span class=\"string\">&quot;TmNVbWUhCXR1od3gBpM+HGMKK/4ErfIKITxomQ/QmNCZlzmmsNyPXQBiMEeUB8udO7lWjQTYGjD6k21xjThHTNDG4z6C2cNNPz73VIaNTGz0hrh6CmqDowFbyrk+rv53QSkVKPa8EZnFKwGz9B3zXimm1D+01cov7V/ZDfrHrEjsDkgK4ZlrQxPpZAPl+yqGlRK8soBKhY/PF3/GjbquRYeYKbagpUmWOhLnF4/+DP33ve/EpaSAPirZXzf8hyatL4/5tAZ0uNq9W6T4GoMG+N7aS2GeyUA2sLJMHymW4cFK5l5kUvjslRdXOHTmz5eHxqIV6TmSBQRgovUijlNamQ==&quot;</span></span><br><span class=\"line\">n2 = bytes_to_long(base64.b64decode(n2))</span><br><span class=\"line\">n3 = bytes_to_long(base64.b64decode(n3))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(n2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(n3)</span><br></pre></td></tr></table></figure>\n<p>然后共模攻击，求得n1的值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c1 = <span class=\"string\">&quot;2639c28e3609a4a8c953cca9c326e8e062756305ae8aee6efcd346458aade3ee8c2106ab9dfe5f470804f366af738aa493fd2dc26cb249a922e121287f3eddec0ed8dea89747dc57aed7cd2089d75c23a69bf601f490a64f73f6a583081ae3a7ed52238c13a95d3322065adba9053ee5b12f1de1873dbad9fbf4a50a2f58088df0fddfe2ed8ca1118c81268c8c0fd5572494276f4e48b5eb424f116e6f5e9d66da1b6b3a8f102539b690c1636e82906a46f3c5434d5b04ed7938861f8d453908970eccef07bf13f723d6fdd26a61be8b9462d0ddfbedc91886df194ea022e56c1780aa6c76b9f1c7d5ea743dc75cec3c805324e90ea577fa396a1effdafa3090&quot;</span></span><br><span class=\"line\">c2 = <span class=\"string\">&quot;42ff1157363d9cd10da64eb4382b6457ebb740dbef40ade9b24a174d0145adaa0115d86aa2fc2a41257f2b62486eaebb655925dac78dd8d13ab405aef5b8b8f9830094c712193500db49fb801e1368c73f88f6d8533c99c8e7259f8b9d1c926c47215ed327114f235ba8c873af7a0052aa2d32c52880db55c5615e5a1793b690c37efdd5e503f717bb8de716303e4d6c4116f62d81be852c5d36ef282a958d8c82cf3b458dcc8191dcc7b490f227d1562b1d57fbcf7bf4b78a5d90cd385fd79c8ca4688e7d62b3204aeaf9692ba4d4e44875eaa63642775846434f9ce51d138ca702d907849823b1e86896e4ea6223f93fae68b026cfe5fa5a665569a9e3948a&quot;</span></span><br><span class=\"line\">c1 = codecs.decode(c1,<span class=\"string\">&#x27;hex&#x27;</span>)</span><br><span class=\"line\">c1 = bytes_to_long(c1)</span><br><span class=\"line\">c2 = bytes_to_long(codecs.decode(c2,<span class=\"string\">&#x27;hex&#x27;</span>))</span><br><span class=\"line\">e1 = <span class=\"number\">0x1001</span></span><br><span class=\"line\">e2 = <span class=\"number\">0x101</span></span><br><span class=\"line\">n = n3</span><br><span class=\"line\">gcd,s,t = gmpy2.gcdext(e1,e2)</span><br><span class=\"line\"><span class=\"keyword\">if</span> s &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">    s = -s</span><br><span class=\"line\">    c1 = gmpy2.invert(c1,n)</span><br><span class=\"line\"><span class=\"keyword\">if</span> t &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">    t = -t</span><br><span class=\"line\">    c2 = gmpy2.invert(c2,n)</span><br><span class=\"line\"></span><br><span class=\"line\">M = gmpy2.powmod(c1,s,n)*gmpy2.powmod(c2,t,n) % n</span><br><span class=\"line\"><span class=\"built_in\">print</span>(M)</span><br><span class=\"line\">n1 = M</span><br></pre></td></tr></table></figure>\n<p>最后求解得到msg1，msg2。再分析separate函数，发现只是交错分割flag</p>\n<p>所以还原即可。</p>\n<p>注意字节码需要decode()转换为字符串。</p>\n<p>给到的函数num_to_bytes不知道为什么可能有一点小问题，最后需要改用long_to_bytes</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = gmpy2.gcd(n1,n2)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decrypt</span>(<span class=\"params\">c,e,n</span>):</span></span><br><span class=\"line\">    c = bytes_to_num(codecs.decode(c,<span class=\"string\">&#x27;hex&#x27;</span>))</span><br><span class=\"line\">    q = <span class=\"built_in\">divmod</span>(n,p)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    phi_n = (p-<span class=\"number\">1</span>)*(q-<span class=\"number\">1</span>)</span><br><span class=\"line\">    d = gmpy2.invert(e,phi_n)</span><br><span class=\"line\">    m = <span class=\"built_in\">pow</span>(c,d,n)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> long_to_bytes(m)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">c1 = <span class=\"string\">&quot;1240198b148089290e375b999569f0d53c32d356b2e95f5acee070f016b3bef243d0b5e46d9ad7aa7dfe2f21bda920d0ac7ce7b1e48f22b2de410c6f391ce7c4347c65ffc9704ecb3068005e9f35cbbb7b27e0f7a18f4f42ae572d77aaa3ee189418d6a07bab7d93beaa365c98349d8599eb68d21313795f380f05f5b3dfdc6272635ede1f83d308c0fdb2baf444b9ee138132d0d532c3c7e60efb25b9bf9cb62dba9833aa3706344229bd6045f0877661a073b6deef2763452d0ad7ab3404ba494b93fd6dfdf4c28e4fe83a72884a99ddf15ca030ace978f2da87b79b4f504f1d15b5b96c654f6cd5179b72ed5f84d3a16a8f0d5bf6774e7fd98d27bf3c9839&quot;</span></span><br><span class=\"line\">c2 = <span class=\"string\">&quot;129d5d4ab3f9e8017d4e6761702467bbeb1b884b6c4f8ff397d078a8c41186a3d52977fa2307d5b6a0ad01fedfc3ba7b70f776ba3790a43444fb954e5afd64b1a3abeb6507cf70a5eb44678a886adf81cb4848a35afb4db7cd7818f566c7e6e2911f5ababdbdd2d4ff9825827e58d48d5466e021a64599b3e867840c07e29582961f81643df07f678a61a9f9027ebd34094e272dfbdc4619fa0ac60f0189af785df77e7ec784e086cf692a7bf7113a7fb8446a65efa8b431c6f72c14bcfa49c9b491fb1d87f2570059e0f13166a85bb555b40549f45f04bc5dbd09d8b858a5382be6497d88197ffb86381085756365bd757ec3cdfa8a77ba1728ec2de596c5ab&quot;</span></span><br><span class=\"line\">e = <span class=\"number\">0x1001</span></span><br><span class=\"line\">msg1 = decrypt(c1,e,n1).decode()</span><br><span class=\"line\">msg2 = decrypt(c2,e,n2).decode()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">flag = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">len</span> = <span class=\"built_in\">len</span>(msg2) + <span class=\"built_in\">len</span>(msg1)</span><br><span class=\"line\">tmp1 = <span class=\"number\">0</span></span><br><span class=\"line\">tmp2 = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>//<span class=\"number\">2</span>):</span><br><span class=\"line\">    flag += <span class=\"built_in\">str</span>(msg1[tmp1])</span><br><span class=\"line\">    flag += <span class=\"built_in\">str</span>(msg2[tmp2])</span><br><span class=\"line\">    tmp1+=<span class=\"number\">1</span></span><br><span class=\"line\">    tmp2+=<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag)</span><br></pre></td></tr></table></figure>\n<h4 id=\"羊城杯-2020-RRRRRRRSA-【wiener-attack】\">[羊城杯 2020]RRRRRRRSA 【wiener attack】</h4>\n<p>wiener attack：依靠连分数进行攻击，适用于非常接近某一值（如1）时，求一个比例关系，通过该比例关系再反推关键信息。</p>\n<p>适用于解密指数d很小，满足以下条件</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>d</mi><mo>&lt;</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>3</mn><mtext> </mtext><mo>∗</mo><msup><mi>N</mi><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>4</mn></mrow></msup><mspace linebreak=\"newline\"></mspace><mi>q</mi><mo>&lt;</mo><mi>p</mi><mo>&lt;</mo><mn>2</mn><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">d &lt; 1/3\\ * N^{1/4}\n\\\\\nq &lt; p &lt; 2q\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/3</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.938em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1/4</span></span></span></span></span></span></span></span></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span></p>\n<p>一般用法：根据</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>e</mi><mi>d</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mi>h</mi><mi>i</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">ed\\ mod\\ phi(n) = 1\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">hi</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></span></p>\n<p>得到</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>e</mi><mo>∗</mo><mi>d</mi><mo>=</mo><mn>1</mn><mo>+</mo><mi>k</mi><mo>∗</mo><mi>p</mi><mi>h</mi><mi>i</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><mtext>即 </mtext><mi>e</mi><mi mathvariant=\"normal\">/</mi><mi>p</mi><mi>h</mi><mi>i</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>k</mi><mi mathvariant=\"normal\">/</mi><mi>d</mi><mo>+</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>d</mi><mo>∗</mo><mi>p</mi><mi>h</mi><mi>i</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><mtext>而 </mtext><mi>p</mi><mi>h</mi><mi>i</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mtext>接近于</mtext><mi>n</mi><mspace linebreak=\"newline\"></mspace><mi>e</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi><mo>−</mo><mi>k</mi><mi mathvariant=\"normal\">/</mi><mi>d</mi><mo>=</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>d</mi><mo>∗</mo><mi>p</mi><mi>h</mi><mi>i</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><mi>e</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi><mtext>与</mtext><mi>k</mi><mi mathvariant=\"normal\">/</mi><mi>d</mi><mtext>非常接近</mtext><mspace linebreak=\"newline\"></mspace></mrow><annotation encoding=\"application/x-tex\">e*d = 1 + k*phi(n) \\\\\n即\\ e/phi(n) = k/d + 1/d*phi(n)\n\\\\ 而\\ phi(n)接近于n \n\\\\ e/n - k/d = 1/d*phi(n)\n\\\\ e/n 与 k/d非常接近\n\\\\ \n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4653em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">hi</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\">即</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">e</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">hi</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">hi</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\">而</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">hi</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mord cjk_fallback\">接近于</span><span class=\"mord mathnormal\">n</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">hi</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">n</span><span class=\"mord cjk_fallback\">与</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">d</span><span class=\"mord cjk_fallback\">非常接近</span></span><span class=\"mspace newline\"></span></span></span></span></p>\n<p>而e/N又是已知的,因此对e/N进行连分数展开，得到的一串分数的分母很有可能就是d，只要检验一下 ed mod phi(n) 看它是不是1就知道对不对了。</p>\n<p>本题特殊之处：e与N并没有近到相除约为1的地步，相差还是很大的，也就是说解密指数d也许还是很大的，这样就解不出来。但是N1和N2的关系却适合。</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>N</mi><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>N</mi><mn>2</mn><mo>=</mo><mo stretchy=\"false\">(</mo><mi>p</mi><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>p</mi><mn>2</mn><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mtext> </mtext><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>q</mi><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>q</mi><mn>2</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">N1/N2=(p1/p2)^2\\ * (q1/q2)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord\">1/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mord\">1/</span><span class=\"mord mathnormal\">p</span><span class=\"mord\">2</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mord\">1/</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>显然我们可以知道的是N1/N2 &lt;Q1/Q2，所以在Q1/Q2在区间(N1/N2,1)之间，尝试对N1/N2进行连分数展开并求其各项渐进分数，其中某个连分数的分母可能就是Q1（这个可以依靠N%Q来验证）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">N1 =</span><br><span class=\"line\">N2 =</span><br><span class=\"line\"><span class=\"comment\">#求连分数的项</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">continuedfra</span>(<span class=\"params\">x,y</span>):</span></span><br><span class=\"line\">    cf = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> y:</span><br><span class=\"line\">        cf += [x//y]</span><br><span class=\"line\">        x,y = y,x%y</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cf</span><br><span class=\"line\"><span class=\"comment\">#得到分子和分母</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">simplify</span>(<span class=\"params\">c</span>):</span></span><br><span class=\"line\">    numrator = <span class=\"number\">0</span> <span class=\"comment\">#分子</span></span><br><span class=\"line\">    denominator = <span class=\"number\">1</span> <span class=\"comment\">#分母</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> c[::-<span class=\"number\">1</span>]: <span class=\"comment\">#倒序遍历？</span></span><br><span class=\"line\">        numrator,denominator = denominator,x * denominator + numrator</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (numrator,denominator) <span class=\"comment\">#连分数生成分子和算出来的分母？</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getit</span>(<span class=\"params\">c</span>):</span></span><br><span class=\"line\">    cf = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(c)):</span><br><span class=\"line\">        cf.append(simplify(c[:i]))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wiener</span>(<span class=\"params\">e,n</span>):</span></span><br><span class=\"line\">    cf = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Q2,Q1) <span class=\"keyword\">in</span> getit(cf):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> Q1 == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> N1%Q1 == <span class=\"number\">0</span> <span class=\"keyword\">and</span> Q1 != <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Q1</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;not found&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">Q1 = wiener(N1,N2)</span><br></pre></td></tr></table></figure>\n<h4 id=\"！-watevrCTF-2019-Swedish-RSA【多项式】\">！[watevrCTF 2019]Swedish RSA【多项式】</h4>\n<p><a href=\"https://blog.csdn.net/MikeCoke/article/details/113800879\">https://blog.csdn.net/MikeCoke/article/details/113800879</a></p>\n<p>多项式的欧拉函数：对于多项式P(y)来讲，欧拉函数phi(P(y))表示所有不高于P(y)幂级的环内所有多项式中，与P(y)无（除1以外）公因式的其他多项式的个数。</p>\n<h4 id=\"美团CTF-hambersa-【PP】\">[美团CTF]hambersa 【PP】</h4>\n<p>x, y = len(str§), len(str(q))<br>\nP = 10^x * p + p<br>\nQ = 10^y * q + q<br>\n同理<br>\nPP = 10^x’ * P + Q<br>\nQQ = 10^y’ * Q + P</p>\n<p>N = 10^(x+x’+y+y’)pq+…+pq</p>\n<p>sage代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decrypt_RSA</span>(<span class=\"params\">c, e, p, q</span>):</span></span><br><span class=\"line\">    phi = (p-<span class=\"number\">1</span>) * (q-<span class=\"number\">1</span>)</span><br><span class=\"line\">    d = inverse(e, phi)</span><br><span class=\"line\">    m = <span class=\"built_in\">pow</span>(c, d, p*q)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(long_to_bytes(m))</span><br><span class=\"line\"></span><br><span class=\"line\">n = <span class=\"number\">177269125756508652546242326065138402971542751112423326033880862868822164234452280738170245589798474033047460920552550018968571267978283756742722231922451193</span></span><br><span class=\"line\">c = <span class=\"number\">47718022601324543399078395957095083753201631332808949406927091589044837556469300807728484035581447960954603540348152501053100067139486887367207461593404096</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">low = <span class=\"built_in\">str</span>(n)[-<span class=\"number\">18</span>:]</span><br><span class=\"line\">high = <span class=\"built_in\">str</span>(n)[:<span class=\"number\">18</span>]</span><br><span class=\"line\">pq_prob = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">            pq_prob.append(<span class=\"built_in\">int</span>(high + <span class=\"built_in\">str</span>(i) + <span class=\"built_in\">str</span>(j)+ <span class=\"built_in\">str</span>(k) + low))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> tqdm(pq_prob):</span><br><span class=\"line\">    f = factor(x)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">len</span>(f) == <span class=\"number\">2</span> <span class=\"keyword\">and</span> f[<span class=\"number\">0</span>][<span class=\"number\">0</span>].nbits() == <span class=\"number\">64</span>):</span><br><span class=\"line\">        p, q = f[<span class=\"number\">0</span>][<span class=\"number\">0</span>], f[<span class=\"number\">1</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">P = <span class=\"built_in\">int</span>(<span class=\"built_in\">str</span>(p) + <span class=\"built_in\">str</span>(p))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(P)</span><br><span class=\"line\">Q = <span class=\"built_in\">int</span>(<span class=\"built_in\">str</span>(q) + <span class=\"built_in\">str</span>(q))</span><br><span class=\"line\">PP = <span class=\"built_in\">int</span>(<span class=\"built_in\">str</span>(P) + <span class=\"built_in\">str</span>(Q))</span><br><span class=\"line\">QQ = <span class=\"built_in\">int</span>(<span class=\"built_in\">str</span>(Q) + <span class=\"built_in\">str</span>(P))</span><br><span class=\"line\">N = PP * QQ</span><br><span class=\"line\"><span class=\"built_in\">print</span>(N == n)</span><br><span class=\"line\">decrypt_RSA(c, <span class=\"number\">65537</span>, PP, QQ)```</span><br></pre></td></tr></table></figure>\n<h4 id=\"NCTF2019-easyrsa【e，phi不互素】\">[NCTF2019]easyrsa【e，phi不互素】</h4>\n<p><a href=\"http://yulige.top/?p=752#easyRSA909pt_2solvers\">http://yulige.top/?p=752#easyRSA909pt_2solvers</a></p>\n<p>然而本题则为<code>e</code>和<code>p-1</code>(或<code>q-1</code>)的最大公约数就是<code>e</code>本身，也就是说<code>e | p-1</code>，只有对<code>c</code>开<code>e</code>次方根才行，但是e很大，暴力计算所需时间很长。<br>\n可以将同余方程</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msup><mi>m</mi><mi>e</mi></msup><mo>≡</mo><mi>c</mi><mspace width=\"1em\"/><mo stretchy=\"false\">(</mo><mtext>mod </mtext><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">m^e \\equiv c \\quad (\\text{mod}\\ n)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7144em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">e</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mopen\">(</span><span class=\"mord text\"><span class=\"mord\">mod</span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>化成</mtext><mspace linebreak=\"newline\"></mspace><mtable rowspacing=\"0.25em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msup><mi>m</mi><mi>e</mi></msup></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>≡</mo><mi>c</mi><mspace width=\"1em\"/><mo stretchy=\"false\">(</mo><mtext>mod </mtext><mi>p</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msup><mi>m</mi><mi>e</mi></msup></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>≡</mo><mi>c</mi><mspace width=\"1em\"/><mo stretchy=\"false\">(</mo><mtext>mod </mtext><mi>q</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding=\"application/x-tex\">化成\\\\ \n\\begin{aligned}\nm^e &amp;\\equiv c \\quad (\\text{mod}\\ p)\\newline\nm^e &amp;\\equiv c \\quad (\\text{mod}\\ q)\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\">化成</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:3em;vertical-align:-1.25em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.75em;\"><span style=\"top:-3.91em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">e</span></span></span></span></span></span></span></span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">e</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.25em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.75em;\"><span style=\"top:-3.91em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mopen\">(</span><span class=\"mord text\"><span class=\"mord\">mod</span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mopen\">(</span><span class=\"mord text\"><span class=\"mord\">mod</span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.25em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>然后分别在<code>GF(p)</code>和<code>GF(q)</code>上对<code>c</code>开<code>e=0x1337</code>次方根，再用<code>CRT</code>组合一下即可得到在<code>mod n</code>下的解</p>\n<p>**有限域内开根： **</p>\n<p>e与p-1和q-1都不互素，不能简单求个逆元</p>\n<p>开平方根可以用 <code>Tonelli-Shanks</code>算法，可以扩展到开n次方根</p>\n<p>这篇<a href=\"https://arxiv.org/pdf/1111.4877.pdf\">paper</a> 里给出了具体的算法：<code>Adleman-Manders-Miller rth Root Extraction Method</code></p>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/QNy9EWc7K4enJGu.jpg\" alt=\"Adleman-Manders-Miller cubic root extraction method\"></p>\n<p><a href=\"https://jayxv.github.io/2019/12/04/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%B5%85%E6%9E%90On%20r-th%20Root%20Extraction%20Algorithm%20in%20Fq/\">数学证明以后再看吧2333</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">AMM</span>(<span class=\"params\">o, r, q</span>):</span></span><br><span class=\"line\">    start = time.time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\n----------------------------------------------------------------------------------&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Start to run Adleman-Manders-Miller Root Extraction Method&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Try to find one &#123;:#x&#125;th root of &#123;&#125; modulo &#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(r, o, q))</span><br><span class=\"line\">    g = GF(q)</span><br><span class=\"line\">    o = g(o)</span><br><span class=\"line\">    p = g(random.randint(<span class=\"number\">1</span>, q))</span><br><span class=\"line\">    <span class=\"keyword\">while</span> p ^ ((q-<span class=\"number\">1</span>) // r) == <span class=\"number\">1</span>:</span><br><span class=\"line\">        p = g(random.randint(<span class=\"number\">1</span>, q))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[+] Find p:&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(p))</span><br><span class=\"line\">    t = <span class=\"number\">0</span></span><br><span class=\"line\">    s = q - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> s % r == <span class=\"number\">0</span>:</span><br><span class=\"line\">        t += <span class=\"number\">1</span></span><br><span class=\"line\">        s = s // r</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[+] Find s:&#123;&#125;, t:&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(s, t))</span><br><span class=\"line\">    k = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (k * s + <span class=\"number\">1</span>) % r != <span class=\"number\">0</span>:</span><br><span class=\"line\">        k += <span class=\"number\">1</span></span><br><span class=\"line\">    alp = (k * s + <span class=\"number\">1</span>) // r</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[+] Find alp:&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(alp))</span><br><span class=\"line\">    a = p ^ (r**(t-<span class=\"number\">1</span>) * s)</span><br><span class=\"line\">    b = o ^ (r*alp - <span class=\"number\">1</span>)</span><br><span class=\"line\">    c = p ^ s</span><br><span class=\"line\">    h = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, t):</span><br><span class=\"line\">        d = b ^ (r^(t-<span class=\"number\">1</span>-i))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> d == <span class=\"number\">1</span>:</span><br><span class=\"line\">            j = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[+] Calculating DLP...&#x27;</span>)</span><br><span class=\"line\">            j = - discrete_log(d, a)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[+] Finish DLP...&#x27;</span>)</span><br><span class=\"line\">        b = b * (c^r)^j</span><br><span class=\"line\">        h = h * c^j</span><br><span class=\"line\">        c = c^r</span><br><span class=\"line\">    result = o^alp * h</span><br><span class=\"line\">    end = time.time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Finished in &#123;&#125; seconds.&quot;</span>.<span class=\"built_in\">format</span>(end - start))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Find one solution: &#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(result))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n<p>但该算法只能求得一个根，实际上开0x1337次方，最多会有0x1337个根。</p>\n<p>那么如何找到其他根呢？</p>\n<p>先找到所有0x1336个proot使得</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>p</mi><mi>r</mi><mi>o</mi><mi>o</mi><msup><mi>t</mi><mi>e</mi></msup><mo>=</mo><mn>1</mn><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">proot^e = 1 (mod\\ p)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9088em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">roo</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">e</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>然后乘以上面求得的根即可。</p>\n<p>由于</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>o</mi><msup><mi>t</mi><mrow><mi>p</mi><mo>−</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>e</mi></mrow></msup><msup><mo stretchy=\"false\">)</mo><mi>e</mi></msup><mo>=</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>o</mi><msup><mi>t</mi><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mn>1</mn><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(proot^{p-1/e})^e = proot^{p-1} = 1 (mod\\ p)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.188em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">roo</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1/</span><span class=\"mord mathnormal mtight\">e</span></span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">e</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0585em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">roo</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>所以只需要</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findAllPRoot</span>(<span class=\"params\">p, e</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Start to find all the Primitive &#123;:#x&#125;th root of 1 modulo &#123;&#125;.&quot;</span>.<span class=\"built_in\">format</span>(e, p))</span><br><span class=\"line\">    start = time.time()</span><br><span class=\"line\">    proot = <span class=\"built_in\">set</span>()</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(proot) &lt; e:</span><br><span class=\"line\">        g = <span class=\"built_in\">pow</span>(random.randint(<span class=\"number\">2</span>, p-<span class=\"number\">1</span>), (p-<span class=\"number\">1</span>)//e, p)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">pow</span>(g,e//<span class=\"number\">2</span>,p) != <span class=\"number\">1</span>:</span><br><span class=\"line\">            proot.add(g)</span><br><span class=\"line\">    end = time.time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Finished in &#123;&#125; seconds.&quot;</span>.<span class=\"built_in\">format</span>(end - start))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> proot</span><br></pre></td></tr></table></figure>\n<p>完整sage代码如下</p>\n<h4 id=\"百度2021-time【p，q相近-随机数遍历】\">[百度2021]time【p，q相近+随机数遍历】</h4>\n<p>首先看到q是p的下一个素数，可以发现p，q非常相近，所以</p>\n<p><img src=\"BUUCTF-crypto-writeup-md.assets/image-20211228131817914.png\" alt=\"image-20211228131817914\"></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>p</mi><mo>−</mo><mi>q</mi><mi mathvariant=\"normal\">∣</mi><mtext>很小</mtext><mspace linebreak=\"newline\"></mspace><mtext>（</mtext><mi>p</mi><mo>+</mo><mi>q</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mn>2</mn><mtext>与</mtext><mroot><mi>n</mi><mn>2</mn></mroot><mtext>很接近</mtext><mspace linebreak=\"newline\"></mspace><mtext>从</mtext><mroot><mi>n</mi><mn>2</mn></mroot><mtext>开始直到找到一个</mtext><mi>x</mi><mtext>，使得</mtext><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><mi>n</mi><mo>=</mo><msup><mi>y</mi><mn>2</mn></msup><mtext>即可</mtext><mspace linebreak=\"newline\"></mspace><mi>p</mi><mo>=</mo><mi>x</mi><mo>−</mo><mi>y</mi><mspace linebreak=\"newline\"></mspace><mi>q</mi><mo>=</mo><mi>x</mi><mo>+</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">|p-q|很小\\\\\n（p+q)/2 与 \\sqrt[2]{n}很接近\\\\\n从\\sqrt[2]{n}开始直到找到一个x，使得x^2-n=y^2即可\\\\\np = x-y \\\\\nq = x + y\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mord\">∣</span><span class=\"mord cjk_fallback\">很小</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord cjk_fallback\">（</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0992em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mclose\">)</span><span class=\"mord\">/2</span><span class=\"mord cjk_fallback\">与</span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7172em;\"><span style=\"top:-2.895em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8492em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-2.8092em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1908em;\"><span></span></span></span></span></span><span class=\"mord cjk_fallback\">很接近</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1.055em;vertical-align:-0.1908em;\"></span><span class=\"mord cjk_fallback\">从</span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7172em;\"><span style=\"top:-2.895em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8492em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-2.8092em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1908em;\"><span></span></span></span></span></span><span class=\"mord cjk_fallback\">开始直到找到一个</span><span class=\"mord mathnormal\">x</span><span class=\"mord cjk_fallback\">，使得</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0585em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">即可</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pp = gmpy2.iroot(n,<span class=\"number\">2</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(pp+<span class=\"number\">1</span>,pp+<span class=\"number\">3</span>):</span><br><span class=\"line\">    yy = <span class=\"built_in\">pow</span>(x,<span class=\"number\">2</span>)-n</span><br><span class=\"line\">    <span class=\"keyword\">if</span> gmpy2.iroot(yy,<span class=\"number\">2</span>)[<span class=\"number\">1</span>]:</span><br><span class=\"line\">        y = gmpy2.iroot(yy,<span class=\"number\">2</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">        p = (x-y)</span><br><span class=\"line\">        q = x + y</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;p:&quot;</span>,p)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;q:&quot;</span>,q)</span><br><span class=\"line\">phi = (p-<span class=\"number\">1</span>)*(q-<span class=\"number\">1</span>)</span><br><span class=\"line\">d = gmpy2.invert(e,phi)</span><br><span class=\"line\">m = <span class=\"built_in\">pow</span>(c,d,n)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(m)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(long_to_bytes(m))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>得到hint</p>\n<p><code>localtime为time.struct_time(tm_year=2021, tm_mon=4, tm_mday=28, tm_hour=20, tm_min=42, tm_sec=6, tm_wday=2, tm_yday=118, tm_isdst=0)</code></p>\n<p><code>time()-a1 = 3.1603143215179443</code></p>\n<p>randome.seed设置的种子相同的话，最后得到的随机数也相同，所以只需要进行遍历即可</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lt = time.mktime((<span class=\"number\">2021</span>,<span class=\"number\">4</span>,<span class=\"number\">28</span>,<span class=\"number\">20</span>,<span class=\"number\">42</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">118</span>,<span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lt)</span><br><span class=\"line\">a1 = <span class=\"number\">3.1603143215179443</span></span><br><span class=\"line\">s = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100000</span>):</span><br><span class=\"line\">        random.seed(s)</span><br><span class=\"line\">        x = random.getrandbits(<span class=\"number\">2048</span>)</span><br><span class=\"line\">        s = <span class=\"built_in\">int</span>(lt) - i + j * <span class=\"number\">10</span> ** -<span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n % x == <span class=\"number\">0</span>:</span><br><span class=\"line\">            p = x</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(p)</span><br><span class=\"line\">            q = n//p</span><br><span class=\"line\">            phi = (p-<span class=\"number\">1</span>)*(q-<span class=\"number\">1</span>)</span><br><span class=\"line\">            d = gmpy2.invert(e,phi)</span><br><span class=\"line\">            m = <span class=\"built_in\">pow</span>(c,d,n)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(long_to_bytes(m))</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        </span><br></pre></td></tr></table></figure>\n<h4 id=\"百度ichunqiu-whitegiveCMA【数论-共模】\">[百度ichunqiu]whitegiveCMA【数论+共模】</h4>\n<h4 id=\"GKCTF2021-RRRsa【数学式子化简】\">[GKCTF2021]RRRsa【数学式子化简】</h4>\n<p>1）拿到两个式子后，先把<strong>括号去掉</strong>，然后把<strong>常数项去掉</strong>；<br>\n2）之后得到的式子应该是<strong>俩个只含p或q的式子</strong>，让两个式子的p（或q）的<strong>指数</strong>和<strong>系数</strong>相同；<br>\n3）将两个式子相加或相减<strong>消掉p</strong>,剩下的式子应该只剩下q,与n进行gcd（）求出q</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> gmpy2</span><br><span class=\"line\"><span class=\"keyword\">import</span> Rsa</span><br><span class=\"line\">t= <span class=\"number\">202020</span>*<span class=\"number\">212121</span></span><br><span class=\"line\">h3=<span class=\"number\">25590923416756813543880554963887576960707333607377889401033718419301278802157204881039116350321872162118977797069089653428121479486603744700519830597186045931412652681572060953439655868476311798368015878628002547540835719870081007505735499581449077950263721606955524302365518362434928190394924399683131242077</span></span><br><span class=\"line\">h4=<span class=\"number\">104100726926923869566862741238876132366916970864374562947844669556403268955625670105641264367038885706425427864941392601593437305258297198111819227915453081797889565662276003122901139755153002219126366611021736066016741562232998047253335141676203376521742965365133597943669838076210444485458296240951668402513</span></span><br><span class=\"line\">n2 = <span class=\"number\">114535923043375970380117920548097404729043079895540320742847840364455024050473125998926311644172960176471193602850427607899191810616953021324742137492746159921284982146320175356395325890407704697018412456350862990849606200323084717352630282539156670636025924425865741196506478163922312894384285889848355244489</span></span><br><span class=\"line\">h = <span class=\"built_in\">pow</span>(<span class=\"number\">2021</span>,t,n2)*<span class=\"built_in\">pow</span>(h3,<span class=\"number\">212121</span>,n2)-<span class=\"built_in\">pow</span>(<span class=\"number\">2020</span>,t,n2)*<span class=\"built_in\">pow</span>(h4,<span class=\"number\">202020</span>,n2)</span><br><span class=\"line\">q2 = gmpy2.gcd(n2,h)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(q2)</span><br><span class=\"line\">p2 = n2//q2</span><br><span class=\"line\"><span class=\"built_in\">print</span>(p2)</span><br><span class=\"line\">c2 = <span class=\"number\">67054203666901691181215262587447180910225473339143260100831118313521471029889304176235434129632237116993910316978096018724911531011857469325115308802162172965564951703583450817489247675458024801774590728726471567407812572210421642171456850352167810755440990035255967091145950569246426544351461548548423025004</span></span><br><span class=\"line\">d = Rsa.get_d(<span class=\"number\">65537</span>,p2,q2,n2)</span><br><span class=\"line\">q = Rsa.decrypt(c2,d,n2)</span><br><span class=\"line\"></span><br><span class=\"line\">n1=<span class=\"number\">75003557379080252219517825998990183226659117019770735080523409561757225883651040882547519748107588719498261922816865626714101556207649929655822889945870341168644508079317582220034374613066751916750036253423990673764234066999306874078424803774652754587494762629397701664706287999727238636073466137405374927829</span></span><br><span class=\"line\">c1=<span class=\"number\">68111901092027813007099627893896838517426971082877204047110404787823279211508183783468891474661365139933325981191524511345219830693064573462115529345012970089065201176142417462299650761299758078141504126185921304526414911455395289228444974516503526507906721378965227166653195076209418852399008741560796631569</span></span><br><span class=\"line\">hint1=<span class=\"number\">23552090716381769484990784116875558895715552896983313406764042416318710076256166472426553520240265023978449945974218435787929202289208329156594838420190890104226497263852461928474756025539394996288951828172126419569993301524866753797584032740426259804002564701319538183190684075289055345581960776903740881951</span></span><br><span class=\"line\">hint2=<span class=\"number\">52723229698530767897979433914470831153268827008372307239630387100752226850798023362444499211944996778363894528759290565718266340188582253307004810850030833752132728256929572703630431232622151200855160886614350000115704689605102500273815157636476901150408355565958834764444192860513855376978491299658773170270</span></span><br><span class=\"line\">q1 = gmpy2.gcd(n1,<span class=\"built_in\">pow</span>(hint2-<span class=\"number\">212121</span>,<span class=\"number\">202020</span>,n1)*<span class=\"built_in\">pow</span>(<span class=\"number\">2020</span>,<span class=\"number\">202020</span>,n1)-hint1*<span class=\"built_in\">pow</span>(<span class=\"number\">2021</span>,<span class=\"number\">202020</span>,n1))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(q1)</span><br><span class=\"line\">p1 = n1//q1</span><br><span class=\"line\">d = Rsa.get_d(<span class=\"number\">65537</span>,p1,q1,n1)</span><br><span class=\"line\">p = Rsa.decrypt(c1,d,n1)</span><br><span class=\"line\"></span><br><span class=\"line\">c = <span class=\"number\">13492392717469817866883431475453770951837476241371989714683737558395769731416522300851917887957945766132864151382877462142018129852703437240533684604508379950293643294877725773675505912622208813435625177696614781601216465807569201380151669942605208425645258372134465547452376467465833013387018542999562042758</span></span><br><span class=\"line\">d = Rsa.get_d(<span class=\"number\">65537</span>,p,q,p*q)</span><br><span class=\"line\">m = Rsa.decrypt(c,d,p*q)</span><br></pre></td></tr></table></figure>\n<h2 id=\"ELgamal\">ELgamal</h2>\n<h2 id=\"Hash\">Hash</h2>\n<h2 id=\"脑洞\">脑洞</h2>\n"},{"title":"[论文笔记-ccs12]Aligot","date":"2021-12-03T12:00:00.000Z","keywords":null,"description":null,"top_img":null,"comments":1,"cover":"https://scorpionre.github.io/2021/12/03/aligot/aligot.assets/image-20211128145601514.png","toc":null,"toc_number":null,"copyright":null,"mathjax":null,"katex":null,"hide":null,"_content":"\n# Aligot\n\n![image-20211128145601514](aligot.assets/image-20211128145601514.png)\n\n*Joan Calvet, José M. Fernandez, and Jean-Yves Marion. 2012. Aligot: cryptographic function identification in obfuscated binary programs. In* *Proceedings of the 2012 ACM conference on Computer and communications security* *(**CCS '12**). Association for Computing Machinery, New York, NY, USA, 169–182. DOI:https://doi.org/10.1145/2382196.2382217*\n\n**研究的问题：** 识别混淆后的二进制文件的密码函数\n\n\n\n**特色：**\n\n- 之前的静态分析检测常量或machine language instructions，不适用于混淆后的\n- 检测密码函数的I/O关系，抗混淆（即使混淆后，输入输出也是可知的）\n\n\n\n## 解决方法：\n\n![image-20211202210609653](aligot.assets/image-20211202210609653.png)\n\nI/O关系对足够确定多数密码函数\n\n1. 收集目标程序的执行路径(程序在系统上运行期间所做的一系列操作)\n\n   Windows x86   Pin\n\n   收集 dynamic instruction  D，用元组表示,包括以下部分：\n\n   - 内存地址A[D]\n   - 在A[D]执行的机器指令I[D]\n   - I[D]读写内存地址Ra[D],Wa[D]\n   - I[D]读写寄存器Rr[D],Wr[D]\n\n   执行路径T便是一系列动态指令序列D1……Dn\n\n   T/ins是机器指令序列，T/Ins = I1…… In 如果对任意k 属于[1，n]，使得I[Dk] = Ik\n\n   \n\n   \n\n2. 从执行路径中提取密码相关代码以及I/O参数：\n\n   通常，可以将代码划分为函数，但是函数的概念也只是基于编译器特性（调用约定、prologue和epilogue code等）的一种启发式定义，而这在混淆后的代码中是不可靠的。因此为混淆后的加密代码构建了特定的抽象。\n\n   循环是加密函数经常用到的，但也不只加密函数会用到。所以需要准确定义加密代码中的循环\n\n   ### simple loop定义\n\n   比如下图中a表示混淆工具control-flow flattening,每次循环可能执行不同逻辑。\n\n   b表示一种可以被用作混淆的编译器优化技术unrolling，三条同样的指令执行了三次。\n\n   采用instruction-centric loops定义循环：机器指令的重复。所以a不应被视为循环，b应该被视为循环。\n\n   ![image-20211201174224006](aligot.assets/image-20211201174224006.png)\n\n   ### nested loop定义\n\n   比如图a的情况，B作为内嵌的循环可能不会与外层循环循环同样的次数，这样外层循环就不会被视为循环，但实际上外层循环应该被视为循环。因此检测到循环实例后就会用循环标记代替其代码，图b可以被替换为AXCAXC\n\n   ![image-20211202235129708](aligot.assets/image-20211202235129708.png)\n\n### \t循环识别算法：\n\n依次处理执行路径的机器指令，并将其存入链表history的尾部。\n\n假设history中有指令I1,I2,I1,I3，现在正要处理的指令为I1，该指令在history中出现两次（都可能是loop的开始），因此创建两个loop实例L1,L2，指针指向下一条待执行的指令。然后将I1加入history中。\n\n![image-20211202154148799](aligot.assets/image-20211202154148799.png)\n\n再假设下一条指令是I3.此时L1就会被舍弃，因为其期望的指令不是I3。而L2的指针继续移动，指向I1。\n\n![image-20211202154801527](aligot.assets/image-20211202154801527.png)\n\n此时可以确定L2已经循环了两次，因此将其替换为循环标记符X属于Lid。假设下一条指令为I4，而L2等待的指令为I1，因此L2从running loop instances中移除并register\n\n![image-20211202155126668](aligot.assets/image-20211202155126668.png)\n\n\n\n**参数**：循环实例的参数是高级函数实现的参数对应的低级\n\n- 属于L的相同参数的bytes要么在内存中相邻，要么同时在同一个寄存器中\n- 属于L的相同参数的字节由BODY [L]中的相同指令以相同的方式(读或写)操作\n- 属于L的输入参数的字节被L中的代码读取，而属于L的输出参数的字节被L中的代码写入\n\n**参数收集算法：**先根据上述前两个条件收集参数，然后根据第三条将参数分为输入输出。然后确定参数的值：输入参数为第一次被读取的值，输出参数为最后一次被写入的值。最后，得到INm(L) and INr(L)(分别为内存和寄存器中的值）,OUTm(L) and OUTm(L)\n\n比如：一次一密xor的程序P\n\n![image-20211202184802760](aligot.assets/image-20211202184802760.png)\n\n首先，收集程序P的执行路径，然后识别循环体。检测到了一个loop实例。\n\n![image-20211202185040006](aligot.assets/image-20211202185040006.png)\n\n收集循环的参数，同时还提取一些与这些实现有关的参数，将在最后进行对比时发挥作用。\n\n- eax:4,ebx:4,esp:4：内存地址\n- ecx:4：counter value\n- 12FFC0（起始地址）:4（字节数）：与sizetodecrypt循环前的初始化本地向量有关\n- edx:4：中间存储器\n\n![image-20211202185147355](aligot.assets/image-20211202185147355.png)\n\n**loop data flow**：我们认为每个可能的加密实现都包含一个循环。然而，密码函数实际上可以由几个非嵌套循环组成，例如RC4[34]。因此，单靠上述的循环不足以完全捕获它们，所以使用data flow对参与相同加密实现的循环实例进行分组。\n\n- 定义：和def-use chains差不多，如果L1的输出参数用作L2的输入参数，那么称循环实例L1和L2连通。为了简单起见，只考虑内存参数，因为寄存器参数需要在循环实例之间的顺序代码中进行精确的污染跟踪。实际上，我们的假设是，对内存中输入和输出的所有处理都是通过循环处理的。\n\n  在不同的密码函数之间组合的情况下，即一个函数的输出用作另一个函数的输入，它们将被分到相同的loop data flow中，因此需要考虑所有子图。\n\n  \n\n3. 与已知密码函数（pycrypto）比较：如果loop data flow与密码函数有同样的输入输出，则认为实现了同样的密码函数。\n\n   首先，生成所有可能的I/O值，比如上例有5个长度为4，22个长度为8的值。（实际应用中，逆向分析者可以去掉明显依赖于实现的参数，比如内存地址）\n\n   然后，对每个加密参考实现程序Pf，从生成的可能的输入值中选择合适的值输入。Pf如果只需要定长的参数，便只选择正确长度的参数\n\n   最后，运行Pf，如果其输出的值在之前生成的可能的输出值中，便成功找到。 \n\n### 结果：\n\nTEA特征：常量delta，标准实现为0x9E3779B9\n\nMD5：输入被分为512bit的块\n\nRSA:模乘运算，用到loop，Montgomery算法优化模乘运算、deconding routine(PolarSSL)\n\n**样本：**\n\nB1：TEA用MSVC编译，没有优化\n\nB2：和B1类似，但delta用以下两条指令混淆，因此算法语义一样但是delta不再是静态可见常量\n\n```assembly\nmov reg,delta;\nadd reg,delta/2;\n```\n\nB3:RC4用MSVC编译，没有优化\n\nB4:AES(OpenSSL)\n\nB5:B4用AsProtect打包\n\nB6：md5（OpenSSL)\n\nB8:RSA(PolarSSL),AsProtect\n\n![image-20211202210729211](aligot.assets/image-20211202210729211.png)\n\nB1有的工具没有识别出TEA，可能是其本身没有实现该算法的功能。但是B2只有Aligot能识别，其余工具可能只是基于静态delta的值\n\n恶意软件对TEA作了些修改，再实现之后命名为Russian-TEA，也可以成功识别。\n\nSBank也是类似，但是因为有静态delta，所以其余工具可以识别\n\n![image-20211202212334296](aligot.assets/image-20211202212334296.png)\n\n**性能：**\n\n- 自己的样本都基本在20min以内\n\n- trance size并不总是意味着更长处理时间。\n\n- 如果loop很少，那么history更大，性能会更差\n\n- 比较环节，性能主要取决于LDP的数量以及参数数量\n\n  ![image-20211202215338681](aligot.assets/image-20211202215338681.png)\n\n**不足：**\n\n- 局限于特定的执行路径（一个程序P，输入为K，C（密文），输出C'(明文)，但不是P的所有执行路径都实现了密码函数，但确定具体的执行路径由逆向人员完成）\n- 需要密码函数的参考实现\n- 参数编码后便难以识别","source":"_posts/aligot.md","raw":"---\n\ntitle: \"[论文笔记-ccs12]Aligot\"\ndate: 2021-12-03 20:00:00\ntags: \n  - crypto\n  - reverse\n  - paper\n  - CryptoDetect\ncategories:\n  - [CryptoDetect,paper]\nkeywords:\ndescription:\ntop_img:\ncomments:\ncover:  https://scorpionre.github.io/2021/12/03/aligot/aligot.assets/image-20211128145601514.png\ntoc:\ntoc_number:\ncopyright:\nmathjax:\nkatex:\nhide:\n---\n\n# Aligot\n\n![image-20211128145601514](aligot.assets/image-20211128145601514.png)\n\n*Joan Calvet, José M. Fernandez, and Jean-Yves Marion. 2012. Aligot: cryptographic function identification in obfuscated binary programs. In* *Proceedings of the 2012 ACM conference on Computer and communications security* *(**CCS '12**). Association for Computing Machinery, New York, NY, USA, 169–182. DOI:https://doi.org/10.1145/2382196.2382217*\n\n**研究的问题：** 识别混淆后的二进制文件的密码函数\n\n\n\n**特色：**\n\n- 之前的静态分析检测常量或machine language instructions，不适用于混淆后的\n- 检测密码函数的I/O关系，抗混淆（即使混淆后，输入输出也是可知的）\n\n\n\n## 解决方法：\n\n![image-20211202210609653](aligot.assets/image-20211202210609653.png)\n\nI/O关系对足够确定多数密码函数\n\n1. 收集目标程序的执行路径(程序在系统上运行期间所做的一系列操作)\n\n   Windows x86   Pin\n\n   收集 dynamic instruction  D，用元组表示,包括以下部分：\n\n   - 内存地址A[D]\n   - 在A[D]执行的机器指令I[D]\n   - I[D]读写内存地址Ra[D],Wa[D]\n   - I[D]读写寄存器Rr[D],Wr[D]\n\n   执行路径T便是一系列动态指令序列D1……Dn\n\n   T/ins是机器指令序列，T/Ins = I1…… In 如果对任意k 属于[1，n]，使得I[Dk] = Ik\n\n   \n\n   \n\n2. 从执行路径中提取密码相关代码以及I/O参数：\n\n   通常，可以将代码划分为函数，但是函数的概念也只是基于编译器特性（调用约定、prologue和epilogue code等）的一种启发式定义，而这在混淆后的代码中是不可靠的。因此为混淆后的加密代码构建了特定的抽象。\n\n   循环是加密函数经常用到的，但也不只加密函数会用到。所以需要准确定义加密代码中的循环\n\n   ### simple loop定义\n\n   比如下图中a表示混淆工具control-flow flattening,每次循环可能执行不同逻辑。\n\n   b表示一种可以被用作混淆的编译器优化技术unrolling，三条同样的指令执行了三次。\n\n   采用instruction-centric loops定义循环：机器指令的重复。所以a不应被视为循环，b应该被视为循环。\n\n   ![image-20211201174224006](aligot.assets/image-20211201174224006.png)\n\n   ### nested loop定义\n\n   比如图a的情况，B作为内嵌的循环可能不会与外层循环循环同样的次数，这样外层循环就不会被视为循环，但实际上外层循环应该被视为循环。因此检测到循环实例后就会用循环标记代替其代码，图b可以被替换为AXCAXC\n\n   ![image-20211202235129708](aligot.assets/image-20211202235129708.png)\n\n### \t循环识别算法：\n\n依次处理执行路径的机器指令，并将其存入链表history的尾部。\n\n假设history中有指令I1,I2,I1,I3，现在正要处理的指令为I1，该指令在history中出现两次（都可能是loop的开始），因此创建两个loop实例L1,L2，指针指向下一条待执行的指令。然后将I1加入history中。\n\n![image-20211202154148799](aligot.assets/image-20211202154148799.png)\n\n再假设下一条指令是I3.此时L1就会被舍弃，因为其期望的指令不是I3。而L2的指针继续移动，指向I1。\n\n![image-20211202154801527](aligot.assets/image-20211202154801527.png)\n\n此时可以确定L2已经循环了两次，因此将其替换为循环标记符X属于Lid。假设下一条指令为I4，而L2等待的指令为I1，因此L2从running loop instances中移除并register\n\n![image-20211202155126668](aligot.assets/image-20211202155126668.png)\n\n\n\n**参数**：循环实例的参数是高级函数实现的参数对应的低级\n\n- 属于L的相同参数的bytes要么在内存中相邻，要么同时在同一个寄存器中\n- 属于L的相同参数的字节由BODY [L]中的相同指令以相同的方式(读或写)操作\n- 属于L的输入参数的字节被L中的代码读取，而属于L的输出参数的字节被L中的代码写入\n\n**参数收集算法：**先根据上述前两个条件收集参数，然后根据第三条将参数分为输入输出。然后确定参数的值：输入参数为第一次被读取的值，输出参数为最后一次被写入的值。最后，得到INm(L) and INr(L)(分别为内存和寄存器中的值）,OUTm(L) and OUTm(L)\n\n比如：一次一密xor的程序P\n\n![image-20211202184802760](aligot.assets/image-20211202184802760.png)\n\n首先，收集程序P的执行路径，然后识别循环体。检测到了一个loop实例。\n\n![image-20211202185040006](aligot.assets/image-20211202185040006.png)\n\n收集循环的参数，同时还提取一些与这些实现有关的参数，将在最后进行对比时发挥作用。\n\n- eax:4,ebx:4,esp:4：内存地址\n- ecx:4：counter value\n- 12FFC0（起始地址）:4（字节数）：与sizetodecrypt循环前的初始化本地向量有关\n- edx:4：中间存储器\n\n![image-20211202185147355](aligot.assets/image-20211202185147355.png)\n\n**loop data flow**：我们认为每个可能的加密实现都包含一个循环。然而，密码函数实际上可以由几个非嵌套循环组成，例如RC4[34]。因此，单靠上述的循环不足以完全捕获它们，所以使用data flow对参与相同加密实现的循环实例进行分组。\n\n- 定义：和def-use chains差不多，如果L1的输出参数用作L2的输入参数，那么称循环实例L1和L2连通。为了简单起见，只考虑内存参数，因为寄存器参数需要在循环实例之间的顺序代码中进行精确的污染跟踪。实际上，我们的假设是，对内存中输入和输出的所有处理都是通过循环处理的。\n\n  在不同的密码函数之间组合的情况下，即一个函数的输出用作另一个函数的输入，它们将被分到相同的loop data flow中，因此需要考虑所有子图。\n\n  \n\n3. 与已知密码函数（pycrypto）比较：如果loop data flow与密码函数有同样的输入输出，则认为实现了同样的密码函数。\n\n   首先，生成所有可能的I/O值，比如上例有5个长度为4，22个长度为8的值。（实际应用中，逆向分析者可以去掉明显依赖于实现的参数，比如内存地址）\n\n   然后，对每个加密参考实现程序Pf，从生成的可能的输入值中选择合适的值输入。Pf如果只需要定长的参数，便只选择正确长度的参数\n\n   最后，运行Pf，如果其输出的值在之前生成的可能的输出值中，便成功找到。 \n\n### 结果：\n\nTEA特征：常量delta，标准实现为0x9E3779B9\n\nMD5：输入被分为512bit的块\n\nRSA:模乘运算，用到loop，Montgomery算法优化模乘运算、deconding routine(PolarSSL)\n\n**样本：**\n\nB1：TEA用MSVC编译，没有优化\n\nB2：和B1类似，但delta用以下两条指令混淆，因此算法语义一样但是delta不再是静态可见常量\n\n```assembly\nmov reg,delta;\nadd reg,delta/2;\n```\n\nB3:RC4用MSVC编译，没有优化\n\nB4:AES(OpenSSL)\n\nB5:B4用AsProtect打包\n\nB6：md5（OpenSSL)\n\nB8:RSA(PolarSSL),AsProtect\n\n![image-20211202210729211](aligot.assets/image-20211202210729211.png)\n\nB1有的工具没有识别出TEA，可能是其本身没有实现该算法的功能。但是B2只有Aligot能识别，其余工具可能只是基于静态delta的值\n\n恶意软件对TEA作了些修改，再实现之后命名为Russian-TEA，也可以成功识别。\n\nSBank也是类似，但是因为有静态delta，所以其余工具可以识别\n\n![image-20211202212334296](aligot.assets/image-20211202212334296.png)\n\n**性能：**\n\n- 自己的样本都基本在20min以内\n\n- trance size并不总是意味着更长处理时间。\n\n- 如果loop很少，那么history更大，性能会更差\n\n- 比较环节，性能主要取决于LDP的数量以及参数数量\n\n  ![image-20211202215338681](aligot.assets/image-20211202215338681.png)\n\n**不足：**\n\n- 局限于特定的执行路径（一个程序P，输入为K，C（密文），输出C'(明文)，但不是P的所有执行路径都实现了密码函数，但确定具体的执行路径由逆向人员完成）\n- 需要密码函数的参考实现\n- 参数编码后便难以识别","slug":"aligot","published":1,"updated":"2022-01-24T19:37:14.000Z","layout":"post","photos":[],"link":"","_id":"cletwjohx0011ri3s5n0l5r94","content":"<h1>Aligot</h1>\n<p><img src=\"aligot.assets/image-20211128145601514.png\" alt=\"image-20211128145601514\"></p>\n<p><em>Joan Calvet, José M. Fernandez, and Jean-Yves Marion. 2012. Aligot: cryptographic function identification in obfuscated binary programs. In</em> <em>Proceedings of the 2012 ACM conference on Computer and communications security</em> <em>(<strong>CCS '12</strong>). Association for Computing Machinery, New York, NY, USA, 169–182. DOI:<a href=\"https://doi.org/10.1145/2382196.2382217\">https://doi.org/10.1145/2382196.2382217</a></em></p>\n<p><strong>研究的问题：</strong> 识别混淆后的二进制文件的密码函数</p>\n<p><strong>特色：</strong></p>\n<ul>\n<li>之前的静态分析检测常量或machine language instructions，不适用于混淆后的</li>\n<li>检测密码函数的I/O关系，抗混淆（即使混淆后，输入输出也是可知的）</li>\n</ul>\n<h2 id=\"解决方法：\">解决方法：</h2>\n<p><img src=\"aligot.assets/image-20211202210609653.png\" alt=\"image-20211202210609653\"></p>\n<p>I/O关系对足够确定多数密码函数</p>\n<ol>\n<li>\n<p>收集目标程序的执行路径(程序在系统上运行期间所做的一系列操作)</p>\n<p>Windows x86   Pin</p>\n<p>收集 dynamic instruction  D，用元组表示,包括以下部分：</p>\n<ul>\n<li>内存地址A[D]</li>\n<li>在A[D]执行的机器指令I[D]</li>\n<li>I[D]读写内存地址Ra[D],Wa[D]</li>\n<li>I[D]读写寄存器Rr[D],Wr[D]</li>\n</ul>\n<p>执行路径T便是一系列动态指令序列D1……Dn</p>\n<p>T/ins是机器指令序列，T/Ins = I1…… In 如果对任意k 属于[1，n]，使得I[Dk] = Ik</p>\n</li>\n<li>\n<p>从执行路径中提取密码相关代码以及I/O参数：</p>\n<p>通常，可以将代码划分为函数，但是函数的概念也只是基于编译器特性（调用约定、prologue和epilogue code等）的一种启发式定义，而这在混淆后的代码中是不可靠的。因此为混淆后的加密代码构建了特定的抽象。</p>\n<p>循环是加密函数经常用到的，但也不只加密函数会用到。所以需要准确定义加密代码中的循环</p>\n<h3 id=\"simple-loop定义\">simple loop定义</h3>\n<p>比如下图中a表示混淆工具control-flow flattening,每次循环可能执行不同逻辑。</p>\n<p>b表示一种可以被用作混淆的编译器优化技术unrolling，三条同样的指令执行了三次。</p>\n<p>采用instruction-centric loops定义循环：机器指令的重复。所以a不应被视为循环，b应该被视为循环。</p>\n<p><img src=\"aligot.assets/image-20211201174224006.png\" alt=\"image-20211201174224006\"></p>\n<h3 id=\"nested-loop定义\">nested loop定义</h3>\n<p>比如图a的情况，B作为内嵌的循环可能不会与外层循环循环同样的次数，这样外层循环就不会被视为循环，但实际上外层循环应该被视为循环。因此检测到循环实例后就会用循环标记代替其代码，图b可以被替换为AXCAXC</p>\n<p><img src=\"aligot.assets/image-20211202235129708.png\" alt=\"image-20211202235129708\"></p>\n</li>\n</ol>\n<h3 id=\"循环识别算法：\">循环识别算法：</h3>\n<p>依次处理执行路径的机器指令，并将其存入链表history的尾部。</p>\n<p>假设history中有指令I1,I2,I1,I3，现在正要处理的指令为I1，该指令在history中出现两次（都可能是loop的开始），因此创建两个loop实例L1,L2，指针指向下一条待执行的指令。然后将I1加入history中。</p>\n<p><img src=\"aligot.assets/image-20211202154148799.png\" alt=\"image-20211202154148799\"></p>\n<p>再假设下一条指令是I3.此时L1就会被舍弃，因为其期望的指令不是I3。而L2的指针继续移动，指向I1。</p>\n<p><img src=\"aligot.assets/image-20211202154801527.png\" alt=\"image-20211202154801527\"></p>\n<p>此时可以确定L2已经循环了两次，因此将其替换为循环标记符X属于Lid。假设下一条指令为I4，而L2等待的指令为I1，因此L2从running loop instances中移除并register</p>\n<p><img src=\"aligot.assets/image-20211202155126668.png\" alt=\"image-20211202155126668\"></p>\n<p><strong>参数</strong>：循环实例的参数是高级函数实现的参数对应的低级</p>\n<ul>\n<li>属于L的相同参数的bytes要么在内存中相邻，要么同时在同一个寄存器中</li>\n<li>属于L的相同参数的字节由BODY [L]中的相同指令以相同的方式(读或写)操作</li>\n<li>属于L的输入参数的字节被L中的代码读取，而属于L的输出参数的字节被L中的代码写入</li>\n</ul>\n<p>**参数收集算法：**先根据上述前两个条件收集参数，然后根据第三条将参数分为输入输出。然后确定参数的值：输入参数为第一次被读取的值，输出参数为最后一次被写入的值。最后，得到INm(L) and INr(L)(分别为内存和寄存器中的值）,OUTm(L) and OUTm(L)</p>\n<p>比如：一次一密xor的程序P</p>\n<p><img src=\"aligot.assets/image-20211202184802760.png\" alt=\"image-20211202184802760\"></p>\n<p>首先，收集程序P的执行路径，然后识别循环体。检测到了一个loop实例。</p>\n<p><img src=\"aligot.assets/image-20211202185040006.png\" alt=\"image-20211202185040006\"></p>\n<p>收集循环的参数，同时还提取一些与这些实现有关的参数，将在最后进行对比时发挥作用。</p>\n<ul>\n<li>eax:4,ebx:4,esp:4：内存地址</li>\n<li>ecx:4：counter value</li>\n<li>12FFC0（起始地址）:4（字节数）：与sizetodecrypt循环前的初始化本地向量有关</li>\n<li>edx:4：中间存储器</li>\n</ul>\n<p><img src=\"aligot.assets/image-20211202185147355.png\" alt=\"image-20211202185147355\"></p>\n<p><strong>loop data flow</strong>：我们认为每个可能的加密实现都包含一个循环。然而，密码函数实际上可以由几个非嵌套循环组成，例如RC4[34]。因此，单靠上述的循环不足以完全捕获它们，所以使用data flow对参与相同加密实现的循环实例进行分组。</p>\n<ul>\n<li>\n<p>定义：和def-use chains差不多，如果L1的输出参数用作L2的输入参数，那么称循环实例L1和L2连通。为了简单起见，只考虑内存参数，因为寄存器参数需要在循环实例之间的顺序代码中进行精确的污染跟踪。实际上，我们的假设是，对内存中输入和输出的所有处理都是通过循环处理的。</p>\n<p>在不同的密码函数之间组合的情况下，即一个函数的输出用作另一个函数的输入，它们将被分到相同的loop data flow中，因此需要考虑所有子图。</p>\n</li>\n</ul>\n<ol start=\"3\">\n<li>\n<p>与已知密码函数（pycrypto）比较：如果loop data flow与密码函数有同样的输入输出，则认为实现了同样的密码函数。</p>\n<p>首先，生成所有可能的I/O值，比如上例有5个长度为4，22个长度为8的值。（实际应用中，逆向分析者可以去掉明显依赖于实现的参数，比如内存地址）</p>\n<p>然后，对每个加密参考实现程序Pf，从生成的可能的输入值中选择合适的值输入。Pf如果只需要定长的参数，便只选择正确长度的参数</p>\n<p>最后，运行Pf，如果其输出的值在之前生成的可能的输出值中，便成功找到。</p>\n</li>\n</ol>\n<h3 id=\"结果：\">结果：</h3>\n<p>TEA特征：常量delta，标准实现为0x9E3779B9</p>\n<p>MD5：输入被分为512bit的块</p>\n<p>RSA:模乘运算，用到loop，Montgomery算法优化模乘运算、deconding routine(PolarSSL)</p>\n<p><strong>样本：</strong></p>\n<p>B1：TEA用MSVC编译，没有优化</p>\n<p>B2：和B1类似，但delta用以下两条指令混淆，因此算法语义一样但是delta不再是静态可见常量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mov reg,delta;</span><br><span class=\"line\">add reg,delta/2;</span><br></pre></td></tr></table></figure>\n<p>B3:RC4用MSVC编译，没有优化</p>\n<p>B4:AES(OpenSSL)</p>\n<p>B5:B4用AsProtect打包</p>\n<p>B6：md5（OpenSSL)</p>\n<p>B8:RSA(PolarSSL),AsProtect</p>\n<p><img src=\"aligot.assets/image-20211202210729211.png\" alt=\"image-20211202210729211\"></p>\n<p>B1有的工具没有识别出TEA，可能是其本身没有实现该算法的功能。但是B2只有Aligot能识别，其余工具可能只是基于静态delta的值</p>\n<p>恶意软件对TEA作了些修改，再实现之后命名为Russian-TEA，也可以成功识别。</p>\n<p>SBank也是类似，但是因为有静态delta，所以其余工具可以识别</p>\n<p><img src=\"aligot.assets/image-20211202212334296.png\" alt=\"image-20211202212334296\"></p>\n<p><strong>性能：</strong></p>\n<ul>\n<li>\n<p>自己的样本都基本在20min以内</p>\n</li>\n<li>\n<p>trance size并不总是意味着更长处理时间。</p>\n</li>\n<li>\n<p>如果loop很少，那么history更大，性能会更差</p>\n</li>\n<li>\n<p>比较环节，性能主要取决于LDP的数量以及参数数量</p>\n<p><img src=\"aligot.assets/image-20211202215338681.png\" alt=\"image-20211202215338681\"></p>\n</li>\n</ul>\n<p><strong>不足：</strong></p>\n<ul>\n<li>局限于特定的执行路径（一个程序P，输入为K，C（密文），输出C’(明文)，但不是P的所有执行路径都实现了密码函数，但确定具体的执行路径由逆向人员完成）</li>\n<li>需要密码函数的参考实现</li>\n<li>参数编码后便难以识别</li>\n</ul>\n","site":{"data":{"about":{"class":{"class_name":"about","link_list":{"-1":{"name":"Scorpion","avatar":"/image/avatar.jpg","link":null,"descr":"�����ƹ������ë��̨��ɢ�򣬻�ѩ���������ݣ����ֲ�Ƭ����Ƭ�赸��Ƶ��ҵ����Ӱ���Ǻð�ȫ��"}}}},"link":{"class":{"class_name":"友情链接","link_list":{"-1":{"name":"M4tsuri","link":"https://M4tsuri.io","avatar":"/image/m4tsuri.jpg","descr":"pwn,blockchain"}}}}}},"excerpt":"","more":"<h1>Aligot</h1>\n<p><img src=\"aligot.assets/image-20211128145601514.png\" alt=\"image-20211128145601514\"></p>\n<p><em>Joan Calvet, José M. Fernandez, and Jean-Yves Marion. 2012. Aligot: cryptographic function identification in obfuscated binary programs. In</em> <em>Proceedings of the 2012 ACM conference on Computer and communications security</em> <em>(<strong>CCS '12</strong>). Association for Computing Machinery, New York, NY, USA, 169–182. DOI:<a href=\"https://doi.org/10.1145/2382196.2382217\">https://doi.org/10.1145/2382196.2382217</a></em></p>\n<p><strong>研究的问题：</strong> 识别混淆后的二进制文件的密码函数</p>\n<p><strong>特色：</strong></p>\n<ul>\n<li>之前的静态分析检测常量或machine language instructions，不适用于混淆后的</li>\n<li>检测密码函数的I/O关系，抗混淆（即使混淆后，输入输出也是可知的）</li>\n</ul>\n<h2 id=\"解决方法：\">解决方法：</h2>\n<p><img src=\"aligot.assets/image-20211202210609653.png\" alt=\"image-20211202210609653\"></p>\n<p>I/O关系对足够确定多数密码函数</p>\n<ol>\n<li>\n<p>收集目标程序的执行路径(程序在系统上运行期间所做的一系列操作)</p>\n<p>Windows x86   Pin</p>\n<p>收集 dynamic instruction  D，用元组表示,包括以下部分：</p>\n<ul>\n<li>内存地址A[D]</li>\n<li>在A[D]执行的机器指令I[D]</li>\n<li>I[D]读写内存地址Ra[D],Wa[D]</li>\n<li>I[D]读写寄存器Rr[D],Wr[D]</li>\n</ul>\n<p>执行路径T便是一系列动态指令序列D1……Dn</p>\n<p>T/ins是机器指令序列，T/Ins = I1…… In 如果对任意k 属于[1，n]，使得I[Dk] = Ik</p>\n</li>\n<li>\n<p>从执行路径中提取密码相关代码以及I/O参数：</p>\n<p>通常，可以将代码划分为函数，但是函数的概念也只是基于编译器特性（调用约定、prologue和epilogue code等）的一种启发式定义，而这在混淆后的代码中是不可靠的。因此为混淆后的加密代码构建了特定的抽象。</p>\n<p>循环是加密函数经常用到的，但也不只加密函数会用到。所以需要准确定义加密代码中的循环</p>\n<h3 id=\"simple-loop定义\">simple loop定义</h3>\n<p>比如下图中a表示混淆工具control-flow flattening,每次循环可能执行不同逻辑。</p>\n<p>b表示一种可以被用作混淆的编译器优化技术unrolling，三条同样的指令执行了三次。</p>\n<p>采用instruction-centric loops定义循环：机器指令的重复。所以a不应被视为循环，b应该被视为循环。</p>\n<p><img src=\"aligot.assets/image-20211201174224006.png\" alt=\"image-20211201174224006\"></p>\n<h3 id=\"nested-loop定义\">nested loop定义</h3>\n<p>比如图a的情况，B作为内嵌的循环可能不会与外层循环循环同样的次数，这样外层循环就不会被视为循环，但实际上外层循环应该被视为循环。因此检测到循环实例后就会用循环标记代替其代码，图b可以被替换为AXCAXC</p>\n<p><img src=\"aligot.assets/image-20211202235129708.png\" alt=\"image-20211202235129708\"></p>\n</li>\n</ol>\n<h3 id=\"循环识别算法：\">循环识别算法：</h3>\n<p>依次处理执行路径的机器指令，并将其存入链表history的尾部。</p>\n<p>假设history中有指令I1,I2,I1,I3，现在正要处理的指令为I1，该指令在history中出现两次（都可能是loop的开始），因此创建两个loop实例L1,L2，指针指向下一条待执行的指令。然后将I1加入history中。</p>\n<p><img src=\"aligot.assets/image-20211202154148799.png\" alt=\"image-20211202154148799\"></p>\n<p>再假设下一条指令是I3.此时L1就会被舍弃，因为其期望的指令不是I3。而L2的指针继续移动，指向I1。</p>\n<p><img src=\"aligot.assets/image-20211202154801527.png\" alt=\"image-20211202154801527\"></p>\n<p>此时可以确定L2已经循环了两次，因此将其替换为循环标记符X属于Lid。假设下一条指令为I4，而L2等待的指令为I1，因此L2从running loop instances中移除并register</p>\n<p><img src=\"aligot.assets/image-20211202155126668.png\" alt=\"image-20211202155126668\"></p>\n<p><strong>参数</strong>：循环实例的参数是高级函数实现的参数对应的低级</p>\n<ul>\n<li>属于L的相同参数的bytes要么在内存中相邻，要么同时在同一个寄存器中</li>\n<li>属于L的相同参数的字节由BODY [L]中的相同指令以相同的方式(读或写)操作</li>\n<li>属于L的输入参数的字节被L中的代码读取，而属于L的输出参数的字节被L中的代码写入</li>\n</ul>\n<p>**参数收集算法：**先根据上述前两个条件收集参数，然后根据第三条将参数分为输入输出。然后确定参数的值：输入参数为第一次被读取的值，输出参数为最后一次被写入的值。最后，得到INm(L) and INr(L)(分别为内存和寄存器中的值）,OUTm(L) and OUTm(L)</p>\n<p>比如：一次一密xor的程序P</p>\n<p><img src=\"aligot.assets/image-20211202184802760.png\" alt=\"image-20211202184802760\"></p>\n<p>首先，收集程序P的执行路径，然后识别循环体。检测到了一个loop实例。</p>\n<p><img src=\"aligot.assets/image-20211202185040006.png\" alt=\"image-20211202185040006\"></p>\n<p>收集循环的参数，同时还提取一些与这些实现有关的参数，将在最后进行对比时发挥作用。</p>\n<ul>\n<li>eax:4,ebx:4,esp:4：内存地址</li>\n<li>ecx:4：counter value</li>\n<li>12FFC0（起始地址）:4（字节数）：与sizetodecrypt循环前的初始化本地向量有关</li>\n<li>edx:4：中间存储器</li>\n</ul>\n<p><img src=\"aligot.assets/image-20211202185147355.png\" alt=\"image-20211202185147355\"></p>\n<p><strong>loop data flow</strong>：我们认为每个可能的加密实现都包含一个循环。然而，密码函数实际上可以由几个非嵌套循环组成，例如RC4[34]。因此，单靠上述的循环不足以完全捕获它们，所以使用data flow对参与相同加密实现的循环实例进行分组。</p>\n<ul>\n<li>\n<p>定义：和def-use chains差不多，如果L1的输出参数用作L2的输入参数，那么称循环实例L1和L2连通。为了简单起见，只考虑内存参数，因为寄存器参数需要在循环实例之间的顺序代码中进行精确的污染跟踪。实际上，我们的假设是，对内存中输入和输出的所有处理都是通过循环处理的。</p>\n<p>在不同的密码函数之间组合的情况下，即一个函数的输出用作另一个函数的输入，它们将被分到相同的loop data flow中，因此需要考虑所有子图。</p>\n</li>\n</ul>\n<ol start=\"3\">\n<li>\n<p>与已知密码函数（pycrypto）比较：如果loop data flow与密码函数有同样的输入输出，则认为实现了同样的密码函数。</p>\n<p>首先，生成所有可能的I/O值，比如上例有5个长度为4，22个长度为8的值。（实际应用中，逆向分析者可以去掉明显依赖于实现的参数，比如内存地址）</p>\n<p>然后，对每个加密参考实现程序Pf，从生成的可能的输入值中选择合适的值输入。Pf如果只需要定长的参数，便只选择正确长度的参数</p>\n<p>最后，运行Pf，如果其输出的值在之前生成的可能的输出值中，便成功找到。</p>\n</li>\n</ol>\n<h3 id=\"结果：\">结果：</h3>\n<p>TEA特征：常量delta，标准实现为0x9E3779B9</p>\n<p>MD5：输入被分为512bit的块</p>\n<p>RSA:模乘运算，用到loop，Montgomery算法优化模乘运算、deconding routine(PolarSSL)</p>\n<p><strong>样本：</strong></p>\n<p>B1：TEA用MSVC编译，没有优化</p>\n<p>B2：和B1类似，但delta用以下两条指令混淆，因此算法语义一样但是delta不再是静态可见常量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mov reg,delta;</span><br><span class=\"line\">add reg,delta/2;</span><br></pre></td></tr></table></figure>\n<p>B3:RC4用MSVC编译，没有优化</p>\n<p>B4:AES(OpenSSL)</p>\n<p>B5:B4用AsProtect打包</p>\n<p>B6：md5（OpenSSL)</p>\n<p>B8:RSA(PolarSSL),AsProtect</p>\n<p><img src=\"aligot.assets/image-20211202210729211.png\" alt=\"image-20211202210729211\"></p>\n<p>B1有的工具没有识别出TEA，可能是其本身没有实现该算法的功能。但是B2只有Aligot能识别，其余工具可能只是基于静态delta的值</p>\n<p>恶意软件对TEA作了些修改，再实现之后命名为Russian-TEA，也可以成功识别。</p>\n<p>SBank也是类似，但是因为有静态delta，所以其余工具可以识别</p>\n<p><img src=\"aligot.assets/image-20211202212334296.png\" alt=\"image-20211202212334296\"></p>\n<p><strong>性能：</strong></p>\n<ul>\n<li>\n<p>自己的样本都基本在20min以内</p>\n</li>\n<li>\n<p>trance size并不总是意味着更长处理时间。</p>\n</li>\n<li>\n<p>如果loop很少，那么history更大，性能会更差</p>\n</li>\n<li>\n<p>比较环节，性能主要取决于LDP的数量以及参数数量</p>\n<p><img src=\"aligot.assets/image-20211202215338681.png\" alt=\"image-20211202215338681\"></p>\n</li>\n</ul>\n<p><strong>不足：</strong></p>\n<ul>\n<li>局限于特定的执行路径（一个程序P，输入为K，C（密文），输出C’(明文)，但不是P的所有执行路径都实现了密码函数，但确定具体的执行路径由逆向人员完成）</li>\n<li>需要密码函数的参考实现</li>\n<li>参数编码后便难以识别</li>\n</ul>\n"},{"title":"Visual Basic 6.0中的c2.dll除法优化相关逆向分析与数学模型","date":"2021-06-20T12:00:00.000Z","keywords":null,"description":null,"top_img":null,"comments":1,"cover":"/image/star.jpg","toc":null,"toc_number":null,"copyright":null,"mathjax":null,"katex":true,"hide":null,"_content":"\n\n\n## 逆向分析过程\n\n使用ccf Explorer中的Address Converter计算文件偏移地址为5FACE的虚拟地址为1075EACE![image-20210616195848892](c2dll.assets/image-20210616195848892-16456145093001.png)\n\n使用ida打开c2.dll，跳转到1075EACE地址处，分析1075EACE到1075EB9C的代码，也就是sub_1075EACE(a)函数（自命名为calmagic(a))\n\n1. 判断输入参数a是否小于3，小于则跳转到loc_1075EAEA,否则继续将其与0Dh(13)进行比较，不小于13则跳转到loc_1075EAEA,否则返回dword_107AE0D8[2a]（自定义为数组num[2*a])，即直接查表返回magicnumber\n\n![image-20210618142608631](c2dll.assets/image-20210618142608631-16456145093012.png)\n\n查看数组的值如下所示\n\n![image-20210619144516190](c2dll.assets/image-20210619144516190-16456145093013.png)\n\n2. loc_1075EAEA:使用cdq指令将eax（mov eax,ecx将参数a存入eax中)的最高位全部复制到edx的每一位。可以看出该部分主要为各寄存器值的计算，各寄存器分别计算如下：\n\n- edi:首先将eax中的值存入edi中，然后与其符号位扩展得来的edx异或，再减去edx，求得参数的绝对值。\n\n- esi:首先将ecx中的值存入esi中，然后shr右移31位，sub减去80000000h，接着sub减去edx中的值（为eax:edx的值div edi后得到的余数），最后再通过dec减一\n\n- 将31放入var_8中\n\n- ebp:由mov ebp,eax将eax的值存入其中，即80000000/esi的值\n\n- ebx:由sub ebx,eax可以看出最后值为ebx-eax的值，刚开始ebx为80000000，eax此时为esi*(80000000/esi)\n\n- ecx:由moc ecx,eax可以看出最后值为eax值，即80000000/edi后的值\n\n- edx:由sub edx,eax可以看出最后值为edx（80000000）-eax（edi*(80000000/edi))\n\n  该部分运算代码如下：\n\n  ```c\n  \tedi = a > 0?a:-a;\n  \tvar_8 = 31;\n  \n  \tesi = ((unsigned int)a >> 31) + 0x80000000 - (((unsigned int)a >> 31) + 0x80000000) % edi - 1;\n  \tebp = 0x80000000 / esi;\n  \tebx = 0x80000000 - esi * (0x80000000 / esi);\n  \tecx = 0x80000000 / edi;\n  \tedx = 0x80000000 - edi * (0x80000000 / edi);\n  ```\n\n  \n\n![image-20210618143512463](c2dll.assets/image-20210618143512463-16456145093014.png)\n\n3. loc_1075EB47:可以发现主要为一个do_while循环。依次进行运算：var_8++；ebx=ebx+ebx；ebp=ebp+ebp,之后比较ebx与esi的值，ebx不小于esi时则跳转到loc_1078F407,否则跳转到loc_1075EB5C\n\n   ![image-20210618161025486](c2dll.assets/image-20210618161025486-16456145093015.png)\n\n4. loc_1078F407:将ebp++,ebx=ebx-esi;\n\n   ![image-20210618161730728](c2dll.assets/image-20210618161730728-16456145093016.png)\n\n5. loc_1075EB5C:运算edx=edx+edx;ecx=ecx+ecx;接着比较edx与edi的值，小于则跳转到loc_1075EB3F,否则将ecx++,edx=edx-edi\n\n   ![image-20210618162011465](c2dll.assets/image-20210618162011465-16456145093017.png)\n\n6. loc_1075EB3F:判断ebp与edi-edx的值，不小于则继续用test指令将ebx与ebx进行与运算并设置标志位ZF.标志位ZF为1（运算结果为0）则跳转到步骤步骤3继续执行，否则进入下一步\n\n   ![image-20210618162115746](c2dll.assets/image-20210618162115746-16456145093018.png)\n\n   该段循环运算代码如下：\n\n   ```c\n   \tdo {\n   \t\tebx = ebx + ebx;\n   \t\tebp = ebp + ebp;\n   \t\tvar_8 ++;\n   \t\tif(ebx >= esi) {\n   \t\t\tebp++;\n   \t\t\tebx -= esi;\n   \t\t}\n   \n   \t\tedx = edx + edx;\n   \t\tecx = ecx + ecx;\n   \t\tif(edx >= edi) {\n   \t\t\tecx++;\n   \t\t\tedx -= edi;\n   \t\t}\n   \t}while(ebp < edi - edx || ebp == edi - edx && !ebx);\n   ```\n\n   \n\n7. loc_1075EB6F:令dword_1079F090为eax(之前用lea指令将ecx+1作为地址存入eax中），然后判断输入参数a是否小于0，小于则跳转到loc_1078F41C,否则跳转到loc_1075EB87\n\n   ![image-20210618163119738](c2dll.assets/image-20210618163119738-16456145093029.png)\n\n   \n\n8. loc_1078F41C:eax中的值取负数存入dword_1079F090中![image-20210618163947120](c2dll.assets/image-20210618163947120-164561450930210.png)\n\n9. loc_1075EB87:令eax为dword_1079F090的地址，dword_1079F094为var_8+0FFFFFFE0h（即-32）\n\n   ![image-20210618164215851](c2dll.assets/image-20210618164215851-164561450930211.png)\n\n该算法整体代码如下：\n\n```c\n#include<stdio.h>\nint magicnum;\nint n; //相对于32的增量 \n\nint num[26] = {  \n  1, 1,           // 0 \n  1, 1,           // 1\n  1, 1,           // 2\n  0x55555556, 0,\n  0, 0,           // 4\n  0x66666667, 1,\n  0x2AAAAAAB, 0,\n  0x92492493, 2,\n  0, 0,           // 8\n  0x38E38E39, 1,\n  0x66666667, 2,\n  0x2E8BA2E9, 1,\n  0x2AAAAAAB, 1\n};\n\nint calmagic(int a) {\n\tunsigned int edi;\n\tunsigned int esi;\n\tunsigned int ebp;\n\tunsigned int ebx;\n\tunsigned int ecx;\n\tunsigned int edx;\n\tint var_8;\n\tint *result;\n\n\tif(a >=3 && (unsigned int )a < 13) {\n\t\tn = num[2*a+1];\n\t\treturn num[2*a];\n\t\t\n\t}\n\n\tedi = a > 0?a:-a;\n\tvar_8 = 31;\n\t\n\tesi = ((unsigned int)a >> 31) + 0x80000000 - (((unsigned int)a >> 31) + 0x80000000) % edi - 1;\n\tebp = 0x80000000 / esi;\n\tebx = 0x80000000 - esi * ebp;\n\tecx = 0x80000000 / edi;\n\tedx = 0x80000000 - edi * ecx;\n\n\tdo {\n\t\tebx = ebx + ebx;\n\t\tebp = ebp + ebp;\n\t\tvar_8 ++;\n\t\tif(ebx >= esi) {\n\t\t\tebp++;\n\t\t\tebx -= esi;\n\t\t}\n\n\t\tedx = edx + edx;\n\t\tecx = ecx + ecx;\n\t\tif(edx >= edi) {\n\t\t\tecx++;\n\t\t\tedx -= edi;\n\t\t}\n\t}while(ebp < edi - edx || ebp == edi - edx && !ebx);\n\t\n\tmagicnum = ecx + 1;\n\n\tif(a < 0) {\n\t\tmagicnum = -(ecx + 1);\n\t}\n\n\tn = var_8 - 32;\n\treturn magicnum;\n\n}\n\nint main() {\n\tint number;\n\tprintf(\"请输入除数\\n\");\n\tscanf(\"%d\",&number);\n\tint result = calmagic(number);\n\tprintf(\"magic number:%x,相对于32的增量为%d\\n\",result,n);\n\treturn 0;\n}\n```\n\n进行测试如下所示\n\n除数为7\n\n![image-20210619145806024](c2dll.assets/image-20210619145806024-164561450930212.png)\n\n除数为27\n\n![image-20210619150017590](c2dll.assets/image-20210619150017590-164561450930213.png)\n\n除数为-7\n\n![image-20210619150139149](c2dll.assets/image-20210619150139149-164561450930214.png)\n\n成功还原\n\n\n\n\n\n## 数学模型分析\n\n计算x/o，o为常数，若直接使用div，耗费的机器周期较长，因此编译器会进行优化来缩短指令周期。主要利用的数学推导如下：\n\n![image-20210619104237632](c2dll.assets/image-20210619104237632-164561450930215.png)\n\n由于2^n/o可以提前计算出来，因此可以将除法转化乘法以及移位指令进行计算，即优化为\n\n```\nimul ecx;    //ecx存储被除数x\nsar edx,exp; //exp为指数相对于32的增量，edx存储乘积的高位，因此相当于已经右移了32位，所以再移位需要计算相对于32的增量\n```\n\n因此，算法期望根据输入的除数o，找到满足下述公式的n和m\n$$\n⌈2^n/m⌉=o\n$$\n结合逆向出的算法进行分析\n\n1. 首先判断除数o是否属于[3,13)，属于则直接从已建好的表中得到n与m，否则继续下列步骤计算得到n与m\n\n2. edi中存储除数的绝对值，var_8存储指数n（由于下面do_while循环至少一次循环，因此首先赋值为31），假设`(((unsigned int)a >> 31) + 0x80000000) / edi`得到商为q，余数为r,其中0x80000000为2^31，那么`esi=q*edi-1,ebp=(2^31)/esi,ebx=2^31-esi*(2^31/esi)`；假设`2^31除以esi`得到商为k，余数为y，那么`ebp=k,ebx=y,ecx = (2^31)/edi = k;edx = 2^31 - edi*(2^31/edi) = y`\n\n3. 循环计算：每次循环ebx,ebp乘以2，假设循环次数为i，因此`ebx=y*2^i,ebp=k\\*2^i`，每次循环var_8加1，最后var_8相当于我们需要找的n。若ebx >= esi，那么ebp加1，ebx=ebx-esi，这里用到数学归纳法求得`2^（31+i）除以esi`的商以及余数，证明如下\n   $$\n   已知   2^{(31+i)}/esi = Ki ……Yi\n   $$\n\n   $$\n   那么2^{(31+i+1)}/esi =  2^{(31+i)} * 2/esi = (2^{(31+i)} /esi ) * 2\n   $$\n\n   $$\n   2^{(31+i+1)} / esi = ( Ki * esi + Yi) * 2 =  2 * Ki * esi + 2 * Yi\\\\\n   2^{(31+i+1)}/esi = 2 * Ki …… 2 * Yi\n   $$\n\n   $$\n   因此 2^{(31+i+1)}/esi = 2 * Ki …… 2 * Yi\n   $$\n\n   因此，主要是使用if判断2 * Mi是否大于esi，大于则说明商要加1，余数要减掉除数，因为Mi < esi，所以2 * Mi < 2 * esi，最多只可能多出一个esi。之后的同理为计算`2^(31+i)/edi`的商和余数，而edi又是除数a的绝对值，所以循环结束后`ecx = 2^(31+i)/edi`就是得到的magic number\n\n   除数o大于0时，\n   $$\n   ecx = 2^{31} - 2^{31} \\% c - 1\n   $$\n   除数o小于0时，\n   $$\n   ecx = 2^{31}-2^{31}\\%|c|\n   $$\n\n   \n\n   \n","source":"_posts/c2dll.md","raw":"---\ntitle: \"Visual Basic 6.0中的c2.dll除法优化相关逆向分析与数学模型\"\ndate: 2021-06-20 20:00:00\ntags:\n  - reverse\ncategories:\n  - reverse\nkeywords:\ndescription:\ntop_img:\ncomments:\ncover:\ntoc:\ntoc_number:\ncopyright:\nmathjax:\nkatex: true\nhide:\n---\n\n\n\n## 逆向分析过程\n\n使用ccf Explorer中的Address Converter计算文件偏移地址为5FACE的虚拟地址为1075EACE![image-20210616195848892](c2dll.assets/image-20210616195848892-16456145093001.png)\n\n使用ida打开c2.dll，跳转到1075EACE地址处，分析1075EACE到1075EB9C的代码，也就是sub_1075EACE(a)函数（自命名为calmagic(a))\n\n1. 判断输入参数a是否小于3，小于则跳转到loc_1075EAEA,否则继续将其与0Dh(13)进行比较，不小于13则跳转到loc_1075EAEA,否则返回dword_107AE0D8[2a]（自定义为数组num[2*a])，即直接查表返回magicnumber\n\n![image-20210618142608631](c2dll.assets/image-20210618142608631-16456145093012.png)\n\n查看数组的值如下所示\n\n![image-20210619144516190](c2dll.assets/image-20210619144516190-16456145093013.png)\n\n2. loc_1075EAEA:使用cdq指令将eax（mov eax,ecx将参数a存入eax中)的最高位全部复制到edx的每一位。可以看出该部分主要为各寄存器值的计算，各寄存器分别计算如下：\n\n- edi:首先将eax中的值存入edi中，然后与其符号位扩展得来的edx异或，再减去edx，求得参数的绝对值。\n\n- esi:首先将ecx中的值存入esi中，然后shr右移31位，sub减去80000000h，接着sub减去edx中的值（为eax:edx的值div edi后得到的余数），最后再通过dec减一\n\n- 将31放入var_8中\n\n- ebp:由mov ebp,eax将eax的值存入其中，即80000000/esi的值\n\n- ebx:由sub ebx,eax可以看出最后值为ebx-eax的值，刚开始ebx为80000000，eax此时为esi*(80000000/esi)\n\n- ecx:由moc ecx,eax可以看出最后值为eax值，即80000000/edi后的值\n\n- edx:由sub edx,eax可以看出最后值为edx（80000000）-eax（edi*(80000000/edi))\n\n  该部分运算代码如下：\n\n  ```c\n  \tedi = a > 0?a:-a;\n  \tvar_8 = 31;\n  \n  \tesi = ((unsigned int)a >> 31) + 0x80000000 - (((unsigned int)a >> 31) + 0x80000000) % edi - 1;\n  \tebp = 0x80000000 / esi;\n  \tebx = 0x80000000 - esi * (0x80000000 / esi);\n  \tecx = 0x80000000 / edi;\n  \tedx = 0x80000000 - edi * (0x80000000 / edi);\n  ```\n\n  \n\n![image-20210618143512463](c2dll.assets/image-20210618143512463-16456145093014.png)\n\n3. loc_1075EB47:可以发现主要为一个do_while循环。依次进行运算：var_8++；ebx=ebx+ebx；ebp=ebp+ebp,之后比较ebx与esi的值，ebx不小于esi时则跳转到loc_1078F407,否则跳转到loc_1075EB5C\n\n   ![image-20210618161025486](c2dll.assets/image-20210618161025486-16456145093015.png)\n\n4. loc_1078F407:将ebp++,ebx=ebx-esi;\n\n   ![image-20210618161730728](c2dll.assets/image-20210618161730728-16456145093016.png)\n\n5. loc_1075EB5C:运算edx=edx+edx;ecx=ecx+ecx;接着比较edx与edi的值，小于则跳转到loc_1075EB3F,否则将ecx++,edx=edx-edi\n\n   ![image-20210618162011465](c2dll.assets/image-20210618162011465-16456145093017.png)\n\n6. loc_1075EB3F:判断ebp与edi-edx的值，不小于则继续用test指令将ebx与ebx进行与运算并设置标志位ZF.标志位ZF为1（运算结果为0）则跳转到步骤步骤3继续执行，否则进入下一步\n\n   ![image-20210618162115746](c2dll.assets/image-20210618162115746-16456145093018.png)\n\n   该段循环运算代码如下：\n\n   ```c\n   \tdo {\n   \t\tebx = ebx + ebx;\n   \t\tebp = ebp + ebp;\n   \t\tvar_8 ++;\n   \t\tif(ebx >= esi) {\n   \t\t\tebp++;\n   \t\t\tebx -= esi;\n   \t\t}\n   \n   \t\tedx = edx + edx;\n   \t\tecx = ecx + ecx;\n   \t\tif(edx >= edi) {\n   \t\t\tecx++;\n   \t\t\tedx -= edi;\n   \t\t}\n   \t}while(ebp < edi - edx || ebp == edi - edx && !ebx);\n   ```\n\n   \n\n7. loc_1075EB6F:令dword_1079F090为eax(之前用lea指令将ecx+1作为地址存入eax中），然后判断输入参数a是否小于0，小于则跳转到loc_1078F41C,否则跳转到loc_1075EB87\n\n   ![image-20210618163119738](c2dll.assets/image-20210618163119738-16456145093029.png)\n\n   \n\n8. loc_1078F41C:eax中的值取负数存入dword_1079F090中![image-20210618163947120](c2dll.assets/image-20210618163947120-164561450930210.png)\n\n9. loc_1075EB87:令eax为dword_1079F090的地址，dword_1079F094为var_8+0FFFFFFE0h（即-32）\n\n   ![image-20210618164215851](c2dll.assets/image-20210618164215851-164561450930211.png)\n\n该算法整体代码如下：\n\n```c\n#include<stdio.h>\nint magicnum;\nint n; //相对于32的增量 \n\nint num[26] = {  \n  1, 1,           // 0 \n  1, 1,           // 1\n  1, 1,           // 2\n  0x55555556, 0,\n  0, 0,           // 4\n  0x66666667, 1,\n  0x2AAAAAAB, 0,\n  0x92492493, 2,\n  0, 0,           // 8\n  0x38E38E39, 1,\n  0x66666667, 2,\n  0x2E8BA2E9, 1,\n  0x2AAAAAAB, 1\n};\n\nint calmagic(int a) {\n\tunsigned int edi;\n\tunsigned int esi;\n\tunsigned int ebp;\n\tunsigned int ebx;\n\tunsigned int ecx;\n\tunsigned int edx;\n\tint var_8;\n\tint *result;\n\n\tif(a >=3 && (unsigned int )a < 13) {\n\t\tn = num[2*a+1];\n\t\treturn num[2*a];\n\t\t\n\t}\n\n\tedi = a > 0?a:-a;\n\tvar_8 = 31;\n\t\n\tesi = ((unsigned int)a >> 31) + 0x80000000 - (((unsigned int)a >> 31) + 0x80000000) % edi - 1;\n\tebp = 0x80000000 / esi;\n\tebx = 0x80000000 - esi * ebp;\n\tecx = 0x80000000 / edi;\n\tedx = 0x80000000 - edi * ecx;\n\n\tdo {\n\t\tebx = ebx + ebx;\n\t\tebp = ebp + ebp;\n\t\tvar_8 ++;\n\t\tif(ebx >= esi) {\n\t\t\tebp++;\n\t\t\tebx -= esi;\n\t\t}\n\n\t\tedx = edx + edx;\n\t\tecx = ecx + ecx;\n\t\tif(edx >= edi) {\n\t\t\tecx++;\n\t\t\tedx -= edi;\n\t\t}\n\t}while(ebp < edi - edx || ebp == edi - edx && !ebx);\n\t\n\tmagicnum = ecx + 1;\n\n\tif(a < 0) {\n\t\tmagicnum = -(ecx + 1);\n\t}\n\n\tn = var_8 - 32;\n\treturn magicnum;\n\n}\n\nint main() {\n\tint number;\n\tprintf(\"请输入除数\\n\");\n\tscanf(\"%d\",&number);\n\tint result = calmagic(number);\n\tprintf(\"magic number:%x,相对于32的增量为%d\\n\",result,n);\n\treturn 0;\n}\n```\n\n进行测试如下所示\n\n除数为7\n\n![image-20210619145806024](c2dll.assets/image-20210619145806024-164561450930212.png)\n\n除数为27\n\n![image-20210619150017590](c2dll.assets/image-20210619150017590-164561450930213.png)\n\n除数为-7\n\n![image-20210619150139149](c2dll.assets/image-20210619150139149-164561450930214.png)\n\n成功还原\n\n\n\n\n\n## 数学模型分析\n\n计算x/o，o为常数，若直接使用div，耗费的机器周期较长，因此编译器会进行优化来缩短指令周期。主要利用的数学推导如下：\n\n![image-20210619104237632](c2dll.assets/image-20210619104237632-164561450930215.png)\n\n由于2^n/o可以提前计算出来，因此可以将除法转化乘法以及移位指令进行计算，即优化为\n\n```\nimul ecx;    //ecx存储被除数x\nsar edx,exp; //exp为指数相对于32的增量，edx存储乘积的高位，因此相当于已经右移了32位，所以再移位需要计算相对于32的增量\n```\n\n因此，算法期望根据输入的除数o，找到满足下述公式的n和m\n$$\n⌈2^n/m⌉=o\n$$\n结合逆向出的算法进行分析\n\n1. 首先判断除数o是否属于[3,13)，属于则直接从已建好的表中得到n与m，否则继续下列步骤计算得到n与m\n\n2. edi中存储除数的绝对值，var_8存储指数n（由于下面do_while循环至少一次循环，因此首先赋值为31），假设`(((unsigned int)a >> 31) + 0x80000000) / edi`得到商为q，余数为r,其中0x80000000为2^31，那么`esi=q*edi-1,ebp=(2^31)/esi,ebx=2^31-esi*(2^31/esi)`；假设`2^31除以esi`得到商为k，余数为y，那么`ebp=k,ebx=y,ecx = (2^31)/edi = k;edx = 2^31 - edi*(2^31/edi) = y`\n\n3. 循环计算：每次循环ebx,ebp乘以2，假设循环次数为i，因此`ebx=y*2^i,ebp=k\\*2^i`，每次循环var_8加1，最后var_8相当于我们需要找的n。若ebx >= esi，那么ebp加1，ebx=ebx-esi，这里用到数学归纳法求得`2^（31+i）除以esi`的商以及余数，证明如下\n   $$\n   已知   2^{(31+i)}/esi = Ki ……Yi\n   $$\n\n   $$\n   那么2^{(31+i+1)}/esi =  2^{(31+i)} * 2/esi = (2^{(31+i)} /esi ) * 2\n   $$\n\n   $$\n   2^{(31+i+1)} / esi = ( Ki * esi + Yi) * 2 =  2 * Ki * esi + 2 * Yi\\\\\n   2^{(31+i+1)}/esi = 2 * Ki …… 2 * Yi\n   $$\n\n   $$\n   因此 2^{(31+i+1)}/esi = 2 * Ki …… 2 * Yi\n   $$\n\n   因此，主要是使用if判断2 * Mi是否大于esi，大于则说明商要加1，余数要减掉除数，因为Mi < esi，所以2 * Mi < 2 * esi，最多只可能多出一个esi。之后的同理为计算`2^(31+i)/edi`的商和余数，而edi又是除数a的绝对值，所以循环结束后`ecx = 2^(31+i)/edi`就是得到的magic number\n\n   除数o大于0时，\n   $$\n   ecx = 2^{31} - 2^{31} \\% c - 1\n   $$\n   除数o小于0时，\n   $$\n   ecx = 2^{31}-2^{31}\\%|c|\n   $$\n\n   \n\n   \n","slug":"c2dll","published":1,"updated":"2022-02-22T23:09:00.000Z","layout":"post","photos":[],"link":"","_id":"cletwjohy0012ri3sgehcfo83","content":"<h2 id=\"逆向分析过程\">逆向分析过程</h2>\n<p>使用ccf Explorer中的Address Converter计算文件偏移地址为5FACE的虚拟地址为1075EACE<img src=\"c2dll.assets/image-20210616195848892-16456145093001.png\" alt=\"image-20210616195848892\"></p>\n<p>使用ida打开c2.dll，跳转到1075EACE地址处，分析1075EACE到1075EB9C的代码，也就是sub_1075EACE(a)函数（自命名为calmagic(a))</p>\n<ol>\n<li>判断输入参数a是否小于3，小于则跳转到loc_1075EAEA,否则继续将其与0Dh(13)进行比较，不小于13则跳转到loc_1075EAEA,否则返回dword_107AE0D8[2a]（自定义为数组num[2*a])，即直接查表返回magicnumber</li>\n</ol>\n<p><img src=\"c2dll.assets/image-20210618142608631-16456145093012.png\" alt=\"image-20210618142608631\"></p>\n<p>查看数组的值如下所示</p>\n<p><img src=\"c2dll.assets/image-20210619144516190-16456145093013.png\" alt=\"image-20210619144516190\"></p>\n<ol start=\"2\">\n<li>loc_1075EAEA:使用cdq指令将eax（mov eax,ecx将参数a存入eax中)的最高位全部复制到edx的每一位。可以看出该部分主要为各寄存器值的计算，各寄存器分别计算如下：</li>\n</ol>\n<ul>\n<li>\n<p>edi:首先将eax中的值存入edi中，然后与其符号位扩展得来的edx异或，再减去edx，求得参数的绝对值。</p>\n</li>\n<li>\n<p>esi:首先将ecx中的值存入esi中，然后shr右移31位，sub减去80000000h，接着sub减去edx中的值（为eax:edx的值div edi后得到的余数），最后再通过dec减一</p>\n</li>\n<li>\n<p>将31放入var_8中</p>\n</li>\n<li>\n<p>ebp:由mov ebp,eax将eax的值存入其中，即80000000/esi的值</p>\n</li>\n<li>\n<p>ebx:由sub ebx,eax可以看出最后值为ebx-eax的值，刚开始ebx为80000000，eax此时为esi*(80000000/esi)</p>\n</li>\n<li>\n<p>ecx:由moc ecx,eax可以看出最后值为eax值，即80000000/edi后的值</p>\n</li>\n<li>\n<p>edx:由sub edx,eax可以看出最后值为edx（80000000）-eax（edi*(80000000/edi))</p>\n<p>该部分运算代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">edi = a &gt; <span class=\"number\">0</span>?a:-a;</span><br><span class=\"line\">var_8 = <span class=\"number\">31</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">esi = ((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)a &gt;&gt; <span class=\"number\">31</span>) + <span class=\"number\">0x80000000</span> - (((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)a &gt;&gt; <span class=\"number\">31</span>) + <span class=\"number\">0x80000000</span>) % edi - <span class=\"number\">1</span>;</span><br><span class=\"line\">ebp = <span class=\"number\">0x80000000</span> / esi;</span><br><span class=\"line\">ebx = <span class=\"number\">0x80000000</span> - esi * (<span class=\"number\">0x80000000</span> / esi);</span><br><span class=\"line\">ecx = <span class=\"number\">0x80000000</span> / edi;</span><br><span class=\"line\">edx = <span class=\"number\">0x80000000</span> - edi * (<span class=\"number\">0x80000000</span> / edi);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"c2dll.assets/image-20210618143512463-16456145093014.png\" alt=\"image-20210618143512463\"></p>\n<ol start=\"3\">\n<li>\n<p>loc_1075EB47:可以发现主要为一个do_while循环。依次进行运算：var_8++；ebx=ebx+ebx；ebp=ebp+ebp,之后比较ebx与esi的值，ebx不小于esi时则跳转到loc_1078F407,否则跳转到loc_1075EB5C</p>\n<p><img src=\"c2dll.assets/image-20210618161025486-16456145093015.png\" alt=\"image-20210618161025486\"></p>\n</li>\n<li>\n<p>loc_1078F407:将ebp++,ebx=ebx-esi;</p>\n<p><img src=\"c2dll.assets/image-20210618161730728-16456145093016.png\" alt=\"image-20210618161730728\"></p>\n</li>\n<li>\n<p>loc_1075EB5C:运算edx=edx+edx;ecx=ecx+ecx;接着比较edx与edi的值，小于则跳转到loc_1075EB3F,否则将ecx++,edx=edx-edi</p>\n<p><img src=\"c2dll.assets/image-20210618162011465-16456145093017.png\" alt=\"image-20210618162011465\"></p>\n</li>\n<li>\n<p>loc_1075EB3F:判断ebp与edi-edx的值，不小于则继续用test指令将ebx与ebx进行与运算并设置标志位ZF.标志位ZF为1（运算结果为0）则跳转到步骤步骤3继续执行，否则进入下一步</p>\n<p><img src=\"c2dll.assets/image-20210618162115746-16456145093018.png\" alt=\"image-20210618162115746\"></p>\n<p>该段循环运算代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">\tebx = ebx + ebx;</span><br><span class=\"line\">\tebp = ebp + ebp;</span><br><span class=\"line\">\tvar_8 ++;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ebx &gt;= esi) &#123;</span><br><span class=\"line\">\t\tebp++;</span><br><span class=\"line\">\t\tebx -= esi;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">\tedx = edx + edx;</span><br><span class=\"line\">\tecx = ecx + ecx;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(edx &gt;= edi) &#123;</span><br><span class=\"line\">\t\tecx++;</span><br><span class=\"line\">\t\tedx -= edi;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span>(ebp &lt; edi - edx || ebp == edi - edx &amp;&amp; !ebx);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>loc_1075EB6F:令dword_1079F090为eax(之前用lea指令将ecx+1作为地址存入eax中），然后判断输入参数a是否小于0，小于则跳转到loc_1078F41C,否则跳转到loc_1075EB87</p>\n<p><img src=\"c2dll.assets/image-20210618163119738-16456145093029.png\" alt=\"image-20210618163119738\"></p>\n</li>\n<li>\n<p>loc_1078F41C:eax中的值取负数存入dword_1079F090中<img src=\"c2dll.assets/image-20210618163947120-164561450930210.png\" alt=\"image-20210618163947120\"></p>\n</li>\n<li>\n<p>loc_1075EB87:令eax为dword_1079F090的地址，dword_1079F094为var_8+0FFFFFFE0h（即-32）</p>\n<p><img src=\"c2dll.assets/image-20210618164215851-164561450930211.png\" alt=\"image-20210618164215851\"></p>\n</li>\n</ol>\n<p>该算法整体代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">int</span> magicnum;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n; <span class=\"comment\">//相对于32的增量 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> num[<span class=\"number\">26</span>] = &#123;  </span><br><span class=\"line\">  <span class=\"number\">1</span>, <span class=\"number\">1</span>,           <span class=\"comment\">// 0 </span></span><br><span class=\"line\">  <span class=\"number\">1</span>, <span class=\"number\">1</span>,           <span class=\"comment\">// 1</span></span><br><span class=\"line\">  <span class=\"number\">1</span>, <span class=\"number\">1</span>,           <span class=\"comment\">// 2</span></span><br><span class=\"line\">  <span class=\"number\">0x55555556</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"number\">0</span>, <span class=\"number\">0</span>,           <span class=\"comment\">// 4</span></span><br><span class=\"line\">  <span class=\"number\">0x66666667</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"number\">0x2AAAAAAB</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"number\">0x92492493</span>, <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"number\">0</span>, <span class=\"number\">0</span>,           <span class=\"comment\">// 8</span></span><br><span class=\"line\">  <span class=\"number\">0x38E38E39</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"number\">0x66666667</span>, <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"number\">0x2E8BA2E9</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"number\">0x2AAAAAAB</span>, <span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">calmagic</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> edi;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> esi;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> ebp;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> ebx;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> ecx;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> edx;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> var_8;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> *result;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a &gt;=<span class=\"number\">3</span> &amp;&amp; (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> )a &lt; <span class=\"number\">13</span>) &#123;</span><br><span class=\"line\">\t\tn = num[<span class=\"number\">2</span>*a+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> num[<span class=\"number\">2</span>*a];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tedi = a &gt; <span class=\"number\">0</span>?a:-a;</span><br><span class=\"line\">\tvar_8 = <span class=\"number\">31</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tesi = ((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)a &gt;&gt; <span class=\"number\">31</span>) + <span class=\"number\">0x80000000</span> - (((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)a &gt;&gt; <span class=\"number\">31</span>) + <span class=\"number\">0x80000000</span>) % edi - <span class=\"number\">1</span>;</span><br><span class=\"line\">\tebp = <span class=\"number\">0x80000000</span> / esi;</span><br><span class=\"line\">\tebx = <span class=\"number\">0x80000000</span> - esi * ebp;</span><br><span class=\"line\">\tecx = <span class=\"number\">0x80000000</span> / edi;</span><br><span class=\"line\">\tedx = <span class=\"number\">0x80000000</span> - edi * ecx;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">\t\tebx = ebx + ebx;</span><br><span class=\"line\">\t\tebp = ebp + ebp;</span><br><span class=\"line\">\t\tvar_8 ++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(ebx &gt;= esi) &#123;</span><br><span class=\"line\">\t\t\tebp++;</span><br><span class=\"line\">\t\t\tebx -= esi;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tedx = edx + edx;</span><br><span class=\"line\">\t\tecx = ecx + ecx;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(edx &gt;= edi) &#123;</span><br><span class=\"line\">\t\t\tecx++;</span><br><span class=\"line\">\t\t\tedx -= edi;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">while</span>(ebp &lt; edi - edx || ebp == edi - edx &amp;&amp; !ebx);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tmagicnum = ecx + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tmagicnum = -(ecx + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tn = var_8 - <span class=\"number\">32</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> magicnum;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> number;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入除数\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;number);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> result = calmagic(number);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;magic number:%x,相对于32的增量为%d\\n&quot;</span>,result,n);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>进行测试如下所示</p>\n<p>除数为7</p>\n<p><img src=\"c2dll.assets/image-20210619145806024-164561450930212.png\" alt=\"image-20210619145806024\"></p>\n<p>除数为27</p>\n<p><img src=\"c2dll.assets/image-20210619150017590-164561450930213.png\" alt=\"image-20210619150017590\"></p>\n<p>除数为-7</p>\n<p><img src=\"c2dll.assets/image-20210619150139149-164561450930214.png\" alt=\"image-20210619150139149\"></p>\n<p>成功还原</p>\n<h2 id=\"数学模型分析\">数学模型分析</h2>\n<p>计算x/o，o为常数，若直接使用div，耗费的机器周期较长，因此编译器会进行优化来缩短指令周期。主要利用的数学推导如下：</p>\n<p><img src=\"c2dll.assets/image-20210619104237632-164561450930215.png\" alt=\"image-20210619104237632\"></p>\n<p>由于2^n/o可以提前计算出来，因此可以将除法转化乘法以及移位指令进行计算，即优化为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imul ecx;    //ecx存储被除数x</span><br><span class=\"line\">sar edx,exp; //exp为指数相对于32的增量，edx存储乘积的高位，因此相当于已经右移了32位，所以再移位需要计算相对于32的增量</span><br></pre></td></tr></table></figure>\n<p>因此，算法期望根据输入的除数o，找到满足下述公式的n和m</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">⌈</mo><msup><mn>2</mn><mi>n</mi></msup><mi mathvariant=\"normal\">/</mi><mi>m</mi><mo stretchy=\"false\">⌉</mo><mo>=</mo><mi>o</mi></mrow><annotation encoding=\"application/x-tex\">⌈2^n/m⌉=o\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌈</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">⌉</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">o</span></span></span></span></span></p>\n<p>结合逆向出的算法进行分析</p>\n<ol>\n<li>\n<p>首先判断除数o是否属于[3,13)，属于则直接从已建好的表中得到n与m，否则继续下列步骤计算得到n与m</p>\n</li>\n<li>\n<p>edi中存储除数的绝对值，var_8存储指数n（由于下面do_while循环至少一次循环，因此首先赋值为31），假设<code>(((unsigned int)a &gt;&gt; 31) + 0x80000000) / edi</code>得到商为q，余数为r,其中0x80000000为2^31，那么<code>esi=q*edi-1,ebp=(2^31)/esi,ebx=2^31-esi*(2^31/esi)</code>；假设<code>2^31除以esi</code>得到商为k，余数为y，那么<code>ebp=k,ebx=y,ecx = (2^31)/edi = k;edx = 2^31 - edi*(2^31/edi) = y</code></p>\n</li>\n<li>\n<p>循环计算：每次循环ebx,ebp乘以2，假设循环次数为i，因此<code>ebx=y*2^i,ebp=k\\*2^i</code>，每次循环var_8加1，最后var_8相当于我们需要找的n。若ebx &gt;= esi，那么ebp加1，ebx=ebx-esi，这里用到数学归纳法求得<code>2^（31+i）除以esi</code>的商以及余数，证明如下</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>已知</mtext><msup><mn>2</mn><mrow><mo stretchy=\"false\">(</mo><mn>31</mn><mo>+</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mi mathvariant=\"normal\">/</mi><mi>e</mi><mi>s</mi><mi>i</mi><mo>=</mo><mi>K</mi><mi>i</mi><mo>…</mo><mo>…</mo><mi>Y</mi><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">已知   2^{(31+i)}/esi = Ki ……Yi\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.188em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\">已知</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">31</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\">es</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">……</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">Yi</span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>那么</mtext><msup><mn>2</mn><mrow><mo stretchy=\"false\">(</mo><mn>31</mn><mo>+</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></msup><mi mathvariant=\"normal\">/</mi><mi>e</mi><mi>s</mi><mi>i</mi><mo>=</mo><msup><mn>2</mn><mrow><mo stretchy=\"false\">(</mo><mn>31</mn><mo>+</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo>∗</mo><mn>2</mn><mi mathvariant=\"normal\">/</mi><mi>e</mi><mi>s</mi><mi>i</mi><mo>=</mo><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mrow><mo stretchy=\"false\">(</mo><mn>31</mn><mo>+</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mi mathvariant=\"normal\">/</mi><mi>e</mi><mi>s</mi><mi>i</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">那么2^{(31+i+1)}/esi =  2^{(31+i)} * 2/esi = (2^{(31+i)} /esi ) * 2\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.188em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\">那么</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">31</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\">es</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.938em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">31</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2/</span><span class=\"mord mathnormal\">es</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.188em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">31</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\">es</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msup><mn>2</mn><mrow><mo stretchy=\"false\">(</mo><mn>31</mn><mo>+</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></msup><mi mathvariant=\"normal\">/</mi><mi>e</mi><mi>s</mi><mi>i</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi>K</mi><mi>i</mi><mo>∗</mo><mi>e</mi><mi>s</mi><mi>i</mi><mo>+</mo><mi>Y</mi><mi>i</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mn>2</mn><mo>=</mo><mn>2</mn><mo>∗</mo><mi>K</mi><mi>i</mi><mo>∗</mo><mi>e</mi><mi>s</mi><mi>i</mi><mo>+</mo><mn>2</mn><mo>∗</mo><mi>Y</mi><mi>i</mi><mspace linebreak=\"newline\"></mspace><msup><mn>2</mn><mrow><mo stretchy=\"false\">(</mo><mn>31</mn><mo>+</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></msup><mi mathvariant=\"normal\">/</mi><mi>e</mi><mi>s</mi><mi>i</mi><mo>=</mo><mn>2</mn><mo>∗</mo><mi>K</mi><mi>i</mi><mo>…</mo><mo>…</mo><mn>2</mn><mo>∗</mo><mi>Y</mi><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">2^{(31+i+1)} / esi = ( Ki * esi + Yi) * 2 =  2 * Ki * esi + 2 * Yi\\\\\n2^{(31+i+1)}/esi = 2 * Ki …… 2 * Yi\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.188em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">31</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\">es</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7429em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">es</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Yi</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7429em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">es</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">Yi</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1.188em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">31</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\">es</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">……</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">Yi</span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>因此</mtext><msup><mn>2</mn><mrow><mo stretchy=\"false\">(</mo><mn>31</mn><mo>+</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></msup><mi mathvariant=\"normal\">/</mi><mi>e</mi><mi>s</mi><mi>i</mi><mo>=</mo><mn>2</mn><mo>∗</mo><mi>K</mi><mi>i</mi><mo>…</mo><mo>…</mo><mn>2</mn><mo>∗</mo><mi>Y</mi><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">因此 2^{(31+i+1)}/esi = 2 * Ki …… 2 * Yi\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.188em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\">因此</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">31</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\">es</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">……</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">Yi</span></span></span></span></span></p>\n<p>因此，主要是使用if判断2 * Mi是否大于esi，大于则说明商要加1，余数要减掉除数，因为Mi &lt; esi，所以2 * Mi &lt; 2 * esi，最多只可能多出一个esi。之后的同理为计算<code>2^(31+i)/edi</code>的商和余数，而edi又是除数a的绝对值，所以循环结束后<code>ecx = 2^(31+i)/edi</code>就是得到的magic number</p>\n<p>除数o大于0时，</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>e</mi><mi>c</mi><mi>x</mi><mo>=</mo><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup><mi mathvariant=\"normal\">%</mi><mi>c</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">ecx = 2^{31} - 2^{31} \\% c - 1\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ec</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">31</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">31</span></span></span></span></span></span></span></span></span><span class=\"mord\">%</span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></span></p>\n<p>除数o小于0时，</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>e</mi><mi>c</mi><mi>x</mi><mo>=</mo><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup><mi mathvariant=\"normal\">%</mi><mi mathvariant=\"normal\">∣</mi><mi>c</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">ecx = 2^{31}-2^{31}\\%|c|\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ec</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">31</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">31</span></span></span></span></span></span></span></span></span><span class=\"mord\">%∣</span><span class=\"mord mathnormal\">c</span><span class=\"mord\">∣</span></span></span></span></span></p>\n</li>\n</ol>\n","site":{"data":{"about":{"class":{"class_name":"about","link_list":{"-1":{"name":"Scorpion","avatar":"/image/avatar.jpg","link":null,"descr":"�����ƹ������ë��̨��ɢ�򣬻�ѩ���������ݣ����ֲ�Ƭ����Ƭ�赸��Ƶ��ҵ����Ӱ���Ǻð�ȫ��"}}}},"link":{"class":{"class_name":"友情链接","link_list":{"-1":{"name":"M4tsuri","link":"https://M4tsuri.io","avatar":"/image/m4tsuri.jpg","descr":"pwn,blockchain"}}}}}},"excerpt":"","more":"<h2 id=\"逆向分析过程\">逆向分析过程</h2>\n<p>使用ccf Explorer中的Address Converter计算文件偏移地址为5FACE的虚拟地址为1075EACE<img src=\"c2dll.assets/image-20210616195848892-16456145093001.png\" alt=\"image-20210616195848892\"></p>\n<p>使用ida打开c2.dll，跳转到1075EACE地址处，分析1075EACE到1075EB9C的代码，也就是sub_1075EACE(a)函数（自命名为calmagic(a))</p>\n<ol>\n<li>判断输入参数a是否小于3，小于则跳转到loc_1075EAEA,否则继续将其与0Dh(13)进行比较，不小于13则跳转到loc_1075EAEA,否则返回dword_107AE0D8[2a]（自定义为数组num[2*a])，即直接查表返回magicnumber</li>\n</ol>\n<p><img src=\"c2dll.assets/image-20210618142608631-16456145093012.png\" alt=\"image-20210618142608631\"></p>\n<p>查看数组的值如下所示</p>\n<p><img src=\"c2dll.assets/image-20210619144516190-16456145093013.png\" alt=\"image-20210619144516190\"></p>\n<ol start=\"2\">\n<li>loc_1075EAEA:使用cdq指令将eax（mov eax,ecx将参数a存入eax中)的最高位全部复制到edx的每一位。可以看出该部分主要为各寄存器值的计算，各寄存器分别计算如下：</li>\n</ol>\n<ul>\n<li>\n<p>edi:首先将eax中的值存入edi中，然后与其符号位扩展得来的edx异或，再减去edx，求得参数的绝对值。</p>\n</li>\n<li>\n<p>esi:首先将ecx中的值存入esi中，然后shr右移31位，sub减去80000000h，接着sub减去edx中的值（为eax:edx的值div edi后得到的余数），最后再通过dec减一</p>\n</li>\n<li>\n<p>将31放入var_8中</p>\n</li>\n<li>\n<p>ebp:由mov ebp,eax将eax的值存入其中，即80000000/esi的值</p>\n</li>\n<li>\n<p>ebx:由sub ebx,eax可以看出最后值为ebx-eax的值，刚开始ebx为80000000，eax此时为esi*(80000000/esi)</p>\n</li>\n<li>\n<p>ecx:由moc ecx,eax可以看出最后值为eax值，即80000000/edi后的值</p>\n</li>\n<li>\n<p>edx:由sub edx,eax可以看出最后值为edx（80000000）-eax（edi*(80000000/edi))</p>\n<p>该部分运算代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">edi = a &gt; <span class=\"number\">0</span>?a:-a;</span><br><span class=\"line\">var_8 = <span class=\"number\">31</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">esi = ((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)a &gt;&gt; <span class=\"number\">31</span>) + <span class=\"number\">0x80000000</span> - (((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)a &gt;&gt; <span class=\"number\">31</span>) + <span class=\"number\">0x80000000</span>) % edi - <span class=\"number\">1</span>;</span><br><span class=\"line\">ebp = <span class=\"number\">0x80000000</span> / esi;</span><br><span class=\"line\">ebx = <span class=\"number\">0x80000000</span> - esi * (<span class=\"number\">0x80000000</span> / esi);</span><br><span class=\"line\">ecx = <span class=\"number\">0x80000000</span> / edi;</span><br><span class=\"line\">edx = <span class=\"number\">0x80000000</span> - edi * (<span class=\"number\">0x80000000</span> / edi);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"c2dll.assets/image-20210618143512463-16456145093014.png\" alt=\"image-20210618143512463\"></p>\n<ol start=\"3\">\n<li>\n<p>loc_1075EB47:可以发现主要为一个do_while循环。依次进行运算：var_8++；ebx=ebx+ebx；ebp=ebp+ebp,之后比较ebx与esi的值，ebx不小于esi时则跳转到loc_1078F407,否则跳转到loc_1075EB5C</p>\n<p><img src=\"c2dll.assets/image-20210618161025486-16456145093015.png\" alt=\"image-20210618161025486\"></p>\n</li>\n<li>\n<p>loc_1078F407:将ebp++,ebx=ebx-esi;</p>\n<p><img src=\"c2dll.assets/image-20210618161730728-16456145093016.png\" alt=\"image-20210618161730728\"></p>\n</li>\n<li>\n<p>loc_1075EB5C:运算edx=edx+edx;ecx=ecx+ecx;接着比较edx与edi的值，小于则跳转到loc_1075EB3F,否则将ecx++,edx=edx-edi</p>\n<p><img src=\"c2dll.assets/image-20210618162011465-16456145093017.png\" alt=\"image-20210618162011465\"></p>\n</li>\n<li>\n<p>loc_1075EB3F:判断ebp与edi-edx的值，不小于则继续用test指令将ebx与ebx进行与运算并设置标志位ZF.标志位ZF为1（运算结果为0）则跳转到步骤步骤3继续执行，否则进入下一步</p>\n<p><img src=\"c2dll.assets/image-20210618162115746-16456145093018.png\" alt=\"image-20210618162115746\"></p>\n<p>该段循环运算代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">\tebx = ebx + ebx;</span><br><span class=\"line\">\tebp = ebp + ebp;</span><br><span class=\"line\">\tvar_8 ++;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ebx &gt;= esi) &#123;</span><br><span class=\"line\">\t\tebp++;</span><br><span class=\"line\">\t\tebx -= esi;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">\tedx = edx + edx;</span><br><span class=\"line\">\tecx = ecx + ecx;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(edx &gt;= edi) &#123;</span><br><span class=\"line\">\t\tecx++;</span><br><span class=\"line\">\t\tedx -= edi;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span>(ebp &lt; edi - edx || ebp == edi - edx &amp;&amp; !ebx);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>loc_1075EB6F:令dword_1079F090为eax(之前用lea指令将ecx+1作为地址存入eax中），然后判断输入参数a是否小于0，小于则跳转到loc_1078F41C,否则跳转到loc_1075EB87</p>\n<p><img src=\"c2dll.assets/image-20210618163119738-16456145093029.png\" alt=\"image-20210618163119738\"></p>\n</li>\n<li>\n<p>loc_1078F41C:eax中的值取负数存入dword_1079F090中<img src=\"c2dll.assets/image-20210618163947120-164561450930210.png\" alt=\"image-20210618163947120\"></p>\n</li>\n<li>\n<p>loc_1075EB87:令eax为dword_1079F090的地址，dword_1079F094为var_8+0FFFFFFE0h（即-32）</p>\n<p><img src=\"c2dll.assets/image-20210618164215851-164561450930211.png\" alt=\"image-20210618164215851\"></p>\n</li>\n</ol>\n<p>该算法整体代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">int</span> magicnum;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n; <span class=\"comment\">//相对于32的增量 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> num[<span class=\"number\">26</span>] = &#123;  </span><br><span class=\"line\">  <span class=\"number\">1</span>, <span class=\"number\">1</span>,           <span class=\"comment\">// 0 </span></span><br><span class=\"line\">  <span class=\"number\">1</span>, <span class=\"number\">1</span>,           <span class=\"comment\">// 1</span></span><br><span class=\"line\">  <span class=\"number\">1</span>, <span class=\"number\">1</span>,           <span class=\"comment\">// 2</span></span><br><span class=\"line\">  <span class=\"number\">0x55555556</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"number\">0</span>, <span class=\"number\">0</span>,           <span class=\"comment\">// 4</span></span><br><span class=\"line\">  <span class=\"number\">0x66666667</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"number\">0x2AAAAAAB</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"number\">0x92492493</span>, <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"number\">0</span>, <span class=\"number\">0</span>,           <span class=\"comment\">// 8</span></span><br><span class=\"line\">  <span class=\"number\">0x38E38E39</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"number\">0x66666667</span>, <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"number\">0x2E8BA2E9</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"number\">0x2AAAAAAB</span>, <span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">calmagic</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> edi;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> esi;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> ebp;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> ebx;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> ecx;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> edx;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> var_8;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> *result;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a &gt;=<span class=\"number\">3</span> &amp;&amp; (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> )a &lt; <span class=\"number\">13</span>) &#123;</span><br><span class=\"line\">\t\tn = num[<span class=\"number\">2</span>*a+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> num[<span class=\"number\">2</span>*a];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tedi = a &gt; <span class=\"number\">0</span>?a:-a;</span><br><span class=\"line\">\tvar_8 = <span class=\"number\">31</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tesi = ((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)a &gt;&gt; <span class=\"number\">31</span>) + <span class=\"number\">0x80000000</span> - (((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)a &gt;&gt; <span class=\"number\">31</span>) + <span class=\"number\">0x80000000</span>) % edi - <span class=\"number\">1</span>;</span><br><span class=\"line\">\tebp = <span class=\"number\">0x80000000</span> / esi;</span><br><span class=\"line\">\tebx = <span class=\"number\">0x80000000</span> - esi * ebp;</span><br><span class=\"line\">\tecx = <span class=\"number\">0x80000000</span> / edi;</span><br><span class=\"line\">\tedx = <span class=\"number\">0x80000000</span> - edi * ecx;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">\t\tebx = ebx + ebx;</span><br><span class=\"line\">\t\tebp = ebp + ebp;</span><br><span class=\"line\">\t\tvar_8 ++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(ebx &gt;= esi) &#123;</span><br><span class=\"line\">\t\t\tebp++;</span><br><span class=\"line\">\t\t\tebx -= esi;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tedx = edx + edx;</span><br><span class=\"line\">\t\tecx = ecx + ecx;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(edx &gt;= edi) &#123;</span><br><span class=\"line\">\t\t\tecx++;</span><br><span class=\"line\">\t\t\tedx -= edi;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">while</span>(ebp &lt; edi - edx || ebp == edi - edx &amp;&amp; !ebx);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tmagicnum = ecx + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tmagicnum = -(ecx + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tn = var_8 - <span class=\"number\">32</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> magicnum;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> number;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入除数\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;number);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> result = calmagic(number);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;magic number:%x,相对于32的增量为%d\\n&quot;</span>,result,n);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>进行测试如下所示</p>\n<p>除数为7</p>\n<p><img src=\"c2dll.assets/image-20210619145806024-164561450930212.png\" alt=\"image-20210619145806024\"></p>\n<p>除数为27</p>\n<p><img src=\"c2dll.assets/image-20210619150017590-164561450930213.png\" alt=\"image-20210619150017590\"></p>\n<p>除数为-7</p>\n<p><img src=\"c2dll.assets/image-20210619150139149-164561450930214.png\" alt=\"image-20210619150139149\"></p>\n<p>成功还原</p>\n<h2 id=\"数学模型分析\">数学模型分析</h2>\n<p>计算x/o，o为常数，若直接使用div，耗费的机器周期较长，因此编译器会进行优化来缩短指令周期。主要利用的数学推导如下：</p>\n<p><img src=\"c2dll.assets/image-20210619104237632-164561450930215.png\" alt=\"image-20210619104237632\"></p>\n<p>由于2^n/o可以提前计算出来，因此可以将除法转化乘法以及移位指令进行计算，即优化为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imul ecx;    //ecx存储被除数x</span><br><span class=\"line\">sar edx,exp; //exp为指数相对于32的增量，edx存储乘积的高位，因此相当于已经右移了32位，所以再移位需要计算相对于32的增量</span><br></pre></td></tr></table></figure>\n<p>因此，算法期望根据输入的除数o，找到满足下述公式的n和m</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">⌈</mo><msup><mn>2</mn><mi>n</mi></msup><mi mathvariant=\"normal\">/</mi><mi>m</mi><mo stretchy=\"false\">⌉</mo><mo>=</mo><mi>o</mi></mrow><annotation encoding=\"application/x-tex\">⌈2^n/m⌉=o\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌈</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">⌉</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">o</span></span></span></span></span></p>\n<p>结合逆向出的算法进行分析</p>\n<ol>\n<li>\n<p>首先判断除数o是否属于[3,13)，属于则直接从已建好的表中得到n与m，否则继续下列步骤计算得到n与m</p>\n</li>\n<li>\n<p>edi中存储除数的绝对值，var_8存储指数n（由于下面do_while循环至少一次循环，因此首先赋值为31），假设<code>(((unsigned int)a &gt;&gt; 31) + 0x80000000) / edi</code>得到商为q，余数为r,其中0x80000000为2^31，那么<code>esi=q*edi-1,ebp=(2^31)/esi,ebx=2^31-esi*(2^31/esi)</code>；假设<code>2^31除以esi</code>得到商为k，余数为y，那么<code>ebp=k,ebx=y,ecx = (2^31)/edi = k;edx = 2^31 - edi*(2^31/edi) = y</code></p>\n</li>\n<li>\n<p>循环计算：每次循环ebx,ebp乘以2，假设循环次数为i，因此<code>ebx=y*2^i,ebp=k\\*2^i</code>，每次循环var_8加1，最后var_8相当于我们需要找的n。若ebx &gt;= esi，那么ebp加1，ebx=ebx-esi，这里用到数学归纳法求得<code>2^（31+i）除以esi</code>的商以及余数，证明如下</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>已知</mtext><msup><mn>2</mn><mrow><mo stretchy=\"false\">(</mo><mn>31</mn><mo>+</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mi mathvariant=\"normal\">/</mi><mi>e</mi><mi>s</mi><mi>i</mi><mo>=</mo><mi>K</mi><mi>i</mi><mo>…</mo><mo>…</mo><mi>Y</mi><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">已知   2^{(31+i)}/esi = Ki ……Yi\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.188em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\">已知</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">31</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\">es</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">……</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">Yi</span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>那么</mtext><msup><mn>2</mn><mrow><mo stretchy=\"false\">(</mo><mn>31</mn><mo>+</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></msup><mi mathvariant=\"normal\">/</mi><mi>e</mi><mi>s</mi><mi>i</mi><mo>=</mo><msup><mn>2</mn><mrow><mo stretchy=\"false\">(</mo><mn>31</mn><mo>+</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo>∗</mo><mn>2</mn><mi mathvariant=\"normal\">/</mi><mi>e</mi><mi>s</mi><mi>i</mi><mo>=</mo><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mrow><mo stretchy=\"false\">(</mo><mn>31</mn><mo>+</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mi mathvariant=\"normal\">/</mi><mi>e</mi><mi>s</mi><mi>i</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">那么2^{(31+i+1)}/esi =  2^{(31+i)} * 2/esi = (2^{(31+i)} /esi ) * 2\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.188em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\">那么</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">31</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\">es</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.938em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">31</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2/</span><span class=\"mord mathnormal\">es</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.188em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">31</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\">es</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msup><mn>2</mn><mrow><mo stretchy=\"false\">(</mo><mn>31</mn><mo>+</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></msup><mi mathvariant=\"normal\">/</mi><mi>e</mi><mi>s</mi><mi>i</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi>K</mi><mi>i</mi><mo>∗</mo><mi>e</mi><mi>s</mi><mi>i</mi><mo>+</mo><mi>Y</mi><mi>i</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mn>2</mn><mo>=</mo><mn>2</mn><mo>∗</mo><mi>K</mi><mi>i</mi><mo>∗</mo><mi>e</mi><mi>s</mi><mi>i</mi><mo>+</mo><mn>2</mn><mo>∗</mo><mi>Y</mi><mi>i</mi><mspace linebreak=\"newline\"></mspace><msup><mn>2</mn><mrow><mo stretchy=\"false\">(</mo><mn>31</mn><mo>+</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></msup><mi mathvariant=\"normal\">/</mi><mi>e</mi><mi>s</mi><mi>i</mi><mo>=</mo><mn>2</mn><mo>∗</mo><mi>K</mi><mi>i</mi><mo>…</mo><mo>…</mo><mn>2</mn><mo>∗</mo><mi>Y</mi><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">2^{(31+i+1)} / esi = ( Ki * esi + Yi) * 2 =  2 * Ki * esi + 2 * Yi\\\\\n2^{(31+i+1)}/esi = 2 * Ki …… 2 * Yi\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.188em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">31</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\">es</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7429em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">es</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Yi</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7429em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">es</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">Yi</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1.188em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">31</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\">es</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">……</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">Yi</span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>因此</mtext><msup><mn>2</mn><mrow><mo stretchy=\"false\">(</mo><mn>31</mn><mo>+</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></msup><mi mathvariant=\"normal\">/</mi><mi>e</mi><mi>s</mi><mi>i</mi><mo>=</mo><mn>2</mn><mo>∗</mo><mi>K</mi><mi>i</mi><mo>…</mo><mo>…</mo><mn>2</mn><mo>∗</mo><mi>Y</mi><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">因此 2^{(31+i+1)}/esi = 2 * Ki …… 2 * Yi\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.188em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\">因此</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">31</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\">es</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">……</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">Yi</span></span></span></span></span></p>\n<p>因此，主要是使用if判断2 * Mi是否大于esi，大于则说明商要加1，余数要减掉除数，因为Mi &lt; esi，所以2 * Mi &lt; 2 * esi，最多只可能多出一个esi。之后的同理为计算<code>2^(31+i)/edi</code>的商和余数，而edi又是除数a的绝对值，所以循环结束后<code>ecx = 2^(31+i)/edi</code>就是得到的magic number</p>\n<p>除数o大于0时，</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>e</mi><mi>c</mi><mi>x</mi><mo>=</mo><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup><mi mathvariant=\"normal\">%</mi><mi>c</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">ecx = 2^{31} - 2^{31} \\% c - 1\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ec</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">31</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">31</span></span></span></span></span></span></span></span></span><span class=\"mord\">%</span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></span></p>\n<p>除数o小于0时，</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>e</mi><mi>c</mi><mi>x</mi><mo>=</mo><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup><mi mathvariant=\"normal\">%</mi><mi mathvariant=\"normal\">∣</mi><mi>c</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">ecx = 2^{31}-2^{31}\\%|c|\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ec</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">31</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">31</span></span></span></span></span></span></span></span></span><span class=\"mord\">%∣</span><span class=\"mord mathnormal\">c</span><span class=\"mord\">∣</span></span></span></span></span></p>\n</li>\n</ol>\n"},{"title":"[论文笔记-asiaccs2015]DFG","date":"2022-02-22T12:58:00.000Z","keywords":null,"description":null,"top_img":null,"comments":1,"cover":"https://scorpionre.github.io/2022/02/22/dfg/dfg.assets/image-20220218195458486.png","toc":null,"toc_number":null,"copyright":null,"mathjax":null,"katex":true,"hide":null,"_content":"\n\n\n# DFG论文\n\n![image-20220218195458486](dfg.assets/image-20220218195458486.png)\n\nLestringant,P., Guihéry,F. and Fouque,P.. Automated identification of cryptographic primitives in binary code with data flow graph isomorphism. (2015)In Proceedings of the 10th ACM Symposium on Information, Computer and Communications Security, pages 203–214. \n\n## 背景\n\n软件用密码算法保护通信安全性以及数据安全。但算法的选择，具体实现方法，输入参数的生成对数据安全性有巨大影响。所以分析有密码的二进制文件安全性时，需要确保没有上述几点影响系统安全。所以首先需要识别并定位密码算法。但分析是耗时费力的，所以需要自动化工具\n\n**现有方法：**\n\n- 静态分析主要根据常量或I/O关系，大多利用统计特性，可能不准确\n- 动态分析性能不太好\n\n**缺陷：**\n\n- 手动构建签名的准确性\n- 依赖启发式代码片段选择\n- 仅限于已知密码原语\n- constant state\n\n**特色**\n\n- 静态分析，基于DFG\n\n  - 表示数据间依赖。便于提取相关操作的子集以生成精确的签名\n\n  - 方便重写程序。可以通过重写DFG移除相同算法的不同实例中的变量\n\n- 高效，没有误报（除了签名不够distinctive）\n\n  \n\n**贡献：**\n\n1. 高效可靠地自动识别定位对称密码算法以及参数\n\n2. 归一化以及签名匹配，可以抵御编译器优化和源码变化\n3. 知名密码库测试并验证方案有效性\n\n## 具体方案\n\n1. 根据汇编代码构建相应DFG\n2. 用重写规则对DFG归一化\n3. 在DFG中搜索与密码算法图签名同构的子图\n\n![image-20220221181451970](dfg.assets/image-20220221181451970.png)\n\n#### 图构建\n\nDFG：表示一系列操作之间的数据依赖关系的有向无环图（Directed Acyclic Graph)\n\n- 顶点：表示算术/逻辑操作或输入变量\n\n- 边：顶点v1到v2的边表示v1(或v1操作后的结果)是v2的输入\n\n\n\n根据程序片段F的汇编代码， 将每条指令 i 转换为一组操作 Oi ，而这些操作可能为空（NOP 或分支)，也可能包含多个顶点（可能需要多个操作来重现复杂指令的行为），然后迭代根据F中的指令，构建相应DFG：`Gf = (V,E)`。其中V是顶点的集合，E是边集\n\n根据输入类型分为以下三种情况：\n\n- 立即数：向Gf中添加一个常量输入变量。该顶点表示立即数的值，且由边连接到Oi\n\n- 寄存器：在写入该寄存器的最后一个值和 Oi 间创建一个边。实际上，这意味着为每个寄存器维护一个数组，其中包含对 Gf 中该值对应的顶点的引用。\n\n  引用：\n\n  - null：寄存器还未被使用（新的输入顶点将被添加到图中）\n  - 指向输入变量（寄存器被读取但未被写入）\n  - 指向操作（最后被写入寄存器的值）\n\n- 内存：load（读取），store（写入）。这两个操作以一个地址作为输入操作数，该地址的计算在Gf中被显式转录。同时还会跟踪程序片段中内存访问的顺序\n\n#### 例子\n\ncustom Even-Mansour cipher\n$$\nC =S(p\\ xor\\ k)\\ xor\\ k\n$$\nS表示S盒，p表示明文，k表示密钥，C表示密文\n\n其x86汇编代码如下\n\n![image-20220221190220766](dfg.assets/image-20220221190220766.png)\n\n其构建的DFG图如下：\n\n矩形框中的表示输入变量，圆框中表示操作\n\n![image-20220221190337262](dfg.assets/image-20220221190337262.png)\n\n### 归一化\n\n**目的**：在不改变DFG语义的情况下做出调整以便匹配算法子图。即消除开发人员、编译器优化或反汇编导致的不同。\n\n\n\n三种规则：\n\n#### Normalization Rules\n\n多个指令可以执行相同的操作时使用。\n\n![image-20220221191520450](dfg.assets/image-20220221191520450.png)\n\n#### Memory Access Simplification Rules\n\n规范化的图应该不需要任何内存操作，除了那些与输入或输出变量相对应的操作\n\n- store after store：移除第一个store\n- load after store：移除load，load的输出与store的输入一样\n- load after load：合并，两者操作的输出一样\n\n但还存在aliasing的问题，当两个不同的顶点等于相同的地址值时，在这种情况下，为两个顶点计算的地址序列是不完整的。这会造成两种后果：\n\n- miss additional simplification cases。但这不算真正的问题，因为可以假设这些最后会被其他简化规则处理（如公共子表达式的消除）\n\n- 用不完整的序列进行简化可能不可逆地破坏代码语义，如以下几种情况：\n\n  1. 两store间有aliased load\n  2. store与load间有aliased store\n  3. 两load间有aliased store\n\n  解决方法：当检测到一个可能的别名问题时，将内存操作的序列分割开来。其结果是一组序列不存在任何别名矛盾，并且可以安全地进行简化。但缺点在于如果过于inclusive，一些合法的简化案例会被忽略。\n\n比如下图中，load1和load4都是load地址(esp+8)，中间没有写入，即没有aliasing问题，所以可以进行合并\n\n![image-20220222110155634](dfg.assets/image-20220222110155634.png)\n\n#### General Simplification Rules\n\n目的：\n\n1. 发现哪些内存访问是在同一地址进行的，以实现前面所述的内存简化\n2. 优化未被优化代码的DFG图。由于编译器优化不一定可逆，所以如果需要使未被优化的代码与优化的代码的归一化后的DFG一样，只能优化未被优化的代码。\n\n假设下面的指令序列及其优化后的对应序列：\n\n![image-20220222110826232](dfg.assets/image-20220222110826232.png)\n\n假设某个编译器刚好执行了这种优化。很明显，这将很难被撤销，而我们无法猜到在序列的最后有一个右移操作。它的规范化表示应该肯定是优化后的结果。因此，每次遇到原始序列时，它都必须被优化。\n\n但由于提出的straight line假设，不需要为配合现代编译器的数据优化做大量工作，只需局部应用于单个基本块（有入口点与出口点）\n\n规则主要分为：\n\n- 公共子表达式的消除：如果两个操作共享同一组输入操作数，那么它们显然会产生相同的输出。因此，它们中的一个可以安全地从图中删除。\n\n  合并由同一组操作数(基数、索引、比例和位移)产生的有效地址。因此，一些内存访问将显式地共享图中的地址顶点。\n\n  比如load1和load4地址都是（esp+8)所以可以删掉其中一组操作，两个load共享同一地址顶点。\n\n  ![image-20220222112450707](dfg.assets/image-20220222112450707.png)\n\n- 常数简化\n\n  以下两种情况可进行常数简化：\n\n  1. 如果算术/逻辑运算的每个输入操作数都是一个常变量。操作可以用结果代替\n  2. 如果一个算术/逻辑运算有一个操作数等于该运算的ientity element或absorbing element(如果它们存在)\n\n  有时需要重排associative operations的序列。该种规则合并涉及常变量的连续关联运算\n\n  如下图中两个加4被化简为加8\n\n  ![image-20220222113121499](dfg.assets/image-20220222113121499.png)\n\n  另一种重排策略是distribution，这对于内存地址的简化尤为重要，因为x86寻址模式的比例参数。所以该种规则分配涉及常变量的分配操作\n\n### signature\n\n人工构建签名。\n\n#### macro signature\n\n目的：针对算法的各种各样实现，有时需要多种签名。为了减少它们的数量，引入宏签名来构建上下文无关的graph grammar。\n\n思想：在每次检测到签名时将一个特殊的顶点附加到DFG。\n\n一个宏签名是一个包含一般的DFG顶点（终端符号）和代表其他签名的顶点（非终端符号符号）的图。\n\n意义：\n\n1. 减少需要测试的签名数量。\n\n​\t没有宏签名时，要测试的签名数量为\n$$\n\\prod ^n_{i=1}a_i\n$$\n​\t用宏签名，每个备份可以被独立搜索，只需要\n$$\n\\sum^n_{i=1}a_i\n$$\n个签名\n\n2. 将大的图分解成更小的图\n\n#### 例子\n\n如果我们要定位密码算法的参数，那么对于明文，密码，密钥，至少一个连接的路径，签名至少都要有一个顶点。\n\n\n\n首先创建了一个签名，包含对替换盒的访问（地址计算加内存读取）\n\n然后，右边图中一个新的顶点后(sig1），对应于第一个签名的成功匹配\n\n最后成功匹配custom Even-Mansour算法的签名\n\n![image-20220222141947171](dfg.assets/image-20220222141947171.png)\n\n\n\n### 子图同构\n\n给定归一化的DFG与signatures，得到DFG中包含哪些signatures。采用Ullmann子图同构算法\n\n子图定义：如果`Va`属于`Vb`且`Ea`属于`Eb`，那么`Ga = {Va, Ea}`是`Gb = {Vb, Eb}`的子图\n\n同构定义：\n$$\n存在函数f:Va \\mapsto Vb\n\\\\使得 (v, w) \\in Ea \\iff (f(v),f(w)) \\in Eb\n$$\n那么`Ga = {Va, Ea}`与`Gb={Vb, Eb}`同构\n\n具体算法如下（深度优先搜索树）：\n\n1. 对签名中的每个顶点v属于Vs，维护一个可能的分配集Av，其被初始化为D中标签与v相同的顶点\n\n2. 递归搜索，找到满足条件的f即表示找到了有效的同构子图；否则UPDATE(Av)进行相应剪枝操作，然后继续搜索\n\n3. 剪枝：\n   $$\n   v,w均属于Vs，且（v,w)\\in Es\n   \\\\对所有x \\in Av\n   \\\\不存在y\\in Aw,\\ 使得(x,y)\\in Ed\n   \\\\那么可以从Av中删除x\n   $$\n\n![image-20220222143759387](dfg.assets/image-20220222143759387.png)\n\n## 测试评估\n\n为什么该方法没有误报：\n\n1. 归一化过程保留语义。\n2. Ullmann算法得到是精准的。虽然也可能签名不够distingctive，其他算法的DFG也可能匹配该签名。\n\n#### XTEA\n\nhttp://en.wikipedia.org/w/index.php?title=XTEA&oldid=618892433 的c语言实现\n\n![image-20220222152208862](dfg.assets/image-20220222152208862.png)\n\nCrypto++, LibTomCrypt, Botan，均成功检测。但存在密钥调度问题，LibTomCrypt中在早期初始化阶段进行得到round key buffer；Crypto++或Botan则在主要的加解密循环中计算。而这种差异不能通过归一化消除，所以应在签名级别处理。因此去掉签名中的密钥调度来得到对不同版本保持一致性的签名。虽然密钥无法识别，但是round key buffer和密钥调度的最终操作是作为签名输入变量的一部分被识别的\n\n#### MD5\n\nRFC中的C语言实现\n\n![image-20220222152902061](dfg.assets/image-20220222152902061.png)\n\n除MSVC外，代表Feistel网络的final macro signature的识别是成功的。\n\n在MSVC的情况下，并不是所有的64轮签名都能正确检测到第二个信息块的。因此取决于每个回合的正确识别最后的签名在第二个消息块中没有被检测到。该问题可以用以下两点来解释：\n\n1. Rotation：每轮函数都包括循环移位。由于C中没有循环移位运算符，需要用两个移位和一个or运算符来实现。有些编译器能识别并转换为x86中的循环移位指令。但MSVC并不总是进行这样的转换，但确定重写规则来识别并将其转换为一个循环移位的顶点是非常困难的。所以在签名层面解决该问题，同时说明macro signature的好处（64轮的总组合数是2^64，而用macro signatures只需要轮签名数量的两倍）\n2. constant state：第一个信息块的状态被常量初始化。由于之前涉及初始状态的操作与周围的操作合并以使数字简化的重写规则，MSVC中第二个信息块的开始若有扩展形式的循环移位指令，将会影响预期的签名模式。该问题尚未被解决，希望能有消除分布在几个顶点上的公共子表达式的方法。\n\n\n\nCrypto++, LibTomCrypt and OpenSSL中md5的测试均成功，因为循环移位都是用x86指令集实现的，且初始状态未被视为常量，因为API设计初始化在代码片段之外的另一个函数中执行。\n\n#### AES\n\nGladman网站提供的源代码\n\n![image-20220222195328619](dfg.assets/image-20220222195328619.png)\n\nCrypto++,LibTomCrypt and Botan\n\nCrypto++只能检测解密的算法，加密由于其使用MMX和SSE2指令（DFG构建时不支持）未被成功识别。其余均成功检测\n\n#### 性能\n\n子图同构是NP完全问题，但大多数情况都可以有校解决\n\n每一列对应一个代码片段（来源于LibTomCrypt），每一行对应一个签名\n\n- 灰色表示未成功匹配，能很快出结果（<1ms)\n\n- 大的签名（涵盖几个回合的签名）所花费的时间的时间明显多于较小的签名（仅覆盖一个回合)。因此可以用macro signature来减少签名的大小。但顶点的数量并不是影响执行时间的唯一参数，有时较大的签名意味着其顶点之间有更强的结构约束，子图同构算法就能更快地收敛到解决方案\n- 每条重写规则都是与顶点数量成线性关系的，除了普通的子表达规则是二次的（至少对naive implementation)。然而，如前所述，重写规则规则是迭代应用的，直到达到一个平衡点。因此，执行时间也取决于原始DFG与归一化DFG之间的距离。在实践中归一化的执行时间并不超过签名匹配的执行时间\n\n![image-20220222195734989](dfg.assets/image-20220222195734989.png)\n\n## 改进\n\n- 通过利用macro signature，涵盖块密码的操作模式\n- 自动识别公钥密码算法\n- 从参考实现中自动生成签名\n","source":"_posts/dfg.md","raw":"---\ntitle: \"[论文笔记-asiaccs2015]DFG\"\ndate: 2022-02-22 20:58:00\ntags: \n\t- crypto\n\t- reverse\n\t- CryptoDetect\n\t- paper\ncategories:\n\t- [CryptoDetect,paper]\nkeywords:\ndescription:\ntop_img:\ncomments:\ncover: https://scorpionre.github.io/2022/02/22/dfg/dfg.assets/image-20220218195458486.png\ntoc:\ntoc_number:\ncopyright:\nmathjax:\nkatex: true\nhide:\n---\n\n\n\n# DFG论文\n\n![image-20220218195458486](dfg.assets/image-20220218195458486.png)\n\nLestringant,P., Guihéry,F. and Fouque,P.. Automated identification of cryptographic primitives in binary code with data flow graph isomorphism. (2015)In Proceedings of the 10th ACM Symposium on Information, Computer and Communications Security, pages 203–214. \n\n## 背景\n\n软件用密码算法保护通信安全性以及数据安全。但算法的选择，具体实现方法，输入参数的生成对数据安全性有巨大影响。所以分析有密码的二进制文件安全性时，需要确保没有上述几点影响系统安全。所以首先需要识别并定位密码算法。但分析是耗时费力的，所以需要自动化工具\n\n**现有方法：**\n\n- 静态分析主要根据常量或I/O关系，大多利用统计特性，可能不准确\n- 动态分析性能不太好\n\n**缺陷：**\n\n- 手动构建签名的准确性\n- 依赖启发式代码片段选择\n- 仅限于已知密码原语\n- constant state\n\n**特色**\n\n- 静态分析，基于DFG\n\n  - 表示数据间依赖。便于提取相关操作的子集以生成精确的签名\n\n  - 方便重写程序。可以通过重写DFG移除相同算法的不同实例中的变量\n\n- 高效，没有误报（除了签名不够distinctive）\n\n  \n\n**贡献：**\n\n1. 高效可靠地自动识别定位对称密码算法以及参数\n\n2. 归一化以及签名匹配，可以抵御编译器优化和源码变化\n3. 知名密码库测试并验证方案有效性\n\n## 具体方案\n\n1. 根据汇编代码构建相应DFG\n2. 用重写规则对DFG归一化\n3. 在DFG中搜索与密码算法图签名同构的子图\n\n![image-20220221181451970](dfg.assets/image-20220221181451970.png)\n\n#### 图构建\n\nDFG：表示一系列操作之间的数据依赖关系的有向无环图（Directed Acyclic Graph)\n\n- 顶点：表示算术/逻辑操作或输入变量\n\n- 边：顶点v1到v2的边表示v1(或v1操作后的结果)是v2的输入\n\n\n\n根据程序片段F的汇编代码， 将每条指令 i 转换为一组操作 Oi ，而这些操作可能为空（NOP 或分支)，也可能包含多个顶点（可能需要多个操作来重现复杂指令的行为），然后迭代根据F中的指令，构建相应DFG：`Gf = (V,E)`。其中V是顶点的集合，E是边集\n\n根据输入类型分为以下三种情况：\n\n- 立即数：向Gf中添加一个常量输入变量。该顶点表示立即数的值，且由边连接到Oi\n\n- 寄存器：在写入该寄存器的最后一个值和 Oi 间创建一个边。实际上，这意味着为每个寄存器维护一个数组，其中包含对 Gf 中该值对应的顶点的引用。\n\n  引用：\n\n  - null：寄存器还未被使用（新的输入顶点将被添加到图中）\n  - 指向输入变量（寄存器被读取但未被写入）\n  - 指向操作（最后被写入寄存器的值）\n\n- 内存：load（读取），store（写入）。这两个操作以一个地址作为输入操作数，该地址的计算在Gf中被显式转录。同时还会跟踪程序片段中内存访问的顺序\n\n#### 例子\n\ncustom Even-Mansour cipher\n$$\nC =S(p\\ xor\\ k)\\ xor\\ k\n$$\nS表示S盒，p表示明文，k表示密钥，C表示密文\n\n其x86汇编代码如下\n\n![image-20220221190220766](dfg.assets/image-20220221190220766.png)\n\n其构建的DFG图如下：\n\n矩形框中的表示输入变量，圆框中表示操作\n\n![image-20220221190337262](dfg.assets/image-20220221190337262.png)\n\n### 归一化\n\n**目的**：在不改变DFG语义的情况下做出调整以便匹配算法子图。即消除开发人员、编译器优化或反汇编导致的不同。\n\n\n\n三种规则：\n\n#### Normalization Rules\n\n多个指令可以执行相同的操作时使用。\n\n![image-20220221191520450](dfg.assets/image-20220221191520450.png)\n\n#### Memory Access Simplification Rules\n\n规范化的图应该不需要任何内存操作，除了那些与输入或输出变量相对应的操作\n\n- store after store：移除第一个store\n- load after store：移除load，load的输出与store的输入一样\n- load after load：合并，两者操作的输出一样\n\n但还存在aliasing的问题，当两个不同的顶点等于相同的地址值时，在这种情况下，为两个顶点计算的地址序列是不完整的。这会造成两种后果：\n\n- miss additional simplification cases。但这不算真正的问题，因为可以假设这些最后会被其他简化规则处理（如公共子表达式的消除）\n\n- 用不完整的序列进行简化可能不可逆地破坏代码语义，如以下几种情况：\n\n  1. 两store间有aliased load\n  2. store与load间有aliased store\n  3. 两load间有aliased store\n\n  解决方法：当检测到一个可能的别名问题时，将内存操作的序列分割开来。其结果是一组序列不存在任何别名矛盾，并且可以安全地进行简化。但缺点在于如果过于inclusive，一些合法的简化案例会被忽略。\n\n比如下图中，load1和load4都是load地址(esp+8)，中间没有写入，即没有aliasing问题，所以可以进行合并\n\n![image-20220222110155634](dfg.assets/image-20220222110155634.png)\n\n#### General Simplification Rules\n\n目的：\n\n1. 发现哪些内存访问是在同一地址进行的，以实现前面所述的内存简化\n2. 优化未被优化代码的DFG图。由于编译器优化不一定可逆，所以如果需要使未被优化的代码与优化的代码的归一化后的DFG一样，只能优化未被优化的代码。\n\n假设下面的指令序列及其优化后的对应序列：\n\n![image-20220222110826232](dfg.assets/image-20220222110826232.png)\n\n假设某个编译器刚好执行了这种优化。很明显，这将很难被撤销，而我们无法猜到在序列的最后有一个右移操作。它的规范化表示应该肯定是优化后的结果。因此，每次遇到原始序列时，它都必须被优化。\n\n但由于提出的straight line假设，不需要为配合现代编译器的数据优化做大量工作，只需局部应用于单个基本块（有入口点与出口点）\n\n规则主要分为：\n\n- 公共子表达式的消除：如果两个操作共享同一组输入操作数，那么它们显然会产生相同的输出。因此，它们中的一个可以安全地从图中删除。\n\n  合并由同一组操作数(基数、索引、比例和位移)产生的有效地址。因此，一些内存访问将显式地共享图中的地址顶点。\n\n  比如load1和load4地址都是（esp+8)所以可以删掉其中一组操作，两个load共享同一地址顶点。\n\n  ![image-20220222112450707](dfg.assets/image-20220222112450707.png)\n\n- 常数简化\n\n  以下两种情况可进行常数简化：\n\n  1. 如果算术/逻辑运算的每个输入操作数都是一个常变量。操作可以用结果代替\n  2. 如果一个算术/逻辑运算有一个操作数等于该运算的ientity element或absorbing element(如果它们存在)\n\n  有时需要重排associative operations的序列。该种规则合并涉及常变量的连续关联运算\n\n  如下图中两个加4被化简为加8\n\n  ![image-20220222113121499](dfg.assets/image-20220222113121499.png)\n\n  另一种重排策略是distribution，这对于内存地址的简化尤为重要，因为x86寻址模式的比例参数。所以该种规则分配涉及常变量的分配操作\n\n### signature\n\n人工构建签名。\n\n#### macro signature\n\n目的：针对算法的各种各样实现，有时需要多种签名。为了减少它们的数量，引入宏签名来构建上下文无关的graph grammar。\n\n思想：在每次检测到签名时将一个特殊的顶点附加到DFG。\n\n一个宏签名是一个包含一般的DFG顶点（终端符号）和代表其他签名的顶点（非终端符号符号）的图。\n\n意义：\n\n1. 减少需要测试的签名数量。\n\n​\t没有宏签名时，要测试的签名数量为\n$$\n\\prod ^n_{i=1}a_i\n$$\n​\t用宏签名，每个备份可以被独立搜索，只需要\n$$\n\\sum^n_{i=1}a_i\n$$\n个签名\n\n2. 将大的图分解成更小的图\n\n#### 例子\n\n如果我们要定位密码算法的参数，那么对于明文，密码，密钥，至少一个连接的路径，签名至少都要有一个顶点。\n\n\n\n首先创建了一个签名，包含对替换盒的访问（地址计算加内存读取）\n\n然后，右边图中一个新的顶点后(sig1），对应于第一个签名的成功匹配\n\n最后成功匹配custom Even-Mansour算法的签名\n\n![image-20220222141947171](dfg.assets/image-20220222141947171.png)\n\n\n\n### 子图同构\n\n给定归一化的DFG与signatures，得到DFG中包含哪些signatures。采用Ullmann子图同构算法\n\n子图定义：如果`Va`属于`Vb`且`Ea`属于`Eb`，那么`Ga = {Va, Ea}`是`Gb = {Vb, Eb}`的子图\n\n同构定义：\n$$\n存在函数f:Va \\mapsto Vb\n\\\\使得 (v, w) \\in Ea \\iff (f(v),f(w)) \\in Eb\n$$\n那么`Ga = {Va, Ea}`与`Gb={Vb, Eb}`同构\n\n具体算法如下（深度优先搜索树）：\n\n1. 对签名中的每个顶点v属于Vs，维护一个可能的分配集Av，其被初始化为D中标签与v相同的顶点\n\n2. 递归搜索，找到满足条件的f即表示找到了有效的同构子图；否则UPDATE(Av)进行相应剪枝操作，然后继续搜索\n\n3. 剪枝：\n   $$\n   v,w均属于Vs，且（v,w)\\in Es\n   \\\\对所有x \\in Av\n   \\\\不存在y\\in Aw,\\ 使得(x,y)\\in Ed\n   \\\\那么可以从Av中删除x\n   $$\n\n![image-20220222143759387](dfg.assets/image-20220222143759387.png)\n\n## 测试评估\n\n为什么该方法没有误报：\n\n1. 归一化过程保留语义。\n2. Ullmann算法得到是精准的。虽然也可能签名不够distingctive，其他算法的DFG也可能匹配该签名。\n\n#### XTEA\n\nhttp://en.wikipedia.org/w/index.php?title=XTEA&oldid=618892433 的c语言实现\n\n![image-20220222152208862](dfg.assets/image-20220222152208862.png)\n\nCrypto++, LibTomCrypt, Botan，均成功检测。但存在密钥调度问题，LibTomCrypt中在早期初始化阶段进行得到round key buffer；Crypto++或Botan则在主要的加解密循环中计算。而这种差异不能通过归一化消除，所以应在签名级别处理。因此去掉签名中的密钥调度来得到对不同版本保持一致性的签名。虽然密钥无法识别，但是round key buffer和密钥调度的最终操作是作为签名输入变量的一部分被识别的\n\n#### MD5\n\nRFC中的C语言实现\n\n![image-20220222152902061](dfg.assets/image-20220222152902061.png)\n\n除MSVC外，代表Feistel网络的final macro signature的识别是成功的。\n\n在MSVC的情况下，并不是所有的64轮签名都能正确检测到第二个信息块的。因此取决于每个回合的正确识别最后的签名在第二个消息块中没有被检测到。该问题可以用以下两点来解释：\n\n1. Rotation：每轮函数都包括循环移位。由于C中没有循环移位运算符，需要用两个移位和一个or运算符来实现。有些编译器能识别并转换为x86中的循环移位指令。但MSVC并不总是进行这样的转换，但确定重写规则来识别并将其转换为一个循环移位的顶点是非常困难的。所以在签名层面解决该问题，同时说明macro signature的好处（64轮的总组合数是2^64，而用macro signatures只需要轮签名数量的两倍）\n2. constant state：第一个信息块的状态被常量初始化。由于之前涉及初始状态的操作与周围的操作合并以使数字简化的重写规则，MSVC中第二个信息块的开始若有扩展形式的循环移位指令，将会影响预期的签名模式。该问题尚未被解决，希望能有消除分布在几个顶点上的公共子表达式的方法。\n\n\n\nCrypto++, LibTomCrypt and OpenSSL中md5的测试均成功，因为循环移位都是用x86指令集实现的，且初始状态未被视为常量，因为API设计初始化在代码片段之外的另一个函数中执行。\n\n#### AES\n\nGladman网站提供的源代码\n\n![image-20220222195328619](dfg.assets/image-20220222195328619.png)\n\nCrypto++,LibTomCrypt and Botan\n\nCrypto++只能检测解密的算法，加密由于其使用MMX和SSE2指令（DFG构建时不支持）未被成功识别。其余均成功检测\n\n#### 性能\n\n子图同构是NP完全问题，但大多数情况都可以有校解决\n\n每一列对应一个代码片段（来源于LibTomCrypt），每一行对应一个签名\n\n- 灰色表示未成功匹配，能很快出结果（<1ms)\n\n- 大的签名（涵盖几个回合的签名）所花费的时间的时间明显多于较小的签名（仅覆盖一个回合)。因此可以用macro signature来减少签名的大小。但顶点的数量并不是影响执行时间的唯一参数，有时较大的签名意味着其顶点之间有更强的结构约束，子图同构算法就能更快地收敛到解决方案\n- 每条重写规则都是与顶点数量成线性关系的，除了普通的子表达规则是二次的（至少对naive implementation)。然而，如前所述，重写规则规则是迭代应用的，直到达到一个平衡点。因此，执行时间也取决于原始DFG与归一化DFG之间的距离。在实践中归一化的执行时间并不超过签名匹配的执行时间\n\n![image-20220222195734989](dfg.assets/image-20220222195734989.png)\n\n## 改进\n\n- 通过利用macro signature，涵盖块密码的操作模式\n- 自动识别公钥密码算法\n- 从参考实现中自动生成签名\n","slug":"dfg","published":1,"updated":"2022-02-22T21:10:00.000Z","layout":"post","photos":[],"link":"","_id":"cletwjohy0014ri3sgf8705hm","content":"<h1>DFG论文</h1>\n<p><img src=\"dfg.assets/image-20220218195458486.png\" alt=\"image-20220218195458486\"></p>\n<p>Lestringant,P., Guihéry,F. and Fouque,P… Automated identification of cryptographic primitives in binary code with data flow graph isomorphism. (2015)In Proceedings of the 10th ACM Symposium on Information, Computer and Communications Security, pages 203–214.</p>\n<h2 id=\"背景\">背景</h2>\n<p>软件用密码算法保护通信安全性以及数据安全。但算法的选择，具体实现方法，输入参数的生成对数据安全性有巨大影响。所以分析有密码的二进制文件安全性时，需要确保没有上述几点影响系统安全。所以首先需要识别并定位密码算法。但分析是耗时费力的，所以需要自动化工具</p>\n<p><strong>现有方法：</strong></p>\n<ul>\n<li>静态分析主要根据常量或I/O关系，大多利用统计特性，可能不准确</li>\n<li>动态分析性能不太好</li>\n</ul>\n<p><strong>缺陷：</strong></p>\n<ul>\n<li>手动构建签名的准确性</li>\n<li>依赖启发式代码片段选择</li>\n<li>仅限于已知密码原语</li>\n<li>constant state</li>\n</ul>\n<p><strong>特色</strong></p>\n<ul>\n<li>\n<p>静态分析，基于DFG</p>\n<ul>\n<li>\n<p>表示数据间依赖。便于提取相关操作的子集以生成精确的签名</p>\n</li>\n<li>\n<p>方便重写程序。可以通过重写DFG移除相同算法的不同实例中的变量</p>\n</li>\n</ul>\n</li>\n<li>\n<p>高效，没有误报（除了签名不够distinctive）</p>\n</li>\n</ul>\n<p><strong>贡献：</strong></p>\n<ol>\n<li>\n<p>高效可靠地自动识别定位对称密码算法以及参数</p>\n</li>\n<li>\n<p>归一化以及签名匹配，可以抵御编译器优化和源码变化</p>\n</li>\n<li>\n<p>知名密码库测试并验证方案有效性</p>\n</li>\n</ol>\n<h2 id=\"具体方案\">具体方案</h2>\n<ol>\n<li>根据汇编代码构建相应DFG</li>\n<li>用重写规则对DFG归一化</li>\n<li>在DFG中搜索与密码算法图签名同构的子图</li>\n</ol>\n<p><img src=\"dfg.assets/image-20220221181451970.png\" alt=\"image-20220221181451970\"></p>\n<h4 id=\"图构建\">图构建</h4>\n<p>DFG：表示一系列操作之间的数据依赖关系的有向无环图（Directed Acyclic Graph)</p>\n<ul>\n<li>\n<p>顶点：表示算术/逻辑操作或输入变量</p>\n</li>\n<li>\n<p>边：顶点v1到v2的边表示v1(或v1操作后的结果)是v2的输入</p>\n</li>\n</ul>\n<p>根据程序片段F的汇编代码， 将每条指令 i 转换为一组操作 Oi ，而这些操作可能为空（NOP 或分支)，也可能包含多个顶点（可能需要多个操作来重现复杂指令的行为），然后迭代根据F中的指令，构建相应DFG：<code>Gf = (V,E)</code>。其中V是顶点的集合，E是边集</p>\n<p>根据输入类型分为以下三种情况：</p>\n<ul>\n<li>\n<p>立即数：向Gf中添加一个常量输入变量。该顶点表示立即数的值，且由边连接到Oi</p>\n</li>\n<li>\n<p>寄存器：在写入该寄存器的最后一个值和 Oi 间创建一个边。实际上，这意味着为每个寄存器维护一个数组，其中包含对 Gf 中该值对应的顶点的引用。</p>\n<p>引用：</p>\n<ul>\n<li>null：寄存器还未被使用（新的输入顶点将被添加到图中）</li>\n<li>指向输入变量（寄存器被读取但未被写入）</li>\n<li>指向操作（最后被写入寄存器的值）</li>\n</ul>\n</li>\n<li>\n<p>内存：load（读取），store（写入）。这两个操作以一个地址作为输入操作数，该地址的计算在Gf中被显式转录。同时还会跟踪程序片段中内存访问的顺序</p>\n</li>\n</ul>\n<h4 id=\"例子\">例子</h4>\n<p>custom Even-Mansour cipher</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>C</mi><mo>=</mo><mi>S</mi><mo stretchy=\"false\">(</mo><mi>p</mi><mtext> </mtext><mi>x</mi><mi>o</mi><mi>r</mi><mtext> </mtext><mi>k</mi><mo stretchy=\"false\">)</mo><mtext> </mtext><mi>x</mi><mi>o</mi><mi>r</mi><mtext> </mtext><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">C =S(p\\ xor\\ k)\\ xor\\ k\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">or</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">or</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></p>\n<p>S表示S盒，p表示明文，k表示密钥，C表示密文</p>\n<p>其x86汇编代码如下</p>\n<p><img src=\"dfg.assets/image-20220221190220766.png\" alt=\"image-20220221190220766\"></p>\n<p>其构建的DFG图如下：</p>\n<p>矩形框中的表示输入变量，圆框中表示操作</p>\n<p><img src=\"dfg.assets/image-20220221190337262.png\" alt=\"image-20220221190337262\"></p>\n<h3 id=\"归一化\">归一化</h3>\n<p><strong>目的</strong>：在不改变DFG语义的情况下做出调整以便匹配算法子图。即消除开发人员、编译器优化或反汇编导致的不同。</p>\n<p>三种规则：</p>\n<h4 id=\"Normalization-Rules\">Normalization Rules</h4>\n<p>多个指令可以执行相同的操作时使用。</p>\n<p><img src=\"dfg.assets/image-20220221191520450.png\" alt=\"image-20220221191520450\"></p>\n<h4 id=\"Memory-Access-Simplification-Rules\">Memory Access Simplification Rules</h4>\n<p>规范化的图应该不需要任何内存操作，除了那些与输入或输出变量相对应的操作</p>\n<ul>\n<li>store after store：移除第一个store</li>\n<li>load after store：移除load，load的输出与store的输入一样</li>\n<li>load after load：合并，两者操作的输出一样</li>\n</ul>\n<p>但还存在aliasing的问题，当两个不同的顶点等于相同的地址值时，在这种情况下，为两个顶点计算的地址序列是不完整的。这会造成两种后果：</p>\n<ul>\n<li>\n<p>miss additional simplification cases。但这不算真正的问题，因为可以假设这些最后会被其他简化规则处理（如公共子表达式的消除）</p>\n</li>\n<li>\n<p>用不完整的序列进行简化可能不可逆地破坏代码语义，如以下几种情况：</p>\n<ol>\n<li>两store间有aliased load</li>\n<li>store与load间有aliased store</li>\n<li>两load间有aliased store</li>\n</ol>\n<p>解决方法：当检测到一个可能的别名问题时，将内存操作的序列分割开来。其结果是一组序列不存在任何别名矛盾，并且可以安全地进行简化。但缺点在于如果过于inclusive，一些合法的简化案例会被忽略。</p>\n</li>\n</ul>\n<p>比如下图中，load1和load4都是load地址(esp+8)，中间没有写入，即没有aliasing问题，所以可以进行合并</p>\n<p><img src=\"dfg.assets/image-20220222110155634.png\" alt=\"image-20220222110155634\"></p>\n<h4 id=\"General-Simplification-Rules\">General Simplification Rules</h4>\n<p>目的：</p>\n<ol>\n<li>发现哪些内存访问是在同一地址进行的，以实现前面所述的内存简化</li>\n<li>优化未被优化代码的DFG图。由于编译器优化不一定可逆，所以如果需要使未被优化的代码与优化的代码的归一化后的DFG一样，只能优化未被优化的代码。</li>\n</ol>\n<p>假设下面的指令序列及其优化后的对应序列：</p>\n<p><img src=\"dfg.assets/image-20220222110826232.png\" alt=\"image-20220222110826232\"></p>\n<p>假设某个编译器刚好执行了这种优化。很明显，这将很难被撤销，而我们无法猜到在序列的最后有一个右移操作。它的规范化表示应该肯定是优化后的结果。因此，每次遇到原始序列时，它都必须被优化。</p>\n<p>但由于提出的straight line假设，不需要为配合现代编译器的数据优化做大量工作，只需局部应用于单个基本块（有入口点与出口点）</p>\n<p>规则主要分为：</p>\n<ul>\n<li>\n<p>公共子表达式的消除：如果两个操作共享同一组输入操作数，那么它们显然会产生相同的输出。因此，它们中的一个可以安全地从图中删除。</p>\n<p>合并由同一组操作数(基数、索引、比例和位移)产生的有效地址。因此，一些内存访问将显式地共享图中的地址顶点。</p>\n<p>比如load1和load4地址都是（esp+8)所以可以删掉其中一组操作，两个load共享同一地址顶点。</p>\n<p><img src=\"dfg.assets/image-20220222112450707.png\" alt=\"image-20220222112450707\"></p>\n</li>\n<li>\n<p>常数简化</p>\n<p>以下两种情况可进行常数简化：</p>\n<ol>\n<li>如果算术/逻辑运算的每个输入操作数都是一个常变量。操作可以用结果代替</li>\n<li>如果一个算术/逻辑运算有一个操作数等于该运算的ientity element或absorbing element(如果它们存在)</li>\n</ol>\n<p>有时需要重排associative operations的序列。该种规则合并涉及常变量的连续关联运算</p>\n<p>如下图中两个加4被化简为加8</p>\n<p><img src=\"dfg.assets/image-20220222113121499.png\" alt=\"image-20220222113121499\"></p>\n<p>另一种重排策略是distribution，这对于内存地址的简化尤为重要，因为x86寻址模式的比例参数。所以该种规则分配涉及常变量的分配操作</p>\n</li>\n</ul>\n<h3 id=\"signature-3\">signature</h3>\n<p>人工构建签名。</p>\n<h4 id=\"macro-signature\">macro signature</h4>\n<p>目的：针对算法的各种各样实现，有时需要多种签名。为了减少它们的数量，引入宏签名来构建上下文无关的graph grammar。</p>\n<p>思想：在每次检测到签名时将一个特殊的顶点附加到DFG。</p>\n<p>一个宏签名是一个包含一般的DFG顶点（终端符号）和代表其他签名的顶点（非终端符号符号）的图。</p>\n<p>意义：</p>\n<ol>\n<li>减少需要测试的签名数量。</li>\n</ol>\n<p>​\t没有宏签名时，要测试的签名数量为</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><munderover><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\prod ^n_{i=1}a_i\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.9291em;vertical-align:-1.2777em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8723em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∏</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2777em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>​\t用宏签名，每个备份可以被独立搜索，只需要</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\sum^n_{i=1}a_i\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.9291em;vertical-align:-1.2777em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8723em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2777em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>个签名</p>\n<ol start=\"2\">\n<li>将大的图分解成更小的图</li>\n</ol>\n<h4 id=\"例子-2\">例子</h4>\n<p>如果我们要定位密码算法的参数，那么对于明文，密码，密钥，至少一个连接的路径，签名至少都要有一个顶点。</p>\n<p>首先创建了一个签名，包含对替换盒的访问（地址计算加内存读取）</p>\n<p>然后，右边图中一个新的顶点后(sig1），对应于第一个签名的成功匹配</p>\n<p>最后成功匹配custom Even-Mansour算法的签名</p>\n<p><img src=\"dfg.assets/image-20220222141947171.png\" alt=\"image-20220222141947171\"></p>\n<h3 id=\"子图同构\">子图同构</h3>\n<p>给定归一化的DFG与signatures，得到DFG中包含哪些signatures。采用Ullmann子图同构算法</p>\n<p>子图定义：如果<code>Va</code>属于<code>Vb</code>且<code>Ea</code>属于<code>Eb</code>，那么<code>Ga = &#123;Va, Ea&#125;</code>是<code>Gb = &#123;Vb, Eb&#125;</code>的子图</p>\n<p>同构定义：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>存在函数</mtext><mi>f</mi><mo>:</mo><mi>V</mi><mi>a</mi><mo>↦</mo><mi>V</mi><mi>b</mi><mspace linebreak=\"newline\"></mspace><mtext>使得</mtext><mo stretchy=\"false\">(</mo><mi>v</mi><mo separator=\"true\">,</mo><mi>w</mi><mo stretchy=\"false\">)</mo><mo>∈</mo><mi>E</mi><mi>a</mi><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>w</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>∈</mo><mi>E</mi><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">存在函数f:Va \\mapsto Vb\n\\\\使得 (v, w) \\in Ea \\iff (f(v),f(w)) \\in Eb\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord cjk_fallback\">存在函数</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6943em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">Va</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">Vb</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\">使得</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7073em;vertical-align:-0.024em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">b</span></span></span></span></span></p>\n<p>那么<code>Ga = &#123;Va, Ea&#125;</code>与<code>Gb=&#123;Vb, Eb&#125;</code>同构</p>\n<p>具体算法如下（深度优先搜索树）：</p>\n<ol>\n<li>\n<p>对签名中的每个顶点v属于Vs，维护一个可能的分配集Av，其被初始化为D中标签与v相同的顶点</p>\n</li>\n<li>\n<p>递归搜索，找到满足条件的f即表示找到了有效的同构子图；否则UPDATE(Av)进行相应剪枝操作，然后继续搜索</p>\n</li>\n<li>\n<p>剪枝：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>v</mi><mo separator=\"true\">,</mo><mi>w</mi><mtext>均属于</mtext><mi>V</mi><mi>s</mi><mtext>，且（</mtext><mi>v</mi><mo separator=\"true\">,</mo><mi>w</mi><mo stretchy=\"false\">)</mo><mo>∈</mo><mi>E</mi><mi>s</mi><mspace linebreak=\"newline\"></mspace><mtext>对所有</mtext><mi>x</mi><mo>∈</mo><mi>A</mi><mi>v</mi><mspace linebreak=\"newline\"></mspace><mtext>不存在</mtext><mi>y</mi><mo>∈</mo><mi>A</mi><mi>w</mi><mo separator=\"true\">,</mo><mtext> 使得</mtext><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>∈</mo><mi>E</mi><mi>d</mi><mspace linebreak=\"newline\"></mspace><mtext>那么可以从</mtext><mi>A</mi><mi>v</mi><mtext>中删除</mtext><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">v,w均属于Vs，且（v,w)\\in Es\n\\\\对所有x \\in Av\n\\\\不存在y\\in Aw,\\ 使得(x,y)\\in Ed\n\\\\那么可以从Av中删除x\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord cjk_fallback\">均属于</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mord mathnormal\">s</span><span class=\"mord cjk_fallback\">，且（</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">s</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord cjk_fallback\">对所有</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord cjk_fallback\">不存在</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mpunct\">,</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord cjk_fallback\">使得</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">d</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\">那么可以从</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord cjk_fallback\">中删除</span><span class=\"mord mathnormal\">x</span></span></span></span></span></p>\n</li>\n</ol>\n<p><img src=\"dfg.assets/image-20220222143759387.png\" alt=\"image-20220222143759387\"></p>\n<h2 id=\"测试评估\">测试评估</h2>\n<p>为什么该方法没有误报：</p>\n<ol>\n<li>归一化过程保留语义。</li>\n<li>Ullmann算法得到是精准的。虽然也可能签名不够distingctive，其他算法的DFG也可能匹配该签名。</li>\n</ol>\n<h4 id=\"XTEA\">XTEA</h4>\n<p><a href=\"http://en.wikipedia.org/w/index.php?title=XTEA&amp;oldid=618892433\">http://en.wikipedia.org/w/index.php?title=XTEA&amp;oldid=618892433</a> 的c语言实现</p>\n<p><img src=\"dfg.assets/image-20220222152208862.png\" alt=\"image-20220222152208862\"></p>\n<p>Crypto++, LibTomCrypt, Botan，均成功检测。但存在密钥调度问题，LibTomCrypt中在早期初始化阶段进行得到round key buffer；Crypto++或Botan则在主要的加解密循环中计算。而这种差异不能通过归一化消除，所以应在签名级别处理。因此去掉签名中的密钥调度来得到对不同版本保持一致性的签名。虽然密钥无法识别，但是round key buffer和密钥调度的最终操作是作为签名输入变量的一部分被识别的</p>\n<h4 id=\"MD5\">MD5</h4>\n<p>RFC中的C语言实现</p>\n<p><img src=\"dfg.assets/image-20220222152902061.png\" alt=\"image-20220222152902061\"></p>\n<p>除MSVC外，代表Feistel网络的final macro signature的识别是成功的。</p>\n<p>在MSVC的情况下，并不是所有的64轮签名都能正确检测到第二个信息块的。因此取决于每个回合的正确识别最后的签名在第二个消息块中没有被检测到。该问题可以用以下两点来解释：</p>\n<ol>\n<li>Rotation：每轮函数都包括循环移位。由于C中没有循环移位运算符，需要用两个移位和一个or运算符来实现。有些编译器能识别并转换为x86中的循环移位指令。但MSVC并不总是进行这样的转换，但确定重写规则来识别并将其转换为一个循环移位的顶点是非常困难的。所以在签名层面解决该问题，同时说明macro signature的好处（64轮的总组合数是2^64，而用macro signatures只需要轮签名数量的两倍）</li>\n<li>constant state：第一个信息块的状态被常量初始化。由于之前涉及初始状态的操作与周围的操作合并以使数字简化的重写规则，MSVC中第二个信息块的开始若有扩展形式的循环移位指令，将会影响预期的签名模式。该问题尚未被解决，希望能有消除分布在几个顶点上的公共子表达式的方法。</li>\n</ol>\n<p>Crypto++, LibTomCrypt and OpenSSL中md5的测试均成功，因为循环移位都是用x86指令集实现的，且初始状态未被视为常量，因为API设计初始化在代码片段之外的另一个函数中执行。</p>\n<h4 id=\"AES\">AES</h4>\n<p>Gladman网站提供的源代码</p>\n<p><img src=\"dfg.assets/image-20220222195328619.png\" alt=\"image-20220222195328619\"></p>\n<p>Crypto++,LibTomCrypt and Botan</p>\n<p>Crypto++只能检测解密的算法，加密由于其使用MMX和SSE2指令（DFG构建时不支持）未被成功识别。其余均成功检测</p>\n<h4 id=\"性能\">性能</h4>\n<p>子图同构是NP完全问题，但大多数情况都可以有校解决</p>\n<p>每一列对应一个代码片段（来源于LibTomCrypt），每一行对应一个签名</p>\n<ul>\n<li>\n<p>灰色表示未成功匹配，能很快出结果（&lt;1ms)</p>\n</li>\n<li>\n<p>大的签名（涵盖几个回合的签名）所花费的时间的时间明显多于较小的签名（仅覆盖一个回合)。因此可以用macro signature来减少签名的大小。但顶点的数量并不是影响执行时间的唯一参数，有时较大的签名意味着其顶点之间有更强的结构约束，子图同构算法就能更快地收敛到解决方案</p>\n</li>\n<li>\n<p>每条重写规则都是与顶点数量成线性关系的，除了普通的子表达规则是二次的（至少对naive implementation)。然而，如前所述，重写规则规则是迭代应用的，直到达到一个平衡点。因此，执行时间也取决于原始DFG与归一化DFG之间的距离。在实践中归一化的执行时间并不超过签名匹配的执行时间</p>\n</li>\n</ul>\n<p><img src=\"dfg.assets/image-20220222195734989.png\" alt=\"image-20220222195734989\"></p>\n<h2 id=\"改进\">改进</h2>\n<ul>\n<li>通过利用macro signature，涵盖块密码的操作模式</li>\n<li>自动识别公钥密码算法</li>\n<li>从参考实现中自动生成签名</li>\n</ul>\n","site":{"data":{"about":{"class":{"class_name":"about","link_list":{"-1":{"name":"Scorpion","avatar":"/image/avatar.jpg","link":null,"descr":"�����ƹ������ë��̨��ɢ�򣬻�ѩ���������ݣ����ֲ�Ƭ����Ƭ�赸��Ƶ��ҵ����Ӱ���Ǻð�ȫ��"}}}},"link":{"class":{"class_name":"友情链接","link_list":{"-1":{"name":"M4tsuri","link":"https://M4tsuri.io","avatar":"/image/m4tsuri.jpg","descr":"pwn,blockchain"}}}}}},"excerpt":"","more":"<h1>DFG论文</h1>\n<p><img src=\"dfg.assets/image-20220218195458486.png\" alt=\"image-20220218195458486\"></p>\n<p>Lestringant,P., Guihéry,F. and Fouque,P… Automated identification of cryptographic primitives in binary code with data flow graph isomorphism. (2015)In Proceedings of the 10th ACM Symposium on Information, Computer and Communications Security, pages 203–214.</p>\n<h2 id=\"背景\">背景</h2>\n<p>软件用密码算法保护通信安全性以及数据安全。但算法的选择，具体实现方法，输入参数的生成对数据安全性有巨大影响。所以分析有密码的二进制文件安全性时，需要确保没有上述几点影响系统安全。所以首先需要识别并定位密码算法。但分析是耗时费力的，所以需要自动化工具</p>\n<p><strong>现有方法：</strong></p>\n<ul>\n<li>静态分析主要根据常量或I/O关系，大多利用统计特性，可能不准确</li>\n<li>动态分析性能不太好</li>\n</ul>\n<p><strong>缺陷：</strong></p>\n<ul>\n<li>手动构建签名的准确性</li>\n<li>依赖启发式代码片段选择</li>\n<li>仅限于已知密码原语</li>\n<li>constant state</li>\n</ul>\n<p><strong>特色</strong></p>\n<ul>\n<li>\n<p>静态分析，基于DFG</p>\n<ul>\n<li>\n<p>表示数据间依赖。便于提取相关操作的子集以生成精确的签名</p>\n</li>\n<li>\n<p>方便重写程序。可以通过重写DFG移除相同算法的不同实例中的变量</p>\n</li>\n</ul>\n</li>\n<li>\n<p>高效，没有误报（除了签名不够distinctive）</p>\n</li>\n</ul>\n<p><strong>贡献：</strong></p>\n<ol>\n<li>\n<p>高效可靠地自动识别定位对称密码算法以及参数</p>\n</li>\n<li>\n<p>归一化以及签名匹配，可以抵御编译器优化和源码变化</p>\n</li>\n<li>\n<p>知名密码库测试并验证方案有效性</p>\n</li>\n</ol>\n<h2 id=\"具体方案\">具体方案</h2>\n<ol>\n<li>根据汇编代码构建相应DFG</li>\n<li>用重写规则对DFG归一化</li>\n<li>在DFG中搜索与密码算法图签名同构的子图</li>\n</ol>\n<p><img src=\"dfg.assets/image-20220221181451970.png\" alt=\"image-20220221181451970\"></p>\n<h4 id=\"图构建\">图构建</h4>\n<p>DFG：表示一系列操作之间的数据依赖关系的有向无环图（Directed Acyclic Graph)</p>\n<ul>\n<li>\n<p>顶点：表示算术/逻辑操作或输入变量</p>\n</li>\n<li>\n<p>边：顶点v1到v2的边表示v1(或v1操作后的结果)是v2的输入</p>\n</li>\n</ul>\n<p>根据程序片段F的汇编代码， 将每条指令 i 转换为一组操作 Oi ，而这些操作可能为空（NOP 或分支)，也可能包含多个顶点（可能需要多个操作来重现复杂指令的行为），然后迭代根据F中的指令，构建相应DFG：<code>Gf = (V,E)</code>。其中V是顶点的集合，E是边集</p>\n<p>根据输入类型分为以下三种情况：</p>\n<ul>\n<li>\n<p>立即数：向Gf中添加一个常量输入变量。该顶点表示立即数的值，且由边连接到Oi</p>\n</li>\n<li>\n<p>寄存器：在写入该寄存器的最后一个值和 Oi 间创建一个边。实际上，这意味着为每个寄存器维护一个数组，其中包含对 Gf 中该值对应的顶点的引用。</p>\n<p>引用：</p>\n<ul>\n<li>null：寄存器还未被使用（新的输入顶点将被添加到图中）</li>\n<li>指向输入变量（寄存器被读取但未被写入）</li>\n<li>指向操作（最后被写入寄存器的值）</li>\n</ul>\n</li>\n<li>\n<p>内存：load（读取），store（写入）。这两个操作以一个地址作为输入操作数，该地址的计算在Gf中被显式转录。同时还会跟踪程序片段中内存访问的顺序</p>\n</li>\n</ul>\n<h4 id=\"例子\">例子</h4>\n<p>custom Even-Mansour cipher</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>C</mi><mo>=</mo><mi>S</mi><mo stretchy=\"false\">(</mo><mi>p</mi><mtext> </mtext><mi>x</mi><mi>o</mi><mi>r</mi><mtext> </mtext><mi>k</mi><mo stretchy=\"false\">)</mo><mtext> </mtext><mi>x</mi><mi>o</mi><mi>r</mi><mtext> </mtext><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">C =S(p\\ xor\\ k)\\ xor\\ k\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">or</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">or</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></p>\n<p>S表示S盒，p表示明文，k表示密钥，C表示密文</p>\n<p>其x86汇编代码如下</p>\n<p><img src=\"dfg.assets/image-20220221190220766.png\" alt=\"image-20220221190220766\"></p>\n<p>其构建的DFG图如下：</p>\n<p>矩形框中的表示输入变量，圆框中表示操作</p>\n<p><img src=\"dfg.assets/image-20220221190337262.png\" alt=\"image-20220221190337262\"></p>\n<h3 id=\"归一化\">归一化</h3>\n<p><strong>目的</strong>：在不改变DFG语义的情况下做出调整以便匹配算法子图。即消除开发人员、编译器优化或反汇编导致的不同。</p>\n<p>三种规则：</p>\n<h4 id=\"Normalization-Rules\">Normalization Rules</h4>\n<p>多个指令可以执行相同的操作时使用。</p>\n<p><img src=\"dfg.assets/image-20220221191520450.png\" alt=\"image-20220221191520450\"></p>\n<h4 id=\"Memory-Access-Simplification-Rules\">Memory Access Simplification Rules</h4>\n<p>规范化的图应该不需要任何内存操作，除了那些与输入或输出变量相对应的操作</p>\n<ul>\n<li>store after store：移除第一个store</li>\n<li>load after store：移除load，load的输出与store的输入一样</li>\n<li>load after load：合并，两者操作的输出一样</li>\n</ul>\n<p>但还存在aliasing的问题，当两个不同的顶点等于相同的地址值时，在这种情况下，为两个顶点计算的地址序列是不完整的。这会造成两种后果：</p>\n<ul>\n<li>\n<p>miss additional simplification cases。但这不算真正的问题，因为可以假设这些最后会被其他简化规则处理（如公共子表达式的消除）</p>\n</li>\n<li>\n<p>用不完整的序列进行简化可能不可逆地破坏代码语义，如以下几种情况：</p>\n<ol>\n<li>两store间有aliased load</li>\n<li>store与load间有aliased store</li>\n<li>两load间有aliased store</li>\n</ol>\n<p>解决方法：当检测到一个可能的别名问题时，将内存操作的序列分割开来。其结果是一组序列不存在任何别名矛盾，并且可以安全地进行简化。但缺点在于如果过于inclusive，一些合法的简化案例会被忽略。</p>\n</li>\n</ul>\n<p>比如下图中，load1和load4都是load地址(esp+8)，中间没有写入，即没有aliasing问题，所以可以进行合并</p>\n<p><img src=\"dfg.assets/image-20220222110155634.png\" alt=\"image-20220222110155634\"></p>\n<h4 id=\"General-Simplification-Rules\">General Simplification Rules</h4>\n<p>目的：</p>\n<ol>\n<li>发现哪些内存访问是在同一地址进行的，以实现前面所述的内存简化</li>\n<li>优化未被优化代码的DFG图。由于编译器优化不一定可逆，所以如果需要使未被优化的代码与优化的代码的归一化后的DFG一样，只能优化未被优化的代码。</li>\n</ol>\n<p>假设下面的指令序列及其优化后的对应序列：</p>\n<p><img src=\"dfg.assets/image-20220222110826232.png\" alt=\"image-20220222110826232\"></p>\n<p>假设某个编译器刚好执行了这种优化。很明显，这将很难被撤销，而我们无法猜到在序列的最后有一个右移操作。它的规范化表示应该肯定是优化后的结果。因此，每次遇到原始序列时，它都必须被优化。</p>\n<p>但由于提出的straight line假设，不需要为配合现代编译器的数据优化做大量工作，只需局部应用于单个基本块（有入口点与出口点）</p>\n<p>规则主要分为：</p>\n<ul>\n<li>\n<p>公共子表达式的消除：如果两个操作共享同一组输入操作数，那么它们显然会产生相同的输出。因此，它们中的一个可以安全地从图中删除。</p>\n<p>合并由同一组操作数(基数、索引、比例和位移)产生的有效地址。因此，一些内存访问将显式地共享图中的地址顶点。</p>\n<p>比如load1和load4地址都是（esp+8)所以可以删掉其中一组操作，两个load共享同一地址顶点。</p>\n<p><img src=\"dfg.assets/image-20220222112450707.png\" alt=\"image-20220222112450707\"></p>\n</li>\n<li>\n<p>常数简化</p>\n<p>以下两种情况可进行常数简化：</p>\n<ol>\n<li>如果算术/逻辑运算的每个输入操作数都是一个常变量。操作可以用结果代替</li>\n<li>如果一个算术/逻辑运算有一个操作数等于该运算的ientity element或absorbing element(如果它们存在)</li>\n</ol>\n<p>有时需要重排associative operations的序列。该种规则合并涉及常变量的连续关联运算</p>\n<p>如下图中两个加4被化简为加8</p>\n<p><img src=\"dfg.assets/image-20220222113121499.png\" alt=\"image-20220222113121499\"></p>\n<p>另一种重排策略是distribution，这对于内存地址的简化尤为重要，因为x86寻址模式的比例参数。所以该种规则分配涉及常变量的分配操作</p>\n</li>\n</ul>\n<h3 id=\"signature-3\">signature</h3>\n<p>人工构建签名。</p>\n<h4 id=\"macro-signature\">macro signature</h4>\n<p>目的：针对算法的各种各样实现，有时需要多种签名。为了减少它们的数量，引入宏签名来构建上下文无关的graph grammar。</p>\n<p>思想：在每次检测到签名时将一个特殊的顶点附加到DFG。</p>\n<p>一个宏签名是一个包含一般的DFG顶点（终端符号）和代表其他签名的顶点（非终端符号符号）的图。</p>\n<p>意义：</p>\n<ol>\n<li>减少需要测试的签名数量。</li>\n</ol>\n<p>​\t没有宏签名时，要测试的签名数量为</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><munderover><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\prod ^n_{i=1}a_i\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.9291em;vertical-align:-1.2777em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8723em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∏</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2777em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>​\t用宏签名，每个备份可以被独立搜索，只需要</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\sum^n_{i=1}a_i\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.9291em;vertical-align:-1.2777em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8723em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2777em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>个签名</p>\n<ol start=\"2\">\n<li>将大的图分解成更小的图</li>\n</ol>\n<h4 id=\"例子-2\">例子</h4>\n<p>如果我们要定位密码算法的参数，那么对于明文，密码，密钥，至少一个连接的路径，签名至少都要有一个顶点。</p>\n<p>首先创建了一个签名，包含对替换盒的访问（地址计算加内存读取）</p>\n<p>然后，右边图中一个新的顶点后(sig1），对应于第一个签名的成功匹配</p>\n<p>最后成功匹配custom Even-Mansour算法的签名</p>\n<p><img src=\"dfg.assets/image-20220222141947171.png\" alt=\"image-20220222141947171\"></p>\n<h3 id=\"子图同构\">子图同构</h3>\n<p>给定归一化的DFG与signatures，得到DFG中包含哪些signatures。采用Ullmann子图同构算法</p>\n<p>子图定义：如果<code>Va</code>属于<code>Vb</code>且<code>Ea</code>属于<code>Eb</code>，那么<code>Ga = &#123;Va, Ea&#125;</code>是<code>Gb = &#123;Vb, Eb&#125;</code>的子图</p>\n<p>同构定义：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>存在函数</mtext><mi>f</mi><mo>:</mo><mi>V</mi><mi>a</mi><mo>↦</mo><mi>V</mi><mi>b</mi><mspace linebreak=\"newline\"></mspace><mtext>使得</mtext><mo stretchy=\"false\">(</mo><mi>v</mi><mo separator=\"true\">,</mo><mi>w</mi><mo stretchy=\"false\">)</mo><mo>∈</mo><mi>E</mi><mi>a</mi><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>w</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>∈</mo><mi>E</mi><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">存在函数f:Va \\mapsto Vb\n\\\\使得 (v, w) \\in Ea \\iff (f(v),f(w)) \\in Eb\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord cjk_fallback\">存在函数</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6943em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">Va</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">Vb</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\">使得</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7073em;vertical-align:-0.024em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">b</span></span></span></span></span></p>\n<p>那么<code>Ga = &#123;Va, Ea&#125;</code>与<code>Gb=&#123;Vb, Eb&#125;</code>同构</p>\n<p>具体算法如下（深度优先搜索树）：</p>\n<ol>\n<li>\n<p>对签名中的每个顶点v属于Vs，维护一个可能的分配集Av，其被初始化为D中标签与v相同的顶点</p>\n</li>\n<li>\n<p>递归搜索，找到满足条件的f即表示找到了有效的同构子图；否则UPDATE(Av)进行相应剪枝操作，然后继续搜索</p>\n</li>\n<li>\n<p>剪枝：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>v</mi><mo separator=\"true\">,</mo><mi>w</mi><mtext>均属于</mtext><mi>V</mi><mi>s</mi><mtext>，且（</mtext><mi>v</mi><mo separator=\"true\">,</mo><mi>w</mi><mo stretchy=\"false\">)</mo><mo>∈</mo><mi>E</mi><mi>s</mi><mspace linebreak=\"newline\"></mspace><mtext>对所有</mtext><mi>x</mi><mo>∈</mo><mi>A</mi><mi>v</mi><mspace linebreak=\"newline\"></mspace><mtext>不存在</mtext><mi>y</mi><mo>∈</mo><mi>A</mi><mi>w</mi><mo separator=\"true\">,</mo><mtext> 使得</mtext><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>∈</mo><mi>E</mi><mi>d</mi><mspace linebreak=\"newline\"></mspace><mtext>那么可以从</mtext><mi>A</mi><mi>v</mi><mtext>中删除</mtext><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">v,w均属于Vs，且（v,w)\\in Es\n\\\\对所有x \\in Av\n\\\\不存在y\\in Aw,\\ 使得(x,y)\\in Ed\n\\\\那么可以从Av中删除x\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord cjk_fallback\">均属于</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mord mathnormal\">s</span><span class=\"mord cjk_fallback\">，且（</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">s</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord cjk_fallback\">对所有</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord cjk_fallback\">不存在</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mpunct\">,</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord cjk_fallback\">使得</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">d</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\">那么可以从</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord cjk_fallback\">中删除</span><span class=\"mord mathnormal\">x</span></span></span></span></span></p>\n</li>\n</ol>\n<p><img src=\"dfg.assets/image-20220222143759387.png\" alt=\"image-20220222143759387\"></p>\n<h2 id=\"测试评估\">测试评估</h2>\n<p>为什么该方法没有误报：</p>\n<ol>\n<li>归一化过程保留语义。</li>\n<li>Ullmann算法得到是精准的。虽然也可能签名不够distingctive，其他算法的DFG也可能匹配该签名。</li>\n</ol>\n<h4 id=\"XTEA\">XTEA</h4>\n<p><a href=\"http://en.wikipedia.org/w/index.php?title=XTEA&amp;oldid=618892433\">http://en.wikipedia.org/w/index.php?title=XTEA&amp;oldid=618892433</a> 的c语言实现</p>\n<p><img src=\"dfg.assets/image-20220222152208862.png\" alt=\"image-20220222152208862\"></p>\n<p>Crypto++, LibTomCrypt, Botan，均成功检测。但存在密钥调度问题，LibTomCrypt中在早期初始化阶段进行得到round key buffer；Crypto++或Botan则在主要的加解密循环中计算。而这种差异不能通过归一化消除，所以应在签名级别处理。因此去掉签名中的密钥调度来得到对不同版本保持一致性的签名。虽然密钥无法识别，但是round key buffer和密钥调度的最终操作是作为签名输入变量的一部分被识别的</p>\n<h4 id=\"MD5\">MD5</h4>\n<p>RFC中的C语言实现</p>\n<p><img src=\"dfg.assets/image-20220222152902061.png\" alt=\"image-20220222152902061\"></p>\n<p>除MSVC外，代表Feistel网络的final macro signature的识别是成功的。</p>\n<p>在MSVC的情况下，并不是所有的64轮签名都能正确检测到第二个信息块的。因此取决于每个回合的正确识别最后的签名在第二个消息块中没有被检测到。该问题可以用以下两点来解释：</p>\n<ol>\n<li>Rotation：每轮函数都包括循环移位。由于C中没有循环移位运算符，需要用两个移位和一个or运算符来实现。有些编译器能识别并转换为x86中的循环移位指令。但MSVC并不总是进行这样的转换，但确定重写规则来识别并将其转换为一个循环移位的顶点是非常困难的。所以在签名层面解决该问题，同时说明macro signature的好处（64轮的总组合数是2^64，而用macro signatures只需要轮签名数量的两倍）</li>\n<li>constant state：第一个信息块的状态被常量初始化。由于之前涉及初始状态的操作与周围的操作合并以使数字简化的重写规则，MSVC中第二个信息块的开始若有扩展形式的循环移位指令，将会影响预期的签名模式。该问题尚未被解决，希望能有消除分布在几个顶点上的公共子表达式的方法。</li>\n</ol>\n<p>Crypto++, LibTomCrypt and OpenSSL中md5的测试均成功，因为循环移位都是用x86指令集实现的，且初始状态未被视为常量，因为API设计初始化在代码片段之外的另一个函数中执行。</p>\n<h4 id=\"AES\">AES</h4>\n<p>Gladman网站提供的源代码</p>\n<p><img src=\"dfg.assets/image-20220222195328619.png\" alt=\"image-20220222195328619\"></p>\n<p>Crypto++,LibTomCrypt and Botan</p>\n<p>Crypto++只能检测解密的算法，加密由于其使用MMX和SSE2指令（DFG构建时不支持）未被成功识别。其余均成功检测</p>\n<h4 id=\"性能\">性能</h4>\n<p>子图同构是NP完全问题，但大多数情况都可以有校解决</p>\n<p>每一列对应一个代码片段（来源于LibTomCrypt），每一行对应一个签名</p>\n<ul>\n<li>\n<p>灰色表示未成功匹配，能很快出结果（&lt;1ms)</p>\n</li>\n<li>\n<p>大的签名（涵盖几个回合的签名）所花费的时间的时间明显多于较小的签名（仅覆盖一个回合)。因此可以用macro signature来减少签名的大小。但顶点的数量并不是影响执行时间的唯一参数，有时较大的签名意味着其顶点之间有更强的结构约束，子图同构算法就能更快地收敛到解决方案</p>\n</li>\n<li>\n<p>每条重写规则都是与顶点数量成线性关系的，除了普通的子表达规则是二次的（至少对naive implementation)。然而，如前所述，重写规则规则是迭代应用的，直到达到一个平衡点。因此，执行时间也取决于原始DFG与归一化DFG之间的距离。在实践中归一化的执行时间并不超过签名匹配的执行时间</p>\n</li>\n</ul>\n<p><img src=\"dfg.assets/image-20220222195734989.png\" alt=\"image-20220222195734989\"></p>\n<h2 id=\"改进\">改进</h2>\n<ul>\n<li>通过利用macro signature，涵盖块密码的操作模式</li>\n<li>自动识别公钥密码算法</li>\n<li>从参考实现中自动生成签名</li>\n</ul>\n"},{"title":"LFSR","date":"2022-02-24T10:00:00.000Z","keywords":null,"description":null,"top_img":null,"comments":1,"cover":"https://scorpionre.github.io/2022/02/24/lfsr/lfsr.assets/image-20220224160744696.png","toc":null,"toc_number":null,"copyright":null,"mathjax":null,"katex":true,"hide":null,"_content":"\n## lfsr\n\n### 算法\n\n假设R为一个（N）LFSR，对于每一轮，使用反馈函数L从R中的比特位（子集）生成一个新的比特位。如果L是线性的，例如异或，我们把R称为一个LFSR。反之，如果L是非线性的，R就是一个NLFSR。寄存器R中的所有位都向左移动一个位置，忽略最高位，新产生的位被放在最低位且被输出。\n\n所以\n$$\n对每轮i\\in[0,\\ 1,\\ ...,\\ n ]\n\\\\ R_{i+1} = (R_i << 1)\\ xor\\ L(R_i)\n\\\\ output_i = (R_i)\n$$\n![image-20220224160744696](lfsr.assets/image-20220224160744696.png)\n\n\n\n### signature\n\n![image-20220217205141000](lfsr.assets/image-20220217205141000.png)\n\nTRANSIENT用于表示从表达式生成的DFG节点不是很重要，图清除过程中可以简化。\n\nOPAQUE<o1>中 o1为clamp-label（可选）：为节点类型命名。与任何其他类型的节点进行比较都为真，并增加了所有带有相同类型标签的 opaque 必须映射到相同类型节点的限制（type clamping)\n\n其中VARIANT C最常用。每轮迭代左移一位，通过反馈函数L生成一个新的比特位并放到\n\n\n\n### 测试\n\n用论文给出的a5算法样本进行：\n\nhttps://github.com/marcelmaatkamp/gnuradio-osmocom-gmr/blob/master/src/l1/a5.c\n\n![image-20220224161436546](lfsr.assets/image-20220224161436546.png)\n\n但是无法识别\n\n\n\n论文中给出和LFSR相关的图，但是不知道是什么样本\n\n![image-20220224153901121](lfsr.assets/image-20220224153901121.png)\n\n","source":"_posts/lfsr.md","raw":"---\ntitle: LFSR\ndate: 2022-02-24 18:00:00\ntags:\n  - CryptoDetect\n  - reverse\n  - crypto\n  - algorithm\ncategories:\n  - [CryptoDetect,algorithm]\nkeywords:\ndescription:\ntop_img:\ncomments:\ncover: https://scorpionre.github.io/2022/02/24/lfsr/lfsr.assets/image-20220224160744696.png\ntoc:\ntoc_number:\ncopyright:\nmathjax:\nkatex: true\nhide:\n---\n\n## lfsr\n\n### 算法\n\n假设R为一个（N）LFSR，对于每一轮，使用反馈函数L从R中的比特位（子集）生成一个新的比特位。如果L是线性的，例如异或，我们把R称为一个LFSR。反之，如果L是非线性的，R就是一个NLFSR。寄存器R中的所有位都向左移动一个位置，忽略最高位，新产生的位被放在最低位且被输出。\n\n所以\n$$\n对每轮i\\in[0,\\ 1,\\ ...,\\ n ]\n\\\\ R_{i+1} = (R_i << 1)\\ xor\\ L(R_i)\n\\\\ output_i = (R_i)\n$$\n![image-20220224160744696](lfsr.assets/image-20220224160744696.png)\n\n\n\n### signature\n\n![image-20220217205141000](lfsr.assets/image-20220217205141000.png)\n\nTRANSIENT用于表示从表达式生成的DFG节点不是很重要，图清除过程中可以简化。\n\nOPAQUE<o1>中 o1为clamp-label（可选）：为节点类型命名。与任何其他类型的节点进行比较都为真，并增加了所有带有相同类型标签的 opaque 必须映射到相同类型节点的限制（type clamping)\n\n其中VARIANT C最常用。每轮迭代左移一位，通过反馈函数L生成一个新的比特位并放到\n\n\n\n### 测试\n\n用论文给出的a5算法样本进行：\n\nhttps://github.com/marcelmaatkamp/gnuradio-osmocom-gmr/blob/master/src/l1/a5.c\n\n![image-20220224161436546](lfsr.assets/image-20220224161436546.png)\n\n但是无法识别\n\n\n\n论文中给出和LFSR相关的图，但是不知道是什么样本\n\n![image-20220224153901121](lfsr.assets/image-20220224153901121.png)\n\n","slug":"lfsr","published":1,"updated":"2022-02-26T15:51:52.000Z","layout":"post","photos":[],"link":"","_id":"cletwjohy0016ri3sfoz269ia","content":"<h2 id=\"lfsr\">lfsr</h2>\n<h3 id=\"算法-2\">算法</h3>\n<p>假设R为一个（N）LFSR，对于每一轮，使用反馈函数L从R中的比特位（子集）生成一个新的比特位。如果L是线性的，例如异或，我们把R称为一个LFSR。反之，如果L是非线性的，R就是一个NLFSR。寄存器R中的所有位都向左移动一个位置，忽略最高位，新产生的位被放在最低位且被输出。</p>\n<p>所以</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>对每轮</mtext><mi>i</mi><mo>∈</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mtext> </mtext><mn>1</mn><mo separator=\"true\">,</mo><mtext> </mtext><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><mtext> </mtext><mi>n</mi><mo stretchy=\"false\">]</mo><mspace linebreak=\"newline\"></mspace><msub><mi>R</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><mo stretchy=\"false\">(</mo><msub><mi>R</mi><mi>i</mi></msub><mo>&lt;</mo><mo>&lt;</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mtext> </mtext><mi>x</mi><mi>o</mi><mi>r</mi><mtext> </mtext><mi>L</mi><mo stretchy=\"false\">(</mo><msub><mi>R</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><mi>o</mi><mi>u</mi><mi>t</mi><mi>p</mi><mi>u</mi><msub><mi>t</mi><mi>i</mi></msub><mo>=</mo><mo stretchy=\"false\">(</mo><msub><mi>R</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">对每轮i\\in[0,\\ 1,\\ ...,\\ n ]\n\\\\ R_{i+1} = (R_i &lt;&lt; 1)\\ xor\\ L(R_i)\n\\\\ output_i = (R_i)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord cjk_fallback\">对每轮</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">...</span><span class=\"mpunct\">,</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">]</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8917em;vertical-align:-0.2083em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">or</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8095em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">tp</span><span class=\"mord mathnormal\">u</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p><img src=\"lfsr.assets/image-20220224160744696.png\" alt=\"image-20220224160744696\"></p>\n<h3 id=\"signature-4\">signature</h3>\n<p><img src=\"lfsr.assets/image-20220217205141000.png\" alt=\"image-20220217205141000\"></p>\n<p>TRANSIENT用于表示从表达式生成的DFG节点不是很重要，图清除过程中可以简化。</p>\n<p>OPAQUE<o1>中 o1为clamp-label（可选）：为节点类型命名。与任何其他类型的节点进行比较都为真，并增加了所有带有相同类型标签的 opaque 必须映射到相同类型节点的限制（type clamping)</p>\n<p>其中VARIANT C最常用。每轮迭代左移一位，通过反馈函数L生成一个新的比特位并放到</p>\n<h3 id=\"测试-2\">测试</h3>\n<p>用论文给出的a5算法样本进行：</p>\n<p><a href=\"https://github.com/marcelmaatkamp/gnuradio-osmocom-gmr/blob/master/src/l1/a5.c\">https://github.com/marcelmaatkamp/gnuradio-osmocom-gmr/blob/master/src/l1/a5.c</a></p>\n<p><img src=\"lfsr.assets/image-20220224161436546.png\" alt=\"image-20220224161436546\"></p>\n<p>但是无法识别</p>\n<p>论文中给出和LFSR相关的图，但是不知道是什么样本</p>\n<p><img src=\"lfsr.assets/image-20220224153901121.png\" alt=\"image-20220224153901121\"></p>\n","site":{"data":{"about":{"class":{"class_name":"about","link_list":{"-1":{"name":"Scorpion","avatar":"/image/avatar.jpg","link":null,"descr":"�����ƹ������ë��̨��ɢ�򣬻�ѩ���������ݣ����ֲ�Ƭ����Ƭ�赸��Ƶ��ҵ����Ӱ���Ǻð�ȫ��"}}}},"link":{"class":{"class_name":"友情链接","link_list":{"-1":{"name":"M4tsuri","link":"https://M4tsuri.io","avatar":"/image/m4tsuri.jpg","descr":"pwn,blockchain"}}}}}},"excerpt":"","more":"<h2 id=\"lfsr\">lfsr</h2>\n<h3 id=\"算法-2\">算法</h3>\n<p>假设R为一个（N）LFSR，对于每一轮，使用反馈函数L从R中的比特位（子集）生成一个新的比特位。如果L是线性的，例如异或，我们把R称为一个LFSR。反之，如果L是非线性的，R就是一个NLFSR。寄存器R中的所有位都向左移动一个位置，忽略最高位，新产生的位被放在最低位且被输出。</p>\n<p>所以</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>对每轮</mtext><mi>i</mi><mo>∈</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mtext> </mtext><mn>1</mn><mo separator=\"true\">,</mo><mtext> </mtext><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><mtext> </mtext><mi>n</mi><mo stretchy=\"false\">]</mo><mspace linebreak=\"newline\"></mspace><msub><mi>R</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><mo stretchy=\"false\">(</mo><msub><mi>R</mi><mi>i</mi></msub><mo>&lt;</mo><mo>&lt;</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mtext> </mtext><mi>x</mi><mi>o</mi><mi>r</mi><mtext> </mtext><mi>L</mi><mo stretchy=\"false\">(</mo><msub><mi>R</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><mi>o</mi><mi>u</mi><mi>t</mi><mi>p</mi><mi>u</mi><msub><mi>t</mi><mi>i</mi></msub><mo>=</mo><mo stretchy=\"false\">(</mo><msub><mi>R</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">对每轮i\\in[0,\\ 1,\\ ...,\\ n ]\n\\\\ R_{i+1} = (R_i &lt;&lt; 1)\\ xor\\ L(R_i)\n\\\\ output_i = (R_i)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord cjk_fallback\">对每轮</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">...</span><span class=\"mpunct\">,</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">]</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8917em;vertical-align:-0.2083em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">or</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8095em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">tp</span><span class=\"mord mathnormal\">u</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p><img src=\"lfsr.assets/image-20220224160744696.png\" alt=\"image-20220224160744696\"></p>\n<h3 id=\"signature-4\">signature</h3>\n<p><img src=\"lfsr.assets/image-20220217205141000.png\" alt=\"image-20220217205141000\"></p>\n<p>TRANSIENT用于表示从表达式生成的DFG节点不是很重要，图清除过程中可以简化。</p>\n<p>OPAQUE<o1>中 o1为clamp-label（可选）：为节点类型命名。与任何其他类型的节点进行比较都为真，并增加了所有带有相同类型标签的 opaque 必须映射到相同类型节点的限制（type clamping)</p>\n<p>其中VARIANT C最常用。每轮迭代左移一位，通过反馈函数L生成一个新的比特位并放到</p>\n<h3 id=\"测试-2\">测试</h3>\n<p>用论文给出的a5算法样本进行：</p>\n<p><a href=\"https://github.com/marcelmaatkamp/gnuradio-osmocom-gmr/blob/master/src/l1/a5.c\">https://github.com/marcelmaatkamp/gnuradio-osmocom-gmr/blob/master/src/l1/a5.c</a></p>\n<p><img src=\"lfsr.assets/image-20220224161436546.png\" alt=\"image-20220224161436546\"></p>\n<p>但是无法识别</p>\n<p>论文中给出和LFSR相关的图，但是不知道是什么样本</p>\n<p><img src=\"lfsr.assets/image-20220224153901121.png\" alt=\"image-20220224153901121\"></p>\n"},{"title":"MD5","date":"2022-01-28T04:51:00.000Z","keywords":null,"description":null,"top_img":null,"comments":1,"cover":"https://scorpionre.github.io/2022/01/28/md5/md5.assets/image-20220127171124399.png","toc":null,"toc_number":null,"copyright":null,"mathjax":null,"katex":null,"hide":null,"_content":"\n# MD5\n\n### 算法\n\n- 输入：任意长的消息，512 比特长的分组。\n- 输出：128 比特的消息摘要\n\n整体流程如下：\n\n- 首先填充原始消息使得对512求余的结果等于448，然后64位记录其长度。\n\n- 512bit一组分为n组。每组中32bit为一段，分为16段\n- 对每一组，循环4次下述4轮运算，得到新的A,B,C,D作为下一组的初始值\n- 最后得到的A,B,C,D加上第n组原来A,B,C,D的值（即计算前的值）\n- 按照地址的顺序从低到高打印对应的A,B,C,D值，就是所求的MD5值。\n\n![image-20220127171124399](md5.assets/image-20220127171124399.png)\n\n#### 填充\n\n如果输入信息的长度(bit)对512求余的结果不等于448，就需要填充使得对512求余的结果等于448。填充的方法是填充一个1和n个0。填充完后，信息的长度就为N*512+448(bit)。\n\n然后用64位来存储填充前信息长度。这64位加在第一步结果的后面，这样信息长度就变为N\\*512+448+64=(N+1)*512位\n\n\n\n比如，需要加密消息\"gnubd\"，最后被填充为\n\n`小端字节序存储`\n\n```\n67 6E 75 62 64 80 00 00 00 00 00 00 00 00 00 00\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 \n```\n\n最后64位（8字节)为0x28（40），消息内容为40位（5字节）。\n\n#### 数据处理\n\n要使A,B,C,D在内存中的显示情况：\n\n```c\nA = 0x01234567\nB = 0x89ABCDEF\nC = 0xFEDCBA89\nD = 0x76543210\n```\n\n程序定义应为（`小端字节序存储`）\n\n```c\nA = 0x67452301;\nB = 0xEFCDAB89;\nC = 0x98BADCFE;\nD = 0x10325476;\n```\n\n每512位（64字节）为1段可以分成n段，（n大于等于1），对于每一段信息（512位，64字节）又划分成16小段（每段32位，4个字节，用M表示）\n\n\n\n每一组，经过下列运算处理：\n\n其中Mj表示消息的第j个子段（从0到15）\n\n```c\n 第一轮\na=FF(a,b,c,d,M0,7,0xd76aa478)\nb=FF(d,a,b,c,M1,12,0xe8c7b756)\nc=FF(c,d,a,b,M2,17,0x242070db)\nd=FF(b,c,d,a,M3,22,0xc1bdceee)\na=FF(a,b,c,d,M4,7,0xf57c0faf)\nb=FF(d,a,b,c,M5,12,0x4787c62a)\nc=FF(c,d,a,b,M6,17,0xa8304613)\nd=FF(b,c,d,a,M7,22,0xfd469501)\na=FF(a,b,c,d,M8,7,0x698098d8)\nb=FF(d,a,b,c,M9,12,0x8b44f7af)\nc=FF(c,d,a,b,M10,17,0xffff5bb1)\nd=FF(b,c,d,a,M11,22,0x895cd7be)\na=FF(a,b,c,d,M12,7,0x6b901122)\nb=FF(d,a,b,c,M13,12,0xfd987193)\nc=FF(c,d,a,b,M14,17,0xa679438e)\nd=FF(b,c,d,a,M15,22,0x49b40821)\n\n第二轮\na=GG(a,b,c,d,M1,5,0xf61e2562)\nb=GG(d,a,b,c,M6,9,0xc040b340)\nc=GG(c,d,a,b,M11,14,0x265e5a51)\nd=GG(b,c,d,a,M0,20,0xe9b6c7aa)\na=GG(a,b,c,d,M5,5,0xd62f105d)\nb=GG(d,a,b,c,M10,9,0x02441453)\nc=GG(c,d,a,b,M15,14,0xd8a1e681)\nd=GG(b,c,d,a,M4,20,0xe7d3fbc8)\na=GG(a,b,c,d,M9,5,0x21e1cde6)\nb=GG(d,a,b,c,M14,9,0xc33707d6)\nc=GG(c,d,a,b,M3,14,0xf4d50d87)\nd=GG(b,c,d,a,M8,20,0x455a14ed)\na=GG(a,b,c,d,M13,5,0xa9e3e905)\nb=GG(d,a,b,c,M2,9,0xfcefa3f8)\nc=GG(c,d,a,b,M7,14,0x676f02d9)\nd=GG(b,c,d,a,M12,20,0x8d2a4c8a)\n\n第三轮\na=HH(a,b,c,d,M5,4,0xfffa3942)\nb=HH(d,a,b,c,M8,11,0x8771f681)\nc=HH(c,d,a,b,M11,16,0x6d9d6122)\nd=HH(b,c,d,a,M14,23,0xfde5380c)\na=HH(a,b,c,d,M1,4,0xa4beea44)\nb=HH(d,a,b,c,M4,11,0x4bdecfa9)\nc=HH(c,d,a,b,M7,16,0xf6bb4b60)\nd=HH(b,c,d,a,M10,23,0xbebfbc70)\na=HH(a,b,c,d,M13,4,0x289b7ec6)\nb=HH(d,a,b,c,M0,11,0xeaa127fa)\nc=HH(c,d,a,b,M3,16,0xd4ef3085)\nd=HH(b,c,d,a,M6,23,0x04881d05)\na=HH(a,b,c,d,M9,4,0xd9d4d039)\nb=HH(d,a,b,c,M12,11,0xe6db99e5)\nc=HH(c,d,a,b,M15,16,0x1fa27cf8)\nd=HH(b,c,d,a,M2,23,0xc4ac5665)\n\n第四轮\na=II(a,b,c,d,M0,6,0xf4292244)\nb=II(d,a,b,c,M7,10,0x432aff97)\nc=II(c,d,a,b,M14,15,0xab9423a7)\nd=II(b,c,d,a,M5,21,0xfc93a039)\na=II(a,b,c,d,M12,6,0x655b59c3)\nb=II(d,a,b,c,M3,10,0x8f0ccc92)\nc=II(c,d,a,b,M10,15,0xffeff47d)\nd=II(b,c,d,a,M1,21,0x85845dd1)\na=II(a,b,c,d,M8,6,0x6fa87e4f)\nb=II(d,a,b,c,M15,10,0xfe2ce6e0)\nc=II(c,d,a,b,M6,15,0xa3014314)\nd=II(b,c,d,a,M13,21,0x4e0811a1)\na=II(a,b,c,d,M4,6,0xf7537e82)\nb=II(d,a,b,c,M11,10,0xbd3af235)\nc=II(c,d,a,b,M2,15,0x2ad7d2bb)\nd=II(b,c,d,a,M9,21,0xeb86d391)\n\nFF(a,b,c,d,Mj,s,ti)表示a=b+((a+F(b,c,d)+Mj+ti)<<<s)\nGG(a,b,c,d,Mj,s,ti)表示a=b+((a+G(b,c,d)+Mj+ti)<<<s)\nHH(a,b,c,d,Mj,s,ti)表示a=b+((a+H(b,c,d)+Mj+ti)<<<s)\nII(a,b,c,d,Mj,s,ti)表示a=b+((a+I(b,c,d)+Mj+ti)<<<s)\n    \n//四个线性函数定义如下\nF(X,Y,Z)=(X&Y)|((~X)&Z)\nG(X,Y,Z)=(X&Z)|(Y&(~Z))\nH(X,Y,Z)=X^Y^Z\nI(X,Y,Z)=Y^(X|(~Z))\n```\n\n每轮循环后，将A，B，C，D分别加上a，b，c，d，然后进入下一循环，共循环四次。\n\n\n\n循环结束后，新的A,B,C,D作为下一组A,B,C,D的初始值，继续进行上述循环运算，得到新的A,B,C,D再加上初始A,B,C,D值。最后按照地址的顺序从低到高打印对应的A,B,C,D值，就是所求的MD5值。\n\n\n\n### signature\n\nDSL定义如下\n\n![image-20220127171654001](md5.assets/image-20220127171654001.png)后面的3614090360（0xD76AA478),即为相应值转化为十进制后的数。\n\nROTATE表示移位\n\n```java\nprivate static long F(long x, long y, long z) {\n        return (x & y) | ((~x) & z);\n}\n\nprivate static long FF(long a, long b, long c, long d, long x, long s,\n            long ac) {\n        a += (F(b, c, d)&0xFFFFFFFFL) + x + ac;\n        a = ((a&0xFFFFFFFFL)<< s) | ((a&0xFFFFFFFFL) >>> (32 - s));\n        a += b;\n        return (a&0xFFFFFFFFL);\n    }\n\n\na = FF(a, b, c, d, groups[0], S11, 0xd76aa478L);\n\n\n```\n\n\n\n\n\n### 测试\n\nlibcrypto.so.1.1(openssl)\n\n其中和md5有关的函数如下\n\n![image-20220127175833516](md5.assets/image-20220127175833516.png)\n\n利用where's crypto分析\n\n![image-20220127181300578](md5.assets/image-20220127181300578.png)\n\n![image-20220128122013626](md5.assets/image-20220128122013626.png)\n\n反汇编MD5_Update,主要还是调用了md5_block_data_order\n\n![image-20220128122933514](md5.assets/image-20220128122933514.png)o\n\nmd5_block_data_order反汇编后\n\n![image-20220128123055931](md5.assets/image-20220128123055931.png)\n\n与signature中对应关系如下\n\n![image-20220128124206153](md5.assets/image-20220128124206153.png)\n\nopenssl中源代码\n\n```c\n#ifndef md5_block_data_order\n# ifdef X\n#  undef X\n# endif\nvoid md5_block_data_order(MD5_CTX *c, const void *data_, size_t num)\n{\n    const unsigned char *data = data_;\n    register unsigned MD32_REG_T A, B, C, D, l;\n# ifndef MD32_XARRAY\n    /* See comment in crypto/sha/sha_local.h for details. */\n    unsigned MD32_REG_T XX0, XX1, XX2, XX3, XX4, XX5, XX6, XX7,\n        XX8, XX9, XX10, XX11, XX12, XX13, XX14, XX15;\n#  define X(i)   XX##i\n# else\n    MD5_LONG XX[MD5_LBLOCK];\n#  define X(i)   XX[i]\n# endif\n\n    A = c->A;\n    B = c->B;\n    C = c->C;\n    D = c->D;\n\n    for (; num--;) {\n        (void)HOST_c2l(data, l);\n        X(0) = l;\n        (void)HOST_c2l(data, l);\n        X(1) = l;\n        /* Round 0 */\n        R0(A, B, C, D, X(0), 7, 0xd76aa478L);\n        (void)HOST_c2l(data, l);\n        X(2) = l;\n        R0(D, A, B, C, X(1), 12, 0xe8c7b756L);\n        (void)HOST_c2l(data, l);\n        X(3) = l;\n        R0(C, D, A, B, X(2), 17, 0x242070dbL);\n        (void)HOST_c2l(data, l);\n        X(4) = l;\n        R0(B, C, D, A, X(3), 22, 0xc1bdceeeL);\n        (void)HOST_c2l(data, l);\n        X(5) = l;\n        R0(A, B, C, D, X(4), 7, 0xf57c0fafL);\n        (void)HOST_c2l(data, l);\n        X(6) = l;\n        R0(D, A, B, C, X(5), 12, 0x4787c62aL);\n        (void)HOST_c2l(data, l);\n        X(7) = l;\n        R0(C, D, A, B, X(6), 17, 0xa8304613L);\n        (void)HOST_c2l(data, l);\n        X(8) = l;\n        R0(B, C, D, A, X(7), 22, 0xfd469501L);\n        (void)HOST_c2l(data, l);\n        X(9) = l;\n        R0(A, B, C, D, X(8), 7, 0x698098d8L);\n        (void)HOST_c2l(data, l);\n        X(10) = l;\n        R0(D, A, B, C, X(9), 12, 0x8b44f7afL);\n        (void)HOST_c2l(data, l);\n        X(11) = l;\n        R0(C, D, A, B, X(10), 17, 0xffff5bb1L);\n        (void)HOST_c2l(data, l);\n        X(12) = l;\n        R0(B, C, D, A, X(11), 22, 0x895cd7beL);\n        (void)HOST_c2l(data, l);\n        X(13) = l;\n        R0(A, B, C, D, X(12), 7, 0x6b901122L);\n        (void)HOST_c2l(data, l);\n        X(14) = l;\n        R0(D, A, B, C, X(13), 12, 0xfd987193L);\n        (void)HOST_c2l(data, l);\n        X(15) = l;\n        R0(C, D, A, B, X(14), 17, 0xa679438eL);\n        R0(B, C, D, A, X(15), 22, 0x49b40821L);\n        /* Round 1 */\n        R1(A, B, C, D, X(1), 5, 0xf61e2562L);\n        R1(D, A, B, C, X(6), 9, 0xc040b340L);\n        R1(C, D, A, B, X(11), 14, 0x265e5a51L);\n        R1(B, C, D, A, X(0), 20, 0xe9b6c7aaL);\n        R1(A, B, C, D, X(5), 5, 0xd62f105dL);\n        R1(D, A, B, C, X(10), 9, 0x02441453L);\n        R1(C, D, A, B, X(15), 14, 0xd8a1e681L);\n        R1(B, C, D, A, X(4), 20, 0xe7d3fbc8L);\n        R1(A, B, C, D, X(9), 5, 0x21e1cde6L);\n        R1(D, A, B, C, X(14), 9, 0xc33707d6L);\n        R1(C, D, A, B, X(3), 14, 0xf4d50d87L);\n        R1(B, C, D, A, X(8), 20, 0x455a14edL);\n        R1(A, B, C, D, X(13), 5, 0xa9e3e905L);\n        R1(D, A, B, C, X(2), 9, 0xfcefa3f8L);\n        R1(C, D, A, B, X(7), 14, 0x676f02d9L);\n        R1(B, C, D, A, X(12), 20, 0x8d2a4c8aL);\n        /* Round 2 */\n        R2(A, B, C, D, X(5), 4, 0xfffa3942L);\n        R2(D, A, B, C, X(8), 11, 0x8771f681L);\n        R2(C, D, A, B, X(11), 16, 0x6d9d6122L);\n        R2(B, C, D, A, X(14), 23, 0xfde5380cL);\n        R2(A, B, C, D, X(1), 4, 0xa4beea44L);\n        R2(D, A, B, C, X(4), 11, 0x4bdecfa9L);\n        R2(C, D, A, B, X(7), 16, 0xf6bb4b60L);\n        R2(B, C, D, A, X(10), 23, 0xbebfbc70L);\n        R2(A, B, C, D, X(13), 4, 0x289b7ec6L);\n        R2(D, A, B, C, X(0), 11, 0xeaa127faL);\n        R2(C, D, A, B, X(3), 16, 0xd4ef3085L);\n        R2(B, C, D, A, X(6), 23, 0x04881d05L);\n        R2(A, B, C, D, X(9), 4, 0xd9d4d039L);\n        R2(D, A, B, C, X(12), 11, 0xe6db99e5L);\n        R2(C, D, A, B, X(15), 16, 0x1fa27cf8L);\n        R2(B, C, D, A, X(2), 23, 0xc4ac5665L);\n        /* Round 3 */\n        R3(A, B, C, D, X(0), 6, 0xf4292244L);\n        R3(D, A, B, C, X(7), 10, 0x432aff97L);\n        R3(C, D, A, B, X(14), 15, 0xab9423a7L);\n        R3(B, C, D, A, X(5), 21, 0xfc93a039L);\n        R3(A, B, C, D, X(12), 6, 0x655b59c3L);\n        R3(D, A, B, C, X(3), 10, 0x8f0ccc92L);\n        R3(C, D, A, B, X(10), 15, 0xffeff47dL);\n        R3(B, C, D, A, X(1), 21, 0x85845dd1L);\n        R3(A, B, C, D, X(8), 6, 0x6fa87e4fL);\n        R3(D, A, B, C, X(15), 10, 0xfe2ce6e0L);\n        R3(C, D, A, B, X(6), 15, 0xa3014314L);\n        R3(B, C, D, A, X(13), 21, 0x4e0811a1L);\n        R3(A, B, C, D, X(4), 6, 0xf7537e82L);\n        R3(D, A, B, C, X(11), 10, 0xbd3af235L);\n        R3(C, D, A, B, X(2), 15, 0x2ad7d2bbL);\n        R3(B, C, D, A, X(9), 21, 0xeb86d391L);\n\n        A = c->A += A;\n        B = c->B += B;\n        C = c->C += C;\n        D = c->D += D;\n    }\n}\n#endif\n```\n\nmd5_local.h\n\n```c\n#define F(b,c,d)        ((((c) ^ (d)) & (b)) ^ (d))\n#define G(b,c,d)        ((((b) ^ (c)) & (d)) ^ (c))\n#define H(b,c,d)        ((b) ^ (c) ^ (d))\n#define I(b,c,d)        (((~(d)) | (b)) ^ (c))\n\n#define R0(a,b,c,d,k,s,t) { \\\n        a+=((k)+(t)+F((b),(c),(d))); \\\n        a=ROTATE(a,s); \\\n        a+=b; };\n\n#define R1(a,b,c,d,k,s,t) { \\\n        a+=((k)+(t)+G((b),(c),(d))); \\\n        a=ROTATE(a,s); \\\n        a+=b; };\n\n#define R2(a,b,c,d,k,s,t) { \\\n        a+=((k)+(t)+H((b),(c),(d))); \\\n        a=ROTATE(a,s); \\\n        a+=b; };\n\n#define R3(a,b,c,d,k,s,t) { \\\n        a+=((k)+(t)+I((b),(c),(d))); \\\n        a=ROTATE(a,s); \\\n        a+=b; };\n```\n\n","source":"_posts/md5.md","raw":"---\n\ntitle: MD5\ndate: 2022-01-28 12:51:00\ntags: \n\t- CryptoDetect\n\t- reverse\n\t- algorithm\ncategories:\n\t- [CryptoDetect,algorithm]\nkeywords:\ndescription:\ntop_img:\ncomments:\ncover:  https://scorpionre.github.io/2022/01/28/md5/md5.assets/image-20220127171124399.png\ntoc:\ntoc_number:\ncopyright:\nmathjax:\nkatex:\nhide:\n---\n\n# MD5\n\n### 算法\n\n- 输入：任意长的消息，512 比特长的分组。\n- 输出：128 比特的消息摘要\n\n整体流程如下：\n\n- 首先填充原始消息使得对512求余的结果等于448，然后64位记录其长度。\n\n- 512bit一组分为n组。每组中32bit为一段，分为16段\n- 对每一组，循环4次下述4轮运算，得到新的A,B,C,D作为下一组的初始值\n- 最后得到的A,B,C,D加上第n组原来A,B,C,D的值（即计算前的值）\n- 按照地址的顺序从低到高打印对应的A,B,C,D值，就是所求的MD5值。\n\n![image-20220127171124399](md5.assets/image-20220127171124399.png)\n\n#### 填充\n\n如果输入信息的长度(bit)对512求余的结果不等于448，就需要填充使得对512求余的结果等于448。填充的方法是填充一个1和n个0。填充完后，信息的长度就为N*512+448(bit)。\n\n然后用64位来存储填充前信息长度。这64位加在第一步结果的后面，这样信息长度就变为N\\*512+448+64=(N+1)*512位\n\n\n\n比如，需要加密消息\"gnubd\"，最后被填充为\n\n`小端字节序存储`\n\n```\n67 6E 75 62 64 80 00 00 00 00 00 00 00 00 00 00\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 \n```\n\n最后64位（8字节)为0x28（40），消息内容为40位（5字节）。\n\n#### 数据处理\n\n要使A,B,C,D在内存中的显示情况：\n\n```c\nA = 0x01234567\nB = 0x89ABCDEF\nC = 0xFEDCBA89\nD = 0x76543210\n```\n\n程序定义应为（`小端字节序存储`）\n\n```c\nA = 0x67452301;\nB = 0xEFCDAB89;\nC = 0x98BADCFE;\nD = 0x10325476;\n```\n\n每512位（64字节）为1段可以分成n段，（n大于等于1），对于每一段信息（512位，64字节）又划分成16小段（每段32位，4个字节，用M表示）\n\n\n\n每一组，经过下列运算处理：\n\n其中Mj表示消息的第j个子段（从0到15）\n\n```c\n 第一轮\na=FF(a,b,c,d,M0,7,0xd76aa478)\nb=FF(d,a,b,c,M1,12,0xe8c7b756)\nc=FF(c,d,a,b,M2,17,0x242070db)\nd=FF(b,c,d,a,M3,22,0xc1bdceee)\na=FF(a,b,c,d,M4,7,0xf57c0faf)\nb=FF(d,a,b,c,M5,12,0x4787c62a)\nc=FF(c,d,a,b,M6,17,0xa8304613)\nd=FF(b,c,d,a,M7,22,0xfd469501)\na=FF(a,b,c,d,M8,7,0x698098d8)\nb=FF(d,a,b,c,M9,12,0x8b44f7af)\nc=FF(c,d,a,b,M10,17,0xffff5bb1)\nd=FF(b,c,d,a,M11,22,0x895cd7be)\na=FF(a,b,c,d,M12,7,0x6b901122)\nb=FF(d,a,b,c,M13,12,0xfd987193)\nc=FF(c,d,a,b,M14,17,0xa679438e)\nd=FF(b,c,d,a,M15,22,0x49b40821)\n\n第二轮\na=GG(a,b,c,d,M1,5,0xf61e2562)\nb=GG(d,a,b,c,M6,9,0xc040b340)\nc=GG(c,d,a,b,M11,14,0x265e5a51)\nd=GG(b,c,d,a,M0,20,0xe9b6c7aa)\na=GG(a,b,c,d,M5,5,0xd62f105d)\nb=GG(d,a,b,c,M10,9,0x02441453)\nc=GG(c,d,a,b,M15,14,0xd8a1e681)\nd=GG(b,c,d,a,M4,20,0xe7d3fbc8)\na=GG(a,b,c,d,M9,5,0x21e1cde6)\nb=GG(d,a,b,c,M14,9,0xc33707d6)\nc=GG(c,d,a,b,M3,14,0xf4d50d87)\nd=GG(b,c,d,a,M8,20,0x455a14ed)\na=GG(a,b,c,d,M13,5,0xa9e3e905)\nb=GG(d,a,b,c,M2,9,0xfcefa3f8)\nc=GG(c,d,a,b,M7,14,0x676f02d9)\nd=GG(b,c,d,a,M12,20,0x8d2a4c8a)\n\n第三轮\na=HH(a,b,c,d,M5,4,0xfffa3942)\nb=HH(d,a,b,c,M8,11,0x8771f681)\nc=HH(c,d,a,b,M11,16,0x6d9d6122)\nd=HH(b,c,d,a,M14,23,0xfde5380c)\na=HH(a,b,c,d,M1,4,0xa4beea44)\nb=HH(d,a,b,c,M4,11,0x4bdecfa9)\nc=HH(c,d,a,b,M7,16,0xf6bb4b60)\nd=HH(b,c,d,a,M10,23,0xbebfbc70)\na=HH(a,b,c,d,M13,4,0x289b7ec6)\nb=HH(d,a,b,c,M0,11,0xeaa127fa)\nc=HH(c,d,a,b,M3,16,0xd4ef3085)\nd=HH(b,c,d,a,M6,23,0x04881d05)\na=HH(a,b,c,d,M9,4,0xd9d4d039)\nb=HH(d,a,b,c,M12,11,0xe6db99e5)\nc=HH(c,d,a,b,M15,16,0x1fa27cf8)\nd=HH(b,c,d,a,M2,23,0xc4ac5665)\n\n第四轮\na=II(a,b,c,d,M0,6,0xf4292244)\nb=II(d,a,b,c,M7,10,0x432aff97)\nc=II(c,d,a,b,M14,15,0xab9423a7)\nd=II(b,c,d,a,M5,21,0xfc93a039)\na=II(a,b,c,d,M12,6,0x655b59c3)\nb=II(d,a,b,c,M3,10,0x8f0ccc92)\nc=II(c,d,a,b,M10,15,0xffeff47d)\nd=II(b,c,d,a,M1,21,0x85845dd1)\na=II(a,b,c,d,M8,6,0x6fa87e4f)\nb=II(d,a,b,c,M15,10,0xfe2ce6e0)\nc=II(c,d,a,b,M6,15,0xa3014314)\nd=II(b,c,d,a,M13,21,0x4e0811a1)\na=II(a,b,c,d,M4,6,0xf7537e82)\nb=II(d,a,b,c,M11,10,0xbd3af235)\nc=II(c,d,a,b,M2,15,0x2ad7d2bb)\nd=II(b,c,d,a,M9,21,0xeb86d391)\n\nFF(a,b,c,d,Mj,s,ti)表示a=b+((a+F(b,c,d)+Mj+ti)<<<s)\nGG(a,b,c,d,Mj,s,ti)表示a=b+((a+G(b,c,d)+Mj+ti)<<<s)\nHH(a,b,c,d,Mj,s,ti)表示a=b+((a+H(b,c,d)+Mj+ti)<<<s)\nII(a,b,c,d,Mj,s,ti)表示a=b+((a+I(b,c,d)+Mj+ti)<<<s)\n    \n//四个线性函数定义如下\nF(X,Y,Z)=(X&Y)|((~X)&Z)\nG(X,Y,Z)=(X&Z)|(Y&(~Z))\nH(X,Y,Z)=X^Y^Z\nI(X,Y,Z)=Y^(X|(~Z))\n```\n\n每轮循环后，将A，B，C，D分别加上a，b，c，d，然后进入下一循环，共循环四次。\n\n\n\n循环结束后，新的A,B,C,D作为下一组A,B,C,D的初始值，继续进行上述循环运算，得到新的A,B,C,D再加上初始A,B,C,D值。最后按照地址的顺序从低到高打印对应的A,B,C,D值，就是所求的MD5值。\n\n\n\n### signature\n\nDSL定义如下\n\n![image-20220127171654001](md5.assets/image-20220127171654001.png)后面的3614090360（0xD76AA478),即为相应值转化为十进制后的数。\n\nROTATE表示移位\n\n```java\nprivate static long F(long x, long y, long z) {\n        return (x & y) | ((~x) & z);\n}\n\nprivate static long FF(long a, long b, long c, long d, long x, long s,\n            long ac) {\n        a += (F(b, c, d)&0xFFFFFFFFL) + x + ac;\n        a = ((a&0xFFFFFFFFL)<< s) | ((a&0xFFFFFFFFL) >>> (32 - s));\n        a += b;\n        return (a&0xFFFFFFFFL);\n    }\n\n\na = FF(a, b, c, d, groups[0], S11, 0xd76aa478L);\n\n\n```\n\n\n\n\n\n### 测试\n\nlibcrypto.so.1.1(openssl)\n\n其中和md5有关的函数如下\n\n![image-20220127175833516](md5.assets/image-20220127175833516.png)\n\n利用where's crypto分析\n\n![image-20220127181300578](md5.assets/image-20220127181300578.png)\n\n![image-20220128122013626](md5.assets/image-20220128122013626.png)\n\n反汇编MD5_Update,主要还是调用了md5_block_data_order\n\n![image-20220128122933514](md5.assets/image-20220128122933514.png)o\n\nmd5_block_data_order反汇编后\n\n![image-20220128123055931](md5.assets/image-20220128123055931.png)\n\n与signature中对应关系如下\n\n![image-20220128124206153](md5.assets/image-20220128124206153.png)\n\nopenssl中源代码\n\n```c\n#ifndef md5_block_data_order\n# ifdef X\n#  undef X\n# endif\nvoid md5_block_data_order(MD5_CTX *c, const void *data_, size_t num)\n{\n    const unsigned char *data = data_;\n    register unsigned MD32_REG_T A, B, C, D, l;\n# ifndef MD32_XARRAY\n    /* See comment in crypto/sha/sha_local.h for details. */\n    unsigned MD32_REG_T XX0, XX1, XX2, XX3, XX4, XX5, XX6, XX7,\n        XX8, XX9, XX10, XX11, XX12, XX13, XX14, XX15;\n#  define X(i)   XX##i\n# else\n    MD5_LONG XX[MD5_LBLOCK];\n#  define X(i)   XX[i]\n# endif\n\n    A = c->A;\n    B = c->B;\n    C = c->C;\n    D = c->D;\n\n    for (; num--;) {\n        (void)HOST_c2l(data, l);\n        X(0) = l;\n        (void)HOST_c2l(data, l);\n        X(1) = l;\n        /* Round 0 */\n        R0(A, B, C, D, X(0), 7, 0xd76aa478L);\n        (void)HOST_c2l(data, l);\n        X(2) = l;\n        R0(D, A, B, C, X(1), 12, 0xe8c7b756L);\n        (void)HOST_c2l(data, l);\n        X(3) = l;\n        R0(C, D, A, B, X(2), 17, 0x242070dbL);\n        (void)HOST_c2l(data, l);\n        X(4) = l;\n        R0(B, C, D, A, X(3), 22, 0xc1bdceeeL);\n        (void)HOST_c2l(data, l);\n        X(5) = l;\n        R0(A, B, C, D, X(4), 7, 0xf57c0fafL);\n        (void)HOST_c2l(data, l);\n        X(6) = l;\n        R0(D, A, B, C, X(5), 12, 0x4787c62aL);\n        (void)HOST_c2l(data, l);\n        X(7) = l;\n        R0(C, D, A, B, X(6), 17, 0xa8304613L);\n        (void)HOST_c2l(data, l);\n        X(8) = l;\n        R0(B, C, D, A, X(7), 22, 0xfd469501L);\n        (void)HOST_c2l(data, l);\n        X(9) = l;\n        R0(A, B, C, D, X(8), 7, 0x698098d8L);\n        (void)HOST_c2l(data, l);\n        X(10) = l;\n        R0(D, A, B, C, X(9), 12, 0x8b44f7afL);\n        (void)HOST_c2l(data, l);\n        X(11) = l;\n        R0(C, D, A, B, X(10), 17, 0xffff5bb1L);\n        (void)HOST_c2l(data, l);\n        X(12) = l;\n        R0(B, C, D, A, X(11), 22, 0x895cd7beL);\n        (void)HOST_c2l(data, l);\n        X(13) = l;\n        R0(A, B, C, D, X(12), 7, 0x6b901122L);\n        (void)HOST_c2l(data, l);\n        X(14) = l;\n        R0(D, A, B, C, X(13), 12, 0xfd987193L);\n        (void)HOST_c2l(data, l);\n        X(15) = l;\n        R0(C, D, A, B, X(14), 17, 0xa679438eL);\n        R0(B, C, D, A, X(15), 22, 0x49b40821L);\n        /* Round 1 */\n        R1(A, B, C, D, X(1), 5, 0xf61e2562L);\n        R1(D, A, B, C, X(6), 9, 0xc040b340L);\n        R1(C, D, A, B, X(11), 14, 0x265e5a51L);\n        R1(B, C, D, A, X(0), 20, 0xe9b6c7aaL);\n        R1(A, B, C, D, X(5), 5, 0xd62f105dL);\n        R1(D, A, B, C, X(10), 9, 0x02441453L);\n        R1(C, D, A, B, X(15), 14, 0xd8a1e681L);\n        R1(B, C, D, A, X(4), 20, 0xe7d3fbc8L);\n        R1(A, B, C, D, X(9), 5, 0x21e1cde6L);\n        R1(D, A, B, C, X(14), 9, 0xc33707d6L);\n        R1(C, D, A, B, X(3), 14, 0xf4d50d87L);\n        R1(B, C, D, A, X(8), 20, 0x455a14edL);\n        R1(A, B, C, D, X(13), 5, 0xa9e3e905L);\n        R1(D, A, B, C, X(2), 9, 0xfcefa3f8L);\n        R1(C, D, A, B, X(7), 14, 0x676f02d9L);\n        R1(B, C, D, A, X(12), 20, 0x8d2a4c8aL);\n        /* Round 2 */\n        R2(A, B, C, D, X(5), 4, 0xfffa3942L);\n        R2(D, A, B, C, X(8), 11, 0x8771f681L);\n        R2(C, D, A, B, X(11), 16, 0x6d9d6122L);\n        R2(B, C, D, A, X(14), 23, 0xfde5380cL);\n        R2(A, B, C, D, X(1), 4, 0xa4beea44L);\n        R2(D, A, B, C, X(4), 11, 0x4bdecfa9L);\n        R2(C, D, A, B, X(7), 16, 0xf6bb4b60L);\n        R2(B, C, D, A, X(10), 23, 0xbebfbc70L);\n        R2(A, B, C, D, X(13), 4, 0x289b7ec6L);\n        R2(D, A, B, C, X(0), 11, 0xeaa127faL);\n        R2(C, D, A, B, X(3), 16, 0xd4ef3085L);\n        R2(B, C, D, A, X(6), 23, 0x04881d05L);\n        R2(A, B, C, D, X(9), 4, 0xd9d4d039L);\n        R2(D, A, B, C, X(12), 11, 0xe6db99e5L);\n        R2(C, D, A, B, X(15), 16, 0x1fa27cf8L);\n        R2(B, C, D, A, X(2), 23, 0xc4ac5665L);\n        /* Round 3 */\n        R3(A, B, C, D, X(0), 6, 0xf4292244L);\n        R3(D, A, B, C, X(7), 10, 0x432aff97L);\n        R3(C, D, A, B, X(14), 15, 0xab9423a7L);\n        R3(B, C, D, A, X(5), 21, 0xfc93a039L);\n        R3(A, B, C, D, X(12), 6, 0x655b59c3L);\n        R3(D, A, B, C, X(3), 10, 0x8f0ccc92L);\n        R3(C, D, A, B, X(10), 15, 0xffeff47dL);\n        R3(B, C, D, A, X(1), 21, 0x85845dd1L);\n        R3(A, B, C, D, X(8), 6, 0x6fa87e4fL);\n        R3(D, A, B, C, X(15), 10, 0xfe2ce6e0L);\n        R3(C, D, A, B, X(6), 15, 0xa3014314L);\n        R3(B, C, D, A, X(13), 21, 0x4e0811a1L);\n        R3(A, B, C, D, X(4), 6, 0xf7537e82L);\n        R3(D, A, B, C, X(11), 10, 0xbd3af235L);\n        R3(C, D, A, B, X(2), 15, 0x2ad7d2bbL);\n        R3(B, C, D, A, X(9), 21, 0xeb86d391L);\n\n        A = c->A += A;\n        B = c->B += B;\n        C = c->C += C;\n        D = c->D += D;\n    }\n}\n#endif\n```\n\nmd5_local.h\n\n```c\n#define F(b,c,d)        ((((c) ^ (d)) & (b)) ^ (d))\n#define G(b,c,d)        ((((b) ^ (c)) & (d)) ^ (c))\n#define H(b,c,d)        ((b) ^ (c) ^ (d))\n#define I(b,c,d)        (((~(d)) | (b)) ^ (c))\n\n#define R0(a,b,c,d,k,s,t) { \\\n        a+=((k)+(t)+F((b),(c),(d))); \\\n        a=ROTATE(a,s); \\\n        a+=b; };\n\n#define R1(a,b,c,d,k,s,t) { \\\n        a+=((k)+(t)+G((b),(c),(d))); \\\n        a=ROTATE(a,s); \\\n        a+=b; };\n\n#define R2(a,b,c,d,k,s,t) { \\\n        a+=((k)+(t)+H((b),(c),(d))); \\\n        a=ROTATE(a,s); \\\n        a+=b; };\n\n#define R3(a,b,c,d,k,s,t) { \\\n        a+=((k)+(t)+I((b),(c),(d))); \\\n        a=ROTATE(a,s); \\\n        a+=b; };\n```\n\n","slug":"md5","published":1,"updated":"2022-01-27T16:54:06.000Z","layout":"post","photos":[],"link":"","_id":"cletwjohz0017ri3s2vjc866i","content":"<h1>MD5</h1>\n<h3 id=\"算法-3\">算法</h3>\n<ul>\n<li>输入：任意长的消息，512 比特长的分组。</li>\n<li>输出：128 比特的消息摘要</li>\n</ul>\n<p>整体流程如下：</p>\n<ul>\n<li>\n<p>首先填充原始消息使得对512求余的结果等于448，然后64位记录其长度。</p>\n</li>\n<li>\n<p>512bit一组分为n组。每组中32bit为一段，分为16段</p>\n</li>\n<li>\n<p>对每一组，循环4次下述4轮运算，得到新的A,B,C,D作为下一组的初始值</p>\n</li>\n<li>\n<p>最后得到的A,B,C,D加上第n组原来A,B,C,D的值（即计算前的值）</p>\n</li>\n<li>\n<p>按照地址的顺序从低到高打印对应的A,B,C,D值，就是所求的MD5值。</p>\n</li>\n</ul>\n<p><img src=\"md5.assets/image-20220127171124399.png\" alt=\"image-20220127171124399\"></p>\n<h4 id=\"填充\">填充</h4>\n<p>如果输入信息的长度(bit)对512求余的结果不等于448，就需要填充使得对512求余的结果等于448。填充的方法是填充一个1和n个0。填充完后，信息的长度就为N*512+448(bit)。</p>\n<p>然后用64位来存储填充前信息长度。这64位加在第一步结果的后面，这样信息长度就变为N*512+448+64=(N+1)*512位</p>\n<p>比如，需要加密消息&quot;gnubd&quot;，最后被填充为</p>\n<p><code>小端字节序存储</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">67 6E 75 62 64 80 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 </span><br></pre></td></tr></table></figure>\n<p>最后64位（8字节)为0x28（40），消息内容为40位（5字节）。</p>\n<h4 id=\"数据处理\">数据处理</h4>\n<p>要使A,B,C,D在内存中的显示情况：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A = <span class=\"number\">0x01234567</span></span><br><span class=\"line\">B = <span class=\"number\">0x89ABCDEF</span></span><br><span class=\"line\">C = <span class=\"number\">0xFEDCBA89</span></span><br><span class=\"line\">D = <span class=\"number\">0x76543210</span></span><br></pre></td></tr></table></figure>\n<p>程序定义应为（<code>小端字节序存储</code>）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A = <span class=\"number\">0x67452301</span>;</span><br><span class=\"line\">B = <span class=\"number\">0xEFCDAB89</span>;</span><br><span class=\"line\">C = <span class=\"number\">0x98BADCFE</span>;</span><br><span class=\"line\">D = <span class=\"number\">0x10325476</span>;</span><br></pre></td></tr></table></figure>\n<p>每512位（64字节）为1段可以分成n段，（n大于等于1），对于每一段信息（512位，64字节）又划分成16小段（每段32位，4个字节，用M表示）</p>\n<p>每一组，经过下列运算处理：</p>\n<p>其中Mj表示消息的第j个子段（从0到15）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 第一轮</span><br><span class=\"line\">a=FF(a,b,c,d,M0,<span class=\"number\">7</span>,<span class=\"number\">0xd76aa478</span>)</span><br><span class=\"line\">b=FF(d,a,b,c,M1,<span class=\"number\">12</span>,<span class=\"number\">0xe8c7b756</span>)</span><br><span class=\"line\">c=FF(c,d,a,b,M2,<span class=\"number\">17</span>,<span class=\"number\">0x242070db</span>)</span><br><span class=\"line\">d=FF(b,c,d,a,M3,<span class=\"number\">22</span>,<span class=\"number\">0xc1bdceee</span>)</span><br><span class=\"line\">a=FF(a,b,c,d,M4,<span class=\"number\">7</span>,<span class=\"number\">0xf57c0faf</span>)</span><br><span class=\"line\">b=FF(d,a,b,c,M5,<span class=\"number\">12</span>,<span class=\"number\">0x4787c62a</span>)</span><br><span class=\"line\">c=FF(c,d,a,b,M6,<span class=\"number\">17</span>,<span class=\"number\">0xa8304613</span>)</span><br><span class=\"line\">d=FF(b,c,d,a,M7,<span class=\"number\">22</span>,<span class=\"number\">0xfd469501</span>)</span><br><span class=\"line\">a=FF(a,b,c,d,M8,<span class=\"number\">7</span>,<span class=\"number\">0x698098d8</span>)</span><br><span class=\"line\">b=FF(d,a,b,c,M9,<span class=\"number\">12</span>,<span class=\"number\">0x8b44f7af</span>)</span><br><span class=\"line\">c=FF(c,d,a,b,M10,<span class=\"number\">17</span>,<span class=\"number\">0xffff5bb1</span>)</span><br><span class=\"line\">d=FF(b,c,d,a,M11,<span class=\"number\">22</span>,<span class=\"number\">0x895cd7be</span>)</span><br><span class=\"line\">a=FF(a,b,c,d,M12,<span class=\"number\">7</span>,<span class=\"number\">0x6b901122</span>)</span><br><span class=\"line\">b=FF(d,a,b,c,M13,<span class=\"number\">12</span>,<span class=\"number\">0xfd987193</span>)</span><br><span class=\"line\">c=FF(c,d,a,b,M14,<span class=\"number\">17</span>,<span class=\"number\">0xa679438e</span>)</span><br><span class=\"line\">d=FF(b,c,d,a,M15,<span class=\"number\">22</span>,<span class=\"number\">0x49b40821</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">第二轮</span><br><span class=\"line\">a=GG(a,b,c,d,M1,<span class=\"number\">5</span>,<span class=\"number\">0xf61e2562</span>)</span><br><span class=\"line\">b=GG(d,a,b,c,M6,<span class=\"number\">9</span>,<span class=\"number\">0xc040b340</span>)</span><br><span class=\"line\">c=GG(c,d,a,b,M11,<span class=\"number\">14</span>,<span class=\"number\">0x265e5a51</span>)</span><br><span class=\"line\">d=GG(b,c,d,a,M0,<span class=\"number\">20</span>,<span class=\"number\">0xe9b6c7aa</span>)</span><br><span class=\"line\">a=GG(a,b,c,d,M5,<span class=\"number\">5</span>,<span class=\"number\">0xd62f105d</span>)</span><br><span class=\"line\">b=GG(d,a,b,c,M10,<span class=\"number\">9</span>,<span class=\"number\">0x02441453</span>)</span><br><span class=\"line\">c=GG(c,d,a,b,M15,<span class=\"number\">14</span>,<span class=\"number\">0xd8a1e681</span>)</span><br><span class=\"line\">d=GG(b,c,d,a,M4,<span class=\"number\">20</span>,<span class=\"number\">0xe7d3fbc8</span>)</span><br><span class=\"line\">a=GG(a,b,c,d,M9,<span class=\"number\">5</span>,<span class=\"number\">0x21e1cde6</span>)</span><br><span class=\"line\">b=GG(d,a,b,c,M14,<span class=\"number\">9</span>,<span class=\"number\">0xc33707d6</span>)</span><br><span class=\"line\">c=GG(c,d,a,b,M3,<span class=\"number\">14</span>,<span class=\"number\">0xf4d50d87</span>)</span><br><span class=\"line\">d=GG(b,c,d,a,M8,<span class=\"number\">20</span>,<span class=\"number\">0x455a14ed</span>)</span><br><span class=\"line\">a=GG(a,b,c,d,M13,<span class=\"number\">5</span>,<span class=\"number\">0xa9e3e905</span>)</span><br><span class=\"line\">b=GG(d,a,b,c,M2,<span class=\"number\">9</span>,<span class=\"number\">0xfcefa3f8</span>)</span><br><span class=\"line\">c=GG(c,d,a,b,M7,<span class=\"number\">14</span>,<span class=\"number\">0x676f02d9</span>)</span><br><span class=\"line\">d=GG(b,c,d,a,M12,<span class=\"number\">20</span>,<span class=\"number\">0x8d2a4c8a</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">第三轮</span><br><span class=\"line\">a=HH(a,b,c,d,M5,<span class=\"number\">4</span>,<span class=\"number\">0xfffa3942</span>)</span><br><span class=\"line\">b=HH(d,a,b,c,M8,<span class=\"number\">11</span>,<span class=\"number\">0x8771f681</span>)</span><br><span class=\"line\">c=HH(c,d,a,b,M11,<span class=\"number\">16</span>,<span class=\"number\">0x6d9d6122</span>)</span><br><span class=\"line\">d=HH(b,c,d,a,M14,<span class=\"number\">23</span>,<span class=\"number\">0xfde5380c</span>)</span><br><span class=\"line\">a=HH(a,b,c,d,M1,<span class=\"number\">4</span>,<span class=\"number\">0xa4beea44</span>)</span><br><span class=\"line\">b=HH(d,a,b,c,M4,<span class=\"number\">11</span>,<span class=\"number\">0x4bdecfa9</span>)</span><br><span class=\"line\">c=HH(c,d,a,b,M7,<span class=\"number\">16</span>,<span class=\"number\">0xf6bb4b60</span>)</span><br><span class=\"line\">d=HH(b,c,d,a,M10,<span class=\"number\">23</span>,<span class=\"number\">0xbebfbc70</span>)</span><br><span class=\"line\">a=HH(a,b,c,d,M13,<span class=\"number\">4</span>,<span class=\"number\">0x289b7ec6</span>)</span><br><span class=\"line\">b=HH(d,a,b,c,M0,<span class=\"number\">11</span>,<span class=\"number\">0xeaa127fa</span>)</span><br><span class=\"line\">c=HH(c,d,a,b,M3,<span class=\"number\">16</span>,<span class=\"number\">0xd4ef3085</span>)</span><br><span class=\"line\">d=HH(b,c,d,a,M6,<span class=\"number\">23</span>,<span class=\"number\">0x04881d05</span>)</span><br><span class=\"line\">a=HH(a,b,c,d,M9,<span class=\"number\">4</span>,<span class=\"number\">0xd9d4d039</span>)</span><br><span class=\"line\">b=HH(d,a,b,c,M12,<span class=\"number\">11</span>,<span class=\"number\">0xe6db99e5</span>)</span><br><span class=\"line\">c=HH(c,d,a,b,M15,<span class=\"number\">16</span>,<span class=\"number\">0x1fa27cf8</span>)</span><br><span class=\"line\">d=HH(b,c,d,a,M2,<span class=\"number\">23</span>,<span class=\"number\">0xc4ac5665</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">第四轮</span><br><span class=\"line\">a=II(a,b,c,d,M0,<span class=\"number\">6</span>,<span class=\"number\">0xf4292244</span>)</span><br><span class=\"line\">b=II(d,a,b,c,M7,<span class=\"number\">10</span>,<span class=\"number\">0x432aff97</span>)</span><br><span class=\"line\">c=II(c,d,a,b,M14,<span class=\"number\">15</span>,<span class=\"number\">0xab9423a7</span>)</span><br><span class=\"line\">d=II(b,c,d,a,M5,<span class=\"number\">21</span>,<span class=\"number\">0xfc93a039</span>)</span><br><span class=\"line\">a=II(a,b,c,d,M12,<span class=\"number\">6</span>,<span class=\"number\">0x655b59c3</span>)</span><br><span class=\"line\">b=II(d,a,b,c,M3,<span class=\"number\">10</span>,<span class=\"number\">0x8f0ccc92</span>)</span><br><span class=\"line\">c=II(c,d,a,b,M10,<span class=\"number\">15</span>,<span class=\"number\">0xffeff47d</span>)</span><br><span class=\"line\">d=II(b,c,d,a,M1,<span class=\"number\">21</span>,<span class=\"number\">0x85845dd1</span>)</span><br><span class=\"line\">a=II(a,b,c,d,M8,<span class=\"number\">6</span>,<span class=\"number\">0x6fa87e4f</span>)</span><br><span class=\"line\">b=II(d,a,b,c,M15,<span class=\"number\">10</span>,<span class=\"number\">0xfe2ce6e0</span>)</span><br><span class=\"line\">c=II(c,d,a,b,M6,<span class=\"number\">15</span>,<span class=\"number\">0xa3014314</span>)</span><br><span class=\"line\">d=II(b,c,d,a,M13,<span class=\"number\">21</span>,<span class=\"number\">0x4e0811a1</span>)</span><br><span class=\"line\">a=II(a,b,c,d,M4,<span class=\"number\">6</span>,<span class=\"number\">0xf7537e82</span>)</span><br><span class=\"line\">b=II(d,a,b,c,M11,<span class=\"number\">10</span>,<span class=\"number\">0xbd3af235</span>)</span><br><span class=\"line\">c=II(c,d,a,b,M2,<span class=\"number\">15</span>,<span class=\"number\">0x2ad7d2bb</span>)</span><br><span class=\"line\">d=II(b,c,d,a,M9,<span class=\"number\">21</span>,<span class=\"number\">0xeb86d391</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">FF(a,b,c,d,Mj,s,ti)表示a=b+((a+F(b,c,d)+Mj+ti)&lt;&lt;&lt;s)</span><br><span class=\"line\">GG(a,b,c,d,Mj,s,ti)表示a=b+((a+G(b,c,d)+Mj+ti)&lt;&lt;&lt;s)</span><br><span class=\"line\">HH(a,b,c,d,Mj,s,ti)表示a=b+((a+H(b,c,d)+Mj+ti)&lt;&lt;&lt;s)</span><br><span class=\"line\">II(a,b,c,d,Mj,s,ti)表示a=b+((a+I(b,c,d)+Mj+ti)&lt;&lt;&lt;s)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//四个线性函数定义如下</span></span><br><span class=\"line\">F(X,Y,Z)=(X&amp;Y)|((~X)&amp;Z)</span><br><span class=\"line\">G(X,Y,Z)=(X&amp;Z)|(Y&amp;(~Z))</span><br><span class=\"line\">H(X,Y,Z)=X^Y^Z</span><br><span class=\"line\">I(X,Y,Z)=Y^(X|(~Z))</span><br></pre></td></tr></table></figure>\n<p>每轮循环后，将A，B，C，D分别加上a，b，c，d，然后进入下一循环，共循环四次。</p>\n<p>循环结束后，新的A,B,C,D作为下一组A,B,C,D的初始值，继续进行上述循环运算，得到新的A,B,C,D再加上初始A,B,C,D值。最后按照地址的顺序从低到高打印对应的A,B,C,D值，就是所求的MD5值。</p>\n<h3 id=\"signature-5\">signature</h3>\n<p>DSL定义如下</p>\n<p><img src=\"md5.assets/image-20220127171654001.png\" alt=\"image-20220127171654001\">后面的3614090360（0xD76AA478),即为相应值转化为十进制后的数。</p>\n<p>ROTATE表示移位</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">F</span><span class=\"params\">(<span class=\"keyword\">long</span> x, <span class=\"keyword\">long</span> y, <span class=\"keyword\">long</span> z)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (x &amp; y) | ((~x) &amp; z);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">FF</span><span class=\"params\">(<span class=\"keyword\">long</span> a, <span class=\"keyword\">long</span> b, <span class=\"keyword\">long</span> c, <span class=\"keyword\">long</span> d, <span class=\"keyword\">long</span> x, <span class=\"keyword\">long</span> s,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"keyword\">long</span> ac)</span> </span>&#123;</span><br><span class=\"line\">        a += (F(b, c, d)&amp;<span class=\"number\">0xFFFFFFFFL</span>) + x + ac;</span><br><span class=\"line\">        a = ((a&amp;<span class=\"number\">0xFFFFFFFFL</span>)&lt;&lt; s) | ((a&amp;<span class=\"number\">0xFFFFFFFFL</span>) &gt;&gt;&gt; (<span class=\"number\">32</span> - s));</span><br><span class=\"line\">        a += b;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (a&amp;<span class=\"number\">0xFFFFFFFFL</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">a = FF(a, b, c, d, groups[<span class=\"number\">0</span>], S11, <span class=\"number\">0xd76aa478L</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"测试-3\">测试</h3>\n<p>libcrypto.so.1.1(openssl)</p>\n<p>其中和md5有关的函数如下</p>\n<p><img src=\"md5.assets/image-20220127175833516.png\" alt=\"image-20220127175833516\"></p>\n<p>利用where’s crypto分析</p>\n<p><img src=\"md5.assets/image-20220127181300578.png\" alt=\"image-20220127181300578\"></p>\n<p><img src=\"md5.assets/image-20220128122013626.png\" alt=\"image-20220128122013626\"></p>\n<p>反汇编MD5_Update,主要还是调用了md5_block_data_order</p>\n<p><img src=\"md5.assets/image-20220128122933514.png\" alt=\"image-20220128122933514\">o</p>\n<p>md5_block_data_order反汇编后</p>\n<p><img src=\"md5.assets/image-20220128123055931.png\" alt=\"image-20220128123055931\"></p>\n<p>与signature中对应关系如下</p>\n<p><img src=\"md5.assets/image-20220128124206153.png\" alt=\"image-20220128124206153\"></p>\n<p>openssl中源代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> md5_block_data_order</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">ifdef</span> X</span></span><br><span class=\"line\"><span class=\"meta\">#  <span class=\"meta-keyword\">undef</span> X</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">md5_block_data_order</span><span class=\"params\">(MD5_CTX *c, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *data_, <span class=\"keyword\">size_t</span> num)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *data = data_;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"keyword\">unsigned</span> MD32_REG_T A, B, C, D, l;</span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">ifndef</span> MD32_XARRAY</span></span><br><span class=\"line\">    <span class=\"comment\">/* See comment in crypto/sha/sha_local.h for details. */</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> MD32_REG_T XX0, XX1, XX2, XX3, XX4, XX5, XX6, XX7,</span><br><span class=\"line\">        XX8, XX9, XX10, XX11, XX12, XX13, XX14, XX15;</span><br><span class=\"line\"><span class=\"meta\">#  <span class=\"meta-keyword\">define</span> X(i)   XX##i</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">    MD5_LONG XX[MD5_LBLOCK];</span><br><span class=\"line\"><span class=\"meta\">#  <span class=\"meta-keyword\">define</span> X(i)   XX[i]</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    A = c-&gt;A;</span><br><span class=\"line\">    B = c-&gt;B;</span><br><span class=\"line\">    C = c-&gt;C;</span><br><span class=\"line\">    D = c-&gt;D;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; num--;) &#123;</span><br><span class=\"line\">        (<span class=\"keyword\">void</span>)HOST_c2l(data, l);</span><br><span class=\"line\">        X(<span class=\"number\">0</span>) = l;</span><br><span class=\"line\">        (<span class=\"keyword\">void</span>)HOST_c2l(data, l);</span><br><span class=\"line\">        X(<span class=\"number\">1</span>) = l;</span><br><span class=\"line\">        <span class=\"comment\">/* Round 0 */</span></span><br><span class=\"line\">        R0(A, B, C, D, X(<span class=\"number\">0</span>), <span class=\"number\">7</span>, <span class=\"number\">0xd76aa478</span>L);</span><br><span class=\"line\">        (<span class=\"keyword\">void</span>)HOST_c2l(data, l);</span><br><span class=\"line\">        X(<span class=\"number\">2</span>) = l;</span><br><span class=\"line\">        R0(D, A, B, C, X(<span class=\"number\">1</span>), <span class=\"number\">12</span>, <span class=\"number\">0xe8c7b756</span>L);</span><br><span class=\"line\">        (<span class=\"keyword\">void</span>)HOST_c2l(data, l);</span><br><span class=\"line\">        X(<span class=\"number\">3</span>) = l;</span><br><span class=\"line\">        R0(C, D, A, B, X(<span class=\"number\">2</span>), <span class=\"number\">17</span>, <span class=\"number\">0x242070db</span>L);</span><br><span class=\"line\">        (<span class=\"keyword\">void</span>)HOST_c2l(data, l);</span><br><span class=\"line\">        X(<span class=\"number\">4</span>) = l;</span><br><span class=\"line\">        R0(B, C, D, A, X(<span class=\"number\">3</span>), <span class=\"number\">22</span>, <span class=\"number\">0xc1bdceee</span>L);</span><br><span class=\"line\">        (<span class=\"keyword\">void</span>)HOST_c2l(data, l);</span><br><span class=\"line\">        X(<span class=\"number\">5</span>) = l;</span><br><span class=\"line\">        R0(A, B, C, D, X(<span class=\"number\">4</span>), <span class=\"number\">7</span>, <span class=\"number\">0xf57c0faf</span>L);</span><br><span class=\"line\">        (<span class=\"keyword\">void</span>)HOST_c2l(data, l);</span><br><span class=\"line\">        X(<span class=\"number\">6</span>) = l;</span><br><span class=\"line\">        R0(D, A, B, C, X(<span class=\"number\">5</span>), <span class=\"number\">12</span>, <span class=\"number\">0x4787c62a</span>L);</span><br><span class=\"line\">        (<span class=\"keyword\">void</span>)HOST_c2l(data, l);</span><br><span class=\"line\">        X(<span class=\"number\">7</span>) = l;</span><br><span class=\"line\">        R0(C, D, A, B, X(<span class=\"number\">6</span>), <span class=\"number\">17</span>, <span class=\"number\">0xa8304613</span>L);</span><br><span class=\"line\">        (<span class=\"keyword\">void</span>)HOST_c2l(data, l);</span><br><span class=\"line\">        X(<span class=\"number\">8</span>) = l;</span><br><span class=\"line\">        R0(B, C, D, A, X(<span class=\"number\">7</span>), <span class=\"number\">22</span>, <span class=\"number\">0xfd469501</span>L);</span><br><span class=\"line\">        (<span class=\"keyword\">void</span>)HOST_c2l(data, l);</span><br><span class=\"line\">        X(<span class=\"number\">9</span>) = l;</span><br><span class=\"line\">        R0(A, B, C, D, X(<span class=\"number\">8</span>), <span class=\"number\">7</span>, <span class=\"number\">0x698098d8</span>L);</span><br><span class=\"line\">        (<span class=\"keyword\">void</span>)HOST_c2l(data, l);</span><br><span class=\"line\">        X(<span class=\"number\">10</span>) = l;</span><br><span class=\"line\">        R0(D, A, B, C, X(<span class=\"number\">9</span>), <span class=\"number\">12</span>, <span class=\"number\">0x8b44f7af</span>L);</span><br><span class=\"line\">        (<span class=\"keyword\">void</span>)HOST_c2l(data, l);</span><br><span class=\"line\">        X(<span class=\"number\">11</span>) = l;</span><br><span class=\"line\">        R0(C, D, A, B, X(<span class=\"number\">10</span>), <span class=\"number\">17</span>, <span class=\"number\">0xffff5bb1</span>L);</span><br><span class=\"line\">        (<span class=\"keyword\">void</span>)HOST_c2l(data, l);</span><br><span class=\"line\">        X(<span class=\"number\">12</span>) = l;</span><br><span class=\"line\">        R0(B, C, D, A, X(<span class=\"number\">11</span>), <span class=\"number\">22</span>, <span class=\"number\">0x895cd7be</span>L);</span><br><span class=\"line\">        (<span class=\"keyword\">void</span>)HOST_c2l(data, l);</span><br><span class=\"line\">        X(<span class=\"number\">13</span>) = l;</span><br><span class=\"line\">        R0(A, B, C, D, X(<span class=\"number\">12</span>), <span class=\"number\">7</span>, <span class=\"number\">0x6b901122</span>L);</span><br><span class=\"line\">        (<span class=\"keyword\">void</span>)HOST_c2l(data, l);</span><br><span class=\"line\">        X(<span class=\"number\">14</span>) = l;</span><br><span class=\"line\">        R0(D, A, B, C, X(<span class=\"number\">13</span>), <span class=\"number\">12</span>, <span class=\"number\">0xfd987193</span>L);</span><br><span class=\"line\">        (<span class=\"keyword\">void</span>)HOST_c2l(data, l);</span><br><span class=\"line\">        X(<span class=\"number\">15</span>) = l;</span><br><span class=\"line\">        R0(C, D, A, B, X(<span class=\"number\">14</span>), <span class=\"number\">17</span>, <span class=\"number\">0xa679438e</span>L);</span><br><span class=\"line\">        R0(B, C, D, A, X(<span class=\"number\">15</span>), <span class=\"number\">22</span>, <span class=\"number\">0x49b40821</span>L);</span><br><span class=\"line\">        <span class=\"comment\">/* Round 1 */</span></span><br><span class=\"line\">        R1(A, B, C, D, X(<span class=\"number\">1</span>), <span class=\"number\">5</span>, <span class=\"number\">0xf61e2562</span>L);</span><br><span class=\"line\">        R1(D, A, B, C, X(<span class=\"number\">6</span>), <span class=\"number\">9</span>, <span class=\"number\">0xc040b340</span>L);</span><br><span class=\"line\">        R1(C, D, A, B, X(<span class=\"number\">11</span>), <span class=\"number\">14</span>, <span class=\"number\">0x265e5a51</span>L);</span><br><span class=\"line\">        R1(B, C, D, A, X(<span class=\"number\">0</span>), <span class=\"number\">20</span>, <span class=\"number\">0xe9b6c7aa</span>L);</span><br><span class=\"line\">        R1(A, B, C, D, X(<span class=\"number\">5</span>), <span class=\"number\">5</span>, <span class=\"number\">0xd62f105d</span>L);</span><br><span class=\"line\">        R1(D, A, B, C, X(<span class=\"number\">10</span>), <span class=\"number\">9</span>, <span class=\"number\">0x02441453</span>L);</span><br><span class=\"line\">        R1(C, D, A, B, X(<span class=\"number\">15</span>), <span class=\"number\">14</span>, <span class=\"number\">0xd8a1e681</span>L);</span><br><span class=\"line\">        R1(B, C, D, A, X(<span class=\"number\">4</span>), <span class=\"number\">20</span>, <span class=\"number\">0xe7d3fbc8</span>L);</span><br><span class=\"line\">        R1(A, B, C, D, X(<span class=\"number\">9</span>), <span class=\"number\">5</span>, <span class=\"number\">0x21e1cde6</span>L);</span><br><span class=\"line\">        R1(D, A, B, C, X(<span class=\"number\">14</span>), <span class=\"number\">9</span>, <span class=\"number\">0xc33707d6</span>L);</span><br><span class=\"line\">        R1(C, D, A, B, X(<span class=\"number\">3</span>), <span class=\"number\">14</span>, <span class=\"number\">0xf4d50d87</span>L);</span><br><span class=\"line\">        R1(B, C, D, A, X(<span class=\"number\">8</span>), <span class=\"number\">20</span>, <span class=\"number\">0x455a14ed</span>L);</span><br><span class=\"line\">        R1(A, B, C, D, X(<span class=\"number\">13</span>), <span class=\"number\">5</span>, <span class=\"number\">0xa9e3e905</span>L);</span><br><span class=\"line\">        R1(D, A, B, C, X(<span class=\"number\">2</span>), <span class=\"number\">9</span>, <span class=\"number\">0xfcefa3f8</span>L);</span><br><span class=\"line\">        R1(C, D, A, B, X(<span class=\"number\">7</span>), <span class=\"number\">14</span>, <span class=\"number\">0x676f02d9</span>L);</span><br><span class=\"line\">        R1(B, C, D, A, X(<span class=\"number\">12</span>), <span class=\"number\">20</span>, <span class=\"number\">0x8d2a4c8a</span>L);</span><br><span class=\"line\">        <span class=\"comment\">/* Round 2 */</span></span><br><span class=\"line\">        R2(A, B, C, D, X(<span class=\"number\">5</span>), <span class=\"number\">4</span>, <span class=\"number\">0xfffa3942</span>L);</span><br><span class=\"line\">        R2(D, A, B, C, X(<span class=\"number\">8</span>), <span class=\"number\">11</span>, <span class=\"number\">0x8771f681</span>L);</span><br><span class=\"line\">        R2(C, D, A, B, X(<span class=\"number\">11</span>), <span class=\"number\">16</span>, <span class=\"number\">0x6d9d6122</span>L);</span><br><span class=\"line\">        R2(B, C, D, A, X(<span class=\"number\">14</span>), <span class=\"number\">23</span>, <span class=\"number\">0xfde5380c</span>L);</span><br><span class=\"line\">        R2(A, B, C, D, X(<span class=\"number\">1</span>), <span class=\"number\">4</span>, <span class=\"number\">0xa4beea44</span>L);</span><br><span class=\"line\">        R2(D, A, B, C, X(<span class=\"number\">4</span>), <span class=\"number\">11</span>, <span class=\"number\">0x4bdecfa9</span>L);</span><br><span class=\"line\">        R2(C, D, A, B, X(<span class=\"number\">7</span>), <span class=\"number\">16</span>, <span class=\"number\">0xf6bb4b60</span>L);</span><br><span class=\"line\">        R2(B, C, D, A, X(<span class=\"number\">10</span>), <span class=\"number\">23</span>, <span class=\"number\">0xbebfbc70</span>L);</span><br><span class=\"line\">        R2(A, B, C, D, X(<span class=\"number\">13</span>), <span class=\"number\">4</span>, <span class=\"number\">0x289b7ec6</span>L);</span><br><span class=\"line\">        R2(D, A, B, C, X(<span class=\"number\">0</span>), <span class=\"number\">11</span>, <span class=\"number\">0xeaa127fa</span>L);</span><br><span class=\"line\">        R2(C, D, A, B, X(<span class=\"number\">3</span>), <span class=\"number\">16</span>, <span class=\"number\">0xd4ef3085</span>L);</span><br><span class=\"line\">        R2(B, C, D, A, X(<span class=\"number\">6</span>), <span class=\"number\">23</span>, <span class=\"number\">0x04881d05</span>L);</span><br><span class=\"line\">        R2(A, B, C, D, X(<span class=\"number\">9</span>), <span class=\"number\">4</span>, <span class=\"number\">0xd9d4d039</span>L);</span><br><span class=\"line\">        R2(D, A, B, C, X(<span class=\"number\">12</span>), <span class=\"number\">11</span>, <span class=\"number\">0xe6db99e5</span>L);</span><br><span class=\"line\">        R2(C, D, A, B, X(<span class=\"number\">15</span>), <span class=\"number\">16</span>, <span class=\"number\">0x1fa27cf8</span>L);</span><br><span class=\"line\">        R2(B, C, D, A, X(<span class=\"number\">2</span>), <span class=\"number\">23</span>, <span class=\"number\">0xc4ac5665</span>L);</span><br><span class=\"line\">        <span class=\"comment\">/* Round 3 */</span></span><br><span class=\"line\">        R3(A, B, C, D, X(<span class=\"number\">0</span>), <span class=\"number\">6</span>, <span class=\"number\">0xf4292244</span>L);</span><br><span class=\"line\">        R3(D, A, B, C, X(<span class=\"number\">7</span>), <span class=\"number\">10</span>, <span class=\"number\">0x432aff97</span>L);</span><br><span class=\"line\">        R3(C, D, A, B, X(<span class=\"number\">14</span>), <span class=\"number\">15</span>, <span class=\"number\">0xab9423a7</span>L);</span><br><span class=\"line\">        R3(B, C, D, A, X(<span class=\"number\">5</span>), <span class=\"number\">21</span>, <span class=\"number\">0xfc93a039</span>L);</span><br><span class=\"line\">        R3(A, B, C, D, X(<span class=\"number\">12</span>), <span class=\"number\">6</span>, <span class=\"number\">0x655b59c3</span>L);</span><br><span class=\"line\">        R3(D, A, B, C, X(<span class=\"number\">3</span>), <span class=\"number\">10</span>, <span class=\"number\">0x8f0ccc92</span>L);</span><br><span class=\"line\">        R3(C, D, A, B, X(<span class=\"number\">10</span>), <span class=\"number\">15</span>, <span class=\"number\">0xffeff47d</span>L);</span><br><span class=\"line\">        R3(B, C, D, A, X(<span class=\"number\">1</span>), <span class=\"number\">21</span>, <span class=\"number\">0x85845dd1</span>L);</span><br><span class=\"line\">        R3(A, B, C, D, X(<span class=\"number\">8</span>), <span class=\"number\">6</span>, <span class=\"number\">0x6fa87e4f</span>L);</span><br><span class=\"line\">        R3(D, A, B, C, X(<span class=\"number\">15</span>), <span class=\"number\">10</span>, <span class=\"number\">0xfe2ce6e0</span>L);</span><br><span class=\"line\">        R3(C, D, A, B, X(<span class=\"number\">6</span>), <span class=\"number\">15</span>, <span class=\"number\">0xa3014314</span>L);</span><br><span class=\"line\">        R3(B, C, D, A, X(<span class=\"number\">13</span>), <span class=\"number\">21</span>, <span class=\"number\">0x4e0811a1</span>L);</span><br><span class=\"line\">        R3(A, B, C, D, X(<span class=\"number\">4</span>), <span class=\"number\">6</span>, <span class=\"number\">0xf7537e82</span>L);</span><br><span class=\"line\">        R3(D, A, B, C, X(<span class=\"number\">11</span>), <span class=\"number\">10</span>, <span class=\"number\">0xbd3af235</span>L);</span><br><span class=\"line\">        R3(C, D, A, B, X(<span class=\"number\">2</span>), <span class=\"number\">15</span>, <span class=\"number\">0x2ad7d2bb</span>L);</span><br><span class=\"line\">        R3(B, C, D, A, X(<span class=\"number\">9</span>), <span class=\"number\">21</span>, <span class=\"number\">0xeb86d391</span>L);</span><br><span class=\"line\"></span><br><span class=\"line\">        A = c-&gt;A += A;</span><br><span class=\"line\">        B = c-&gt;B += B;</span><br><span class=\"line\">        C = c-&gt;C += C;</span><br><span class=\"line\">        D = c-&gt;D += D;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<p>md5_local.h</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> F(b,c,d)        ((((c) ^ (d)) &amp; (b)) ^ (d))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> G(b,c,d)        ((((b) ^ (c)) &amp; (d)) ^ (c))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> H(b,c,d)        ((b) ^ (c) ^ (d))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> I(b,c,d)        (((~(d)) | (b)) ^ (c))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> R0(a,b,c,d,k,s,t) &#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">        a+=((k)+(t)+F((b),(c),(d))); \\</span></span><br><span class=\"line\"><span class=\"meta\">        a=ROTATE(a,s); \\</span></span><br><span class=\"line\"><span class=\"meta\">        a+=b; &#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> R1(a,b,c,d,k,s,t) &#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">        a+=((k)+(t)+G((b),(c),(d))); \\</span></span><br><span class=\"line\"><span class=\"meta\">        a=ROTATE(a,s); \\</span></span><br><span class=\"line\"><span class=\"meta\">        a+=b; &#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> R2(a,b,c,d,k,s,t) &#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">        a+=((k)+(t)+H((b),(c),(d))); \\</span></span><br><span class=\"line\"><span class=\"meta\">        a=ROTATE(a,s); \\</span></span><br><span class=\"line\"><span class=\"meta\">        a+=b; &#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> R3(a,b,c,d,k,s,t) &#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">        a+=((k)+(t)+I((b),(c),(d))); \\</span></span><br><span class=\"line\"><span class=\"meta\">        a=ROTATE(a,s); \\</span></span><br><span class=\"line\"><span class=\"meta\">        a+=b; &#125;;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{"about":{"class":{"class_name":"about","link_list":{"-1":{"name":"Scorpion","avatar":"/image/avatar.jpg","link":null,"descr":"�����ƹ������ë��̨��ɢ�򣬻�ѩ���������ݣ����ֲ�Ƭ����Ƭ�赸��Ƶ��ҵ����Ӱ���Ǻð�ȫ��"}}}},"link":{"class":{"class_name":"友情链接","link_list":{"-1":{"name":"M4tsuri","link":"https://M4tsuri.io","avatar":"/image/m4tsuri.jpg","descr":"pwn,blockchain"}}}}}},"excerpt":"","more":"<h1>MD5</h1>\n<h3 id=\"算法-3\">算法</h3>\n<ul>\n<li>输入：任意长的消息，512 比特长的分组。</li>\n<li>输出：128 比特的消息摘要</li>\n</ul>\n<p>整体流程如下：</p>\n<ul>\n<li>\n<p>首先填充原始消息使得对512求余的结果等于448，然后64位记录其长度。</p>\n</li>\n<li>\n<p>512bit一组分为n组。每组中32bit为一段，分为16段</p>\n</li>\n<li>\n<p>对每一组，循环4次下述4轮运算，得到新的A,B,C,D作为下一组的初始值</p>\n</li>\n<li>\n<p>最后得到的A,B,C,D加上第n组原来A,B,C,D的值（即计算前的值）</p>\n</li>\n<li>\n<p>按照地址的顺序从低到高打印对应的A,B,C,D值，就是所求的MD5值。</p>\n</li>\n</ul>\n<p><img src=\"md5.assets/image-20220127171124399.png\" alt=\"image-20220127171124399\"></p>\n<h4 id=\"填充\">填充</h4>\n<p>如果输入信息的长度(bit)对512求余的结果不等于448，就需要填充使得对512求余的结果等于448。填充的方法是填充一个1和n个0。填充完后，信息的长度就为N*512+448(bit)。</p>\n<p>然后用64位来存储填充前信息长度。这64位加在第一步结果的后面，这样信息长度就变为N*512+448+64=(N+1)*512位</p>\n<p>比如，需要加密消息&quot;gnubd&quot;，最后被填充为</p>\n<p><code>小端字节序存储</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">67 6E 75 62 64 80 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 </span><br></pre></td></tr></table></figure>\n<p>最后64位（8字节)为0x28（40），消息内容为40位（5字节）。</p>\n<h4 id=\"数据处理\">数据处理</h4>\n<p>要使A,B,C,D在内存中的显示情况：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A = <span class=\"number\">0x01234567</span></span><br><span class=\"line\">B = <span class=\"number\">0x89ABCDEF</span></span><br><span class=\"line\">C = <span class=\"number\">0xFEDCBA89</span></span><br><span class=\"line\">D = <span class=\"number\">0x76543210</span></span><br></pre></td></tr></table></figure>\n<p>程序定义应为（<code>小端字节序存储</code>）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A = <span class=\"number\">0x67452301</span>;</span><br><span class=\"line\">B = <span class=\"number\">0xEFCDAB89</span>;</span><br><span class=\"line\">C = <span class=\"number\">0x98BADCFE</span>;</span><br><span class=\"line\">D = <span class=\"number\">0x10325476</span>;</span><br></pre></td></tr></table></figure>\n<p>每512位（64字节）为1段可以分成n段，（n大于等于1），对于每一段信息（512位，64字节）又划分成16小段（每段32位，4个字节，用M表示）</p>\n<p>每一组，经过下列运算处理：</p>\n<p>其中Mj表示消息的第j个子段（从0到15）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 第一轮</span><br><span class=\"line\">a=FF(a,b,c,d,M0,<span class=\"number\">7</span>,<span class=\"number\">0xd76aa478</span>)</span><br><span class=\"line\">b=FF(d,a,b,c,M1,<span class=\"number\">12</span>,<span class=\"number\">0xe8c7b756</span>)</span><br><span class=\"line\">c=FF(c,d,a,b,M2,<span class=\"number\">17</span>,<span class=\"number\">0x242070db</span>)</span><br><span class=\"line\">d=FF(b,c,d,a,M3,<span class=\"number\">22</span>,<span class=\"number\">0xc1bdceee</span>)</span><br><span class=\"line\">a=FF(a,b,c,d,M4,<span class=\"number\">7</span>,<span class=\"number\">0xf57c0faf</span>)</span><br><span class=\"line\">b=FF(d,a,b,c,M5,<span class=\"number\">12</span>,<span class=\"number\">0x4787c62a</span>)</span><br><span class=\"line\">c=FF(c,d,a,b,M6,<span class=\"number\">17</span>,<span class=\"number\">0xa8304613</span>)</span><br><span class=\"line\">d=FF(b,c,d,a,M7,<span class=\"number\">22</span>,<span class=\"number\">0xfd469501</span>)</span><br><span class=\"line\">a=FF(a,b,c,d,M8,<span class=\"number\">7</span>,<span class=\"number\">0x698098d8</span>)</span><br><span class=\"line\">b=FF(d,a,b,c,M9,<span class=\"number\">12</span>,<span class=\"number\">0x8b44f7af</span>)</span><br><span class=\"line\">c=FF(c,d,a,b,M10,<span class=\"number\">17</span>,<span class=\"number\">0xffff5bb1</span>)</span><br><span class=\"line\">d=FF(b,c,d,a,M11,<span class=\"number\">22</span>,<span class=\"number\">0x895cd7be</span>)</span><br><span class=\"line\">a=FF(a,b,c,d,M12,<span class=\"number\">7</span>,<span class=\"number\">0x6b901122</span>)</span><br><span class=\"line\">b=FF(d,a,b,c,M13,<span class=\"number\">12</span>,<span class=\"number\">0xfd987193</span>)</span><br><span class=\"line\">c=FF(c,d,a,b,M14,<span class=\"number\">17</span>,<span class=\"number\">0xa679438e</span>)</span><br><span class=\"line\">d=FF(b,c,d,a,M15,<span class=\"number\">22</span>,<span class=\"number\">0x49b40821</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">第二轮</span><br><span class=\"line\">a=GG(a,b,c,d,M1,<span class=\"number\">5</span>,<span class=\"number\">0xf61e2562</span>)</span><br><span class=\"line\">b=GG(d,a,b,c,M6,<span class=\"number\">9</span>,<span class=\"number\">0xc040b340</span>)</span><br><span class=\"line\">c=GG(c,d,a,b,M11,<span class=\"number\">14</span>,<span class=\"number\">0x265e5a51</span>)</span><br><span class=\"line\">d=GG(b,c,d,a,M0,<span class=\"number\">20</span>,<span class=\"number\">0xe9b6c7aa</span>)</span><br><span class=\"line\">a=GG(a,b,c,d,M5,<span class=\"number\">5</span>,<span class=\"number\">0xd62f105d</span>)</span><br><span class=\"line\">b=GG(d,a,b,c,M10,<span class=\"number\">9</span>,<span class=\"number\">0x02441453</span>)</span><br><span class=\"line\">c=GG(c,d,a,b,M15,<span class=\"number\">14</span>,<span class=\"number\">0xd8a1e681</span>)</span><br><span class=\"line\">d=GG(b,c,d,a,M4,<span class=\"number\">20</span>,<span class=\"number\">0xe7d3fbc8</span>)</span><br><span class=\"line\">a=GG(a,b,c,d,M9,<span class=\"number\">5</span>,<span class=\"number\">0x21e1cde6</span>)</span><br><span class=\"line\">b=GG(d,a,b,c,M14,<span class=\"number\">9</span>,<span class=\"number\">0xc33707d6</span>)</span><br><span class=\"line\">c=GG(c,d,a,b,M3,<span class=\"number\">14</span>,<span class=\"number\">0xf4d50d87</span>)</span><br><span class=\"line\">d=GG(b,c,d,a,M8,<span class=\"number\">20</span>,<span class=\"number\">0x455a14ed</span>)</span><br><span class=\"line\">a=GG(a,b,c,d,M13,<span class=\"number\">5</span>,<span class=\"number\">0xa9e3e905</span>)</span><br><span class=\"line\">b=GG(d,a,b,c,M2,<span class=\"number\">9</span>,<span class=\"number\">0xfcefa3f8</span>)</span><br><span class=\"line\">c=GG(c,d,a,b,M7,<span class=\"number\">14</span>,<span class=\"number\">0x676f02d9</span>)</span><br><span class=\"line\">d=GG(b,c,d,a,M12,<span class=\"number\">20</span>,<span class=\"number\">0x8d2a4c8a</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">第三轮</span><br><span class=\"line\">a=HH(a,b,c,d,M5,<span class=\"number\">4</span>,<span class=\"number\">0xfffa3942</span>)</span><br><span class=\"line\">b=HH(d,a,b,c,M8,<span class=\"number\">11</span>,<span class=\"number\">0x8771f681</span>)</span><br><span class=\"line\">c=HH(c,d,a,b,M11,<span class=\"number\">16</span>,<span class=\"number\">0x6d9d6122</span>)</span><br><span class=\"line\">d=HH(b,c,d,a,M14,<span class=\"number\">23</span>,<span class=\"number\">0xfde5380c</span>)</span><br><span class=\"line\">a=HH(a,b,c,d,M1,<span class=\"number\">4</span>,<span class=\"number\">0xa4beea44</span>)</span><br><span class=\"line\">b=HH(d,a,b,c,M4,<span class=\"number\">11</span>,<span class=\"number\">0x4bdecfa9</span>)</span><br><span class=\"line\">c=HH(c,d,a,b,M7,<span class=\"number\">16</span>,<span class=\"number\">0xf6bb4b60</span>)</span><br><span class=\"line\">d=HH(b,c,d,a,M10,<span class=\"number\">23</span>,<span class=\"number\">0xbebfbc70</span>)</span><br><span class=\"line\">a=HH(a,b,c,d,M13,<span class=\"number\">4</span>,<span class=\"number\">0x289b7ec6</span>)</span><br><span class=\"line\">b=HH(d,a,b,c,M0,<span class=\"number\">11</span>,<span class=\"number\">0xeaa127fa</span>)</span><br><span class=\"line\">c=HH(c,d,a,b,M3,<span class=\"number\">16</span>,<span class=\"number\">0xd4ef3085</span>)</span><br><span class=\"line\">d=HH(b,c,d,a,M6,<span class=\"number\">23</span>,<span class=\"number\">0x04881d05</span>)</span><br><span class=\"line\">a=HH(a,b,c,d,M9,<span class=\"number\">4</span>,<span class=\"number\">0xd9d4d039</span>)</span><br><span class=\"line\">b=HH(d,a,b,c,M12,<span class=\"number\">11</span>,<span class=\"number\">0xe6db99e5</span>)</span><br><span class=\"line\">c=HH(c,d,a,b,M15,<span class=\"number\">16</span>,<span class=\"number\">0x1fa27cf8</span>)</span><br><span class=\"line\">d=HH(b,c,d,a,M2,<span class=\"number\">23</span>,<span class=\"number\">0xc4ac5665</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">第四轮</span><br><span class=\"line\">a=II(a,b,c,d,M0,<span class=\"number\">6</span>,<span class=\"number\">0xf4292244</span>)</span><br><span class=\"line\">b=II(d,a,b,c,M7,<span class=\"number\">10</span>,<span class=\"number\">0x432aff97</span>)</span><br><span class=\"line\">c=II(c,d,a,b,M14,<span class=\"number\">15</span>,<span class=\"number\">0xab9423a7</span>)</span><br><span class=\"line\">d=II(b,c,d,a,M5,<span class=\"number\">21</span>,<span class=\"number\">0xfc93a039</span>)</span><br><span class=\"line\">a=II(a,b,c,d,M12,<span class=\"number\">6</span>,<span class=\"number\">0x655b59c3</span>)</span><br><span class=\"line\">b=II(d,a,b,c,M3,<span class=\"number\">10</span>,<span class=\"number\">0x8f0ccc92</span>)</span><br><span class=\"line\">c=II(c,d,a,b,M10,<span class=\"number\">15</span>,<span class=\"number\">0xffeff47d</span>)</span><br><span class=\"line\">d=II(b,c,d,a,M1,<span class=\"number\">21</span>,<span class=\"number\">0x85845dd1</span>)</span><br><span class=\"line\">a=II(a,b,c,d,M8,<span class=\"number\">6</span>,<span class=\"number\">0x6fa87e4f</span>)</span><br><span class=\"line\">b=II(d,a,b,c,M15,<span class=\"number\">10</span>,<span class=\"number\">0xfe2ce6e0</span>)</span><br><span class=\"line\">c=II(c,d,a,b,M6,<span class=\"number\">15</span>,<span class=\"number\">0xa3014314</span>)</span><br><span class=\"line\">d=II(b,c,d,a,M13,<span class=\"number\">21</span>,<span class=\"number\">0x4e0811a1</span>)</span><br><span class=\"line\">a=II(a,b,c,d,M4,<span class=\"number\">6</span>,<span class=\"number\">0xf7537e82</span>)</span><br><span class=\"line\">b=II(d,a,b,c,M11,<span class=\"number\">10</span>,<span class=\"number\">0xbd3af235</span>)</span><br><span class=\"line\">c=II(c,d,a,b,M2,<span class=\"number\">15</span>,<span class=\"number\">0x2ad7d2bb</span>)</span><br><span class=\"line\">d=II(b,c,d,a,M9,<span class=\"number\">21</span>,<span class=\"number\">0xeb86d391</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">FF(a,b,c,d,Mj,s,ti)表示a=b+((a+F(b,c,d)+Mj+ti)&lt;&lt;&lt;s)</span><br><span class=\"line\">GG(a,b,c,d,Mj,s,ti)表示a=b+((a+G(b,c,d)+Mj+ti)&lt;&lt;&lt;s)</span><br><span class=\"line\">HH(a,b,c,d,Mj,s,ti)表示a=b+((a+H(b,c,d)+Mj+ti)&lt;&lt;&lt;s)</span><br><span class=\"line\">II(a,b,c,d,Mj,s,ti)表示a=b+((a+I(b,c,d)+Mj+ti)&lt;&lt;&lt;s)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//四个线性函数定义如下</span></span><br><span class=\"line\">F(X,Y,Z)=(X&amp;Y)|((~X)&amp;Z)</span><br><span class=\"line\">G(X,Y,Z)=(X&amp;Z)|(Y&amp;(~Z))</span><br><span class=\"line\">H(X,Y,Z)=X^Y^Z</span><br><span class=\"line\">I(X,Y,Z)=Y^(X|(~Z))</span><br></pre></td></tr></table></figure>\n<p>每轮循环后，将A，B，C，D分别加上a，b，c，d，然后进入下一循环，共循环四次。</p>\n<p>循环结束后，新的A,B,C,D作为下一组A,B,C,D的初始值，继续进行上述循环运算，得到新的A,B,C,D再加上初始A,B,C,D值。最后按照地址的顺序从低到高打印对应的A,B,C,D值，就是所求的MD5值。</p>\n<h3 id=\"signature-5\">signature</h3>\n<p>DSL定义如下</p>\n<p><img src=\"md5.assets/image-20220127171654001.png\" alt=\"image-20220127171654001\">后面的3614090360（0xD76AA478),即为相应值转化为十进制后的数。</p>\n<p>ROTATE表示移位</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">F</span><span class=\"params\">(<span class=\"keyword\">long</span> x, <span class=\"keyword\">long</span> y, <span class=\"keyword\">long</span> z)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (x &amp; y) | ((~x) &amp; z);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">FF</span><span class=\"params\">(<span class=\"keyword\">long</span> a, <span class=\"keyword\">long</span> b, <span class=\"keyword\">long</span> c, <span class=\"keyword\">long</span> d, <span class=\"keyword\">long</span> x, <span class=\"keyword\">long</span> s,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"keyword\">long</span> ac)</span> </span>&#123;</span><br><span class=\"line\">        a += (F(b, c, d)&amp;<span class=\"number\">0xFFFFFFFFL</span>) + x + ac;</span><br><span class=\"line\">        a = ((a&amp;<span class=\"number\">0xFFFFFFFFL</span>)&lt;&lt; s) | ((a&amp;<span class=\"number\">0xFFFFFFFFL</span>) &gt;&gt;&gt; (<span class=\"number\">32</span> - s));</span><br><span class=\"line\">        a += b;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (a&amp;<span class=\"number\">0xFFFFFFFFL</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">a = FF(a, b, c, d, groups[<span class=\"number\">0</span>], S11, <span class=\"number\">0xd76aa478L</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"测试-3\">测试</h3>\n<p>libcrypto.so.1.1(openssl)</p>\n<p>其中和md5有关的函数如下</p>\n<p><img src=\"md5.assets/image-20220127175833516.png\" alt=\"image-20220127175833516\"></p>\n<p>利用where’s crypto分析</p>\n<p><img src=\"md5.assets/image-20220127181300578.png\" alt=\"image-20220127181300578\"></p>\n<p><img src=\"md5.assets/image-20220128122013626.png\" alt=\"image-20220128122013626\"></p>\n<p>反汇编MD5_Update,主要还是调用了md5_block_data_order</p>\n<p><img src=\"md5.assets/image-20220128122933514.png\" alt=\"image-20220128122933514\">o</p>\n<p>md5_block_data_order反汇编后</p>\n<p><img src=\"md5.assets/image-20220128123055931.png\" alt=\"image-20220128123055931\"></p>\n<p>与signature中对应关系如下</p>\n<p><img src=\"md5.assets/image-20220128124206153.png\" alt=\"image-20220128124206153\"></p>\n<p>openssl中源代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> md5_block_data_order</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">ifdef</span> X</span></span><br><span class=\"line\"><span class=\"meta\">#  <span class=\"meta-keyword\">undef</span> X</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">md5_block_data_order</span><span class=\"params\">(MD5_CTX *c, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *data_, <span class=\"keyword\">size_t</span> num)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *data = data_;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"keyword\">unsigned</span> MD32_REG_T A, B, C, D, l;</span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">ifndef</span> MD32_XARRAY</span></span><br><span class=\"line\">    <span class=\"comment\">/* See comment in crypto/sha/sha_local.h for details. */</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> MD32_REG_T XX0, XX1, XX2, XX3, XX4, XX5, XX6, XX7,</span><br><span class=\"line\">        XX8, XX9, XX10, XX11, XX12, XX13, XX14, XX15;</span><br><span class=\"line\"><span class=\"meta\">#  <span class=\"meta-keyword\">define</span> X(i)   XX##i</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">    MD5_LONG XX[MD5_LBLOCK];</span><br><span class=\"line\"><span class=\"meta\">#  <span class=\"meta-keyword\">define</span> X(i)   XX[i]</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    A = c-&gt;A;</span><br><span class=\"line\">    B = c-&gt;B;</span><br><span class=\"line\">    C = c-&gt;C;</span><br><span class=\"line\">    D = c-&gt;D;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; num--;) &#123;</span><br><span class=\"line\">        (<span class=\"keyword\">void</span>)HOST_c2l(data, l);</span><br><span class=\"line\">        X(<span class=\"number\">0</span>) = l;</span><br><span class=\"line\">        (<span class=\"keyword\">void</span>)HOST_c2l(data, l);</span><br><span class=\"line\">        X(<span class=\"number\">1</span>) = l;</span><br><span class=\"line\">        <span class=\"comment\">/* Round 0 */</span></span><br><span class=\"line\">        R0(A, B, C, D, X(<span class=\"number\">0</span>), <span class=\"number\">7</span>, <span class=\"number\">0xd76aa478</span>L);</span><br><span class=\"line\">        (<span class=\"keyword\">void</span>)HOST_c2l(data, l);</span><br><span class=\"line\">        X(<span class=\"number\">2</span>) = l;</span><br><span class=\"line\">        R0(D, A, B, C, X(<span class=\"number\">1</span>), <span class=\"number\">12</span>, <span class=\"number\">0xe8c7b756</span>L);</span><br><span class=\"line\">        (<span class=\"keyword\">void</span>)HOST_c2l(data, l);</span><br><span class=\"line\">        X(<span class=\"number\">3</span>) = l;</span><br><span class=\"line\">        R0(C, D, A, B, X(<span class=\"number\">2</span>), <span class=\"number\">17</span>, <span class=\"number\">0x242070db</span>L);</span><br><span class=\"line\">        (<span class=\"keyword\">void</span>)HOST_c2l(data, l);</span><br><span class=\"line\">        X(<span class=\"number\">4</span>) = l;</span><br><span class=\"line\">        R0(B, C, D, A, X(<span class=\"number\">3</span>), <span class=\"number\">22</span>, <span class=\"number\">0xc1bdceee</span>L);</span><br><span class=\"line\">        (<span class=\"keyword\">void</span>)HOST_c2l(data, l);</span><br><span class=\"line\">        X(<span class=\"number\">5</span>) = l;</span><br><span class=\"line\">        R0(A, B, C, D, X(<span class=\"number\">4</span>), <span class=\"number\">7</span>, <span class=\"number\">0xf57c0faf</span>L);</span><br><span class=\"line\">        (<span class=\"keyword\">void</span>)HOST_c2l(data, l);</span><br><span class=\"line\">        X(<span class=\"number\">6</span>) = l;</span><br><span class=\"line\">        R0(D, A, B, C, X(<span class=\"number\">5</span>), <span class=\"number\">12</span>, <span class=\"number\">0x4787c62a</span>L);</span><br><span class=\"line\">        (<span class=\"keyword\">void</span>)HOST_c2l(data, l);</span><br><span class=\"line\">        X(<span class=\"number\">7</span>) = l;</span><br><span class=\"line\">        R0(C, D, A, B, X(<span class=\"number\">6</span>), <span class=\"number\">17</span>, <span class=\"number\">0xa8304613</span>L);</span><br><span class=\"line\">        (<span class=\"keyword\">void</span>)HOST_c2l(data, l);</span><br><span class=\"line\">        X(<span class=\"number\">8</span>) = l;</span><br><span class=\"line\">        R0(B, C, D, A, X(<span class=\"number\">7</span>), <span class=\"number\">22</span>, <span class=\"number\">0xfd469501</span>L);</span><br><span class=\"line\">        (<span class=\"keyword\">void</span>)HOST_c2l(data, l);</span><br><span class=\"line\">        X(<span class=\"number\">9</span>) = l;</span><br><span class=\"line\">        R0(A, B, C, D, X(<span class=\"number\">8</span>), <span class=\"number\">7</span>, <span class=\"number\">0x698098d8</span>L);</span><br><span class=\"line\">        (<span class=\"keyword\">void</span>)HOST_c2l(data, l);</span><br><span class=\"line\">        X(<span class=\"number\">10</span>) = l;</span><br><span class=\"line\">        R0(D, A, B, C, X(<span class=\"number\">9</span>), <span class=\"number\">12</span>, <span class=\"number\">0x8b44f7af</span>L);</span><br><span class=\"line\">        (<span class=\"keyword\">void</span>)HOST_c2l(data, l);</span><br><span class=\"line\">        X(<span class=\"number\">11</span>) = l;</span><br><span class=\"line\">        R0(C, D, A, B, X(<span class=\"number\">10</span>), <span class=\"number\">17</span>, <span class=\"number\">0xffff5bb1</span>L);</span><br><span class=\"line\">        (<span class=\"keyword\">void</span>)HOST_c2l(data, l);</span><br><span class=\"line\">        X(<span class=\"number\">12</span>) = l;</span><br><span class=\"line\">        R0(B, C, D, A, X(<span class=\"number\">11</span>), <span class=\"number\">22</span>, <span class=\"number\">0x895cd7be</span>L);</span><br><span class=\"line\">        (<span class=\"keyword\">void</span>)HOST_c2l(data, l);</span><br><span class=\"line\">        X(<span class=\"number\">13</span>) = l;</span><br><span class=\"line\">        R0(A, B, C, D, X(<span class=\"number\">12</span>), <span class=\"number\">7</span>, <span class=\"number\">0x6b901122</span>L);</span><br><span class=\"line\">        (<span class=\"keyword\">void</span>)HOST_c2l(data, l);</span><br><span class=\"line\">        X(<span class=\"number\">14</span>) = l;</span><br><span class=\"line\">        R0(D, A, B, C, X(<span class=\"number\">13</span>), <span class=\"number\">12</span>, <span class=\"number\">0xfd987193</span>L);</span><br><span class=\"line\">        (<span class=\"keyword\">void</span>)HOST_c2l(data, l);</span><br><span class=\"line\">        X(<span class=\"number\">15</span>) = l;</span><br><span class=\"line\">        R0(C, D, A, B, X(<span class=\"number\">14</span>), <span class=\"number\">17</span>, <span class=\"number\">0xa679438e</span>L);</span><br><span class=\"line\">        R0(B, C, D, A, X(<span class=\"number\">15</span>), <span class=\"number\">22</span>, <span class=\"number\">0x49b40821</span>L);</span><br><span class=\"line\">        <span class=\"comment\">/* Round 1 */</span></span><br><span class=\"line\">        R1(A, B, C, D, X(<span class=\"number\">1</span>), <span class=\"number\">5</span>, <span class=\"number\">0xf61e2562</span>L);</span><br><span class=\"line\">        R1(D, A, B, C, X(<span class=\"number\">6</span>), <span class=\"number\">9</span>, <span class=\"number\">0xc040b340</span>L);</span><br><span class=\"line\">        R1(C, D, A, B, X(<span class=\"number\">11</span>), <span class=\"number\">14</span>, <span class=\"number\">0x265e5a51</span>L);</span><br><span class=\"line\">        R1(B, C, D, A, X(<span class=\"number\">0</span>), <span class=\"number\">20</span>, <span class=\"number\">0xe9b6c7aa</span>L);</span><br><span class=\"line\">        R1(A, B, C, D, X(<span class=\"number\">5</span>), <span class=\"number\">5</span>, <span class=\"number\">0xd62f105d</span>L);</span><br><span class=\"line\">        R1(D, A, B, C, X(<span class=\"number\">10</span>), <span class=\"number\">9</span>, <span class=\"number\">0x02441453</span>L);</span><br><span class=\"line\">        R1(C, D, A, B, X(<span class=\"number\">15</span>), <span class=\"number\">14</span>, <span class=\"number\">0xd8a1e681</span>L);</span><br><span class=\"line\">        R1(B, C, D, A, X(<span class=\"number\">4</span>), <span class=\"number\">20</span>, <span class=\"number\">0xe7d3fbc8</span>L);</span><br><span class=\"line\">        R1(A, B, C, D, X(<span class=\"number\">9</span>), <span class=\"number\">5</span>, <span class=\"number\">0x21e1cde6</span>L);</span><br><span class=\"line\">        R1(D, A, B, C, X(<span class=\"number\">14</span>), <span class=\"number\">9</span>, <span class=\"number\">0xc33707d6</span>L);</span><br><span class=\"line\">        R1(C, D, A, B, X(<span class=\"number\">3</span>), <span class=\"number\">14</span>, <span class=\"number\">0xf4d50d87</span>L);</span><br><span class=\"line\">        R1(B, C, D, A, X(<span class=\"number\">8</span>), <span class=\"number\">20</span>, <span class=\"number\">0x455a14ed</span>L);</span><br><span class=\"line\">        R1(A, B, C, D, X(<span class=\"number\">13</span>), <span class=\"number\">5</span>, <span class=\"number\">0xa9e3e905</span>L);</span><br><span class=\"line\">        R1(D, A, B, C, X(<span class=\"number\">2</span>), <span class=\"number\">9</span>, <span class=\"number\">0xfcefa3f8</span>L);</span><br><span class=\"line\">        R1(C, D, A, B, X(<span class=\"number\">7</span>), <span class=\"number\">14</span>, <span class=\"number\">0x676f02d9</span>L);</span><br><span class=\"line\">        R1(B, C, D, A, X(<span class=\"number\">12</span>), <span class=\"number\">20</span>, <span class=\"number\">0x8d2a4c8a</span>L);</span><br><span class=\"line\">        <span class=\"comment\">/* Round 2 */</span></span><br><span class=\"line\">        R2(A, B, C, D, X(<span class=\"number\">5</span>), <span class=\"number\">4</span>, <span class=\"number\">0xfffa3942</span>L);</span><br><span class=\"line\">        R2(D, A, B, C, X(<span class=\"number\">8</span>), <span class=\"number\">11</span>, <span class=\"number\">0x8771f681</span>L);</span><br><span class=\"line\">        R2(C, D, A, B, X(<span class=\"number\">11</span>), <span class=\"number\">16</span>, <span class=\"number\">0x6d9d6122</span>L);</span><br><span class=\"line\">        R2(B, C, D, A, X(<span class=\"number\">14</span>), <span class=\"number\">23</span>, <span class=\"number\">0xfde5380c</span>L);</span><br><span class=\"line\">        R2(A, B, C, D, X(<span class=\"number\">1</span>), <span class=\"number\">4</span>, <span class=\"number\">0xa4beea44</span>L);</span><br><span class=\"line\">        R2(D, A, B, C, X(<span class=\"number\">4</span>), <span class=\"number\">11</span>, <span class=\"number\">0x4bdecfa9</span>L);</span><br><span class=\"line\">        R2(C, D, A, B, X(<span class=\"number\">7</span>), <span class=\"number\">16</span>, <span class=\"number\">0xf6bb4b60</span>L);</span><br><span class=\"line\">        R2(B, C, D, A, X(<span class=\"number\">10</span>), <span class=\"number\">23</span>, <span class=\"number\">0xbebfbc70</span>L);</span><br><span class=\"line\">        R2(A, B, C, D, X(<span class=\"number\">13</span>), <span class=\"number\">4</span>, <span class=\"number\">0x289b7ec6</span>L);</span><br><span class=\"line\">        R2(D, A, B, C, X(<span class=\"number\">0</span>), <span class=\"number\">11</span>, <span class=\"number\">0xeaa127fa</span>L);</span><br><span class=\"line\">        R2(C, D, A, B, X(<span class=\"number\">3</span>), <span class=\"number\">16</span>, <span class=\"number\">0xd4ef3085</span>L);</span><br><span class=\"line\">        R2(B, C, D, A, X(<span class=\"number\">6</span>), <span class=\"number\">23</span>, <span class=\"number\">0x04881d05</span>L);</span><br><span class=\"line\">        R2(A, B, C, D, X(<span class=\"number\">9</span>), <span class=\"number\">4</span>, <span class=\"number\">0xd9d4d039</span>L);</span><br><span class=\"line\">        R2(D, A, B, C, X(<span class=\"number\">12</span>), <span class=\"number\">11</span>, <span class=\"number\">0xe6db99e5</span>L);</span><br><span class=\"line\">        R2(C, D, A, B, X(<span class=\"number\">15</span>), <span class=\"number\">16</span>, <span class=\"number\">0x1fa27cf8</span>L);</span><br><span class=\"line\">        R2(B, C, D, A, X(<span class=\"number\">2</span>), <span class=\"number\">23</span>, <span class=\"number\">0xc4ac5665</span>L);</span><br><span class=\"line\">        <span class=\"comment\">/* Round 3 */</span></span><br><span class=\"line\">        R3(A, B, C, D, X(<span class=\"number\">0</span>), <span class=\"number\">6</span>, <span class=\"number\">0xf4292244</span>L);</span><br><span class=\"line\">        R3(D, A, B, C, X(<span class=\"number\">7</span>), <span class=\"number\">10</span>, <span class=\"number\">0x432aff97</span>L);</span><br><span class=\"line\">        R3(C, D, A, B, X(<span class=\"number\">14</span>), <span class=\"number\">15</span>, <span class=\"number\">0xab9423a7</span>L);</span><br><span class=\"line\">        R3(B, C, D, A, X(<span class=\"number\">5</span>), <span class=\"number\">21</span>, <span class=\"number\">0xfc93a039</span>L);</span><br><span class=\"line\">        R3(A, B, C, D, X(<span class=\"number\">12</span>), <span class=\"number\">6</span>, <span class=\"number\">0x655b59c3</span>L);</span><br><span class=\"line\">        R3(D, A, B, C, X(<span class=\"number\">3</span>), <span class=\"number\">10</span>, <span class=\"number\">0x8f0ccc92</span>L);</span><br><span class=\"line\">        R3(C, D, A, B, X(<span class=\"number\">10</span>), <span class=\"number\">15</span>, <span class=\"number\">0xffeff47d</span>L);</span><br><span class=\"line\">        R3(B, C, D, A, X(<span class=\"number\">1</span>), <span class=\"number\">21</span>, <span class=\"number\">0x85845dd1</span>L);</span><br><span class=\"line\">        R3(A, B, C, D, X(<span class=\"number\">8</span>), <span class=\"number\">6</span>, <span class=\"number\">0x6fa87e4f</span>L);</span><br><span class=\"line\">        R3(D, A, B, C, X(<span class=\"number\">15</span>), <span class=\"number\">10</span>, <span class=\"number\">0xfe2ce6e0</span>L);</span><br><span class=\"line\">        R3(C, D, A, B, X(<span class=\"number\">6</span>), <span class=\"number\">15</span>, <span class=\"number\">0xa3014314</span>L);</span><br><span class=\"line\">        R3(B, C, D, A, X(<span class=\"number\">13</span>), <span class=\"number\">21</span>, <span class=\"number\">0x4e0811a1</span>L);</span><br><span class=\"line\">        R3(A, B, C, D, X(<span class=\"number\">4</span>), <span class=\"number\">6</span>, <span class=\"number\">0xf7537e82</span>L);</span><br><span class=\"line\">        R3(D, A, B, C, X(<span class=\"number\">11</span>), <span class=\"number\">10</span>, <span class=\"number\">0xbd3af235</span>L);</span><br><span class=\"line\">        R3(C, D, A, B, X(<span class=\"number\">2</span>), <span class=\"number\">15</span>, <span class=\"number\">0x2ad7d2bb</span>L);</span><br><span class=\"line\">        R3(B, C, D, A, X(<span class=\"number\">9</span>), <span class=\"number\">21</span>, <span class=\"number\">0xeb86d391</span>L);</span><br><span class=\"line\"></span><br><span class=\"line\">        A = c-&gt;A += A;</span><br><span class=\"line\">        B = c-&gt;B += B;</span><br><span class=\"line\">        C = c-&gt;C += C;</span><br><span class=\"line\">        D = c-&gt;D += D;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<p>md5_local.h</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> F(b,c,d)        ((((c) ^ (d)) &amp; (b)) ^ (d))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> G(b,c,d)        ((((b) ^ (c)) &amp; (d)) ^ (c))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> H(b,c,d)        ((b) ^ (c) ^ (d))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> I(b,c,d)        (((~(d)) | (b)) ^ (c))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> R0(a,b,c,d,k,s,t) &#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">        a+=((k)+(t)+F((b),(c),(d))); \\</span></span><br><span class=\"line\"><span class=\"meta\">        a=ROTATE(a,s); \\</span></span><br><span class=\"line\"><span class=\"meta\">        a+=b; &#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> R1(a,b,c,d,k,s,t) &#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">        a+=((k)+(t)+G((b),(c),(d))); \\</span></span><br><span class=\"line\"><span class=\"meta\">        a=ROTATE(a,s); \\</span></span><br><span class=\"line\"><span class=\"meta\">        a+=b; &#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> R2(a,b,c,d,k,s,t) &#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">        a+=((k)+(t)+H((b),(c),(d))); \\</span></span><br><span class=\"line\"><span class=\"meta\">        a=ROTATE(a,s); \\</span></span><br><span class=\"line\"><span class=\"meta\">        a+=b; &#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> R3(a,b,c,d,k,s,t) &#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">        a+=((k)+(t)+I((b),(c),(d))); \\</span></span><br><span class=\"line\"><span class=\"meta\">        a=ROTATE(a,s); \\</span></span><br><span class=\"line\"><span class=\"meta\">        a+=b; &#125;;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"SHA1","date":"2022-02-23T12:00:00.000Z","keywords":null,"description":null,"top_img":null,"comments":1,"cover":"/image/star.jpg","toc":null,"toc_number":null,"copyright":null,"mathjax":null,"katex":true,"hide":null,"_content":"\n## sha1\n\n与md5类似，差异用`标注`\n\n### 算法\n\n- 输入：任意长的消息，512 比特长的分组。`原始报文长度不能超过2的64次方`\n- 输出：`160` 比特的消息摘要\n\n整体流程如下：\n\n- 首先填充原始消息使得对512求余的结果等于448，然后64位记录其长度。\n- 512bit一组分为n组。每组中32bit为一段，分为16段\n- `将上述16段扩充到80段`\n- 对每一组，循环4轮运算，得到新的A,B,C,D,E作为下一组的初始值\n- 最后得到的A,B,C,D,E加上第n组原来A,B,C,D,E的值（即计算前的值）\n- 按照地址的顺序从低到高打印对应的A,B,C,D,E值，就是所求的sha1值。\n\n#### 填充\n\n如果输入信息的长度(bit)对512求余的结果不等于448，就需要填充使得对512求余的结果等于448。填充的方法是填充一个1和n个0。填充完后，信息的长度就为N*512+448(bit)。\n\n然后用64位来存储填充前信息长度。这64位加在第一步结果的后面，这样信息长度就变为N\\*512+448+64=(N+1)*512位 \n\n\n\n比如，需要加密消息\"gnubd\"，最后被填充为\n\n**小端字节序存储**\n\n```\n67 6E 75 62 64 80 00 00 00 00 00 00 00 00 00 00\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 \n```\n\n最后64位（8字节)为0x28（40），消息内容为40位（5字节）。\n\n#### 数据处理\n\n要使A,B,C,D,`E`在内存中的显示情况：\n\n```c\nA = 0x01234567\nB = 0x89ABCDEF\nC = 0xFEDCBA89\nD = 0x76543210\nE = 0xF0E1D2C3\n```\n\n程序定义应为\n\n```c\nA = 0x67452301;\nB = 0xEFCDAB89;\nC = 0x98BADCFE;\nD = 0x10325476;\nE = 0xC3D2E1F0;\n```\n\n每512位（64字节）为1段可以分成n段，（n大于等于1），对于每一段信息（512位，64字节）又划分成16小段（每段32位，4个字节，用M表示）\n\n`将16段Mt(0-15)扩充到80段Wt(0-79)：`\n$$\nW t = M t , 当0≤t≤15\n\\\\ W t = ( W(t-3) ⊕ W(t-8)⊕ W(t-14)⊕ W(t-16 ) <<< 1, 当16≤t≤79\n$$\n\n\nSHA1的4轮运算，每轮包括20个步骤，共80个步骤使用同一个操作程序\n$$\nA,B,C,D,E←[(A<<<5)+ ft(B,C,D)+E+Wt+Kt],A,(B<<<30),C,D\n$$\n其中 ft(B,C,D)为逻辑函数，Wt为子明文分组W[t]，Kt为固定常数。操作表示具体含义如下\n\n- 将[(A<<<5)+ ft(B,C,D)+E+Wt+Kt]的结果赋值给变量A\n- 将A的初始值赋值给B\n- 将B初始值循环左移30位赋值给\n- 将C初始值赋给D\n- 将D初始值赋给E\n\n四轮运算的逻辑函数如下表所示\n\n| 轮次 | 步骤    | 函数定义                      |\n| ---- | ------- | ----------------------------- |\n| 1    | 0≤t≤19  | ft(B,C,D)=(B&C)\\|(~B&D)       |\n| 2    | 20≤t≤39 | ft(B,C,D)=B⊕C⊕D               |\n| 3    | 40≤t≤59 | ft(B,C,D)=(B&C)\\|(B&D)\\|(C&D) |\n| 4    | 60≤t≤79 | ft(B,C,D)=B⊕C⊕D               |\n\n固定常数Ki的取值如下表\n\n| 轮   | 步骤    | 函数定义      |\n| ---- | ------- | ------------- |\n| 1    | 0≤t≤19  | *K*t=5A827999 |\n| 2    | 20≤t≤39 | *K*t=6ED9EBA1 |\n| 3    | 40≤t≤59 | *K*t=8F188CDC |\n| 4    | 60≤t≤79 | *K*t=CA62C1D6 |\n\n##### 例子\n\n假设W[1]=0x12345678，此时变量的值分别为A=0x67452301、B=0xEFCDAB89、C=0x98BADCFE、D=0x10325476、E=0xC3D2E1F0\n\n那么第1轮第1步的运算过程如下。\n\n1. 将链接变量A循环左移5位，得到的结果为：0xE8A4602C。\n\n2. 将B，C，D经过相应的逻辑函数：\n\n(B&C)|(~B&D)=(0xEFCDAB89&0x98BADCFE)|(~0xEFCDAB89&0x10325476)=0x98BADCFE\n\n3. 将第1步，第2步的结果与E，W[1]，和K[1]相加得：\n\n0xE8A4602C+0x98BADCFE+0xC3D2E1F0+0x12345678+0x5A827999=0xB1E8EF2B\n\n4. 将B循环左移30位得：(B<<<30)=0x7BF36AE2。\n\n5. 将第3步结果赋值给A，A（这里是指A的原始值）赋值给B，步骤4的结果赋值给C，C的原始值赋值给D，D的原始值赋值给E。\n\n6. 最后得到第1轮第1步的结果：\n\nA = 0xB1E8EF2B\n\nB = 0x67452301\n\nC = 0x7BF36AE2\n\nD = 0x98BADCFE\n\nE = 0x10325476\n\n按照这种方法，将80个步骤进行完毕。\n\n第四轮最后一个步骤的A，B，C，D，E输出，将分别与原始值A′，B′，C′，D′，E′中的数值求和运算。其结果将作为输入成为下一个512位明文分组的A，B，C，D，E，当最后一个明文分组计算完成以后，A，B，C，D，E中的数据就是最后散列函数值。\n\n\n\n\n\n\n\n### signature\n\nDSL定义如下\n\n```\nIDENTIFIER SHA1\n\nsub_40:OPAQUE;\nsub_45:OPAQUE;\nsub_51:OPAQUE;\nsub_52:OPAQUE;\nsub_53:OPAQUE;\nsub_54:OPAQUE;\nsub_55:OPAQUE;\nsub_56:OPAQUE;\nsub_58:OPAQUE;\nsub_59:OPAQUE;\nsub_61:OPAQUE;\nsub_62:OPAQUE;\nsub_64:OPAQUE;\nsub_65:OPAQUE;\nsub_66:OPAQUE;\nsub_67:OPAQUE;\nsub_68:OPAQUE;\nsub_69:OPAQUE;\nsub_70:OPAQUE;\nsub_71:OPAQUE;\nsub_73:OPAQUE;\nsub_75:OPAQUE;\nsub_77:OPAQUE;\nsub_79:OPAQUE;\nsub_81:OPAQUE;\nsub_82:(OPAQUE+ROTATE(sub_73,27)+XOR(AND(XOR(sub_75,sub_77),sub_79),sub_77)+sub_81+1518500249);\nsub_83:ROTATE(sub_79,2);\nsub_84:(OPAQUE+ROTATE(sub_82,27)+XOR(AND(XOR(sub_83,sub_75),sub_73),sub_75)+sub_77+1518500249);\nsub_85:ROTATE(sub_73,2);\nsub_86:(OPAQUE+ROTATE(sub_84,27)+XOR(AND(XOR(sub_85,sub_83),sub_82),sub_83)+sub_75+1518500249);\nsub_87:ROTATE(sub_82,2);\nsub_88:(OPAQUE+ROTATE(sub_86,27)+XOR(AND(XOR(sub_87,sub_85),sub_84),sub_85)+sub_83+1518500249);\nsub_89:ROTATE(sub_84,2);\nsub_90:(OPAQUE+ROTATE(sub_88,27)+XOR(AND(XOR(sub_89,sub_87),sub_86),sub_87)+sub_85+1518500249);\nsub_91:ROTATE(sub_90,2);\nsub_92:ROTATE(sub_88,2);\nsub_93:ROTATE(sub_86,2);\nsub_94:(OPAQUE+ROTATE(sub_90,27)+XOR(AND(XOR(sub_93,sub_89),sub_88),sub_89)+sub_87+1518500249);\nsub_95:(OPAQUE+ROTATE(sub_94,27)+XOR(AND(XOR(sub_92,sub_93),sub_90),sub_93)+sub_89+1518500249);\nsub_96:(OPAQUE+ROTATE(sub_95,27)+XOR(AND(XOR(sub_91,sub_92),sub_94),sub_92)+sub_93+1518500249);\nsub_97:ROTATE(sub_94,2);\nsub_98:(OPAQUE+ROTATE(sub_96,27)+XOR(AND(XOR(sub_97,sub_91),sub_95),sub_91)+sub_92+1518500249);\nsub_99:ROTATE(sub_95,2);\nsub_100:(OPAQUE+ROTATE(sub_98,27)+XOR(AND(XOR(sub_99,sub_97),sub_96),sub_97)+sub_91+1518500249);\nsub_101:ROTATE(sub_96,2);\nsub_102:(OPAQUE+ROTATE(sub_100,27)+XOR(AND(XOR(sub_101,sub_99),sub_98),sub_99)+sub_97+1518500249);\nsub_103:ROTATE(sub_98,2);\nsub_104:(OPAQUE+ROTATE(sub_102,27)+XOR(AND(XOR(sub_103,sub_101),sub_100),sub_101)+sub_99+1518500249);\nsub_105:ROTATE(sub_100,2);\nsub_106:(OPAQUE+ROTATE(sub_104,27)+XOR(AND(XOR(sub_105,sub_103),sub_102),sub_103)+sub_101+1518500249);\nsub_107:ROTATE(sub_102,2);\nsub_108:(OPAQUE+ROTATE(sub_106,27)+XOR(AND(XOR(sub_107,sub_105),sub_104),sub_105)+sub_103+1518500249);\nsub_109:ROTATE(sub_104,2);\nsub_110:(OPAQUE+ROTATE(sub_108,27)+XOR(AND(XOR(sub_109,sub_107),sub_106),sub_107)+sub_105+1518500249);\nsub_111:ROTATE(sub_106,2);\nsub_112:(OPAQUE+ROTATE(sub_110,27)+XOR(AND(XOR(sub_111,sub_109),sub_108),sub_109)+sub_107+1518500249);\nsub_113:ROTATE(sub_108,2);\nsub_114:(OPAQUE+ROTATE(sub_112,27)+XOR(AND(XOR(sub_113,sub_111),sub_110),sub_111)+sub_109+1518500249);\nsub_115:ROTATE(sub_110,2);\nsub_116:(OPAQUE+ROTATE(sub_114,27)+XOR(AND(XOR(sub_115,sub_113),sub_112),sub_113)+sub_111+1518500249);\nsub_117:ROTATE(sub_112,2);\nsub_118:(OPAQUE+ROTATE(sub_116,27)+XOR(AND(XOR(sub_117,sub_115),sub_114),sub_115)+sub_113+1518500249);\nsub_119:ROTATE(sub_114,2);\nsub_120:(OPAQUE+ROTATE(sub_118,27)+XOR(AND(XOR(sub_119,sub_117),sub_116),sub_117)+sub_115+1518500249);\nsub_121:ROTATE(sub_116,2);\nsub_122:(OPAQUE+ROTATE(sub_120,27)+XOR(sub_118,sub_121,sub_119)+sub_117+1859775393);\nsub_123:ROTATE(sub_118,2);\nsub_124:(OPAQUE+ROTATE(sub_122,27)+XOR(sub_120,sub_123,sub_121)+sub_119+1859775393);\nsub_125:ROTATE(sub_120,2);\nsub_126:(OPAQUE+ROTATE(sub_124,27)+XOR(sub_122,sub_125,sub_123)+sub_121+1859775393);\nsub_127:ROTATE(sub_122,2);\nsub_128:(OPAQUE+ROTATE(sub_126,27)+XOR(sub_124,sub_127,sub_125)+sub_123+1859775393);\nsub_129:ROTATE(sub_124,2);\nsub_130:(OPAQUE+ROTATE(sub_128,27)+XOR(sub_126,sub_129,sub_127)+sub_125+1859775393);\nsub_131:ROTATE(sub_126,2);\nsub_132:(OPAQUE+ROTATE(sub_130,27)+XOR(sub_128,sub_131,sub_129)+sub_127+1859775393);\nsub_133:ROTATE(sub_128,2);\nsub_134:(OPAQUE+ROTATE(sub_132,27)+XOR(sub_130,sub_133,sub_131)+sub_129+1859775393);\nsub_135:ROTATE(sub_130,2);\nsub_136:(OPAQUE+ROTATE(sub_134,27)+XOR(sub_132,sub_135,sub_133)+sub_131+1859775393);\nsub_137:ROTATE(sub_132,2);\nsub_138:(OPAQUE+ROTATE(sub_136,27)+XOR(sub_134,sub_137,sub_135)+sub_133+1859775393);\nsub_139:ROTATE(sub_134,2);\nsub_140:(OPAQUE+ROTATE(sub_138,27)+XOR(sub_136,sub_139,sub_137)+sub_135+1859775393);\nsub_141:ROTATE(sub_136,2);\nsub_142:(OPAQUE+ROTATE(sub_140,27)+XOR(sub_138,sub_141,sub_139)+sub_137+1859775393);\nsub_143:ROTATE(sub_138,2);\nsub_144:(OPAQUE+ROTATE(sub_142,27)+XOR(sub_140,sub_143,sub_141)+sub_139+1859775393);\nsub_145:ROTATE(sub_140,2);\nsub_146:(OPAQUE+ROTATE(sub_144,27)+XOR(sub_142,sub_145,sub_143)+sub_141+1859775393);\nsub_147:ROTATE(sub_142,2);\nsub_148:(sub_40+ROTATE(sub_146,27)+XOR(sub_144,sub_147,sub_145)+sub_143+1859775393);\nsub_149:ROTATE(sub_144,2);\nsub_150:(OPAQUE+ROTATE(sub_148,27)+XOR(sub_146,sub_149,sub_147)+sub_145+1859775393);\nsub_151:ROTATE(sub_146,2);\nsub_152:(sub_51+ROTATE(sub_150,27)+XOR(sub_148,sub_151,sub_149)+sub_147+1859775393);\nsub_153:ROTATE(sub_148,2);\nsub_154:(sub_45+ROTATE(sub_152,27)+XOR(sub_150,sub_153,sub_151)+sub_149+1859775393);\nsub_155:ROTATE(sub_150,2);\nsub_156:(OPAQUE+ROTATE(sub_154,27)+XOR(sub_152,sub_155,sub_153)+sub_151+1859775393);\nsub_157:ROTATE(sub_152,2);\nsub_158:(sub_52+ROTATE(sub_156,27)+XOR(sub_154,sub_157,sub_155)+sub_153+1859775393);\nsub_159:ROTATE(sub_154,2);\nsub_160:(sub_55+ROTATE(sub_158,27)+XOR(sub_156,sub_159,sub_157)+sub_155+1859775393);\nsub_161:ROTATE(sub_158,2);\nsub_162:ROTATE(sub_156,2);\nsub_163:(OR(AND(OR(sub_158,sub_162),sub_159),AND(sub_158,sub_162))+OPAQUE+ROTATE(sub_160,27)+sub_157+2400959708);\nsub_164:(OR(AND(OR(sub_160,sub_161),sub_162),AND(sub_160,sub_161))+sub_53+ROTATE(sub_163,27)+sub_159+2400959708);\nsub_165:ROTATE(XOR(sub_69,sub_53,sub_51,sub_40),31);\nsub_166:ROTATE(XOR(sub_70,sub_165,sub_66,sub_53),31);\nsub_167:ROTATE(XOR(sub_165,sub_54,sub_52,sub_45),31);\nsub_168:ROTATE(XOR(sub_166,sub_167,sub_69,sub_54),31);\nsub_169:ROTATE(XOR(sub_167,sub_56,sub_53,sub_55),31);\nsub_170:ROTATE(XOR(sub_168,sub_169,sub_165,sub_56),31);\nsub_171:ROTATE(XOR(sub_169,sub_59,sub_54,sub_58),31);\nsub_172:ROTATE(XOR(sub_170,sub_171,sub_167,sub_59),31);\nsub_173:ROTATE(XOR(sub_71,sub_166,sub_67,sub_165),31);\nsub_174:ROTATE(XOR(sub_171,sub_62,sub_56,sub_61),31);\nsub_175:ROTATE(XOR(sub_174,sub_65,sub_59,sub_64),31);\nsub_176:ROTATE(sub_163,2);\nsub_177:ROTATE(sub_160,2);\nsub_178:(OR(AND(OR(sub_163,sub_177),sub_161),AND(sub_163,sub_177))+sub_58+ROTATE(sub_164,27)+sub_162+2400959708);\nsub_179:(OR(AND(OR(sub_164,sub_176),sub_177),AND(sub_164,sub_176))+sub_66+ROTATE(sub_178,27)+sub_161+2400959708);\nsub_180:ROTATE(sub_178,2);\nsub_181:ROTATE(sub_164,2);\nsub_182:(OR(AND(OR(sub_178,sub_181),sub_176),AND(sub_178,sub_181))+sub_54+ROTATE(sub_179,27)+sub_177+2400959708);\nsub_183:(OR(AND(OR(sub_179,sub_180),sub_181),AND(sub_179,sub_180))+sub_61+ROTATE(sub_182,27)+sub_176+2400959708);\nsub_184:ROTATE(sub_182,2);\nsub_185:ROTATE(sub_179,2);\nsub_186:(OR(AND(OR(sub_182,sub_185),sub_180),AND(sub_182,sub_185))+sub_69+ROTATE(sub_183,27)+sub_181+2400959708);\nsub_187:(OR(AND(OR(sub_183,sub_184),sub_185),AND(sub_183,sub_184))+sub_56+ROTATE(sub_186,27)+sub_180+2400959708);\nsub_188:ROTATE(sub_186,2);\nsub_189:ROTATE(sub_183,2);\nsub_190:(OR(AND(OR(sub_186,sub_189),sub_184),AND(sub_186,sub_189))+sub_64+ROTATE(sub_187,27)+sub_185+2400959708);\nsub_191:(OR(AND(OR(sub_187,sub_188),sub_189),AND(sub_187,sub_188))+sub_165+ROTATE(sub_190,27)+sub_184+2400959708);\nsub_192:ROTATE(sub_190,2);\nsub_193:ROTATE(sub_187,2);\nsub_194:(OR(AND(OR(sub_190,sub_193),sub_188),AND(sub_190,sub_193))+sub_59+ROTATE(sub_191,27)+sub_189+2400959708);\nsub_195:(OR(AND(OR(sub_191,sub_192),sub_193),AND(sub_191,sub_192))+sub_67+ROTATE(sub_194,27)+sub_188+2400959708);\nsub_196:ROTATE(sub_194,2);\nsub_197:ROTATE(sub_191,2);\nsub_198:(OR(AND(OR(sub_194,sub_197),sub_192),AND(sub_194,sub_197))+sub_167+ROTATE(sub_195,27)+sub_193+2400959708);\nsub_199:(OR(AND(OR(sub_195,sub_196),sub_197),AND(sub_195,sub_196))+sub_62+ROTATE(sub_198,27)+sub_192+2400959708);\nsub_200:ROTATE(sub_198,2);\nsub_201:ROTATE(sub_195,2);\nsub_202:(OR(AND(OR(sub_198,sub_201),sub_196),AND(sub_198,sub_201))+sub_70+ROTATE(sub_199,27)+sub_197+2400959708);\nsub_203:(OR(AND(OR(sub_199,sub_200),sub_201),AND(sub_199,sub_200))+sub_169+ROTATE(sub_202,27)+sub_196+2400959708);\nsub_204:ROTATE(sub_202,2);\nsub_205:ROTATE(sub_199,2);\nsub_206:(OR(AND(OR(sub_202,sub_205),sub_200),AND(sub_202,sub_205))+sub_65+ROTATE(sub_203,27)+sub_201+2400959708);\nsub_207:(OR(AND(OR(sub_203,sub_204),sub_205),AND(sub_203,sub_204))+sub_166+ROTATE(sub_206,27)+sub_200+2400959708);\nsub_208:ROTATE(sub_206,2);\nsub_209:ROTATE(sub_203,2);\nsub_210:(OR(AND(OR(sub_206,sub_209),sub_204),AND(sub_206,sub_209))+sub_171+ROTATE(sub_207,27)+sub_205+2400959708);\nsub_211:(OR(AND(OR(sub_207,sub_208),sub_209),AND(sub_207,sub_208))+sub_68+ROTATE(sub_210,27)+sub_204+2400959708);\nsub_212:ROTATE(sub_207,2);\nsub_213:(sub_168+ROTATE(sub_211,27)+XOR(sub_210,sub_212,sub_208)+sub_209+3395469782);\nsub_214:ROTATE(sub_210,2);\nsub_215:(sub_174+ROTATE(sub_213,27)+XOR(sub_211,sub_214,sub_212)+sub_208+3395469782);\nsub_216:ROTATE(sub_211,2);\nsub_217:(sub_71+ROTATE(sub_215,27)+XOR(sub_213,sub_216,sub_214)+sub_212+3395469782);\nsub_218:ROTATE(sub_213,2);\nsub_219:(sub_170+ROTATE(sub_217,27)+XOR(sub_215,sub_218,sub_216)+sub_214+3395469782);\nsub_220:ROTATE(sub_215,2);\nsub_221:(sub_175+ROTATE(sub_219,27)+XOR(sub_217,sub_220,sub_218)+sub_216+3395469782);\nsub_222:ROTATE(sub_217,2);\nsub_223:(sub_173+ROTATE(sub_221,27)+XOR(sub_219,sub_222,sub_220)+sub_218+3395469782);\nsub_224:ROTATE(sub_219,2);\nsub_225:(sub_172+ROTATE(sub_223,27)+XOR(sub_221,sub_224,sub_222)+sub_220+3395469782);\nsub_226:ROTATE(XOR(sub_172,sub_174,sub_169,sub_62),31);\nsub_227:ROTATE(XOR(sub_226,sub_175,sub_171,sub_65),31);\nsub_228:ROTATE(XOR(sub_175,sub_68,sub_62,sub_67),31);\nsub_229:ROTATE(XOR(sub_227,sub_228,sub_174,sub_68),31);\nsub_230:ROTATE(sub_221,2);\nsub_231:(sub_228+ROTATE(sub_225,27)+XOR(sub_223,sub_230,sub_224)+sub_222+3395469782);\nsub_232:ROTATE(sub_231,2);\nsub_233:ROTATE(XOR(sub_228,sub_71,sub_65,sub_70),31);\nsub_234:ROTATE(XOR(sub_173,sub_168,sub_70,sub_167),31);\nsub_235:ROTATE(sub_223,2);\nsub_236:(sub_234+ROTATE(sub_231,27)+XOR(sub_225,sub_235,sub_230)+sub_224+3395469782);\nsub_237:ROTATE(sub_225,2);\nsub_238:(sub_226+ROTATE(sub_236,27)+XOR(sub_231,sub_237,sub_235)+sub_230+3395469782);\nsub_239:(sub_233+ROTATE(sub_238,27)+XOR(sub_236,sub_232,sub_237)+sub_235+3395469782);\nsub_240:ROTATE(XOR(sub_233,sub_173,sub_68,sub_166),31);\nsub_241:ROTATE(XOR(sub_234,sub_170,sub_166,sub_169),31);\nsub_242:ROTATE(sub_236,2);\nsub_243:(sub_241+ROTATE(sub_239,27)+XOR(sub_238,sub_242,sub_232)+sub_237+3395469782);\nsub_244:ROTATE(sub_238,2);\nsub_245:(sub_227+ROTATE(sub_243,27)+XOR(sub_239,sub_244,sub_242)+sub_232+3395469782);\nsub_246:ROTATE(sub_239,2);\nsub_247:(sub_240+ROTATE(sub_245,27)+XOR(sub_243,sub_246,sub_244)+sub_242+3395469782);\nsub_248:ROTATE(sub_245,2);\nsub_249:ROTATE(sub_243,2);\nsub_250:ROTATE(sub_247,2);\nsub_251:ROTATE(XOR(sub_241,sub_172,sub_168,sub_171),31);\nsub_252:(sub_251+ROTATE(sub_247,27)+XOR(sub_245,sub_249,sub_246)+sub_244+3395469782);\nsub_253:(sub_229+ROTATE(sub_252,27)+XOR(sub_247,sub_248,sub_249)+sub_246+3395469782);\nsub_254:ROTATE(sub_253,2);\nsub_255:ROTATE(XOR(sub_240,sub_234,sub_71,sub_168),31);\nsub_256:ROTATE(XOR(sub_229,sub_233,sub_175,sub_71),31);\nsub_257:(sub_255+ROTATE(sub_253,27)+XOR(sub_252,sub_250,sub_248)+sub_249+3395469782);\nsub_258:ROTATE(sub_252,2);\nsub_259:(ROTATE(XOR(sub_251,sub_226,sub_170,sub_174),31)+ROTATE(sub_257,27)+XOR(sub_253,sub_258,sub_250)+sub_248+3395469782);\nsub_260:ROTATE(sub_259,27);\nsub_261:XOR(sub_257,sub_254,sub_258);\nsub_262:ROTATE(sub_257,2);\nsub_263:(sub_77+sub_262);\nsub_264:(sub_73+ROTATE(XOR(sub_255,sub_241,sub_173,sub_170),31)+ROTATE((sub_256+sub_260+sub_261+sub_250+3395469782),27)+XOR(sub_259,sub_262,sub_254)+sub_258+3395469782);\nsub_265:(sub_81+sub_254);\nsub_266:(sub_75+ROTATE(sub_259,2));\nsub_267:(sub_79+sub_256+sub_260+sub_261+sub_250+3395469782);\n\n```\n\n\n\n### 测试\n\nlibcrypto.so.1.1(openssl)\n\n其中和sha1有关的函数如下\n\n![image-20220223192555863](sha1.assets/image-20220223192555863.png)\n\n利用where's crypto分析\n\n![image-20220223191837393](sha1.assets/image-20220223191837393.png)\n\n反汇编SHA1_Update,主要还是调用了sha1_block_data_order\n\n![image-20220223200517936](sha1.assets/image-20220223200517936.png)\n\nmd5_block_data_order反汇编后\n\n![image-20220223200537067](sha1.assets/image-20220223200537067.png)\n\n与signature中对应关系如下\n\n![image-20220223213829056](sha1.assets/image-20220223213829056.png)\n\n其余均类似\n\n\n\n`openssl中相关函数源码通过perl生成汇编代码`\n","source":"_posts/sha1.md","raw":"---\ntitle: SHA1\ndate: 2022-02-23 20:00:00\ntags:\n  - CryptoDetect\n  - algorithm\n  - reverse\ncategories:\n  - [CryptoDetect,algorithm]\nkeywords:\ndescription:\ntop_img:\ncomments:\ncover:\ntoc:\ntoc_number:\ncopyright:\nmathjax:\nkatex: true\nhide:\n---\n\n## sha1\n\n与md5类似，差异用`标注`\n\n### 算法\n\n- 输入：任意长的消息，512 比特长的分组。`原始报文长度不能超过2的64次方`\n- 输出：`160` 比特的消息摘要\n\n整体流程如下：\n\n- 首先填充原始消息使得对512求余的结果等于448，然后64位记录其长度。\n- 512bit一组分为n组。每组中32bit为一段，分为16段\n- `将上述16段扩充到80段`\n- 对每一组，循环4轮运算，得到新的A,B,C,D,E作为下一组的初始值\n- 最后得到的A,B,C,D,E加上第n组原来A,B,C,D,E的值（即计算前的值）\n- 按照地址的顺序从低到高打印对应的A,B,C,D,E值，就是所求的sha1值。\n\n#### 填充\n\n如果输入信息的长度(bit)对512求余的结果不等于448，就需要填充使得对512求余的结果等于448。填充的方法是填充一个1和n个0。填充完后，信息的长度就为N*512+448(bit)。\n\n然后用64位来存储填充前信息长度。这64位加在第一步结果的后面，这样信息长度就变为N\\*512+448+64=(N+1)*512位 \n\n\n\n比如，需要加密消息\"gnubd\"，最后被填充为\n\n**小端字节序存储**\n\n```\n67 6E 75 62 64 80 00 00 00 00 00 00 00 00 00 00\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 \n```\n\n最后64位（8字节)为0x28（40），消息内容为40位（5字节）。\n\n#### 数据处理\n\n要使A,B,C,D,`E`在内存中的显示情况：\n\n```c\nA = 0x01234567\nB = 0x89ABCDEF\nC = 0xFEDCBA89\nD = 0x76543210\nE = 0xF0E1D2C3\n```\n\n程序定义应为\n\n```c\nA = 0x67452301;\nB = 0xEFCDAB89;\nC = 0x98BADCFE;\nD = 0x10325476;\nE = 0xC3D2E1F0;\n```\n\n每512位（64字节）为1段可以分成n段，（n大于等于1），对于每一段信息（512位，64字节）又划分成16小段（每段32位，4个字节，用M表示）\n\n`将16段Mt(0-15)扩充到80段Wt(0-79)：`\n$$\nW t = M t , 当0≤t≤15\n\\\\ W t = ( W(t-3) ⊕ W(t-8)⊕ W(t-14)⊕ W(t-16 ) <<< 1, 当16≤t≤79\n$$\n\n\nSHA1的4轮运算，每轮包括20个步骤，共80个步骤使用同一个操作程序\n$$\nA,B,C,D,E←[(A<<<5)+ ft(B,C,D)+E+Wt+Kt],A,(B<<<30),C,D\n$$\n其中 ft(B,C,D)为逻辑函数，Wt为子明文分组W[t]，Kt为固定常数。操作表示具体含义如下\n\n- 将[(A<<<5)+ ft(B,C,D)+E+Wt+Kt]的结果赋值给变量A\n- 将A的初始值赋值给B\n- 将B初始值循环左移30位赋值给\n- 将C初始值赋给D\n- 将D初始值赋给E\n\n四轮运算的逻辑函数如下表所示\n\n| 轮次 | 步骤    | 函数定义                      |\n| ---- | ------- | ----------------------------- |\n| 1    | 0≤t≤19  | ft(B,C,D)=(B&C)\\|(~B&D)       |\n| 2    | 20≤t≤39 | ft(B,C,D)=B⊕C⊕D               |\n| 3    | 40≤t≤59 | ft(B,C,D)=(B&C)\\|(B&D)\\|(C&D) |\n| 4    | 60≤t≤79 | ft(B,C,D)=B⊕C⊕D               |\n\n固定常数Ki的取值如下表\n\n| 轮   | 步骤    | 函数定义      |\n| ---- | ------- | ------------- |\n| 1    | 0≤t≤19  | *K*t=5A827999 |\n| 2    | 20≤t≤39 | *K*t=6ED9EBA1 |\n| 3    | 40≤t≤59 | *K*t=8F188CDC |\n| 4    | 60≤t≤79 | *K*t=CA62C1D6 |\n\n##### 例子\n\n假设W[1]=0x12345678，此时变量的值分别为A=0x67452301、B=0xEFCDAB89、C=0x98BADCFE、D=0x10325476、E=0xC3D2E1F0\n\n那么第1轮第1步的运算过程如下。\n\n1. 将链接变量A循环左移5位，得到的结果为：0xE8A4602C。\n\n2. 将B，C，D经过相应的逻辑函数：\n\n(B&C)|(~B&D)=(0xEFCDAB89&0x98BADCFE)|(~0xEFCDAB89&0x10325476)=0x98BADCFE\n\n3. 将第1步，第2步的结果与E，W[1]，和K[1]相加得：\n\n0xE8A4602C+0x98BADCFE+0xC3D2E1F0+0x12345678+0x5A827999=0xB1E8EF2B\n\n4. 将B循环左移30位得：(B<<<30)=0x7BF36AE2。\n\n5. 将第3步结果赋值给A，A（这里是指A的原始值）赋值给B，步骤4的结果赋值给C，C的原始值赋值给D，D的原始值赋值给E。\n\n6. 最后得到第1轮第1步的结果：\n\nA = 0xB1E8EF2B\n\nB = 0x67452301\n\nC = 0x7BF36AE2\n\nD = 0x98BADCFE\n\nE = 0x10325476\n\n按照这种方法，将80个步骤进行完毕。\n\n第四轮最后一个步骤的A，B，C，D，E输出，将分别与原始值A′，B′，C′，D′，E′中的数值求和运算。其结果将作为输入成为下一个512位明文分组的A，B，C，D，E，当最后一个明文分组计算完成以后，A，B，C，D，E中的数据就是最后散列函数值。\n\n\n\n\n\n\n\n### signature\n\nDSL定义如下\n\n```\nIDENTIFIER SHA1\n\nsub_40:OPAQUE;\nsub_45:OPAQUE;\nsub_51:OPAQUE;\nsub_52:OPAQUE;\nsub_53:OPAQUE;\nsub_54:OPAQUE;\nsub_55:OPAQUE;\nsub_56:OPAQUE;\nsub_58:OPAQUE;\nsub_59:OPAQUE;\nsub_61:OPAQUE;\nsub_62:OPAQUE;\nsub_64:OPAQUE;\nsub_65:OPAQUE;\nsub_66:OPAQUE;\nsub_67:OPAQUE;\nsub_68:OPAQUE;\nsub_69:OPAQUE;\nsub_70:OPAQUE;\nsub_71:OPAQUE;\nsub_73:OPAQUE;\nsub_75:OPAQUE;\nsub_77:OPAQUE;\nsub_79:OPAQUE;\nsub_81:OPAQUE;\nsub_82:(OPAQUE+ROTATE(sub_73,27)+XOR(AND(XOR(sub_75,sub_77),sub_79),sub_77)+sub_81+1518500249);\nsub_83:ROTATE(sub_79,2);\nsub_84:(OPAQUE+ROTATE(sub_82,27)+XOR(AND(XOR(sub_83,sub_75),sub_73),sub_75)+sub_77+1518500249);\nsub_85:ROTATE(sub_73,2);\nsub_86:(OPAQUE+ROTATE(sub_84,27)+XOR(AND(XOR(sub_85,sub_83),sub_82),sub_83)+sub_75+1518500249);\nsub_87:ROTATE(sub_82,2);\nsub_88:(OPAQUE+ROTATE(sub_86,27)+XOR(AND(XOR(sub_87,sub_85),sub_84),sub_85)+sub_83+1518500249);\nsub_89:ROTATE(sub_84,2);\nsub_90:(OPAQUE+ROTATE(sub_88,27)+XOR(AND(XOR(sub_89,sub_87),sub_86),sub_87)+sub_85+1518500249);\nsub_91:ROTATE(sub_90,2);\nsub_92:ROTATE(sub_88,2);\nsub_93:ROTATE(sub_86,2);\nsub_94:(OPAQUE+ROTATE(sub_90,27)+XOR(AND(XOR(sub_93,sub_89),sub_88),sub_89)+sub_87+1518500249);\nsub_95:(OPAQUE+ROTATE(sub_94,27)+XOR(AND(XOR(sub_92,sub_93),sub_90),sub_93)+sub_89+1518500249);\nsub_96:(OPAQUE+ROTATE(sub_95,27)+XOR(AND(XOR(sub_91,sub_92),sub_94),sub_92)+sub_93+1518500249);\nsub_97:ROTATE(sub_94,2);\nsub_98:(OPAQUE+ROTATE(sub_96,27)+XOR(AND(XOR(sub_97,sub_91),sub_95),sub_91)+sub_92+1518500249);\nsub_99:ROTATE(sub_95,2);\nsub_100:(OPAQUE+ROTATE(sub_98,27)+XOR(AND(XOR(sub_99,sub_97),sub_96),sub_97)+sub_91+1518500249);\nsub_101:ROTATE(sub_96,2);\nsub_102:(OPAQUE+ROTATE(sub_100,27)+XOR(AND(XOR(sub_101,sub_99),sub_98),sub_99)+sub_97+1518500249);\nsub_103:ROTATE(sub_98,2);\nsub_104:(OPAQUE+ROTATE(sub_102,27)+XOR(AND(XOR(sub_103,sub_101),sub_100),sub_101)+sub_99+1518500249);\nsub_105:ROTATE(sub_100,2);\nsub_106:(OPAQUE+ROTATE(sub_104,27)+XOR(AND(XOR(sub_105,sub_103),sub_102),sub_103)+sub_101+1518500249);\nsub_107:ROTATE(sub_102,2);\nsub_108:(OPAQUE+ROTATE(sub_106,27)+XOR(AND(XOR(sub_107,sub_105),sub_104),sub_105)+sub_103+1518500249);\nsub_109:ROTATE(sub_104,2);\nsub_110:(OPAQUE+ROTATE(sub_108,27)+XOR(AND(XOR(sub_109,sub_107),sub_106),sub_107)+sub_105+1518500249);\nsub_111:ROTATE(sub_106,2);\nsub_112:(OPAQUE+ROTATE(sub_110,27)+XOR(AND(XOR(sub_111,sub_109),sub_108),sub_109)+sub_107+1518500249);\nsub_113:ROTATE(sub_108,2);\nsub_114:(OPAQUE+ROTATE(sub_112,27)+XOR(AND(XOR(sub_113,sub_111),sub_110),sub_111)+sub_109+1518500249);\nsub_115:ROTATE(sub_110,2);\nsub_116:(OPAQUE+ROTATE(sub_114,27)+XOR(AND(XOR(sub_115,sub_113),sub_112),sub_113)+sub_111+1518500249);\nsub_117:ROTATE(sub_112,2);\nsub_118:(OPAQUE+ROTATE(sub_116,27)+XOR(AND(XOR(sub_117,sub_115),sub_114),sub_115)+sub_113+1518500249);\nsub_119:ROTATE(sub_114,2);\nsub_120:(OPAQUE+ROTATE(sub_118,27)+XOR(AND(XOR(sub_119,sub_117),sub_116),sub_117)+sub_115+1518500249);\nsub_121:ROTATE(sub_116,2);\nsub_122:(OPAQUE+ROTATE(sub_120,27)+XOR(sub_118,sub_121,sub_119)+sub_117+1859775393);\nsub_123:ROTATE(sub_118,2);\nsub_124:(OPAQUE+ROTATE(sub_122,27)+XOR(sub_120,sub_123,sub_121)+sub_119+1859775393);\nsub_125:ROTATE(sub_120,2);\nsub_126:(OPAQUE+ROTATE(sub_124,27)+XOR(sub_122,sub_125,sub_123)+sub_121+1859775393);\nsub_127:ROTATE(sub_122,2);\nsub_128:(OPAQUE+ROTATE(sub_126,27)+XOR(sub_124,sub_127,sub_125)+sub_123+1859775393);\nsub_129:ROTATE(sub_124,2);\nsub_130:(OPAQUE+ROTATE(sub_128,27)+XOR(sub_126,sub_129,sub_127)+sub_125+1859775393);\nsub_131:ROTATE(sub_126,2);\nsub_132:(OPAQUE+ROTATE(sub_130,27)+XOR(sub_128,sub_131,sub_129)+sub_127+1859775393);\nsub_133:ROTATE(sub_128,2);\nsub_134:(OPAQUE+ROTATE(sub_132,27)+XOR(sub_130,sub_133,sub_131)+sub_129+1859775393);\nsub_135:ROTATE(sub_130,2);\nsub_136:(OPAQUE+ROTATE(sub_134,27)+XOR(sub_132,sub_135,sub_133)+sub_131+1859775393);\nsub_137:ROTATE(sub_132,2);\nsub_138:(OPAQUE+ROTATE(sub_136,27)+XOR(sub_134,sub_137,sub_135)+sub_133+1859775393);\nsub_139:ROTATE(sub_134,2);\nsub_140:(OPAQUE+ROTATE(sub_138,27)+XOR(sub_136,sub_139,sub_137)+sub_135+1859775393);\nsub_141:ROTATE(sub_136,2);\nsub_142:(OPAQUE+ROTATE(sub_140,27)+XOR(sub_138,sub_141,sub_139)+sub_137+1859775393);\nsub_143:ROTATE(sub_138,2);\nsub_144:(OPAQUE+ROTATE(sub_142,27)+XOR(sub_140,sub_143,sub_141)+sub_139+1859775393);\nsub_145:ROTATE(sub_140,2);\nsub_146:(OPAQUE+ROTATE(sub_144,27)+XOR(sub_142,sub_145,sub_143)+sub_141+1859775393);\nsub_147:ROTATE(sub_142,2);\nsub_148:(sub_40+ROTATE(sub_146,27)+XOR(sub_144,sub_147,sub_145)+sub_143+1859775393);\nsub_149:ROTATE(sub_144,2);\nsub_150:(OPAQUE+ROTATE(sub_148,27)+XOR(sub_146,sub_149,sub_147)+sub_145+1859775393);\nsub_151:ROTATE(sub_146,2);\nsub_152:(sub_51+ROTATE(sub_150,27)+XOR(sub_148,sub_151,sub_149)+sub_147+1859775393);\nsub_153:ROTATE(sub_148,2);\nsub_154:(sub_45+ROTATE(sub_152,27)+XOR(sub_150,sub_153,sub_151)+sub_149+1859775393);\nsub_155:ROTATE(sub_150,2);\nsub_156:(OPAQUE+ROTATE(sub_154,27)+XOR(sub_152,sub_155,sub_153)+sub_151+1859775393);\nsub_157:ROTATE(sub_152,2);\nsub_158:(sub_52+ROTATE(sub_156,27)+XOR(sub_154,sub_157,sub_155)+sub_153+1859775393);\nsub_159:ROTATE(sub_154,2);\nsub_160:(sub_55+ROTATE(sub_158,27)+XOR(sub_156,sub_159,sub_157)+sub_155+1859775393);\nsub_161:ROTATE(sub_158,2);\nsub_162:ROTATE(sub_156,2);\nsub_163:(OR(AND(OR(sub_158,sub_162),sub_159),AND(sub_158,sub_162))+OPAQUE+ROTATE(sub_160,27)+sub_157+2400959708);\nsub_164:(OR(AND(OR(sub_160,sub_161),sub_162),AND(sub_160,sub_161))+sub_53+ROTATE(sub_163,27)+sub_159+2400959708);\nsub_165:ROTATE(XOR(sub_69,sub_53,sub_51,sub_40),31);\nsub_166:ROTATE(XOR(sub_70,sub_165,sub_66,sub_53),31);\nsub_167:ROTATE(XOR(sub_165,sub_54,sub_52,sub_45),31);\nsub_168:ROTATE(XOR(sub_166,sub_167,sub_69,sub_54),31);\nsub_169:ROTATE(XOR(sub_167,sub_56,sub_53,sub_55),31);\nsub_170:ROTATE(XOR(sub_168,sub_169,sub_165,sub_56),31);\nsub_171:ROTATE(XOR(sub_169,sub_59,sub_54,sub_58),31);\nsub_172:ROTATE(XOR(sub_170,sub_171,sub_167,sub_59),31);\nsub_173:ROTATE(XOR(sub_71,sub_166,sub_67,sub_165),31);\nsub_174:ROTATE(XOR(sub_171,sub_62,sub_56,sub_61),31);\nsub_175:ROTATE(XOR(sub_174,sub_65,sub_59,sub_64),31);\nsub_176:ROTATE(sub_163,2);\nsub_177:ROTATE(sub_160,2);\nsub_178:(OR(AND(OR(sub_163,sub_177),sub_161),AND(sub_163,sub_177))+sub_58+ROTATE(sub_164,27)+sub_162+2400959708);\nsub_179:(OR(AND(OR(sub_164,sub_176),sub_177),AND(sub_164,sub_176))+sub_66+ROTATE(sub_178,27)+sub_161+2400959708);\nsub_180:ROTATE(sub_178,2);\nsub_181:ROTATE(sub_164,2);\nsub_182:(OR(AND(OR(sub_178,sub_181),sub_176),AND(sub_178,sub_181))+sub_54+ROTATE(sub_179,27)+sub_177+2400959708);\nsub_183:(OR(AND(OR(sub_179,sub_180),sub_181),AND(sub_179,sub_180))+sub_61+ROTATE(sub_182,27)+sub_176+2400959708);\nsub_184:ROTATE(sub_182,2);\nsub_185:ROTATE(sub_179,2);\nsub_186:(OR(AND(OR(sub_182,sub_185),sub_180),AND(sub_182,sub_185))+sub_69+ROTATE(sub_183,27)+sub_181+2400959708);\nsub_187:(OR(AND(OR(sub_183,sub_184),sub_185),AND(sub_183,sub_184))+sub_56+ROTATE(sub_186,27)+sub_180+2400959708);\nsub_188:ROTATE(sub_186,2);\nsub_189:ROTATE(sub_183,2);\nsub_190:(OR(AND(OR(sub_186,sub_189),sub_184),AND(sub_186,sub_189))+sub_64+ROTATE(sub_187,27)+sub_185+2400959708);\nsub_191:(OR(AND(OR(sub_187,sub_188),sub_189),AND(sub_187,sub_188))+sub_165+ROTATE(sub_190,27)+sub_184+2400959708);\nsub_192:ROTATE(sub_190,2);\nsub_193:ROTATE(sub_187,2);\nsub_194:(OR(AND(OR(sub_190,sub_193),sub_188),AND(sub_190,sub_193))+sub_59+ROTATE(sub_191,27)+sub_189+2400959708);\nsub_195:(OR(AND(OR(sub_191,sub_192),sub_193),AND(sub_191,sub_192))+sub_67+ROTATE(sub_194,27)+sub_188+2400959708);\nsub_196:ROTATE(sub_194,2);\nsub_197:ROTATE(sub_191,2);\nsub_198:(OR(AND(OR(sub_194,sub_197),sub_192),AND(sub_194,sub_197))+sub_167+ROTATE(sub_195,27)+sub_193+2400959708);\nsub_199:(OR(AND(OR(sub_195,sub_196),sub_197),AND(sub_195,sub_196))+sub_62+ROTATE(sub_198,27)+sub_192+2400959708);\nsub_200:ROTATE(sub_198,2);\nsub_201:ROTATE(sub_195,2);\nsub_202:(OR(AND(OR(sub_198,sub_201),sub_196),AND(sub_198,sub_201))+sub_70+ROTATE(sub_199,27)+sub_197+2400959708);\nsub_203:(OR(AND(OR(sub_199,sub_200),sub_201),AND(sub_199,sub_200))+sub_169+ROTATE(sub_202,27)+sub_196+2400959708);\nsub_204:ROTATE(sub_202,2);\nsub_205:ROTATE(sub_199,2);\nsub_206:(OR(AND(OR(sub_202,sub_205),sub_200),AND(sub_202,sub_205))+sub_65+ROTATE(sub_203,27)+sub_201+2400959708);\nsub_207:(OR(AND(OR(sub_203,sub_204),sub_205),AND(sub_203,sub_204))+sub_166+ROTATE(sub_206,27)+sub_200+2400959708);\nsub_208:ROTATE(sub_206,2);\nsub_209:ROTATE(sub_203,2);\nsub_210:(OR(AND(OR(sub_206,sub_209),sub_204),AND(sub_206,sub_209))+sub_171+ROTATE(sub_207,27)+sub_205+2400959708);\nsub_211:(OR(AND(OR(sub_207,sub_208),sub_209),AND(sub_207,sub_208))+sub_68+ROTATE(sub_210,27)+sub_204+2400959708);\nsub_212:ROTATE(sub_207,2);\nsub_213:(sub_168+ROTATE(sub_211,27)+XOR(sub_210,sub_212,sub_208)+sub_209+3395469782);\nsub_214:ROTATE(sub_210,2);\nsub_215:(sub_174+ROTATE(sub_213,27)+XOR(sub_211,sub_214,sub_212)+sub_208+3395469782);\nsub_216:ROTATE(sub_211,2);\nsub_217:(sub_71+ROTATE(sub_215,27)+XOR(sub_213,sub_216,sub_214)+sub_212+3395469782);\nsub_218:ROTATE(sub_213,2);\nsub_219:(sub_170+ROTATE(sub_217,27)+XOR(sub_215,sub_218,sub_216)+sub_214+3395469782);\nsub_220:ROTATE(sub_215,2);\nsub_221:(sub_175+ROTATE(sub_219,27)+XOR(sub_217,sub_220,sub_218)+sub_216+3395469782);\nsub_222:ROTATE(sub_217,2);\nsub_223:(sub_173+ROTATE(sub_221,27)+XOR(sub_219,sub_222,sub_220)+sub_218+3395469782);\nsub_224:ROTATE(sub_219,2);\nsub_225:(sub_172+ROTATE(sub_223,27)+XOR(sub_221,sub_224,sub_222)+sub_220+3395469782);\nsub_226:ROTATE(XOR(sub_172,sub_174,sub_169,sub_62),31);\nsub_227:ROTATE(XOR(sub_226,sub_175,sub_171,sub_65),31);\nsub_228:ROTATE(XOR(sub_175,sub_68,sub_62,sub_67),31);\nsub_229:ROTATE(XOR(sub_227,sub_228,sub_174,sub_68),31);\nsub_230:ROTATE(sub_221,2);\nsub_231:(sub_228+ROTATE(sub_225,27)+XOR(sub_223,sub_230,sub_224)+sub_222+3395469782);\nsub_232:ROTATE(sub_231,2);\nsub_233:ROTATE(XOR(sub_228,sub_71,sub_65,sub_70),31);\nsub_234:ROTATE(XOR(sub_173,sub_168,sub_70,sub_167),31);\nsub_235:ROTATE(sub_223,2);\nsub_236:(sub_234+ROTATE(sub_231,27)+XOR(sub_225,sub_235,sub_230)+sub_224+3395469782);\nsub_237:ROTATE(sub_225,2);\nsub_238:(sub_226+ROTATE(sub_236,27)+XOR(sub_231,sub_237,sub_235)+sub_230+3395469782);\nsub_239:(sub_233+ROTATE(sub_238,27)+XOR(sub_236,sub_232,sub_237)+sub_235+3395469782);\nsub_240:ROTATE(XOR(sub_233,sub_173,sub_68,sub_166),31);\nsub_241:ROTATE(XOR(sub_234,sub_170,sub_166,sub_169),31);\nsub_242:ROTATE(sub_236,2);\nsub_243:(sub_241+ROTATE(sub_239,27)+XOR(sub_238,sub_242,sub_232)+sub_237+3395469782);\nsub_244:ROTATE(sub_238,2);\nsub_245:(sub_227+ROTATE(sub_243,27)+XOR(sub_239,sub_244,sub_242)+sub_232+3395469782);\nsub_246:ROTATE(sub_239,2);\nsub_247:(sub_240+ROTATE(sub_245,27)+XOR(sub_243,sub_246,sub_244)+sub_242+3395469782);\nsub_248:ROTATE(sub_245,2);\nsub_249:ROTATE(sub_243,2);\nsub_250:ROTATE(sub_247,2);\nsub_251:ROTATE(XOR(sub_241,sub_172,sub_168,sub_171),31);\nsub_252:(sub_251+ROTATE(sub_247,27)+XOR(sub_245,sub_249,sub_246)+sub_244+3395469782);\nsub_253:(sub_229+ROTATE(sub_252,27)+XOR(sub_247,sub_248,sub_249)+sub_246+3395469782);\nsub_254:ROTATE(sub_253,2);\nsub_255:ROTATE(XOR(sub_240,sub_234,sub_71,sub_168),31);\nsub_256:ROTATE(XOR(sub_229,sub_233,sub_175,sub_71),31);\nsub_257:(sub_255+ROTATE(sub_253,27)+XOR(sub_252,sub_250,sub_248)+sub_249+3395469782);\nsub_258:ROTATE(sub_252,2);\nsub_259:(ROTATE(XOR(sub_251,sub_226,sub_170,sub_174),31)+ROTATE(sub_257,27)+XOR(sub_253,sub_258,sub_250)+sub_248+3395469782);\nsub_260:ROTATE(sub_259,27);\nsub_261:XOR(sub_257,sub_254,sub_258);\nsub_262:ROTATE(sub_257,2);\nsub_263:(sub_77+sub_262);\nsub_264:(sub_73+ROTATE(XOR(sub_255,sub_241,sub_173,sub_170),31)+ROTATE((sub_256+sub_260+sub_261+sub_250+3395469782),27)+XOR(sub_259,sub_262,sub_254)+sub_258+3395469782);\nsub_265:(sub_81+sub_254);\nsub_266:(sub_75+ROTATE(sub_259,2));\nsub_267:(sub_79+sub_256+sub_260+sub_261+sub_250+3395469782);\n\n```\n\n\n\n### 测试\n\nlibcrypto.so.1.1(openssl)\n\n其中和sha1有关的函数如下\n\n![image-20220223192555863](sha1.assets/image-20220223192555863.png)\n\n利用where's crypto分析\n\n![image-20220223191837393](sha1.assets/image-20220223191837393.png)\n\n反汇编SHA1_Update,主要还是调用了sha1_block_data_order\n\n![image-20220223200517936](sha1.assets/image-20220223200517936.png)\n\nmd5_block_data_order反汇编后\n\n![image-20220223200537067](sha1.assets/image-20220223200537067.png)\n\n与signature中对应关系如下\n\n![image-20220223213829056](sha1.assets/image-20220223213829056.png)\n\n其余均类似\n\n\n\n`openssl中相关函数源码通过perl生成汇编代码`\n","slug":"sha1","published":1,"updated":"2022-02-23T16:00:54.000Z","layout":"post","photos":[],"link":"","_id":"cletwjohz001bri3sc0oh7ltx","content":"<h2 id=\"sha1\">sha1</h2>\n<p>与md5类似，差异用<code>标注</code></p>\n<h3 id=\"算法-4\">算法</h3>\n<ul>\n<li>输入：任意长的消息，512 比特长的分组。<code>原始报文长度不能超过2的64次方</code></li>\n<li>输出：<code>160</code> 比特的消息摘要</li>\n</ul>\n<p>整体流程如下：</p>\n<ul>\n<li>首先填充原始消息使得对512求余的结果等于448，然后64位记录其长度。</li>\n<li>512bit一组分为n组。每组中32bit为一段，分为16段</li>\n<li><code>将上述16段扩充到80段</code></li>\n<li>对每一组，循环4轮运算，得到新的A,B,C,D,E作为下一组的初始值</li>\n<li>最后得到的A,B,C,D,E加上第n组原来A,B,C,D,E的值（即计算前的值）</li>\n<li>按照地址的顺序从低到高打印对应的A,B,C,D,E值，就是所求的sha1值。</li>\n</ul>\n<h4 id=\"填充-2\">填充</h4>\n<p>如果输入信息的长度(bit)对512求余的结果不等于448，就需要填充使得对512求余的结果等于448。填充的方法是填充一个1和n个0。填充完后，信息的长度就为N*512+448(bit)。</p>\n<p>然后用64位来存储填充前信息长度。这64位加在第一步结果的后面，这样信息长度就变为N*512+448+64=(N+1)*512位</p>\n<p>比如，需要加密消息&quot;gnubd&quot;，最后被填充为</p>\n<p><strong>小端字节序存储</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">67 6E 75 62 64 80 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 </span><br></pre></td></tr></table></figure>\n<p>最后64位（8字节)为0x28（40），消息内容为40位（5字节）。</p>\n<h4 id=\"数据处理-2\">数据处理</h4>\n<p>要使A,B,C,D,<code>E</code>在内存中的显示情况：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A = <span class=\"number\">0x01234567</span></span><br><span class=\"line\">B = <span class=\"number\">0x89ABCDEF</span></span><br><span class=\"line\">C = <span class=\"number\">0xFEDCBA89</span></span><br><span class=\"line\">D = <span class=\"number\">0x76543210</span></span><br><span class=\"line\">E = <span class=\"number\">0xF0E1D2C3</span></span><br></pre></td></tr></table></figure>\n<p>程序定义应为</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A = <span class=\"number\">0x67452301</span>;</span><br><span class=\"line\">B = <span class=\"number\">0xEFCDAB89</span>;</span><br><span class=\"line\">C = <span class=\"number\">0x98BADCFE</span>;</span><br><span class=\"line\">D = <span class=\"number\">0x10325476</span>;</span><br><span class=\"line\">E = <span class=\"number\">0xC3D2E1F0</span>;</span><br></pre></td></tr></table></figure>\n<p>每512位（64字节）为1段可以分成n段，（n大于等于1），对于每一段信息（512位，64字节）又划分成16小段（每段32位，4个字节，用M表示）</p>\n<p><code>将16段Mt(0-15)扩充到80段Wt(0-79)：</code></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>W</mi><mi>t</mi><mo>=</mo><mi>M</mi><mi>t</mi><mo separator=\"true\">,</mo><mtext>当</mtext><mn>0</mn><mo>≤</mo><mi>t</mi><mo>≤</mo><mn>15</mn><mspace linebreak=\"newline\"></mspace><mi>W</mi><mi>t</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi>W</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo>−</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mo>⊕</mo><mi>W</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo>−</mo><mn>8</mn><mo stretchy=\"false\">)</mo><mo>⊕</mo><mi>W</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo>−</mo><mn>14</mn><mo stretchy=\"false\">)</mo><mo>⊕</mo><mi>W</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo>−</mo><mn>16</mn><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mo>&lt;</mo><mo>&lt;</mo><mn>1</mn><mo separator=\"true\">,</mo><mtext>当</mtext><mn>16</mn><mo>≤</mo><mi>t</mi><mo>≤</mo><mn>79</mn></mrow><annotation encoding=\"application/x-tex\">W t = M t , 当0≤t≤15\n\\\\ W t = ( W(t-3) ⊕ W(t-8)⊕ W(t-14)⊕ W(t-16 ) &lt;&lt;&lt; 1, 当16≤t≤79\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Mt</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord cjk_fallback\">当</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">15</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">8</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">14</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">16</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;&lt;&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord cjk_fallback\">当</span><span class=\"mord\">16</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">79</span></span></span></span></span></p>\n<p>SHA1的4轮运算，每轮包括20个步骤，共80个步骤使用同一个操作程序</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>A</mi><mo separator=\"true\">,</mo><mi>B</mi><mo separator=\"true\">,</mo><mi>C</mi><mo separator=\"true\">,</mo><mi>D</mi><mo separator=\"true\">,</mo><mi>E</mi><mo>←</mo><mo stretchy=\"false\">[</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo>&lt;</mo><mo>&lt;</mo><mo>&lt;</mo><mn>5</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>B</mi><mo separator=\"true\">,</mo><mi>C</mi><mo separator=\"true\">,</mo><mi>D</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>E</mi><mo>+</mo><mi>W</mi><mi>t</mi><mo>+</mo><mi>K</mi><mi>t</mi><mo stretchy=\"false\">]</mo><mo separator=\"true\">,</mo><mi>A</mi><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi>B</mi><mo>&lt;</mo><mo>&lt;</mo><mo>&lt;</mo><mn>30</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>C</mi><mo separator=\"true\">,</mo><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">A,B,C,D,E←[(A&lt;&lt;&lt;5)+ ft(B,C,D)+E+Wt+Kt],A,(B&lt;&lt;&lt;30),C,D\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">←</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;&lt;&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">5</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">]</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;&lt;&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">30</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span></span></p>\n<p>其中 ft(B,C,D)为逻辑函数，Wt为子明文分组W[t]，Kt为固定常数。操作表示具体含义如下</p>\n<ul>\n<li>将[(A&lt;&lt;&lt;5)+ ft(B,C,D)+E+Wt+Kt]的结果赋值给变量A</li>\n<li>将A的初始值赋值给B</li>\n<li>将B初始值循环左移30位赋值给</li>\n<li>将C初始值赋给D</li>\n<li>将D初始值赋给E</li>\n</ul>\n<p>四轮运算的逻辑函数如下表所示</p>\n<table>\n<thead>\n<tr>\n<th>轮次</th>\n<th>步骤</th>\n<th>函数定义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>0≤t≤19</td>\n<td>ft(B,C,D)=(B&amp;C)|(~B&amp;D)</td>\n</tr>\n<tr>\n<td>2</td>\n<td>20≤t≤39</td>\n<td>ft(B,C,D)=B⊕C⊕D</td>\n</tr>\n<tr>\n<td>3</td>\n<td>40≤t≤59</td>\n<td>ft(B,C,D)=(B&amp;C)|(B&amp;D)|(C&amp;D)</td>\n</tr>\n<tr>\n<td>4</td>\n<td>60≤t≤79</td>\n<td>ft(B,C,D)=B⊕C⊕D</td>\n</tr>\n</tbody>\n</table>\n<p>固定常数Ki的取值如下表</p>\n<table>\n<thead>\n<tr>\n<th>轮</th>\n<th>步骤</th>\n<th>函数定义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>0≤t≤19</td>\n<td><em>K</em>t=5A827999</td>\n</tr>\n<tr>\n<td>2</td>\n<td>20≤t≤39</td>\n<td><em>K</em>t=6ED9EBA1</td>\n</tr>\n<tr>\n<td>3</td>\n<td>40≤t≤59</td>\n<td><em>K</em>t=8F188CDC</td>\n</tr>\n<tr>\n<td>4</td>\n<td>60≤t≤79</td>\n<td><em>K</em>t=CA62C1D6</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"例子-3\">例子</h5>\n<p>假设W[1]=0x12345678，此时变量的值分别为A=0x67452301、B=0xEFCDAB89、C=0x98BADCFE、D=0x10325476、E=0xC3D2E1F0</p>\n<p>那么第1轮第1步的运算过程如下。</p>\n<ol>\n<li>\n<p>将链接变量A循环左移5位，得到的结果为：0xE8A4602C。</p>\n</li>\n<li>\n<p>将B，C，D经过相应的逻辑函数：</p>\n</li>\n</ol>\n<p>(B&amp;C)|(~B&amp;D)=(0xEFCDAB89&amp;0x98BADCFE)|(~0xEFCDAB89&amp;0x10325476)=0x98BADCFE</p>\n<ol start=\"3\">\n<li>将第1步，第2步的结果与E，W[1]，和K[1]相加得：</li>\n</ol>\n<p>0xE8A4602C+0x98BADCFE+0xC3D2E1F0+0x12345678+0x5A827999=0xB1E8EF2B</p>\n<ol start=\"4\">\n<li>\n<p>将B循环左移30位得：(B&lt;&lt;&lt;30)=0x7BF36AE2。</p>\n</li>\n<li>\n<p>将第3步结果赋值给A，A（这里是指A的原始值）赋值给B，步骤4的结果赋值给C，C的原始值赋值给D，D的原始值赋值给E。</p>\n</li>\n<li>\n<p>最后得到第1轮第1步的结果：</p>\n</li>\n</ol>\n<p>A = 0xB1E8EF2B</p>\n<p>B = 0x67452301</p>\n<p>C = 0x7BF36AE2</p>\n<p>D = 0x98BADCFE</p>\n<p>E = 0x10325476</p>\n<p>按照这种方法，将80个步骤进行完毕。</p>\n<p>第四轮最后一个步骤的A，B，C，D，E输出，将分别与原始值A′，B′，C′，D′，E′中的数值求和运算。其结果将作为输入成为下一个512位明文分组的A，B，C，D，E，当最后一个明文分组计算完成以后，A，B，C，D，E中的数据就是最后散列函数值。</p>\n<h3 id=\"signature-6\">signature</h3>\n<p>DSL定义如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IDENTIFIER SHA1</span><br><span class=\"line\"></span><br><span class=\"line\">sub_40:OPAQUE;</span><br><span class=\"line\">sub_45:OPAQUE;</span><br><span class=\"line\">sub_51:OPAQUE;</span><br><span class=\"line\">sub_52:OPAQUE;</span><br><span class=\"line\">sub_53:OPAQUE;</span><br><span class=\"line\">sub_54:OPAQUE;</span><br><span class=\"line\">sub_55:OPAQUE;</span><br><span class=\"line\">sub_56:OPAQUE;</span><br><span class=\"line\">sub_58:OPAQUE;</span><br><span class=\"line\">sub_59:OPAQUE;</span><br><span class=\"line\">sub_61:OPAQUE;</span><br><span class=\"line\">sub_62:OPAQUE;</span><br><span class=\"line\">sub_64:OPAQUE;</span><br><span class=\"line\">sub_65:OPAQUE;</span><br><span class=\"line\">sub_66:OPAQUE;</span><br><span class=\"line\">sub_67:OPAQUE;</span><br><span class=\"line\">sub_68:OPAQUE;</span><br><span class=\"line\">sub_69:OPAQUE;</span><br><span class=\"line\">sub_70:OPAQUE;</span><br><span class=\"line\">sub_71:OPAQUE;</span><br><span class=\"line\">sub_73:OPAQUE;</span><br><span class=\"line\">sub_75:OPAQUE;</span><br><span class=\"line\">sub_77:OPAQUE;</span><br><span class=\"line\">sub_79:OPAQUE;</span><br><span class=\"line\">sub_81:OPAQUE;</span><br><span class=\"line\">sub_82:(OPAQUE+ROTATE(sub_73,27)+XOR(AND(XOR(sub_75,sub_77),sub_79),sub_77)+sub_81+1518500249);</span><br><span class=\"line\">sub_83:ROTATE(sub_79,2);</span><br><span class=\"line\">sub_84:(OPAQUE+ROTATE(sub_82,27)+XOR(AND(XOR(sub_83,sub_75),sub_73),sub_75)+sub_77+1518500249);</span><br><span class=\"line\">sub_85:ROTATE(sub_73,2);</span><br><span class=\"line\">sub_86:(OPAQUE+ROTATE(sub_84,27)+XOR(AND(XOR(sub_85,sub_83),sub_82),sub_83)+sub_75+1518500249);</span><br><span class=\"line\">sub_87:ROTATE(sub_82,2);</span><br><span class=\"line\">sub_88:(OPAQUE+ROTATE(sub_86,27)+XOR(AND(XOR(sub_87,sub_85),sub_84),sub_85)+sub_83+1518500249);</span><br><span class=\"line\">sub_89:ROTATE(sub_84,2);</span><br><span class=\"line\">sub_90:(OPAQUE+ROTATE(sub_88,27)+XOR(AND(XOR(sub_89,sub_87),sub_86),sub_87)+sub_85+1518500249);</span><br><span class=\"line\">sub_91:ROTATE(sub_90,2);</span><br><span class=\"line\">sub_92:ROTATE(sub_88,2);</span><br><span class=\"line\">sub_93:ROTATE(sub_86,2);</span><br><span class=\"line\">sub_94:(OPAQUE+ROTATE(sub_90,27)+XOR(AND(XOR(sub_93,sub_89),sub_88),sub_89)+sub_87+1518500249);</span><br><span class=\"line\">sub_95:(OPAQUE+ROTATE(sub_94,27)+XOR(AND(XOR(sub_92,sub_93),sub_90),sub_93)+sub_89+1518500249);</span><br><span class=\"line\">sub_96:(OPAQUE+ROTATE(sub_95,27)+XOR(AND(XOR(sub_91,sub_92),sub_94),sub_92)+sub_93+1518500249);</span><br><span class=\"line\">sub_97:ROTATE(sub_94,2);</span><br><span class=\"line\">sub_98:(OPAQUE+ROTATE(sub_96,27)+XOR(AND(XOR(sub_97,sub_91),sub_95),sub_91)+sub_92+1518500249);</span><br><span class=\"line\">sub_99:ROTATE(sub_95,2);</span><br><span class=\"line\">sub_100:(OPAQUE+ROTATE(sub_98,27)+XOR(AND(XOR(sub_99,sub_97),sub_96),sub_97)+sub_91+1518500249);</span><br><span class=\"line\">sub_101:ROTATE(sub_96,2);</span><br><span class=\"line\">sub_102:(OPAQUE+ROTATE(sub_100,27)+XOR(AND(XOR(sub_101,sub_99),sub_98),sub_99)+sub_97+1518500249);</span><br><span class=\"line\">sub_103:ROTATE(sub_98,2);</span><br><span class=\"line\">sub_104:(OPAQUE+ROTATE(sub_102,27)+XOR(AND(XOR(sub_103,sub_101),sub_100),sub_101)+sub_99+1518500249);</span><br><span class=\"line\">sub_105:ROTATE(sub_100,2);</span><br><span class=\"line\">sub_106:(OPAQUE+ROTATE(sub_104,27)+XOR(AND(XOR(sub_105,sub_103),sub_102),sub_103)+sub_101+1518500249);</span><br><span class=\"line\">sub_107:ROTATE(sub_102,2);</span><br><span class=\"line\">sub_108:(OPAQUE+ROTATE(sub_106,27)+XOR(AND(XOR(sub_107,sub_105),sub_104),sub_105)+sub_103+1518500249);</span><br><span class=\"line\">sub_109:ROTATE(sub_104,2);</span><br><span class=\"line\">sub_110:(OPAQUE+ROTATE(sub_108,27)+XOR(AND(XOR(sub_109,sub_107),sub_106),sub_107)+sub_105+1518500249);</span><br><span class=\"line\">sub_111:ROTATE(sub_106,2);</span><br><span class=\"line\">sub_112:(OPAQUE+ROTATE(sub_110,27)+XOR(AND(XOR(sub_111,sub_109),sub_108),sub_109)+sub_107+1518500249);</span><br><span class=\"line\">sub_113:ROTATE(sub_108,2);</span><br><span class=\"line\">sub_114:(OPAQUE+ROTATE(sub_112,27)+XOR(AND(XOR(sub_113,sub_111),sub_110),sub_111)+sub_109+1518500249);</span><br><span class=\"line\">sub_115:ROTATE(sub_110,2);</span><br><span class=\"line\">sub_116:(OPAQUE+ROTATE(sub_114,27)+XOR(AND(XOR(sub_115,sub_113),sub_112),sub_113)+sub_111+1518500249);</span><br><span class=\"line\">sub_117:ROTATE(sub_112,2);</span><br><span class=\"line\">sub_118:(OPAQUE+ROTATE(sub_116,27)+XOR(AND(XOR(sub_117,sub_115),sub_114),sub_115)+sub_113+1518500249);</span><br><span class=\"line\">sub_119:ROTATE(sub_114,2);</span><br><span class=\"line\">sub_120:(OPAQUE+ROTATE(sub_118,27)+XOR(AND(XOR(sub_119,sub_117),sub_116),sub_117)+sub_115+1518500249);</span><br><span class=\"line\">sub_121:ROTATE(sub_116,2);</span><br><span class=\"line\">sub_122:(OPAQUE+ROTATE(sub_120,27)+XOR(sub_118,sub_121,sub_119)+sub_117+1859775393);</span><br><span class=\"line\">sub_123:ROTATE(sub_118,2);</span><br><span class=\"line\">sub_124:(OPAQUE+ROTATE(sub_122,27)+XOR(sub_120,sub_123,sub_121)+sub_119+1859775393);</span><br><span class=\"line\">sub_125:ROTATE(sub_120,2);</span><br><span class=\"line\">sub_126:(OPAQUE+ROTATE(sub_124,27)+XOR(sub_122,sub_125,sub_123)+sub_121+1859775393);</span><br><span class=\"line\">sub_127:ROTATE(sub_122,2);</span><br><span class=\"line\">sub_128:(OPAQUE+ROTATE(sub_126,27)+XOR(sub_124,sub_127,sub_125)+sub_123+1859775393);</span><br><span class=\"line\">sub_129:ROTATE(sub_124,2);</span><br><span class=\"line\">sub_130:(OPAQUE+ROTATE(sub_128,27)+XOR(sub_126,sub_129,sub_127)+sub_125+1859775393);</span><br><span class=\"line\">sub_131:ROTATE(sub_126,2);</span><br><span class=\"line\">sub_132:(OPAQUE+ROTATE(sub_130,27)+XOR(sub_128,sub_131,sub_129)+sub_127+1859775393);</span><br><span class=\"line\">sub_133:ROTATE(sub_128,2);</span><br><span class=\"line\">sub_134:(OPAQUE+ROTATE(sub_132,27)+XOR(sub_130,sub_133,sub_131)+sub_129+1859775393);</span><br><span class=\"line\">sub_135:ROTATE(sub_130,2);</span><br><span class=\"line\">sub_136:(OPAQUE+ROTATE(sub_134,27)+XOR(sub_132,sub_135,sub_133)+sub_131+1859775393);</span><br><span class=\"line\">sub_137:ROTATE(sub_132,2);</span><br><span class=\"line\">sub_138:(OPAQUE+ROTATE(sub_136,27)+XOR(sub_134,sub_137,sub_135)+sub_133+1859775393);</span><br><span class=\"line\">sub_139:ROTATE(sub_134,2);</span><br><span class=\"line\">sub_140:(OPAQUE+ROTATE(sub_138,27)+XOR(sub_136,sub_139,sub_137)+sub_135+1859775393);</span><br><span class=\"line\">sub_141:ROTATE(sub_136,2);</span><br><span class=\"line\">sub_142:(OPAQUE+ROTATE(sub_140,27)+XOR(sub_138,sub_141,sub_139)+sub_137+1859775393);</span><br><span class=\"line\">sub_143:ROTATE(sub_138,2);</span><br><span class=\"line\">sub_144:(OPAQUE+ROTATE(sub_142,27)+XOR(sub_140,sub_143,sub_141)+sub_139+1859775393);</span><br><span class=\"line\">sub_145:ROTATE(sub_140,2);</span><br><span class=\"line\">sub_146:(OPAQUE+ROTATE(sub_144,27)+XOR(sub_142,sub_145,sub_143)+sub_141+1859775393);</span><br><span class=\"line\">sub_147:ROTATE(sub_142,2);</span><br><span class=\"line\">sub_148:(sub_40+ROTATE(sub_146,27)+XOR(sub_144,sub_147,sub_145)+sub_143+1859775393);</span><br><span class=\"line\">sub_149:ROTATE(sub_144,2);</span><br><span class=\"line\">sub_150:(OPAQUE+ROTATE(sub_148,27)+XOR(sub_146,sub_149,sub_147)+sub_145+1859775393);</span><br><span class=\"line\">sub_151:ROTATE(sub_146,2);</span><br><span class=\"line\">sub_152:(sub_51+ROTATE(sub_150,27)+XOR(sub_148,sub_151,sub_149)+sub_147+1859775393);</span><br><span class=\"line\">sub_153:ROTATE(sub_148,2);</span><br><span class=\"line\">sub_154:(sub_45+ROTATE(sub_152,27)+XOR(sub_150,sub_153,sub_151)+sub_149+1859775393);</span><br><span class=\"line\">sub_155:ROTATE(sub_150,2);</span><br><span class=\"line\">sub_156:(OPAQUE+ROTATE(sub_154,27)+XOR(sub_152,sub_155,sub_153)+sub_151+1859775393);</span><br><span class=\"line\">sub_157:ROTATE(sub_152,2);</span><br><span class=\"line\">sub_158:(sub_52+ROTATE(sub_156,27)+XOR(sub_154,sub_157,sub_155)+sub_153+1859775393);</span><br><span class=\"line\">sub_159:ROTATE(sub_154,2);</span><br><span class=\"line\">sub_160:(sub_55+ROTATE(sub_158,27)+XOR(sub_156,sub_159,sub_157)+sub_155+1859775393);</span><br><span class=\"line\">sub_161:ROTATE(sub_158,2);</span><br><span class=\"line\">sub_162:ROTATE(sub_156,2);</span><br><span class=\"line\">sub_163:(OR(AND(OR(sub_158,sub_162),sub_159),AND(sub_158,sub_162))+OPAQUE+ROTATE(sub_160,27)+sub_157+2400959708);</span><br><span class=\"line\">sub_164:(OR(AND(OR(sub_160,sub_161),sub_162),AND(sub_160,sub_161))+sub_53+ROTATE(sub_163,27)+sub_159+2400959708);</span><br><span class=\"line\">sub_165:ROTATE(XOR(sub_69,sub_53,sub_51,sub_40),31);</span><br><span class=\"line\">sub_166:ROTATE(XOR(sub_70,sub_165,sub_66,sub_53),31);</span><br><span class=\"line\">sub_167:ROTATE(XOR(sub_165,sub_54,sub_52,sub_45),31);</span><br><span class=\"line\">sub_168:ROTATE(XOR(sub_166,sub_167,sub_69,sub_54),31);</span><br><span class=\"line\">sub_169:ROTATE(XOR(sub_167,sub_56,sub_53,sub_55),31);</span><br><span class=\"line\">sub_170:ROTATE(XOR(sub_168,sub_169,sub_165,sub_56),31);</span><br><span class=\"line\">sub_171:ROTATE(XOR(sub_169,sub_59,sub_54,sub_58),31);</span><br><span class=\"line\">sub_172:ROTATE(XOR(sub_170,sub_171,sub_167,sub_59),31);</span><br><span class=\"line\">sub_173:ROTATE(XOR(sub_71,sub_166,sub_67,sub_165),31);</span><br><span class=\"line\">sub_174:ROTATE(XOR(sub_171,sub_62,sub_56,sub_61),31);</span><br><span class=\"line\">sub_175:ROTATE(XOR(sub_174,sub_65,sub_59,sub_64),31);</span><br><span class=\"line\">sub_176:ROTATE(sub_163,2);</span><br><span class=\"line\">sub_177:ROTATE(sub_160,2);</span><br><span class=\"line\">sub_178:(OR(AND(OR(sub_163,sub_177),sub_161),AND(sub_163,sub_177))+sub_58+ROTATE(sub_164,27)+sub_162+2400959708);</span><br><span class=\"line\">sub_179:(OR(AND(OR(sub_164,sub_176),sub_177),AND(sub_164,sub_176))+sub_66+ROTATE(sub_178,27)+sub_161+2400959708);</span><br><span class=\"line\">sub_180:ROTATE(sub_178,2);</span><br><span class=\"line\">sub_181:ROTATE(sub_164,2);</span><br><span class=\"line\">sub_182:(OR(AND(OR(sub_178,sub_181),sub_176),AND(sub_178,sub_181))+sub_54+ROTATE(sub_179,27)+sub_177+2400959708);</span><br><span class=\"line\">sub_183:(OR(AND(OR(sub_179,sub_180),sub_181),AND(sub_179,sub_180))+sub_61+ROTATE(sub_182,27)+sub_176+2400959708);</span><br><span class=\"line\">sub_184:ROTATE(sub_182,2);</span><br><span class=\"line\">sub_185:ROTATE(sub_179,2);</span><br><span class=\"line\">sub_186:(OR(AND(OR(sub_182,sub_185),sub_180),AND(sub_182,sub_185))+sub_69+ROTATE(sub_183,27)+sub_181+2400959708);</span><br><span class=\"line\">sub_187:(OR(AND(OR(sub_183,sub_184),sub_185),AND(sub_183,sub_184))+sub_56+ROTATE(sub_186,27)+sub_180+2400959708);</span><br><span class=\"line\">sub_188:ROTATE(sub_186,2);</span><br><span class=\"line\">sub_189:ROTATE(sub_183,2);</span><br><span class=\"line\">sub_190:(OR(AND(OR(sub_186,sub_189),sub_184),AND(sub_186,sub_189))+sub_64+ROTATE(sub_187,27)+sub_185+2400959708);</span><br><span class=\"line\">sub_191:(OR(AND(OR(sub_187,sub_188),sub_189),AND(sub_187,sub_188))+sub_165+ROTATE(sub_190,27)+sub_184+2400959708);</span><br><span class=\"line\">sub_192:ROTATE(sub_190,2);</span><br><span class=\"line\">sub_193:ROTATE(sub_187,2);</span><br><span class=\"line\">sub_194:(OR(AND(OR(sub_190,sub_193),sub_188),AND(sub_190,sub_193))+sub_59+ROTATE(sub_191,27)+sub_189+2400959708);</span><br><span class=\"line\">sub_195:(OR(AND(OR(sub_191,sub_192),sub_193),AND(sub_191,sub_192))+sub_67+ROTATE(sub_194,27)+sub_188+2400959708);</span><br><span class=\"line\">sub_196:ROTATE(sub_194,2);</span><br><span class=\"line\">sub_197:ROTATE(sub_191,2);</span><br><span class=\"line\">sub_198:(OR(AND(OR(sub_194,sub_197),sub_192),AND(sub_194,sub_197))+sub_167+ROTATE(sub_195,27)+sub_193+2400959708);</span><br><span class=\"line\">sub_199:(OR(AND(OR(sub_195,sub_196),sub_197),AND(sub_195,sub_196))+sub_62+ROTATE(sub_198,27)+sub_192+2400959708);</span><br><span class=\"line\">sub_200:ROTATE(sub_198,2);</span><br><span class=\"line\">sub_201:ROTATE(sub_195,2);</span><br><span class=\"line\">sub_202:(OR(AND(OR(sub_198,sub_201),sub_196),AND(sub_198,sub_201))+sub_70+ROTATE(sub_199,27)+sub_197+2400959708);</span><br><span class=\"line\">sub_203:(OR(AND(OR(sub_199,sub_200),sub_201),AND(sub_199,sub_200))+sub_169+ROTATE(sub_202,27)+sub_196+2400959708);</span><br><span class=\"line\">sub_204:ROTATE(sub_202,2);</span><br><span class=\"line\">sub_205:ROTATE(sub_199,2);</span><br><span class=\"line\">sub_206:(OR(AND(OR(sub_202,sub_205),sub_200),AND(sub_202,sub_205))+sub_65+ROTATE(sub_203,27)+sub_201+2400959708);</span><br><span class=\"line\">sub_207:(OR(AND(OR(sub_203,sub_204),sub_205),AND(sub_203,sub_204))+sub_166+ROTATE(sub_206,27)+sub_200+2400959708);</span><br><span class=\"line\">sub_208:ROTATE(sub_206,2);</span><br><span class=\"line\">sub_209:ROTATE(sub_203,2);</span><br><span class=\"line\">sub_210:(OR(AND(OR(sub_206,sub_209),sub_204),AND(sub_206,sub_209))+sub_171+ROTATE(sub_207,27)+sub_205+2400959708);</span><br><span class=\"line\">sub_211:(OR(AND(OR(sub_207,sub_208),sub_209),AND(sub_207,sub_208))+sub_68+ROTATE(sub_210,27)+sub_204+2400959708);</span><br><span class=\"line\">sub_212:ROTATE(sub_207,2);</span><br><span class=\"line\">sub_213:(sub_168+ROTATE(sub_211,27)+XOR(sub_210,sub_212,sub_208)+sub_209+3395469782);</span><br><span class=\"line\">sub_214:ROTATE(sub_210,2);</span><br><span class=\"line\">sub_215:(sub_174+ROTATE(sub_213,27)+XOR(sub_211,sub_214,sub_212)+sub_208+3395469782);</span><br><span class=\"line\">sub_216:ROTATE(sub_211,2);</span><br><span class=\"line\">sub_217:(sub_71+ROTATE(sub_215,27)+XOR(sub_213,sub_216,sub_214)+sub_212+3395469782);</span><br><span class=\"line\">sub_218:ROTATE(sub_213,2);</span><br><span class=\"line\">sub_219:(sub_170+ROTATE(sub_217,27)+XOR(sub_215,sub_218,sub_216)+sub_214+3395469782);</span><br><span class=\"line\">sub_220:ROTATE(sub_215,2);</span><br><span class=\"line\">sub_221:(sub_175+ROTATE(sub_219,27)+XOR(sub_217,sub_220,sub_218)+sub_216+3395469782);</span><br><span class=\"line\">sub_222:ROTATE(sub_217,2);</span><br><span class=\"line\">sub_223:(sub_173+ROTATE(sub_221,27)+XOR(sub_219,sub_222,sub_220)+sub_218+3395469782);</span><br><span class=\"line\">sub_224:ROTATE(sub_219,2);</span><br><span class=\"line\">sub_225:(sub_172+ROTATE(sub_223,27)+XOR(sub_221,sub_224,sub_222)+sub_220+3395469782);</span><br><span class=\"line\">sub_226:ROTATE(XOR(sub_172,sub_174,sub_169,sub_62),31);</span><br><span class=\"line\">sub_227:ROTATE(XOR(sub_226,sub_175,sub_171,sub_65),31);</span><br><span class=\"line\">sub_228:ROTATE(XOR(sub_175,sub_68,sub_62,sub_67),31);</span><br><span class=\"line\">sub_229:ROTATE(XOR(sub_227,sub_228,sub_174,sub_68),31);</span><br><span class=\"line\">sub_230:ROTATE(sub_221,2);</span><br><span class=\"line\">sub_231:(sub_228+ROTATE(sub_225,27)+XOR(sub_223,sub_230,sub_224)+sub_222+3395469782);</span><br><span class=\"line\">sub_232:ROTATE(sub_231,2);</span><br><span class=\"line\">sub_233:ROTATE(XOR(sub_228,sub_71,sub_65,sub_70),31);</span><br><span class=\"line\">sub_234:ROTATE(XOR(sub_173,sub_168,sub_70,sub_167),31);</span><br><span class=\"line\">sub_235:ROTATE(sub_223,2);</span><br><span class=\"line\">sub_236:(sub_234+ROTATE(sub_231,27)+XOR(sub_225,sub_235,sub_230)+sub_224+3395469782);</span><br><span class=\"line\">sub_237:ROTATE(sub_225,2);</span><br><span class=\"line\">sub_238:(sub_226+ROTATE(sub_236,27)+XOR(sub_231,sub_237,sub_235)+sub_230+3395469782);</span><br><span class=\"line\">sub_239:(sub_233+ROTATE(sub_238,27)+XOR(sub_236,sub_232,sub_237)+sub_235+3395469782);</span><br><span class=\"line\">sub_240:ROTATE(XOR(sub_233,sub_173,sub_68,sub_166),31);</span><br><span class=\"line\">sub_241:ROTATE(XOR(sub_234,sub_170,sub_166,sub_169),31);</span><br><span class=\"line\">sub_242:ROTATE(sub_236,2);</span><br><span class=\"line\">sub_243:(sub_241+ROTATE(sub_239,27)+XOR(sub_238,sub_242,sub_232)+sub_237+3395469782);</span><br><span class=\"line\">sub_244:ROTATE(sub_238,2);</span><br><span class=\"line\">sub_245:(sub_227+ROTATE(sub_243,27)+XOR(sub_239,sub_244,sub_242)+sub_232+3395469782);</span><br><span class=\"line\">sub_246:ROTATE(sub_239,2);</span><br><span class=\"line\">sub_247:(sub_240+ROTATE(sub_245,27)+XOR(sub_243,sub_246,sub_244)+sub_242+3395469782);</span><br><span class=\"line\">sub_248:ROTATE(sub_245,2);</span><br><span class=\"line\">sub_249:ROTATE(sub_243,2);</span><br><span class=\"line\">sub_250:ROTATE(sub_247,2);</span><br><span class=\"line\">sub_251:ROTATE(XOR(sub_241,sub_172,sub_168,sub_171),31);</span><br><span class=\"line\">sub_252:(sub_251+ROTATE(sub_247,27)+XOR(sub_245,sub_249,sub_246)+sub_244+3395469782);</span><br><span class=\"line\">sub_253:(sub_229+ROTATE(sub_252,27)+XOR(sub_247,sub_248,sub_249)+sub_246+3395469782);</span><br><span class=\"line\">sub_254:ROTATE(sub_253,2);</span><br><span class=\"line\">sub_255:ROTATE(XOR(sub_240,sub_234,sub_71,sub_168),31);</span><br><span class=\"line\">sub_256:ROTATE(XOR(sub_229,sub_233,sub_175,sub_71),31);</span><br><span class=\"line\">sub_257:(sub_255+ROTATE(sub_253,27)+XOR(sub_252,sub_250,sub_248)+sub_249+3395469782);</span><br><span class=\"line\">sub_258:ROTATE(sub_252,2);</span><br><span class=\"line\">sub_259:(ROTATE(XOR(sub_251,sub_226,sub_170,sub_174),31)+ROTATE(sub_257,27)+XOR(sub_253,sub_258,sub_250)+sub_248+3395469782);</span><br><span class=\"line\">sub_260:ROTATE(sub_259,27);</span><br><span class=\"line\">sub_261:XOR(sub_257,sub_254,sub_258);</span><br><span class=\"line\">sub_262:ROTATE(sub_257,2);</span><br><span class=\"line\">sub_263:(sub_77+sub_262);</span><br><span class=\"line\">sub_264:(sub_73+ROTATE(XOR(sub_255,sub_241,sub_173,sub_170),31)+ROTATE((sub_256+sub_260+sub_261+sub_250+3395469782),27)+XOR(sub_259,sub_262,sub_254)+sub_258+3395469782);</span><br><span class=\"line\">sub_265:(sub_81+sub_254);</span><br><span class=\"line\">sub_266:(sub_75+ROTATE(sub_259,2));</span><br><span class=\"line\">sub_267:(sub_79+sub_256+sub_260+sub_261+sub_250+3395469782);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"测试-4\">测试</h3>\n<p>libcrypto.so.1.1(openssl)</p>\n<p>其中和sha1有关的函数如下</p>\n<p><img src=\"sha1.assets/image-20220223192555863.png\" alt=\"image-20220223192555863\"></p>\n<p>利用where’s crypto分析</p>\n<p><img src=\"sha1.assets/image-20220223191837393.png\" alt=\"image-20220223191837393\"></p>\n<p>反汇编SHA1_Update,主要还是调用了sha1_block_data_order</p>\n<p><img src=\"sha1.assets/image-20220223200517936.png\" alt=\"image-20220223200517936\"></p>\n<p>md5_block_data_order反汇编后</p>\n<p><img src=\"sha1.assets/image-20220223200537067.png\" alt=\"image-20220223200537067\"></p>\n<p>与signature中对应关系如下</p>\n<p><img src=\"sha1.assets/image-20220223213829056.png\" alt=\"image-20220223213829056\"></p>\n<p>其余均类似</p>\n<p><code>openssl中相关函数源码通过perl生成汇编代码</code></p>\n","site":{"data":{"about":{"class":{"class_name":"about","link_list":{"-1":{"name":"Scorpion","avatar":"/image/avatar.jpg","link":null,"descr":"�����ƹ������ë��̨��ɢ�򣬻�ѩ���������ݣ����ֲ�Ƭ����Ƭ�赸��Ƶ��ҵ����Ӱ���Ǻð�ȫ��"}}}},"link":{"class":{"class_name":"友情链接","link_list":{"-1":{"name":"M4tsuri","link":"https://M4tsuri.io","avatar":"/image/m4tsuri.jpg","descr":"pwn,blockchain"}}}}}},"excerpt":"","more":"<h2 id=\"sha1\">sha1</h2>\n<p>与md5类似，差异用<code>标注</code></p>\n<h3 id=\"算法-4\">算法</h3>\n<ul>\n<li>输入：任意长的消息，512 比特长的分组。<code>原始报文长度不能超过2的64次方</code></li>\n<li>输出：<code>160</code> 比特的消息摘要</li>\n</ul>\n<p>整体流程如下：</p>\n<ul>\n<li>首先填充原始消息使得对512求余的结果等于448，然后64位记录其长度。</li>\n<li>512bit一组分为n组。每组中32bit为一段，分为16段</li>\n<li><code>将上述16段扩充到80段</code></li>\n<li>对每一组，循环4轮运算，得到新的A,B,C,D,E作为下一组的初始值</li>\n<li>最后得到的A,B,C,D,E加上第n组原来A,B,C,D,E的值（即计算前的值）</li>\n<li>按照地址的顺序从低到高打印对应的A,B,C,D,E值，就是所求的sha1值。</li>\n</ul>\n<h4 id=\"填充-2\">填充</h4>\n<p>如果输入信息的长度(bit)对512求余的结果不等于448，就需要填充使得对512求余的结果等于448。填充的方法是填充一个1和n个0。填充完后，信息的长度就为N*512+448(bit)。</p>\n<p>然后用64位来存储填充前信息长度。这64位加在第一步结果的后面，这样信息长度就变为N*512+448+64=(N+1)*512位</p>\n<p>比如，需要加密消息&quot;gnubd&quot;，最后被填充为</p>\n<p><strong>小端字节序存储</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">67 6E 75 62 64 80 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 </span><br></pre></td></tr></table></figure>\n<p>最后64位（8字节)为0x28（40），消息内容为40位（5字节）。</p>\n<h4 id=\"数据处理-2\">数据处理</h4>\n<p>要使A,B,C,D,<code>E</code>在内存中的显示情况：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A = <span class=\"number\">0x01234567</span></span><br><span class=\"line\">B = <span class=\"number\">0x89ABCDEF</span></span><br><span class=\"line\">C = <span class=\"number\">0xFEDCBA89</span></span><br><span class=\"line\">D = <span class=\"number\">0x76543210</span></span><br><span class=\"line\">E = <span class=\"number\">0xF0E1D2C3</span></span><br></pre></td></tr></table></figure>\n<p>程序定义应为</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A = <span class=\"number\">0x67452301</span>;</span><br><span class=\"line\">B = <span class=\"number\">0xEFCDAB89</span>;</span><br><span class=\"line\">C = <span class=\"number\">0x98BADCFE</span>;</span><br><span class=\"line\">D = <span class=\"number\">0x10325476</span>;</span><br><span class=\"line\">E = <span class=\"number\">0xC3D2E1F0</span>;</span><br></pre></td></tr></table></figure>\n<p>每512位（64字节）为1段可以分成n段，（n大于等于1），对于每一段信息（512位，64字节）又划分成16小段（每段32位，4个字节，用M表示）</p>\n<p><code>将16段Mt(0-15)扩充到80段Wt(0-79)：</code></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>W</mi><mi>t</mi><mo>=</mo><mi>M</mi><mi>t</mi><mo separator=\"true\">,</mo><mtext>当</mtext><mn>0</mn><mo>≤</mo><mi>t</mi><mo>≤</mo><mn>15</mn><mspace linebreak=\"newline\"></mspace><mi>W</mi><mi>t</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi>W</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo>−</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mo>⊕</mo><mi>W</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo>−</mo><mn>8</mn><mo stretchy=\"false\">)</mo><mo>⊕</mo><mi>W</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo>−</mo><mn>14</mn><mo stretchy=\"false\">)</mo><mo>⊕</mo><mi>W</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo>−</mo><mn>16</mn><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mo>&lt;</mo><mo>&lt;</mo><mn>1</mn><mo separator=\"true\">,</mo><mtext>当</mtext><mn>16</mn><mo>≤</mo><mi>t</mi><mo>≤</mo><mn>79</mn></mrow><annotation encoding=\"application/x-tex\">W t = M t , 当0≤t≤15\n\\\\ W t = ( W(t-3) ⊕ W(t-8)⊕ W(t-14)⊕ W(t-16 ) &lt;&lt;&lt; 1, 当16≤t≤79\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Mt</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord cjk_fallback\">当</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">15</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">8</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">14</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">16</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;&lt;&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord cjk_fallback\">当</span><span class=\"mord\">16</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">79</span></span></span></span></span></p>\n<p>SHA1的4轮运算，每轮包括20个步骤，共80个步骤使用同一个操作程序</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>A</mi><mo separator=\"true\">,</mo><mi>B</mi><mo separator=\"true\">,</mo><mi>C</mi><mo separator=\"true\">,</mo><mi>D</mi><mo separator=\"true\">,</mo><mi>E</mi><mo>←</mo><mo stretchy=\"false\">[</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo>&lt;</mo><mo>&lt;</mo><mo>&lt;</mo><mn>5</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>B</mi><mo separator=\"true\">,</mo><mi>C</mi><mo separator=\"true\">,</mo><mi>D</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>E</mi><mo>+</mo><mi>W</mi><mi>t</mi><mo>+</mo><mi>K</mi><mi>t</mi><mo stretchy=\"false\">]</mo><mo separator=\"true\">,</mo><mi>A</mi><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi>B</mi><mo>&lt;</mo><mo>&lt;</mo><mo>&lt;</mo><mn>30</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>C</mi><mo separator=\"true\">,</mo><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">A,B,C,D,E←[(A&lt;&lt;&lt;5)+ ft(B,C,D)+E+Wt+Kt],A,(B&lt;&lt;&lt;30),C,D\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">←</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;&lt;&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">5</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">]</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;&lt;&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">30</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span></span></p>\n<p>其中 ft(B,C,D)为逻辑函数，Wt为子明文分组W[t]，Kt为固定常数。操作表示具体含义如下</p>\n<ul>\n<li>将[(A&lt;&lt;&lt;5)+ ft(B,C,D)+E+Wt+Kt]的结果赋值给变量A</li>\n<li>将A的初始值赋值给B</li>\n<li>将B初始值循环左移30位赋值给</li>\n<li>将C初始值赋给D</li>\n<li>将D初始值赋给E</li>\n</ul>\n<p>四轮运算的逻辑函数如下表所示</p>\n<table>\n<thead>\n<tr>\n<th>轮次</th>\n<th>步骤</th>\n<th>函数定义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>0≤t≤19</td>\n<td>ft(B,C,D)=(B&amp;C)|(~B&amp;D)</td>\n</tr>\n<tr>\n<td>2</td>\n<td>20≤t≤39</td>\n<td>ft(B,C,D)=B⊕C⊕D</td>\n</tr>\n<tr>\n<td>3</td>\n<td>40≤t≤59</td>\n<td>ft(B,C,D)=(B&amp;C)|(B&amp;D)|(C&amp;D)</td>\n</tr>\n<tr>\n<td>4</td>\n<td>60≤t≤79</td>\n<td>ft(B,C,D)=B⊕C⊕D</td>\n</tr>\n</tbody>\n</table>\n<p>固定常数Ki的取值如下表</p>\n<table>\n<thead>\n<tr>\n<th>轮</th>\n<th>步骤</th>\n<th>函数定义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>0≤t≤19</td>\n<td><em>K</em>t=5A827999</td>\n</tr>\n<tr>\n<td>2</td>\n<td>20≤t≤39</td>\n<td><em>K</em>t=6ED9EBA1</td>\n</tr>\n<tr>\n<td>3</td>\n<td>40≤t≤59</td>\n<td><em>K</em>t=8F188CDC</td>\n</tr>\n<tr>\n<td>4</td>\n<td>60≤t≤79</td>\n<td><em>K</em>t=CA62C1D6</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"例子-3\">例子</h5>\n<p>假设W[1]=0x12345678，此时变量的值分别为A=0x67452301、B=0xEFCDAB89、C=0x98BADCFE、D=0x10325476、E=0xC3D2E1F0</p>\n<p>那么第1轮第1步的运算过程如下。</p>\n<ol>\n<li>\n<p>将链接变量A循环左移5位，得到的结果为：0xE8A4602C。</p>\n</li>\n<li>\n<p>将B，C，D经过相应的逻辑函数：</p>\n</li>\n</ol>\n<p>(B&amp;C)|(~B&amp;D)=(0xEFCDAB89&amp;0x98BADCFE)|(~0xEFCDAB89&amp;0x10325476)=0x98BADCFE</p>\n<ol start=\"3\">\n<li>将第1步，第2步的结果与E，W[1]，和K[1]相加得：</li>\n</ol>\n<p>0xE8A4602C+0x98BADCFE+0xC3D2E1F0+0x12345678+0x5A827999=0xB1E8EF2B</p>\n<ol start=\"4\">\n<li>\n<p>将B循环左移30位得：(B&lt;&lt;&lt;30)=0x7BF36AE2。</p>\n</li>\n<li>\n<p>将第3步结果赋值给A，A（这里是指A的原始值）赋值给B，步骤4的结果赋值给C，C的原始值赋值给D，D的原始值赋值给E。</p>\n</li>\n<li>\n<p>最后得到第1轮第1步的结果：</p>\n</li>\n</ol>\n<p>A = 0xB1E8EF2B</p>\n<p>B = 0x67452301</p>\n<p>C = 0x7BF36AE2</p>\n<p>D = 0x98BADCFE</p>\n<p>E = 0x10325476</p>\n<p>按照这种方法，将80个步骤进行完毕。</p>\n<p>第四轮最后一个步骤的A，B，C，D，E输出，将分别与原始值A′，B′，C′，D′，E′中的数值求和运算。其结果将作为输入成为下一个512位明文分组的A，B，C，D，E，当最后一个明文分组计算完成以后，A，B，C，D，E中的数据就是最后散列函数值。</p>\n<h3 id=\"signature-6\">signature</h3>\n<p>DSL定义如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IDENTIFIER SHA1</span><br><span class=\"line\"></span><br><span class=\"line\">sub_40:OPAQUE;</span><br><span class=\"line\">sub_45:OPAQUE;</span><br><span class=\"line\">sub_51:OPAQUE;</span><br><span class=\"line\">sub_52:OPAQUE;</span><br><span class=\"line\">sub_53:OPAQUE;</span><br><span class=\"line\">sub_54:OPAQUE;</span><br><span class=\"line\">sub_55:OPAQUE;</span><br><span class=\"line\">sub_56:OPAQUE;</span><br><span class=\"line\">sub_58:OPAQUE;</span><br><span class=\"line\">sub_59:OPAQUE;</span><br><span class=\"line\">sub_61:OPAQUE;</span><br><span class=\"line\">sub_62:OPAQUE;</span><br><span class=\"line\">sub_64:OPAQUE;</span><br><span class=\"line\">sub_65:OPAQUE;</span><br><span class=\"line\">sub_66:OPAQUE;</span><br><span class=\"line\">sub_67:OPAQUE;</span><br><span class=\"line\">sub_68:OPAQUE;</span><br><span class=\"line\">sub_69:OPAQUE;</span><br><span class=\"line\">sub_70:OPAQUE;</span><br><span class=\"line\">sub_71:OPAQUE;</span><br><span class=\"line\">sub_73:OPAQUE;</span><br><span class=\"line\">sub_75:OPAQUE;</span><br><span class=\"line\">sub_77:OPAQUE;</span><br><span class=\"line\">sub_79:OPAQUE;</span><br><span class=\"line\">sub_81:OPAQUE;</span><br><span class=\"line\">sub_82:(OPAQUE+ROTATE(sub_73,27)+XOR(AND(XOR(sub_75,sub_77),sub_79),sub_77)+sub_81+1518500249);</span><br><span class=\"line\">sub_83:ROTATE(sub_79,2);</span><br><span class=\"line\">sub_84:(OPAQUE+ROTATE(sub_82,27)+XOR(AND(XOR(sub_83,sub_75),sub_73),sub_75)+sub_77+1518500249);</span><br><span class=\"line\">sub_85:ROTATE(sub_73,2);</span><br><span class=\"line\">sub_86:(OPAQUE+ROTATE(sub_84,27)+XOR(AND(XOR(sub_85,sub_83),sub_82),sub_83)+sub_75+1518500249);</span><br><span class=\"line\">sub_87:ROTATE(sub_82,2);</span><br><span class=\"line\">sub_88:(OPAQUE+ROTATE(sub_86,27)+XOR(AND(XOR(sub_87,sub_85),sub_84),sub_85)+sub_83+1518500249);</span><br><span class=\"line\">sub_89:ROTATE(sub_84,2);</span><br><span class=\"line\">sub_90:(OPAQUE+ROTATE(sub_88,27)+XOR(AND(XOR(sub_89,sub_87),sub_86),sub_87)+sub_85+1518500249);</span><br><span class=\"line\">sub_91:ROTATE(sub_90,2);</span><br><span class=\"line\">sub_92:ROTATE(sub_88,2);</span><br><span class=\"line\">sub_93:ROTATE(sub_86,2);</span><br><span class=\"line\">sub_94:(OPAQUE+ROTATE(sub_90,27)+XOR(AND(XOR(sub_93,sub_89),sub_88),sub_89)+sub_87+1518500249);</span><br><span class=\"line\">sub_95:(OPAQUE+ROTATE(sub_94,27)+XOR(AND(XOR(sub_92,sub_93),sub_90),sub_93)+sub_89+1518500249);</span><br><span class=\"line\">sub_96:(OPAQUE+ROTATE(sub_95,27)+XOR(AND(XOR(sub_91,sub_92),sub_94),sub_92)+sub_93+1518500249);</span><br><span class=\"line\">sub_97:ROTATE(sub_94,2);</span><br><span class=\"line\">sub_98:(OPAQUE+ROTATE(sub_96,27)+XOR(AND(XOR(sub_97,sub_91),sub_95),sub_91)+sub_92+1518500249);</span><br><span class=\"line\">sub_99:ROTATE(sub_95,2);</span><br><span class=\"line\">sub_100:(OPAQUE+ROTATE(sub_98,27)+XOR(AND(XOR(sub_99,sub_97),sub_96),sub_97)+sub_91+1518500249);</span><br><span class=\"line\">sub_101:ROTATE(sub_96,2);</span><br><span class=\"line\">sub_102:(OPAQUE+ROTATE(sub_100,27)+XOR(AND(XOR(sub_101,sub_99),sub_98),sub_99)+sub_97+1518500249);</span><br><span class=\"line\">sub_103:ROTATE(sub_98,2);</span><br><span class=\"line\">sub_104:(OPAQUE+ROTATE(sub_102,27)+XOR(AND(XOR(sub_103,sub_101),sub_100),sub_101)+sub_99+1518500249);</span><br><span class=\"line\">sub_105:ROTATE(sub_100,2);</span><br><span class=\"line\">sub_106:(OPAQUE+ROTATE(sub_104,27)+XOR(AND(XOR(sub_105,sub_103),sub_102),sub_103)+sub_101+1518500249);</span><br><span class=\"line\">sub_107:ROTATE(sub_102,2);</span><br><span class=\"line\">sub_108:(OPAQUE+ROTATE(sub_106,27)+XOR(AND(XOR(sub_107,sub_105),sub_104),sub_105)+sub_103+1518500249);</span><br><span class=\"line\">sub_109:ROTATE(sub_104,2);</span><br><span class=\"line\">sub_110:(OPAQUE+ROTATE(sub_108,27)+XOR(AND(XOR(sub_109,sub_107),sub_106),sub_107)+sub_105+1518500249);</span><br><span class=\"line\">sub_111:ROTATE(sub_106,2);</span><br><span class=\"line\">sub_112:(OPAQUE+ROTATE(sub_110,27)+XOR(AND(XOR(sub_111,sub_109),sub_108),sub_109)+sub_107+1518500249);</span><br><span class=\"line\">sub_113:ROTATE(sub_108,2);</span><br><span class=\"line\">sub_114:(OPAQUE+ROTATE(sub_112,27)+XOR(AND(XOR(sub_113,sub_111),sub_110),sub_111)+sub_109+1518500249);</span><br><span class=\"line\">sub_115:ROTATE(sub_110,2);</span><br><span class=\"line\">sub_116:(OPAQUE+ROTATE(sub_114,27)+XOR(AND(XOR(sub_115,sub_113),sub_112),sub_113)+sub_111+1518500249);</span><br><span class=\"line\">sub_117:ROTATE(sub_112,2);</span><br><span class=\"line\">sub_118:(OPAQUE+ROTATE(sub_116,27)+XOR(AND(XOR(sub_117,sub_115),sub_114),sub_115)+sub_113+1518500249);</span><br><span class=\"line\">sub_119:ROTATE(sub_114,2);</span><br><span class=\"line\">sub_120:(OPAQUE+ROTATE(sub_118,27)+XOR(AND(XOR(sub_119,sub_117),sub_116),sub_117)+sub_115+1518500249);</span><br><span class=\"line\">sub_121:ROTATE(sub_116,2);</span><br><span class=\"line\">sub_122:(OPAQUE+ROTATE(sub_120,27)+XOR(sub_118,sub_121,sub_119)+sub_117+1859775393);</span><br><span class=\"line\">sub_123:ROTATE(sub_118,2);</span><br><span class=\"line\">sub_124:(OPAQUE+ROTATE(sub_122,27)+XOR(sub_120,sub_123,sub_121)+sub_119+1859775393);</span><br><span class=\"line\">sub_125:ROTATE(sub_120,2);</span><br><span class=\"line\">sub_126:(OPAQUE+ROTATE(sub_124,27)+XOR(sub_122,sub_125,sub_123)+sub_121+1859775393);</span><br><span class=\"line\">sub_127:ROTATE(sub_122,2);</span><br><span class=\"line\">sub_128:(OPAQUE+ROTATE(sub_126,27)+XOR(sub_124,sub_127,sub_125)+sub_123+1859775393);</span><br><span class=\"line\">sub_129:ROTATE(sub_124,2);</span><br><span class=\"line\">sub_130:(OPAQUE+ROTATE(sub_128,27)+XOR(sub_126,sub_129,sub_127)+sub_125+1859775393);</span><br><span class=\"line\">sub_131:ROTATE(sub_126,2);</span><br><span class=\"line\">sub_132:(OPAQUE+ROTATE(sub_130,27)+XOR(sub_128,sub_131,sub_129)+sub_127+1859775393);</span><br><span class=\"line\">sub_133:ROTATE(sub_128,2);</span><br><span class=\"line\">sub_134:(OPAQUE+ROTATE(sub_132,27)+XOR(sub_130,sub_133,sub_131)+sub_129+1859775393);</span><br><span class=\"line\">sub_135:ROTATE(sub_130,2);</span><br><span class=\"line\">sub_136:(OPAQUE+ROTATE(sub_134,27)+XOR(sub_132,sub_135,sub_133)+sub_131+1859775393);</span><br><span class=\"line\">sub_137:ROTATE(sub_132,2);</span><br><span class=\"line\">sub_138:(OPAQUE+ROTATE(sub_136,27)+XOR(sub_134,sub_137,sub_135)+sub_133+1859775393);</span><br><span class=\"line\">sub_139:ROTATE(sub_134,2);</span><br><span class=\"line\">sub_140:(OPAQUE+ROTATE(sub_138,27)+XOR(sub_136,sub_139,sub_137)+sub_135+1859775393);</span><br><span class=\"line\">sub_141:ROTATE(sub_136,2);</span><br><span class=\"line\">sub_142:(OPAQUE+ROTATE(sub_140,27)+XOR(sub_138,sub_141,sub_139)+sub_137+1859775393);</span><br><span class=\"line\">sub_143:ROTATE(sub_138,2);</span><br><span class=\"line\">sub_144:(OPAQUE+ROTATE(sub_142,27)+XOR(sub_140,sub_143,sub_141)+sub_139+1859775393);</span><br><span class=\"line\">sub_145:ROTATE(sub_140,2);</span><br><span class=\"line\">sub_146:(OPAQUE+ROTATE(sub_144,27)+XOR(sub_142,sub_145,sub_143)+sub_141+1859775393);</span><br><span class=\"line\">sub_147:ROTATE(sub_142,2);</span><br><span class=\"line\">sub_148:(sub_40+ROTATE(sub_146,27)+XOR(sub_144,sub_147,sub_145)+sub_143+1859775393);</span><br><span class=\"line\">sub_149:ROTATE(sub_144,2);</span><br><span class=\"line\">sub_150:(OPAQUE+ROTATE(sub_148,27)+XOR(sub_146,sub_149,sub_147)+sub_145+1859775393);</span><br><span class=\"line\">sub_151:ROTATE(sub_146,2);</span><br><span class=\"line\">sub_152:(sub_51+ROTATE(sub_150,27)+XOR(sub_148,sub_151,sub_149)+sub_147+1859775393);</span><br><span class=\"line\">sub_153:ROTATE(sub_148,2);</span><br><span class=\"line\">sub_154:(sub_45+ROTATE(sub_152,27)+XOR(sub_150,sub_153,sub_151)+sub_149+1859775393);</span><br><span class=\"line\">sub_155:ROTATE(sub_150,2);</span><br><span class=\"line\">sub_156:(OPAQUE+ROTATE(sub_154,27)+XOR(sub_152,sub_155,sub_153)+sub_151+1859775393);</span><br><span class=\"line\">sub_157:ROTATE(sub_152,2);</span><br><span class=\"line\">sub_158:(sub_52+ROTATE(sub_156,27)+XOR(sub_154,sub_157,sub_155)+sub_153+1859775393);</span><br><span class=\"line\">sub_159:ROTATE(sub_154,2);</span><br><span class=\"line\">sub_160:(sub_55+ROTATE(sub_158,27)+XOR(sub_156,sub_159,sub_157)+sub_155+1859775393);</span><br><span class=\"line\">sub_161:ROTATE(sub_158,2);</span><br><span class=\"line\">sub_162:ROTATE(sub_156,2);</span><br><span class=\"line\">sub_163:(OR(AND(OR(sub_158,sub_162),sub_159),AND(sub_158,sub_162))+OPAQUE+ROTATE(sub_160,27)+sub_157+2400959708);</span><br><span class=\"line\">sub_164:(OR(AND(OR(sub_160,sub_161),sub_162),AND(sub_160,sub_161))+sub_53+ROTATE(sub_163,27)+sub_159+2400959708);</span><br><span class=\"line\">sub_165:ROTATE(XOR(sub_69,sub_53,sub_51,sub_40),31);</span><br><span class=\"line\">sub_166:ROTATE(XOR(sub_70,sub_165,sub_66,sub_53),31);</span><br><span class=\"line\">sub_167:ROTATE(XOR(sub_165,sub_54,sub_52,sub_45),31);</span><br><span class=\"line\">sub_168:ROTATE(XOR(sub_166,sub_167,sub_69,sub_54),31);</span><br><span class=\"line\">sub_169:ROTATE(XOR(sub_167,sub_56,sub_53,sub_55),31);</span><br><span class=\"line\">sub_170:ROTATE(XOR(sub_168,sub_169,sub_165,sub_56),31);</span><br><span class=\"line\">sub_171:ROTATE(XOR(sub_169,sub_59,sub_54,sub_58),31);</span><br><span class=\"line\">sub_172:ROTATE(XOR(sub_170,sub_171,sub_167,sub_59),31);</span><br><span class=\"line\">sub_173:ROTATE(XOR(sub_71,sub_166,sub_67,sub_165),31);</span><br><span class=\"line\">sub_174:ROTATE(XOR(sub_171,sub_62,sub_56,sub_61),31);</span><br><span class=\"line\">sub_175:ROTATE(XOR(sub_174,sub_65,sub_59,sub_64),31);</span><br><span class=\"line\">sub_176:ROTATE(sub_163,2);</span><br><span class=\"line\">sub_177:ROTATE(sub_160,2);</span><br><span class=\"line\">sub_178:(OR(AND(OR(sub_163,sub_177),sub_161),AND(sub_163,sub_177))+sub_58+ROTATE(sub_164,27)+sub_162+2400959708);</span><br><span class=\"line\">sub_179:(OR(AND(OR(sub_164,sub_176),sub_177),AND(sub_164,sub_176))+sub_66+ROTATE(sub_178,27)+sub_161+2400959708);</span><br><span class=\"line\">sub_180:ROTATE(sub_178,2);</span><br><span class=\"line\">sub_181:ROTATE(sub_164,2);</span><br><span class=\"line\">sub_182:(OR(AND(OR(sub_178,sub_181),sub_176),AND(sub_178,sub_181))+sub_54+ROTATE(sub_179,27)+sub_177+2400959708);</span><br><span class=\"line\">sub_183:(OR(AND(OR(sub_179,sub_180),sub_181),AND(sub_179,sub_180))+sub_61+ROTATE(sub_182,27)+sub_176+2400959708);</span><br><span class=\"line\">sub_184:ROTATE(sub_182,2);</span><br><span class=\"line\">sub_185:ROTATE(sub_179,2);</span><br><span class=\"line\">sub_186:(OR(AND(OR(sub_182,sub_185),sub_180),AND(sub_182,sub_185))+sub_69+ROTATE(sub_183,27)+sub_181+2400959708);</span><br><span class=\"line\">sub_187:(OR(AND(OR(sub_183,sub_184),sub_185),AND(sub_183,sub_184))+sub_56+ROTATE(sub_186,27)+sub_180+2400959708);</span><br><span class=\"line\">sub_188:ROTATE(sub_186,2);</span><br><span class=\"line\">sub_189:ROTATE(sub_183,2);</span><br><span class=\"line\">sub_190:(OR(AND(OR(sub_186,sub_189),sub_184),AND(sub_186,sub_189))+sub_64+ROTATE(sub_187,27)+sub_185+2400959708);</span><br><span class=\"line\">sub_191:(OR(AND(OR(sub_187,sub_188),sub_189),AND(sub_187,sub_188))+sub_165+ROTATE(sub_190,27)+sub_184+2400959708);</span><br><span class=\"line\">sub_192:ROTATE(sub_190,2);</span><br><span class=\"line\">sub_193:ROTATE(sub_187,2);</span><br><span class=\"line\">sub_194:(OR(AND(OR(sub_190,sub_193),sub_188),AND(sub_190,sub_193))+sub_59+ROTATE(sub_191,27)+sub_189+2400959708);</span><br><span class=\"line\">sub_195:(OR(AND(OR(sub_191,sub_192),sub_193),AND(sub_191,sub_192))+sub_67+ROTATE(sub_194,27)+sub_188+2400959708);</span><br><span class=\"line\">sub_196:ROTATE(sub_194,2);</span><br><span class=\"line\">sub_197:ROTATE(sub_191,2);</span><br><span class=\"line\">sub_198:(OR(AND(OR(sub_194,sub_197),sub_192),AND(sub_194,sub_197))+sub_167+ROTATE(sub_195,27)+sub_193+2400959708);</span><br><span class=\"line\">sub_199:(OR(AND(OR(sub_195,sub_196),sub_197),AND(sub_195,sub_196))+sub_62+ROTATE(sub_198,27)+sub_192+2400959708);</span><br><span class=\"line\">sub_200:ROTATE(sub_198,2);</span><br><span class=\"line\">sub_201:ROTATE(sub_195,2);</span><br><span class=\"line\">sub_202:(OR(AND(OR(sub_198,sub_201),sub_196),AND(sub_198,sub_201))+sub_70+ROTATE(sub_199,27)+sub_197+2400959708);</span><br><span class=\"line\">sub_203:(OR(AND(OR(sub_199,sub_200),sub_201),AND(sub_199,sub_200))+sub_169+ROTATE(sub_202,27)+sub_196+2400959708);</span><br><span class=\"line\">sub_204:ROTATE(sub_202,2);</span><br><span class=\"line\">sub_205:ROTATE(sub_199,2);</span><br><span class=\"line\">sub_206:(OR(AND(OR(sub_202,sub_205),sub_200),AND(sub_202,sub_205))+sub_65+ROTATE(sub_203,27)+sub_201+2400959708);</span><br><span class=\"line\">sub_207:(OR(AND(OR(sub_203,sub_204),sub_205),AND(sub_203,sub_204))+sub_166+ROTATE(sub_206,27)+sub_200+2400959708);</span><br><span class=\"line\">sub_208:ROTATE(sub_206,2);</span><br><span class=\"line\">sub_209:ROTATE(sub_203,2);</span><br><span class=\"line\">sub_210:(OR(AND(OR(sub_206,sub_209),sub_204),AND(sub_206,sub_209))+sub_171+ROTATE(sub_207,27)+sub_205+2400959708);</span><br><span class=\"line\">sub_211:(OR(AND(OR(sub_207,sub_208),sub_209),AND(sub_207,sub_208))+sub_68+ROTATE(sub_210,27)+sub_204+2400959708);</span><br><span class=\"line\">sub_212:ROTATE(sub_207,2);</span><br><span class=\"line\">sub_213:(sub_168+ROTATE(sub_211,27)+XOR(sub_210,sub_212,sub_208)+sub_209+3395469782);</span><br><span class=\"line\">sub_214:ROTATE(sub_210,2);</span><br><span class=\"line\">sub_215:(sub_174+ROTATE(sub_213,27)+XOR(sub_211,sub_214,sub_212)+sub_208+3395469782);</span><br><span class=\"line\">sub_216:ROTATE(sub_211,2);</span><br><span class=\"line\">sub_217:(sub_71+ROTATE(sub_215,27)+XOR(sub_213,sub_216,sub_214)+sub_212+3395469782);</span><br><span class=\"line\">sub_218:ROTATE(sub_213,2);</span><br><span class=\"line\">sub_219:(sub_170+ROTATE(sub_217,27)+XOR(sub_215,sub_218,sub_216)+sub_214+3395469782);</span><br><span class=\"line\">sub_220:ROTATE(sub_215,2);</span><br><span class=\"line\">sub_221:(sub_175+ROTATE(sub_219,27)+XOR(sub_217,sub_220,sub_218)+sub_216+3395469782);</span><br><span class=\"line\">sub_222:ROTATE(sub_217,2);</span><br><span class=\"line\">sub_223:(sub_173+ROTATE(sub_221,27)+XOR(sub_219,sub_222,sub_220)+sub_218+3395469782);</span><br><span class=\"line\">sub_224:ROTATE(sub_219,2);</span><br><span class=\"line\">sub_225:(sub_172+ROTATE(sub_223,27)+XOR(sub_221,sub_224,sub_222)+sub_220+3395469782);</span><br><span class=\"line\">sub_226:ROTATE(XOR(sub_172,sub_174,sub_169,sub_62),31);</span><br><span class=\"line\">sub_227:ROTATE(XOR(sub_226,sub_175,sub_171,sub_65),31);</span><br><span class=\"line\">sub_228:ROTATE(XOR(sub_175,sub_68,sub_62,sub_67),31);</span><br><span class=\"line\">sub_229:ROTATE(XOR(sub_227,sub_228,sub_174,sub_68),31);</span><br><span class=\"line\">sub_230:ROTATE(sub_221,2);</span><br><span class=\"line\">sub_231:(sub_228+ROTATE(sub_225,27)+XOR(sub_223,sub_230,sub_224)+sub_222+3395469782);</span><br><span class=\"line\">sub_232:ROTATE(sub_231,2);</span><br><span class=\"line\">sub_233:ROTATE(XOR(sub_228,sub_71,sub_65,sub_70),31);</span><br><span class=\"line\">sub_234:ROTATE(XOR(sub_173,sub_168,sub_70,sub_167),31);</span><br><span class=\"line\">sub_235:ROTATE(sub_223,2);</span><br><span class=\"line\">sub_236:(sub_234+ROTATE(sub_231,27)+XOR(sub_225,sub_235,sub_230)+sub_224+3395469782);</span><br><span class=\"line\">sub_237:ROTATE(sub_225,2);</span><br><span class=\"line\">sub_238:(sub_226+ROTATE(sub_236,27)+XOR(sub_231,sub_237,sub_235)+sub_230+3395469782);</span><br><span class=\"line\">sub_239:(sub_233+ROTATE(sub_238,27)+XOR(sub_236,sub_232,sub_237)+sub_235+3395469782);</span><br><span class=\"line\">sub_240:ROTATE(XOR(sub_233,sub_173,sub_68,sub_166),31);</span><br><span class=\"line\">sub_241:ROTATE(XOR(sub_234,sub_170,sub_166,sub_169),31);</span><br><span class=\"line\">sub_242:ROTATE(sub_236,2);</span><br><span class=\"line\">sub_243:(sub_241+ROTATE(sub_239,27)+XOR(sub_238,sub_242,sub_232)+sub_237+3395469782);</span><br><span class=\"line\">sub_244:ROTATE(sub_238,2);</span><br><span class=\"line\">sub_245:(sub_227+ROTATE(sub_243,27)+XOR(sub_239,sub_244,sub_242)+sub_232+3395469782);</span><br><span class=\"line\">sub_246:ROTATE(sub_239,2);</span><br><span class=\"line\">sub_247:(sub_240+ROTATE(sub_245,27)+XOR(sub_243,sub_246,sub_244)+sub_242+3395469782);</span><br><span class=\"line\">sub_248:ROTATE(sub_245,2);</span><br><span class=\"line\">sub_249:ROTATE(sub_243,2);</span><br><span class=\"line\">sub_250:ROTATE(sub_247,2);</span><br><span class=\"line\">sub_251:ROTATE(XOR(sub_241,sub_172,sub_168,sub_171),31);</span><br><span class=\"line\">sub_252:(sub_251+ROTATE(sub_247,27)+XOR(sub_245,sub_249,sub_246)+sub_244+3395469782);</span><br><span class=\"line\">sub_253:(sub_229+ROTATE(sub_252,27)+XOR(sub_247,sub_248,sub_249)+sub_246+3395469782);</span><br><span class=\"line\">sub_254:ROTATE(sub_253,2);</span><br><span class=\"line\">sub_255:ROTATE(XOR(sub_240,sub_234,sub_71,sub_168),31);</span><br><span class=\"line\">sub_256:ROTATE(XOR(sub_229,sub_233,sub_175,sub_71),31);</span><br><span class=\"line\">sub_257:(sub_255+ROTATE(sub_253,27)+XOR(sub_252,sub_250,sub_248)+sub_249+3395469782);</span><br><span class=\"line\">sub_258:ROTATE(sub_252,2);</span><br><span class=\"line\">sub_259:(ROTATE(XOR(sub_251,sub_226,sub_170,sub_174),31)+ROTATE(sub_257,27)+XOR(sub_253,sub_258,sub_250)+sub_248+3395469782);</span><br><span class=\"line\">sub_260:ROTATE(sub_259,27);</span><br><span class=\"line\">sub_261:XOR(sub_257,sub_254,sub_258);</span><br><span class=\"line\">sub_262:ROTATE(sub_257,2);</span><br><span class=\"line\">sub_263:(sub_77+sub_262);</span><br><span class=\"line\">sub_264:(sub_73+ROTATE(XOR(sub_255,sub_241,sub_173,sub_170),31)+ROTATE((sub_256+sub_260+sub_261+sub_250+3395469782),27)+XOR(sub_259,sub_262,sub_254)+sub_258+3395469782);</span><br><span class=\"line\">sub_265:(sub_81+sub_254);</span><br><span class=\"line\">sub_266:(sub_75+ROTATE(sub_259,2));</span><br><span class=\"line\">sub_267:(sub_79+sub_256+sub_260+sub_261+sub_250+3395469782);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"测试-4\">测试</h3>\n<p>libcrypto.so.1.1(openssl)</p>\n<p>其中和sha1有关的函数如下</p>\n<p><img src=\"sha1.assets/image-20220223192555863.png\" alt=\"image-20220223192555863\"></p>\n<p>利用where’s crypto分析</p>\n<p><img src=\"sha1.assets/image-20220223191837393.png\" alt=\"image-20220223191837393\"></p>\n<p>反汇编SHA1_Update,主要还是调用了sha1_block_data_order</p>\n<p><img src=\"sha1.assets/image-20220223200517936.png\" alt=\"image-20220223200517936\"></p>\n<p>md5_block_data_order反汇编后</p>\n<p><img src=\"sha1.assets/image-20220223200537067.png\" alt=\"image-20220223200537067\"></p>\n<p>与signature中对应关系如下</p>\n<p><img src=\"sha1.assets/image-20220223213829056.png\" alt=\"image-20220223213829056\"></p>\n<p>其余均类似</p>\n<p><code>openssl中相关函数源码通过perl生成汇编代码</code></p>\n"},{"title":"[论文笔记-usenix2021]where's-crypto","date":"2021-06-25T10:18:29.000Z","keywords":"-[usenix2021,where's crypto]","description":null,"top_img":null,"comments":1,"cover":"https://scorpionre.github.io/2021/06/25/where-s-crypto/where-s-crypto.assets/image-20210601155403815.png","toc":null,"toc_number":null,"copyright":null,"mathjax":null,"katex":null,"hide":null,"_content":"\n# [论文阅读]where's crypto\n\n![image-20210601155403815](where-s-crypto.assets/image-20210601155403815.png)\n\n**背景**：专有密码学应用广泛。深入的安全分析需要在通常非常大的二进制文件中对算法进行定位和分类，因此即使在启发式方法的帮助下，手动检查也很耗时\n\n**现有的方法**：DFG isomorphism(Automated identification of cryptographic\nprimitives in binary code with data flow graph isomorphism[43])\n\n**缺陷**：仅限于已知的primitives，依赖于启发式算法来选择待分析的代码片段\n\n**解决**：通过将上述方法与符号执行结合（为密码原语的分类类别指定结构签名和与分析匹配的二进制代码），克服了上述缺陷，并将分析扩展到未知的专用密码原语中\n\n**贡献**：\n\n1. 将子图同构与符号执行结合，解决了片段选择的开放性问题并消除了对启发式的需求\n2. 提出新的domain-specific language(DSL)，用于定义密码原语的结构属性\n3. ida开源插件where's crypto?\n\n## 具体方案\n\n**密码原语**：本质上是一组表示输入/输出关系的算术和逻辑操作\n\n**分类**：纯粹为工具性，不会对算法进行排他性划分\n\n![image-20210623221842089](where-s-crypto.assets/image-20210623221842089.png)\n\n\n\n**DFG**:有向无环图（Directed Acyclic Graph)表示的一系列算术/逻辑运算中的数据流图\n\n顶点代表一个操作或一个信息\n\n顶点v1和v2间存在边表示v1（操作v1的结果）是操作v2的输入。\n\n\n\n整体流程图如下：\n\n![image-20210624093611741](where-s-crypto.assets/image-20210624093611741.png)\n\n### 图构建\n\n给定函数入口点，execute symbolically，同时生成DFG图 G=(V,E)，图创建过程中连续进行归一化，提高了性能。\n\n\n\n假设有一系列汇编指令， 将每条指令i转换为一组操作Oi(可能为空（NOP或分支)，也可能包含多个操作，然后根据此创建相应的DFG图G=(V,E)。\n\n根据输入类型分为以下三种情况\n\n- 立即数：创建一个顶点表示G中的常数值。由边连接到Oi\n\n- 寄存器：在写入该寄存器的最后一个值和Oi间创建一个边。实际上，这意味着为每个寄存器维护一个数组，其中包含对G中该值对应的顶点的引用\n\n- 内存：LOAD，STORE。将内存地址顶点作为输入，与其他顶点一样，地址可以是常量，也可以是更复杂的符号表达式\n\n  \n\n  图创建具体过程如下所示\n\n  ![image-20210624104523602](where-s-crypto.assets/image-20210624104523602.png)\n\n  为特定架构编写的处理器模块可以将每条指令转换为图形节点，但其不能自主创建新的节点，必须与broker交互。\n\n  broker负责规范化后规则的应用，这个过程与处理器架构无关。\n\n  处理器模块向broker提供所需节点的规范，代理再将规范化后的规则应用于规范。\n\n  规范化后，broker向DFG查询是否已经存在符合规范化后规范的节点。是则返回对他的引用\n\n  因此，在符合相同规范的图中不存在两个不同的节点，或是规范化后的等效节点。\n\n  \n\n  规范化：包括简化运算，公共子表达式消除和随后的内存访问\n\n  - 简化运算：输入参数为常数的算数/逻辑运算，直接由结果代替。同样，如果一个元素为其作为输入的操作的标识元素，则该操作无效且可被删除。若元素为0，可以将操作替换为0\n  - 公共子表达式消除：一个代码片段中，相同值被多次重新计算。\n\n  ![image-20210624114508898](where-s-crypto.assets/image-20210624114508898.png)\n\n  - 内存访问：将load操作替换为其结果来纠正此问题，若之前存在对同一内存地址节点的store操作，则结果是已知的。通过在图构建期间维护一个查找表（将地址节点映射到它们对应的存储值的哈希表），可以在恒定时间内执行替换。\n\n  ![image-20210624154848633](where-s-crypto.assets/image-20210624154848633.png)\n\n  对于关联操作，结果不依赖于它们的执行顺序。因此，将嵌套的关联操作转换为接收所有输入的单个操作\n\n  ![image-20210624154904447](where-s-crypto.assets/image-20210624154904447.png)\n\n  \n\n  其他规则：\n\n- 表达式x加倍，用mult(x,2)表示\n\n  ![image-20210625132559544](where-s-crypto.assets/image-20210625132559544.png)\n\n- 表达式x，常数c1，c2。当c2 *<* 2^(32-c1)且c1 *<* 32时，AND ( *x* >> *c* 1 *,* *c*2 )和AND ( ROTATE ( *x* *,* *c*1 ) *,* *c*2 ) 等价。用AND ( x >> c 1 *,* c 2 )表示\n\n  ![image-20210625132545137](where-s-crypto.assets/image-20210625132545137.png)\n\n- 先乘后加\n\n![image-20210625132532624](where-s-crypto.assets/image-20210625132532624.png)\n\n​\t\t在图构建过程中应用规范化规则比在图完全生成后的优点：\n\n- 规范化函数h有恒定的运行时间复杂度，那么构建阶段的运行时间复杂度，包括归一化，会随着汇编指令的数量线性增长，而在完全生成的DFG上重复应用则为二次复杂度\n- 任何一对节点引用的等价性都可以在常数时间内进行评估，只要检查v1是否等于v2.因此可以在常数时间内实现用结果替换load操作。\n\n\n\n符号执行：条件指令。分为以下两种情况\n\ndetermined:变量被限制在一个域，因此只有一个可能的结果。如固定迭代次数组成的循环末尾的条件跳转指令。\n\nunderdetermined：输入变量的限制不足以确定固定的结果。\n\n处理方法：\n\n图构建首先将*S* = ( G *,* P *,* B )初始化为空状态，即G是空图， P = true ， B没有任何评估结果的记录。然后，开始通过处理位于函数*f*入口点的指令来构造。一些指令可能会操纵执行流程，例如，分支指令，在这种情况下，我们在其目标地址处继续。当我们遇到一条指令导致执行流程返回到*f*的调用函数时，构造就完成了。比如，在 ARM 程序集中，这是通过将*f*的调用者设置的寄存器LR的初始值写入程序计数器寄存器PC 来实现的\n\n以元组( v 1 *,* o *,* v 2 )的形式表示条件c，如果v 1或v 2是非常量的，则谓词*P*可以充分限制*v* 0或*v* 1使得c确定；如果*c*未确定，则两种执行路径都是可能的，我们被迫选择遵循哪一个，或者可以通过复制状态*S*并随后将每个执行路径分配给其中一个实例来遵循两条路径。这样，最终的图构造由几个 DFG 组成；每个代表不同的执行路径。这种做法被称为分叉状态*S*。在出现未确定条件时进行分叉可最大化代码覆盖率。然而，由于状态爆炸问题，这是不可行的。因此采用path oracle来确定何时应用该方法。\n\n何时应用分叉的策略仅与符号执行本身松散相关。*Path Oracle*是一个单独的实体，它在图构建阶段被查询，用于每次出现未确定的条件*c*。它决定*c*被评估为true还是false，或者构造分叉并遵循两个执行路径。\n\n算法如下所示，谓词P被更新为包括条件c（或其否定），从而保持其定义属性满足（保证G表示f的输入/输出关系）。然后将path oracle做的决定添加到backlog B中。\n\n![image-20210625124717799](where-s-crypto.assets/image-20210625124717799.png)\n\n\n\n**path oracle policy**\n\n对于某个数字*n*，获得由具有可变输入长度的恰好*n*次迭代组成的原语的DFG 。随后可以通过在结果 DFG 中精确搜索*n*次迭代来识别目标原语\n\n![image-20210625125821055](where-s-crypto.assets/image-20210625125821055.png)\n\nde,i表示path oracle 对在执行地址e处找到的条件指令的第i个查询的决定\n\n7\n\n\n\n![image-20210625132713995](where-s-crypto.assets/image-20210625132713995.png)\n\nS =(G;P;B),  P = true\n\ni = 0, P = true, and c = (R8<= 0)  TAKE_BOTH\n\nP=(R8<=0),B4[0] = true(这个状态会跳转11行并退出）, and S' = (G';P';B'),  P' = (R8 > 0) B'4[0] =false\n\nS'继续循环，回到line4，c = (R8 <= 1), i = 1, P' = (R8 > 0) and\nB'4[0] = false   P'^c无法确定，因此TAKE_FALSE\n\n最后，i = n, we get c = R8 <= n and P' =(R8>n-1). TAKE_TRUE\n\n构建完成，得到两个图，一个对应R8<=0,一个R8=n。后者描述了算法的*n*次迭代，完全符合目标。前者描述零迭代，因此，包含的节点数量可以忽略不计。因此，我们接受该图在分析的后期阶段引起的少量开销。\n\n\n\n\n\n### 清除\n\n构建好后，进入清除阶段。从图中删除既不代表输入，也不代表任何输出计算中使用的值的节点。\n\n构建完成后，图G表示f在谓词P下的输入/输出关系。但是，也包含其他信息，比如临时load/store存进堆栈 创建的节点，由broker重写的表达式\n\n\n\n对于每个叶节点，检查其是否为f语义的一部分。如果v是以下几种情况中的任何一种，则认为它是：\n\n- f的返回值\n- store操作，且目标地址与SP寄存器无关。因此，信息存储在堆栈之外\n- call操作，比如不受内联约束的函数调用\n\n若以上都不是，则删除v以及其入边\n\n\n\n### 匹配\n\n模式匹配：在DFG中搜索与给定加密原语的图签名同构的子图。Ulmann子图同构算法来搜索DFG\n\n表达签名图：signature domain-specific language(DSL)\n\n![image-20210624171314309](where-s-crypto.assets/image-20210624171314309.png)\n\n其中圆形框表示关键字，方形框表示数据类型。\n\n- IDENTIFIER：为签名指定名称\n- VARIANT：强制创建新的空DFG图(后面的表达式被添加+到图中)。因此，允许指定签名的多个变体。子图同构检测最终对所有变体进行检测。\n- label（可选）：允许节点被其他表达式引用，从而实现表达式间的节点共享。\n- TRANSIENT：从表达式生成的节点被认为是非必要的，可能被清除\n\n新的图节点由表达式类型生成\n\n![image-20210624171324978](where-s-crypto.assets/image-20210624171324978.png)\n\nliteral表示常量。\n\nSTORE ， LOAD ， XOR ， OR ， AND ， MULT和ROTATE关键字后跟括号中包含的子表达式会引发新图节点的创建。子表达式作为输入节点。\n\nOPAQUE表示特殊的通配符节点s（通过子图同构算法与任何其他类型的节点进行比较总为真，且可以由有任意数量的输入节点，包括零个）\n\nclamp-label（可选）：为节点类型命名。与任何其他类型的节点进行比较都为真，并增加了所有带有相同类型标签的opaque必须映射到相同类型节点的限制（type clamping)\n\n\n\n子图同构：Ullmann算法（可剪枝的递归回溯算法），并增加了对type clamping的支持\n\n\n\n签名：主要为symmetric and unkeyed primitives。广义上说，该制定签名方法是制定primitives的定义属性，将它们转换为抽象的DFG，最后转换为用DSL表示的签名定义\n\n![image-20210624174209159](where-s-crypto.assets/image-20210624174209159.png)\n\n​\t\tFeistel:\n\n![image-20210624174908504](where-s-crypto.assets/image-20210624174908504.png)\n\n​\t\tF是一组特定算法的操作，因此不知道其属性。该OPAQUE操作值包括单一操作，而F包括数目不详的操作。已知F的输入为Ri和Ki，Ki也没有已知的性质。因此，为表示F引入多种variant。variant A中，用opaque（Ri)替换F，再用opaque(opaque(Ri))替换，直到达到8层嵌套操作。4444444\n\n![image-20210624174324222](where-s-crypto.assets/image-20210624174324222.png)\n\n### 范围与局限性\n\n1. 规范化和优化：单个函数可以表示为许多不同的汇编指令组合。语义等价类和DFG间建立1-to-1 mapping超出范围。\n\n2. 隐式流：\n\n   ```\n   \\\\语义等价\n   a <- b \\\\b直接流向a，依赖在DFG中明显\n   if a then b <- true; else b <- false \\\\依赖信息丢失\n   ```\n\n3. 函数入口点：IDA将函数入口点识别为算法的输入（可能不准确）\n\n4. 代码混淆\n\n5. 分类约束：假设寻找的算法属于已定义类别之一\n\n6. 误报：某些原始类是其他原始类的子集，有些实例符合几个类的定义\n\n7. 路径预测：编译器有时会在入口及退出时确保loop-guard evaluation，产生一个代表*n* + 1 次迭代的 DFG ；具有恒定迭代长度的密码原语超出了路径预测的控制范围。最后，循环展开将产生一个表示*kn*次迭代的 DFG ，其中*k*表示编译器分组的迭代次数。\n\n## 测试\n\n### 测试集\n\n- [43]论文使用的数据集\n- 共享库的集合以及openWRT网络设备固件的可执行部分\n- 开源的专有密码实现的集合\n- 现实中的嵌入式固件（PLCs，ECUs）的集合\n\n### 测试方法\n\n可调变量n：DFG中包含的算法实例的目标数量。与构建的DFG的大小有关，因此与运行时间相关。但其足够大，以便可以识别所有已有签名。特定于算法的分类器和Feistal分类器仅针对算法的单个实例，因此不受n的影响；而（N）LFSR和Sequential block permutation分类器受n的影响，因此它们基于多个实例来识别一个原语。后者（什么？）表示了一些未知压缩函数c的两个连续实例。由于重写规则旨在促进数值简化，算法的第一步与最后一步可能会分别与c的第一个和最后一个实例合并。因此，选择n=4，保证在DFG中存在两个连续的c的实例，选择大于4的话显然不会提供有关此属性的任何优势。此外，确定4个连续的DFG（实际上没有实现的代码生成的）中的LSFR轮次是极不可能的。因此，选取n=4。\n\n\n\n### 结果\n\n#### 与Lestringant[43]比较\n\n构建了一个尽可能忠实他们的ARM架构的新样本集。使用特定算法的签名来保证公平比较。结果如下\n\n![image-20210624202125509](where-s-crypto.assets/image-20210624202125509.png)\n\n无论编译器和优化级别如何，所有样本可以通过相应签名中的某一variant成功识别。证明能够识别这些算法，而无须求助于片段选择的启发式方法。\n\n#### OpenWRT二进制文件\n\n从二进制代码构建 DFG是一种特殊的执行情况，因此会受到*停机*问题的影响。因此，不能保证图构建会终止。因此，引入了图构建超时时间t。\n\n在分析libcrypto.so.1.1期间构建的所有图与图构建时间t的直方图如下所示\n\n![image-20210624202747254](where-s-crypto.assets/image-20210624202747254.png)\n\n结果表明，对于绝大多数图，构造时间可以在10s内完成。因此选择t=10s\n\n\n\nd：函数调用被内联的深度级别。\n\n调查d的影响，同时采用不同的值，并测量运行时间和准确性方面的性能。\n\n![image-20210624203559676](where-s-crypto.assets/image-20210624203559676.png)\n\n根据两者选择合理的d值，可以看出d>2时，准确性没有显著提高，而对于运行时间影响很大。因此选择d=2（True negative被省略，因为它们涵盖了绝大多数的结果，从而影响可读性 ）\n\n- true negative:没有函数f实现密码原语a，也没有DFG图匹配到签名![image-20210624225715291](where-s-crypto.assets/image-20210624225715291.png)\n- true positive: f实现了密码原语a，有DFG图匹配到签名\n- false positive:没有函数f实现密码原语a，有DFG图匹配到签名\n- false negative:f实现了密码原语a，没有DFG图匹配到签名\n\n![image-20210624230418524](where-s-crypto.assets/image-20210624230418524.png)\n\n表中的每个单元格都描述了第一个positive结果的相应二进制文件中的符号名称，或者，在false negative的情况下，期望得到positive的符号名称\n\n#### proprietary algorithms\n\n一些专有算法的分析如下所示。所有签名都针对一个通用的类别，且没有一个是预先构建来适合特定样本的。除了RED PIKE，其余都成功识别，其由于使用加法而不是异或，未被识别为Feistel。\n\n![image-20210624231520804](where-s-crypto.assets/image-20210624231520804.png)\n\n\n\n#### 现实中的固件\n\nEmerson ControlWave Micro RTU,\nEmerson ControlWave XFC flow computer, Schneider Electric\nM340 PLC and Volkswagen IPC\n\n除了Megamaso外，所有密码原语都被成功识别。Megamaso包含NLFSR，但非线性反馈是作为子程序实现的，且移位寄存器根据其返回值通过if语句更新。这违反了基于DFG的方法固有的隐式流量限制。\n\n![image-20210624231925380](where-s-crypto.assets/image-20210624231925380.png)\n\n#### 执行结果\n\n![image-20210625112903207](where-s-crypto.assets/image-20210625112903207.png)\n\n\n\n## 改进\n\n1. 增加signature\n2. 根据需求调参（不同应用场景与算法，参数的选择）、轮函数数量\n3. 密码原语的分类树不一定明确\n4. DFG无法表达代码流信息\n\n","source":"_posts/where-s-crypto.md","raw":"---\ntitle: \"[论文笔记-usenix2021]where's-crypto\"\ndate: 2021-06-25 18:18:29\ntags: \n\t- crypto\n\t- reverse\n\t- CryptoDetect\n\t- paper\ncategories:\n\t- [CryptoDetect,paper]\nkeywords:\n\t-[usenix2021,where's crypto]\ndescription:\ntop_img:\ncomments:\ncover: https://scorpionre.github.io/2021/06/25/where-s-crypto/where-s-crypto.assets/image-20210601155403815.png\ntoc:\ntoc_number:\ncopyright:\nmathjax:\nkatex:\nhide:\n---\n\n# [论文阅读]where's crypto\n\n![image-20210601155403815](where-s-crypto.assets/image-20210601155403815.png)\n\n**背景**：专有密码学应用广泛。深入的安全分析需要在通常非常大的二进制文件中对算法进行定位和分类，因此即使在启发式方法的帮助下，手动检查也很耗时\n\n**现有的方法**：DFG isomorphism(Automated identification of cryptographic\nprimitives in binary code with data flow graph isomorphism[43])\n\n**缺陷**：仅限于已知的primitives，依赖于启发式算法来选择待分析的代码片段\n\n**解决**：通过将上述方法与符号执行结合（为密码原语的分类类别指定结构签名和与分析匹配的二进制代码），克服了上述缺陷，并将分析扩展到未知的专用密码原语中\n\n**贡献**：\n\n1. 将子图同构与符号执行结合，解决了片段选择的开放性问题并消除了对启发式的需求\n2. 提出新的domain-specific language(DSL)，用于定义密码原语的结构属性\n3. ida开源插件where's crypto?\n\n## 具体方案\n\n**密码原语**：本质上是一组表示输入/输出关系的算术和逻辑操作\n\n**分类**：纯粹为工具性，不会对算法进行排他性划分\n\n![image-20210623221842089](where-s-crypto.assets/image-20210623221842089.png)\n\n\n\n**DFG**:有向无环图（Directed Acyclic Graph)表示的一系列算术/逻辑运算中的数据流图\n\n顶点代表一个操作或一个信息\n\n顶点v1和v2间存在边表示v1（操作v1的结果）是操作v2的输入。\n\n\n\n整体流程图如下：\n\n![image-20210624093611741](where-s-crypto.assets/image-20210624093611741.png)\n\n### 图构建\n\n给定函数入口点，execute symbolically，同时生成DFG图 G=(V,E)，图创建过程中连续进行归一化，提高了性能。\n\n\n\n假设有一系列汇编指令， 将每条指令i转换为一组操作Oi(可能为空（NOP或分支)，也可能包含多个操作，然后根据此创建相应的DFG图G=(V,E)。\n\n根据输入类型分为以下三种情况\n\n- 立即数：创建一个顶点表示G中的常数值。由边连接到Oi\n\n- 寄存器：在写入该寄存器的最后一个值和Oi间创建一个边。实际上，这意味着为每个寄存器维护一个数组，其中包含对G中该值对应的顶点的引用\n\n- 内存：LOAD，STORE。将内存地址顶点作为输入，与其他顶点一样，地址可以是常量，也可以是更复杂的符号表达式\n\n  \n\n  图创建具体过程如下所示\n\n  ![image-20210624104523602](where-s-crypto.assets/image-20210624104523602.png)\n\n  为特定架构编写的处理器模块可以将每条指令转换为图形节点，但其不能自主创建新的节点，必须与broker交互。\n\n  broker负责规范化后规则的应用，这个过程与处理器架构无关。\n\n  处理器模块向broker提供所需节点的规范，代理再将规范化后的规则应用于规范。\n\n  规范化后，broker向DFG查询是否已经存在符合规范化后规范的节点。是则返回对他的引用\n\n  因此，在符合相同规范的图中不存在两个不同的节点，或是规范化后的等效节点。\n\n  \n\n  规范化：包括简化运算，公共子表达式消除和随后的内存访问\n\n  - 简化运算：输入参数为常数的算数/逻辑运算，直接由结果代替。同样，如果一个元素为其作为输入的操作的标识元素，则该操作无效且可被删除。若元素为0，可以将操作替换为0\n  - 公共子表达式消除：一个代码片段中，相同值被多次重新计算。\n\n  ![image-20210624114508898](where-s-crypto.assets/image-20210624114508898.png)\n\n  - 内存访问：将load操作替换为其结果来纠正此问题，若之前存在对同一内存地址节点的store操作，则结果是已知的。通过在图构建期间维护一个查找表（将地址节点映射到它们对应的存储值的哈希表），可以在恒定时间内执行替换。\n\n  ![image-20210624154848633](where-s-crypto.assets/image-20210624154848633.png)\n\n  对于关联操作，结果不依赖于它们的执行顺序。因此，将嵌套的关联操作转换为接收所有输入的单个操作\n\n  ![image-20210624154904447](where-s-crypto.assets/image-20210624154904447.png)\n\n  \n\n  其他规则：\n\n- 表达式x加倍，用mult(x,2)表示\n\n  ![image-20210625132559544](where-s-crypto.assets/image-20210625132559544.png)\n\n- 表达式x，常数c1，c2。当c2 *<* 2^(32-c1)且c1 *<* 32时，AND ( *x* >> *c* 1 *,* *c*2 )和AND ( ROTATE ( *x* *,* *c*1 ) *,* *c*2 ) 等价。用AND ( x >> c 1 *,* c 2 )表示\n\n  ![image-20210625132545137](where-s-crypto.assets/image-20210625132545137.png)\n\n- 先乘后加\n\n![image-20210625132532624](where-s-crypto.assets/image-20210625132532624.png)\n\n​\t\t在图构建过程中应用规范化规则比在图完全生成后的优点：\n\n- 规范化函数h有恒定的运行时间复杂度，那么构建阶段的运行时间复杂度，包括归一化，会随着汇编指令的数量线性增长，而在完全生成的DFG上重复应用则为二次复杂度\n- 任何一对节点引用的等价性都可以在常数时间内进行评估，只要检查v1是否等于v2.因此可以在常数时间内实现用结果替换load操作。\n\n\n\n符号执行：条件指令。分为以下两种情况\n\ndetermined:变量被限制在一个域，因此只有一个可能的结果。如固定迭代次数组成的循环末尾的条件跳转指令。\n\nunderdetermined：输入变量的限制不足以确定固定的结果。\n\n处理方法：\n\n图构建首先将*S* = ( G *,* P *,* B )初始化为空状态，即G是空图， P = true ， B没有任何评估结果的记录。然后，开始通过处理位于函数*f*入口点的指令来构造。一些指令可能会操纵执行流程，例如，分支指令，在这种情况下，我们在其目标地址处继续。当我们遇到一条指令导致执行流程返回到*f*的调用函数时，构造就完成了。比如，在 ARM 程序集中，这是通过将*f*的调用者设置的寄存器LR的初始值写入程序计数器寄存器PC 来实现的\n\n以元组( v 1 *,* o *,* v 2 )的形式表示条件c，如果v 1或v 2是非常量的，则谓词*P*可以充分限制*v* 0或*v* 1使得c确定；如果*c*未确定，则两种执行路径都是可能的，我们被迫选择遵循哪一个，或者可以通过复制状态*S*并随后将每个执行路径分配给其中一个实例来遵循两条路径。这样，最终的图构造由几个 DFG 组成；每个代表不同的执行路径。这种做法被称为分叉状态*S*。在出现未确定条件时进行分叉可最大化代码覆盖率。然而，由于状态爆炸问题，这是不可行的。因此采用path oracle来确定何时应用该方法。\n\n何时应用分叉的策略仅与符号执行本身松散相关。*Path Oracle*是一个单独的实体，它在图构建阶段被查询，用于每次出现未确定的条件*c*。它决定*c*被评估为true还是false，或者构造分叉并遵循两个执行路径。\n\n算法如下所示，谓词P被更新为包括条件c（或其否定），从而保持其定义属性满足（保证G表示f的输入/输出关系）。然后将path oracle做的决定添加到backlog B中。\n\n![image-20210625124717799](where-s-crypto.assets/image-20210625124717799.png)\n\n\n\n**path oracle policy**\n\n对于某个数字*n*，获得由具有可变输入长度的恰好*n*次迭代组成的原语的DFG 。随后可以通过在结果 DFG 中精确搜索*n*次迭代来识别目标原语\n\n![image-20210625125821055](where-s-crypto.assets/image-20210625125821055.png)\n\nde,i表示path oracle 对在执行地址e处找到的条件指令的第i个查询的决定\n\n7\n\n\n\n![image-20210625132713995](where-s-crypto.assets/image-20210625132713995.png)\n\nS =(G;P;B),  P = true\n\ni = 0, P = true, and c = (R8<= 0)  TAKE_BOTH\n\nP=(R8<=0),B4[0] = true(这个状态会跳转11行并退出）, and S' = (G';P';B'),  P' = (R8 > 0) B'4[0] =false\n\nS'继续循环，回到line4，c = (R8 <= 1), i = 1, P' = (R8 > 0) and\nB'4[0] = false   P'^c无法确定，因此TAKE_FALSE\n\n最后，i = n, we get c = R8 <= n and P' =(R8>n-1). TAKE_TRUE\n\n构建完成，得到两个图，一个对应R8<=0,一个R8=n。后者描述了算法的*n*次迭代，完全符合目标。前者描述零迭代，因此，包含的节点数量可以忽略不计。因此，我们接受该图在分析的后期阶段引起的少量开销。\n\n\n\n\n\n### 清除\n\n构建好后，进入清除阶段。从图中删除既不代表输入，也不代表任何输出计算中使用的值的节点。\n\n构建完成后，图G表示f在谓词P下的输入/输出关系。但是，也包含其他信息，比如临时load/store存进堆栈 创建的节点，由broker重写的表达式\n\n\n\n对于每个叶节点，检查其是否为f语义的一部分。如果v是以下几种情况中的任何一种，则认为它是：\n\n- f的返回值\n- store操作，且目标地址与SP寄存器无关。因此，信息存储在堆栈之外\n- call操作，比如不受内联约束的函数调用\n\n若以上都不是，则删除v以及其入边\n\n\n\n### 匹配\n\n模式匹配：在DFG中搜索与给定加密原语的图签名同构的子图。Ulmann子图同构算法来搜索DFG\n\n表达签名图：signature domain-specific language(DSL)\n\n![image-20210624171314309](where-s-crypto.assets/image-20210624171314309.png)\n\n其中圆形框表示关键字，方形框表示数据类型。\n\n- IDENTIFIER：为签名指定名称\n- VARIANT：强制创建新的空DFG图(后面的表达式被添加+到图中)。因此，允许指定签名的多个变体。子图同构检测最终对所有变体进行检测。\n- label（可选）：允许节点被其他表达式引用，从而实现表达式间的节点共享。\n- TRANSIENT：从表达式生成的节点被认为是非必要的，可能被清除\n\n新的图节点由表达式类型生成\n\n![image-20210624171324978](where-s-crypto.assets/image-20210624171324978.png)\n\nliteral表示常量。\n\nSTORE ， LOAD ， XOR ， OR ， AND ， MULT和ROTATE关键字后跟括号中包含的子表达式会引发新图节点的创建。子表达式作为输入节点。\n\nOPAQUE表示特殊的通配符节点s（通过子图同构算法与任何其他类型的节点进行比较总为真，且可以由有任意数量的输入节点，包括零个）\n\nclamp-label（可选）：为节点类型命名。与任何其他类型的节点进行比较都为真，并增加了所有带有相同类型标签的opaque必须映射到相同类型节点的限制（type clamping)\n\n\n\n子图同构：Ullmann算法（可剪枝的递归回溯算法），并增加了对type clamping的支持\n\n\n\n签名：主要为symmetric and unkeyed primitives。广义上说，该制定签名方法是制定primitives的定义属性，将它们转换为抽象的DFG，最后转换为用DSL表示的签名定义\n\n![image-20210624174209159](where-s-crypto.assets/image-20210624174209159.png)\n\n​\t\tFeistel:\n\n![image-20210624174908504](where-s-crypto.assets/image-20210624174908504.png)\n\n​\t\tF是一组特定算法的操作，因此不知道其属性。该OPAQUE操作值包括单一操作，而F包括数目不详的操作。已知F的输入为Ri和Ki，Ki也没有已知的性质。因此，为表示F引入多种variant。variant A中，用opaque（Ri)替换F，再用opaque(opaque(Ri))替换，直到达到8层嵌套操作。4444444\n\n![image-20210624174324222](where-s-crypto.assets/image-20210624174324222.png)\n\n### 范围与局限性\n\n1. 规范化和优化：单个函数可以表示为许多不同的汇编指令组合。语义等价类和DFG间建立1-to-1 mapping超出范围。\n\n2. 隐式流：\n\n   ```\n   \\\\语义等价\n   a <- b \\\\b直接流向a，依赖在DFG中明显\n   if a then b <- true; else b <- false \\\\依赖信息丢失\n   ```\n\n3. 函数入口点：IDA将函数入口点识别为算法的输入（可能不准确）\n\n4. 代码混淆\n\n5. 分类约束：假设寻找的算法属于已定义类别之一\n\n6. 误报：某些原始类是其他原始类的子集，有些实例符合几个类的定义\n\n7. 路径预测：编译器有时会在入口及退出时确保loop-guard evaluation，产生一个代表*n* + 1 次迭代的 DFG ；具有恒定迭代长度的密码原语超出了路径预测的控制范围。最后，循环展开将产生一个表示*kn*次迭代的 DFG ，其中*k*表示编译器分组的迭代次数。\n\n## 测试\n\n### 测试集\n\n- [43]论文使用的数据集\n- 共享库的集合以及openWRT网络设备固件的可执行部分\n- 开源的专有密码实现的集合\n- 现实中的嵌入式固件（PLCs，ECUs）的集合\n\n### 测试方法\n\n可调变量n：DFG中包含的算法实例的目标数量。与构建的DFG的大小有关，因此与运行时间相关。但其足够大，以便可以识别所有已有签名。特定于算法的分类器和Feistal分类器仅针对算法的单个实例，因此不受n的影响；而（N）LFSR和Sequential block permutation分类器受n的影响，因此它们基于多个实例来识别一个原语。后者（什么？）表示了一些未知压缩函数c的两个连续实例。由于重写规则旨在促进数值简化，算法的第一步与最后一步可能会分别与c的第一个和最后一个实例合并。因此，选择n=4，保证在DFG中存在两个连续的c的实例，选择大于4的话显然不会提供有关此属性的任何优势。此外，确定4个连续的DFG（实际上没有实现的代码生成的）中的LSFR轮次是极不可能的。因此，选取n=4。\n\n\n\n### 结果\n\n#### 与Lestringant[43]比较\n\n构建了一个尽可能忠实他们的ARM架构的新样本集。使用特定算法的签名来保证公平比较。结果如下\n\n![image-20210624202125509](where-s-crypto.assets/image-20210624202125509.png)\n\n无论编译器和优化级别如何，所有样本可以通过相应签名中的某一variant成功识别。证明能够识别这些算法，而无须求助于片段选择的启发式方法。\n\n#### OpenWRT二进制文件\n\n从二进制代码构建 DFG是一种特殊的执行情况，因此会受到*停机*问题的影响。因此，不能保证图构建会终止。因此，引入了图构建超时时间t。\n\n在分析libcrypto.so.1.1期间构建的所有图与图构建时间t的直方图如下所示\n\n![image-20210624202747254](where-s-crypto.assets/image-20210624202747254.png)\n\n结果表明，对于绝大多数图，构造时间可以在10s内完成。因此选择t=10s\n\n\n\nd：函数调用被内联的深度级别。\n\n调查d的影响，同时采用不同的值，并测量运行时间和准确性方面的性能。\n\n![image-20210624203559676](where-s-crypto.assets/image-20210624203559676.png)\n\n根据两者选择合理的d值，可以看出d>2时，准确性没有显著提高，而对于运行时间影响很大。因此选择d=2（True negative被省略，因为它们涵盖了绝大多数的结果，从而影响可读性 ）\n\n- true negative:没有函数f实现密码原语a，也没有DFG图匹配到签名![image-20210624225715291](where-s-crypto.assets/image-20210624225715291.png)\n- true positive: f实现了密码原语a，有DFG图匹配到签名\n- false positive:没有函数f实现密码原语a，有DFG图匹配到签名\n- false negative:f实现了密码原语a，没有DFG图匹配到签名\n\n![image-20210624230418524](where-s-crypto.assets/image-20210624230418524.png)\n\n表中的每个单元格都描述了第一个positive结果的相应二进制文件中的符号名称，或者，在false negative的情况下，期望得到positive的符号名称\n\n#### proprietary algorithms\n\n一些专有算法的分析如下所示。所有签名都针对一个通用的类别，且没有一个是预先构建来适合特定样本的。除了RED PIKE，其余都成功识别，其由于使用加法而不是异或，未被识别为Feistel。\n\n![image-20210624231520804](where-s-crypto.assets/image-20210624231520804.png)\n\n\n\n#### 现实中的固件\n\nEmerson ControlWave Micro RTU,\nEmerson ControlWave XFC flow computer, Schneider Electric\nM340 PLC and Volkswagen IPC\n\n除了Megamaso外，所有密码原语都被成功识别。Megamaso包含NLFSR，但非线性反馈是作为子程序实现的，且移位寄存器根据其返回值通过if语句更新。这违反了基于DFG的方法固有的隐式流量限制。\n\n![image-20210624231925380](where-s-crypto.assets/image-20210624231925380.png)\n\n#### 执行结果\n\n![image-20210625112903207](where-s-crypto.assets/image-20210625112903207.png)\n\n\n\n## 改进\n\n1. 增加signature\n2. 根据需求调参（不同应用场景与算法，参数的选择）、轮函数数量\n3. 密码原语的分类树不一定明确\n4. DFG无法表达代码流信息\n\n","slug":"where-s-crypto","published":1,"updated":"2022-01-24T19:35:58.000Z","layout":"post","photos":[],"link":"","_id":"cletwjoi0001dri3s4n5mfe51","content":"<h1>[论文阅读]where’s crypto</h1>\n<p><img src=\"where-s-crypto.assets/image-20210601155403815.png\" alt=\"image-20210601155403815\"></p>\n<p><strong>背景</strong>：专有密码学应用广泛。深入的安全分析需要在通常非常大的二进制文件中对算法进行定位和分类，因此即使在启发式方法的帮助下，手动检查也很耗时</p>\n<p><strong>现有的方法</strong>：DFG isomorphism(Automated identification of cryptographic<br>\nprimitives in binary code with data flow graph isomorphism[43])</p>\n<p><strong>缺陷</strong>：仅限于已知的primitives，依赖于启发式算法来选择待分析的代码片段</p>\n<p><strong>解决</strong>：通过将上述方法与符号执行结合（为密码原语的分类类别指定结构签名和与分析匹配的二进制代码），克服了上述缺陷，并将分析扩展到未知的专用密码原语中</p>\n<p><strong>贡献</strong>：</p>\n<ol>\n<li>将子图同构与符号执行结合，解决了片段选择的开放性问题并消除了对启发式的需求</li>\n<li>提出新的domain-specific language(DSL)，用于定义密码原语的结构属性</li>\n<li>ida开源插件where’s crypto?</li>\n</ol>\n<h2 id=\"具体方案-2\">具体方案</h2>\n<p><strong>密码原语</strong>：本质上是一组表示输入/输出关系的算术和逻辑操作</p>\n<p><strong>分类</strong>：纯粹为工具性，不会对算法进行排他性划分</p>\n<p><img src=\"where-s-crypto.assets/image-20210623221842089.png\" alt=\"image-20210623221842089\"></p>\n<p><strong>DFG</strong>:有向无环图（Directed Acyclic Graph)表示的一系列算术/逻辑运算中的数据流图</p>\n<p>顶点代表一个操作或一个信息</p>\n<p>顶点v1和v2间存在边表示v1（操作v1的结果）是操作v2的输入。</p>\n<p>整体流程图如下：</p>\n<p><img src=\"where-s-crypto.assets/image-20210624093611741.png\" alt=\"image-20210624093611741\"></p>\n<h3 id=\"图构建-2\">图构建</h3>\n<p>给定函数入口点，execute symbolically，同时生成DFG图 G=(V,E)，图创建过程中连续进行归一化，提高了性能。</p>\n<p>假设有一系列汇编指令， 将每条指令i转换为一组操作Oi(可能为空（NOP或分支)，也可能包含多个操作，然后根据此创建相应的DFG图G=(V,E)。</p>\n<p>根据输入类型分为以下三种情况</p>\n<ul>\n<li>\n<p>立即数：创建一个顶点表示G中的常数值。由边连接到Oi</p>\n</li>\n<li>\n<p>寄存器：在写入该寄存器的最后一个值和Oi间创建一个边。实际上，这意味着为每个寄存器维护一个数组，其中包含对G中该值对应的顶点的引用</p>\n</li>\n<li>\n<p>内存：LOAD，STORE。将内存地址顶点作为输入，与其他顶点一样，地址可以是常量，也可以是更复杂的符号表达式</p>\n<p>图创建具体过程如下所示</p>\n<p><img src=\"where-s-crypto.assets/image-20210624104523602.png\" alt=\"image-20210624104523602\"></p>\n<p>为特定架构编写的处理器模块可以将每条指令转换为图形节点，但其不能自主创建新的节点，必须与broker交互。</p>\n<p>broker负责规范化后规则的应用，这个过程与处理器架构无关。</p>\n<p>处理器模块向broker提供所需节点的规范，代理再将规范化后的规则应用于规范。</p>\n<p>规范化后，broker向DFG查询是否已经存在符合规范化后规范的节点。是则返回对他的引用</p>\n<p>因此，在符合相同规范的图中不存在两个不同的节点，或是规范化后的等效节点。</p>\n<p>规范化：包括简化运算，公共子表达式消除和随后的内存访问</p>\n<ul>\n<li>简化运算：输入参数为常数的算数/逻辑运算，直接由结果代替。同样，如果一个元素为其作为输入的操作的标识元素，则该操作无效且可被删除。若元素为0，可以将操作替换为0</li>\n<li>公共子表达式消除：一个代码片段中，相同值被多次重新计算。</li>\n</ul>\n<p><img src=\"where-s-crypto.assets/image-20210624114508898.png\" alt=\"image-20210624114508898\"></p>\n<ul>\n<li>内存访问：将load操作替换为其结果来纠正此问题，若之前存在对同一内存地址节点的store操作，则结果是已知的。通过在图构建期间维护一个查找表（将地址节点映射到它们对应的存储值的哈希表），可以在恒定时间内执行替换。</li>\n</ul>\n<p><img src=\"where-s-crypto.assets/image-20210624154848633.png\" alt=\"image-20210624154848633\"></p>\n<p>对于关联操作，结果不依赖于它们的执行顺序。因此，将嵌套的关联操作转换为接收所有输入的单个操作</p>\n<p><img src=\"where-s-crypto.assets/image-20210624154904447.png\" alt=\"image-20210624154904447\"></p>\n<p>其他规则：</p>\n</li>\n<li>\n<p>表达式x加倍，用mult(x,2)表示</p>\n<p><img src=\"where-s-crypto.assets/image-20210625132559544.png\" alt=\"image-20210625132559544\"></p>\n</li>\n<li>\n<p>表达式x，常数c1，c2。当c2 <em>&lt;</em> 2^(32-c1)且c1 <em>&lt;</em> 32时，AND ( <em>x</em> &gt;&gt; <em>c</em> 1 <em>,</em> <em>c</em>2 )和AND ( ROTATE ( <em>x</em> <em>,</em> <em>c</em>1 ) <em>,</em> <em>c</em>2 ) 等价。用AND ( x &gt;&gt; c 1 <em>,</em> c 2 )表示</p>\n<p><img src=\"where-s-crypto.assets/image-20210625132545137.png\" alt=\"image-20210625132545137\"></p>\n</li>\n<li>\n<p>先乘后加</p>\n</li>\n</ul>\n<p><img src=\"where-s-crypto.assets/image-20210625132532624.png\" alt=\"image-20210625132532624\"></p>\n<p>​\t\t在图构建过程中应用规范化规则比在图完全生成后的优点：</p>\n<ul>\n<li>规范化函数h有恒定的运行时间复杂度，那么构建阶段的运行时间复杂度，包括归一化，会随着汇编指令的数量线性增长，而在完全生成的DFG上重复应用则为二次复杂度</li>\n<li>任何一对节点引用的等价性都可以在常数时间内进行评估，只要检查v1是否等于v2.因此可以在常数时间内实现用结果替换load操作。</li>\n</ul>\n<p>符号执行：条件指令。分为以下两种情况</p>\n<p>determined:变量被限制在一个域，因此只有一个可能的结果。如固定迭代次数组成的循环末尾的条件跳转指令。</p>\n<p>underdetermined：输入变量的限制不足以确定固定的结果。</p>\n<p>处理方法：</p>\n<p>图构建首先将<em>S</em> = ( G <em>,</em> P <em>,</em> B )初始化为空状态，即G是空图， P = true ， B没有任何评估结果的记录。然后，开始通过处理位于函数<em>f</em>入口点的指令来构造。一些指令可能会操纵执行流程，例如，分支指令，在这种情况下，我们在其目标地址处继续。当我们遇到一条指令导致执行流程返回到<em>f</em>的调用函数时，构造就完成了。比如，在 ARM 程序集中，这是通过将<em>f</em>的调用者设置的寄存器LR的初始值写入程序计数器寄存器PC 来实现的</p>\n<p>以元组( v 1 <em>,</em> o <em>,</em> v 2 )的形式表示条件c，如果v 1或v 2是非常量的，则谓词<em>P</em>可以充分限制<em>v</em> 0或<em>v</em> 1使得c确定；如果<em>c</em>未确定，则两种执行路径都是可能的，我们被迫选择遵循哪一个，或者可以通过复制状态<em>S</em>并随后将每个执行路径分配给其中一个实例来遵循两条路径。这样，最终的图构造由几个 DFG 组成；每个代表不同的执行路径。这种做法被称为分叉状态<em>S</em>。在出现未确定条件时进行分叉可最大化代码覆盖率。然而，由于状态爆炸问题，这是不可行的。因此采用path oracle来确定何时应用该方法。</p>\n<p>何时应用分叉的策略仅与符号执行本身松散相关。<em>Path Oracle</em>是一个单独的实体，它在图构建阶段被查询，用于每次出现未确定的条件<em>c</em>。它决定<em>c</em>被评估为true还是false，或者构造分叉并遵循两个执行路径。</p>\n<p>算法如下所示，谓词P被更新为包括条件c（或其否定），从而保持其定义属性满足（保证G表示f的输入/输出关系）。然后将path oracle做的决定添加到backlog B中。</p>\n<p><img src=\"where-s-crypto.assets/image-20210625124717799.png\" alt=\"image-20210625124717799\"></p>\n<p><strong>path oracle policy</strong></p>\n<p>对于某个数字<em>n</em>，获得由具有可变输入长度的恰好<em>n</em>次迭代组成的原语的DFG 。随后可以通过在结果 DFG 中精确搜索<em>n</em>次迭代来识别目标原语</p>\n<p><img src=\"where-s-crypto.assets/image-20210625125821055.png\" alt=\"image-20210625125821055\"></p>\n<p>de,i表示path oracle 对在执行地址e处找到的条件指令的第i个查询的决定</p>\n<p>7</p>\n<p><img src=\"where-s-crypto.assets/image-20210625132713995.png\" alt=\"image-20210625132713995\"></p>\n<p>S =(G;P;B),  P = true</p>\n<p>i = 0, P = true, and c = (R8&lt;= 0)  TAKE_BOTH</p>\n<p>P=(R8&lt;=0),B4[0] = true(这个状态会跳转11行并退出）, and S’ = (G’;P’;B’),  P’ = (R8 &gt; 0) B’4[0] =false</p>\n<p>S’继续循环，回到line4，c = (R8 &lt;= 1), i = 1, P’ = (R8 &gt; 0) and<br>\nB’4[0] = false   P’^c无法确定，因此TAKE_FALSE</p>\n<p>最后，i = n, we get c = R8 &lt;= n and P’ =(R8&gt;n-1). TAKE_TRUE</p>\n<p>构建完成，得到两个图，一个对应R8&lt;=0,一个R8=n。后者描述了算法的<em>n</em>次迭代，完全符合目标。前者描述零迭代，因此，包含的节点数量可以忽略不计。因此，我们接受该图在分析的后期阶段引起的少量开销。</p>\n<h3 id=\"清除\">清除</h3>\n<p>构建好后，进入清除阶段。从图中删除既不代表输入，也不代表任何输出计算中使用的值的节点。</p>\n<p>构建完成后，图G表示f在谓词P下的输入/输出关系。但是，也包含其他信息，比如临时load/store存进堆栈 创建的节点，由broker重写的表达式</p>\n<p>对于每个叶节点，检查其是否为f语义的一部分。如果v是以下几种情况中的任何一种，则认为它是：</p>\n<ul>\n<li>f的返回值</li>\n<li>store操作，且目标地址与SP寄存器无关。因此，信息存储在堆栈之外</li>\n<li>call操作，比如不受内联约束的函数调用</li>\n</ul>\n<p>若以上都不是，则删除v以及其入边</p>\n<h3 id=\"匹配\">匹配</h3>\n<p>模式匹配：在DFG中搜索与给定加密原语的图签名同构的子图。Ulmann子图同构算法来搜索DFG</p>\n<p>表达签名图：signature domain-specific language(DSL)</p>\n<p><img src=\"where-s-crypto.assets/image-20210624171314309.png\" alt=\"image-20210624171314309\"></p>\n<p>其中圆形框表示关键字，方形框表示数据类型。</p>\n<ul>\n<li>IDENTIFIER：为签名指定名称</li>\n<li>VARIANT：强制创建新的空DFG图(后面的表达式被添加+到图中)。因此，允许指定签名的多个变体。子图同构检测最终对所有变体进行检测。</li>\n<li>label（可选）：允许节点被其他表达式引用，从而实现表达式间的节点共享。</li>\n<li>TRANSIENT：从表达式生成的节点被认为是非必要的，可能被清除</li>\n</ul>\n<p>新的图节点由表达式类型生成</p>\n<p><img src=\"where-s-crypto.assets/image-20210624171324978.png\" alt=\"image-20210624171324978\"></p>\n<p>literal表示常量。</p>\n<p>STORE ， LOAD ， XOR ， OR ， AND ， MULT和ROTATE关键字后跟括号中包含的子表达式会引发新图节点的创建。子表达式作为输入节点。</p>\n<p>OPAQUE表示特殊的通配符节点s（通过子图同构算法与任何其他类型的节点进行比较总为真，且可以由有任意数量的输入节点，包括零个）</p>\n<p>clamp-label（可选）：为节点类型命名。与任何其他类型的节点进行比较都为真，并增加了所有带有相同类型标签的opaque必须映射到相同类型节点的限制（type clamping)</p>\n<p>子图同构：Ullmann算法（可剪枝的递归回溯算法），并增加了对type clamping的支持</p>\n<p>签名：主要为symmetric and unkeyed primitives。广义上说，该制定签名方法是制定primitives的定义属性，将它们转换为抽象的DFG，最后转换为用DSL表示的签名定义</p>\n<p><img src=\"where-s-crypto.assets/image-20210624174209159.png\" alt=\"image-20210624174209159\"></p>\n<p>​\t\tFeistel:</p>\n<p><img src=\"where-s-crypto.assets/image-20210624174908504.png\" alt=\"image-20210624174908504\"></p>\n<p>​\t\tF是一组特定算法的操作，因此不知道其属性。该OPAQUE操作值包括单一操作，而F包括数目不详的操作。已知F的输入为Ri和Ki，Ki也没有已知的性质。因此，为表示F引入多种variant。variant A中，用opaque（Ri)替换F，再用opaque(opaque(Ri))替换，直到达到8层嵌套操作。4444444</p>\n<p><img src=\"where-s-crypto.assets/image-20210624174324222.png\" alt=\"image-20210624174324222\"></p>\n<h3 id=\"范围与局限性\">范围与局限性</h3>\n<ol>\n<li>\n<p>规范化和优化：单个函数可以表示为许多不同的汇编指令组合。语义等价类和DFG间建立1-to-1 mapping超出范围。</p>\n</li>\n<li>\n<p>隐式流：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\\\语义等价</span><br><span class=\"line\">a &lt;- b \\\\b直接流向a，依赖在DFG中明显</span><br><span class=\"line\">if a then b &lt;- true; else b &lt;- false \\\\依赖信息丢失</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>函数入口点：IDA将函数入口点识别为算法的输入（可能不准确）</p>\n</li>\n<li>\n<p>代码混淆</p>\n</li>\n<li>\n<p>分类约束：假设寻找的算法属于已定义类别之一</p>\n</li>\n<li>\n<p>误报：某些原始类是其他原始类的子集，有些实例符合几个类的定义</p>\n</li>\n<li>\n<p>路径预测：编译器有时会在入口及退出时确保loop-guard evaluation，产生一个代表<em>n</em> + 1 次迭代的 DFG ；具有恒定迭代长度的密码原语超出了路径预测的控制范围。最后，循环展开将产生一个表示<em>kn</em>次迭代的 DFG ，其中<em>k</em>表示编译器分组的迭代次数。</p>\n</li>\n</ol>\n<h2 id=\"测试-5\">测试</h2>\n<h3 id=\"测试集\">测试集</h3>\n<ul>\n<li>[43]论文使用的数据集</li>\n<li>共享库的集合以及openWRT网络设备固件的可执行部分</li>\n<li>开源的专有密码实现的集合</li>\n<li>现实中的嵌入式固件（PLCs，ECUs）的集合</li>\n</ul>\n<h3 id=\"测试方法\">测试方法</h3>\n<p>可调变量n：DFG中包含的算法实例的目标数量。与构建的DFG的大小有关，因此与运行时间相关。但其足够大，以便可以识别所有已有签名。特定于算法的分类器和Feistal分类器仅针对算法的单个实例，因此不受n的影响；而（N）LFSR和Sequential block permutation分类器受n的影响，因此它们基于多个实例来识别一个原语。后者（什么？）表示了一些未知压缩函数c的两个连续实例。由于重写规则旨在促进数值简化，算法的第一步与最后一步可能会分别与c的第一个和最后一个实例合并。因此，选择n=4，保证在DFG中存在两个连续的c的实例，选择大于4的话显然不会提供有关此属性的任何优势。此外，确定4个连续的DFG（实际上没有实现的代码生成的）中的LSFR轮次是极不可能的。因此，选取n=4。</p>\n<h3 id=\"结果\">结果</h3>\n<h4 id=\"与Lestringant-43-比较\">与Lestringant[43]比较</h4>\n<p>构建了一个尽可能忠实他们的ARM架构的新样本集。使用特定算法的签名来保证公平比较。结果如下</p>\n<p><img src=\"where-s-crypto.assets/image-20210624202125509.png\" alt=\"image-20210624202125509\"></p>\n<p>无论编译器和优化级别如何，所有样本可以通过相应签名中的某一variant成功识别。证明能够识别这些算法，而无须求助于片段选择的启发式方法。</p>\n<h4 id=\"OpenWRT二进制文件\">OpenWRT二进制文件</h4>\n<p>从二进制代码构建 DFG是一种特殊的执行情况，因此会受到<em>停机</em>问题的影响。因此，不能保证图构建会终止。因此，引入了图构建超时时间t。</p>\n<p>在分析libcrypto.so.1.1期间构建的所有图与图构建时间t的直方图如下所示</p>\n<p><img src=\"where-s-crypto.assets/image-20210624202747254.png\" alt=\"image-20210624202747254\"></p>\n<p>结果表明，对于绝大多数图，构造时间可以在10s内完成。因此选择t=10s</p>\n<p>d：函数调用被内联的深度级别。</p>\n<p>调查d的影响，同时采用不同的值，并测量运行时间和准确性方面的性能。</p>\n<p><img src=\"where-s-crypto.assets/image-20210624203559676.png\" alt=\"image-20210624203559676\"></p>\n<p>根据两者选择合理的d值，可以看出d&gt;2时，准确性没有显著提高，而对于运行时间影响很大。因此选择d=2（True negative被省略，因为它们涵盖了绝大多数的结果，从而影响可读性 ）</p>\n<ul>\n<li>true negative:没有函数f实现密码原语a，也没有DFG图匹配到签名<img src=\"where-s-crypto.assets/image-20210624225715291.png\" alt=\"image-20210624225715291\"></li>\n<li>true positive: f实现了密码原语a，有DFG图匹配到签名</li>\n<li>false positive:没有函数f实现密码原语a，有DFG图匹配到签名</li>\n<li>false negative:f实现了密码原语a，没有DFG图匹配到签名</li>\n</ul>\n<p><img src=\"where-s-crypto.assets/image-20210624230418524.png\" alt=\"image-20210624230418524\"></p>\n<p>表中的每个单元格都描述了第一个positive结果的相应二进制文件中的符号名称，或者，在false negative的情况下，期望得到positive的符号名称</p>\n<h4 id=\"proprietary-algorithms\">proprietary algorithms</h4>\n<p>一些专有算法的分析如下所示。所有签名都针对一个通用的类别，且没有一个是预先构建来适合特定样本的。除了RED PIKE，其余都成功识别，其由于使用加法而不是异或，未被识别为Feistel。</p>\n<p><img src=\"where-s-crypto.assets/image-20210624231520804.png\" alt=\"image-20210624231520804\"></p>\n<h4 id=\"现实中的固件\">现实中的固件</h4>\n<p>Emerson ControlWave Micro RTU,<br>\nEmerson ControlWave XFC flow computer, Schneider Electric<br>\nM340 PLC and Volkswagen IPC</p>\n<p>除了Megamaso外，所有密码原语都被成功识别。Megamaso包含NLFSR，但非线性反馈是作为子程序实现的，且移位寄存器根据其返回值通过if语句更新。这违反了基于DFG的方法固有的隐式流量限制。</p>\n<p><img src=\"where-s-crypto.assets/image-20210624231925380.png\" alt=\"image-20210624231925380\"></p>\n<h4 id=\"执行结果\">执行结果</h4>\n<p><img src=\"where-s-crypto.assets/image-20210625112903207.png\" alt=\"image-20210625112903207\"></p>\n<h2 id=\"改进-2\">改进</h2>\n<ol>\n<li>增加signature</li>\n<li>根据需求调参（不同应用场景与算法，参数的选择）、轮函数数量</li>\n<li>密码原语的分类树不一定明确</li>\n<li>DFG无法表达代码流信息</li>\n</ol>\n","site":{"data":{"about":{"class":{"class_name":"about","link_list":{"-1":{"name":"Scorpion","avatar":"/image/avatar.jpg","link":null,"descr":"�����ƹ������ë��̨��ɢ�򣬻�ѩ���������ݣ����ֲ�Ƭ����Ƭ�赸��Ƶ��ҵ����Ӱ���Ǻð�ȫ��"}}}},"link":{"class":{"class_name":"友情链接","link_list":{"-1":{"name":"M4tsuri","link":"https://M4tsuri.io","avatar":"/image/m4tsuri.jpg","descr":"pwn,blockchain"}}}}}},"excerpt":"","more":"<h1>[论文阅读]where’s crypto</h1>\n<p><img src=\"where-s-crypto.assets/image-20210601155403815.png\" alt=\"image-20210601155403815\"></p>\n<p><strong>背景</strong>：专有密码学应用广泛。深入的安全分析需要在通常非常大的二进制文件中对算法进行定位和分类，因此即使在启发式方法的帮助下，手动检查也很耗时</p>\n<p><strong>现有的方法</strong>：DFG isomorphism(Automated identification of cryptographic<br>\nprimitives in binary code with data flow graph isomorphism[43])</p>\n<p><strong>缺陷</strong>：仅限于已知的primitives，依赖于启发式算法来选择待分析的代码片段</p>\n<p><strong>解决</strong>：通过将上述方法与符号执行结合（为密码原语的分类类别指定结构签名和与分析匹配的二进制代码），克服了上述缺陷，并将分析扩展到未知的专用密码原语中</p>\n<p><strong>贡献</strong>：</p>\n<ol>\n<li>将子图同构与符号执行结合，解决了片段选择的开放性问题并消除了对启发式的需求</li>\n<li>提出新的domain-specific language(DSL)，用于定义密码原语的结构属性</li>\n<li>ida开源插件where’s crypto?</li>\n</ol>\n<h2 id=\"具体方案-2\">具体方案</h2>\n<p><strong>密码原语</strong>：本质上是一组表示输入/输出关系的算术和逻辑操作</p>\n<p><strong>分类</strong>：纯粹为工具性，不会对算法进行排他性划分</p>\n<p><img src=\"where-s-crypto.assets/image-20210623221842089.png\" alt=\"image-20210623221842089\"></p>\n<p><strong>DFG</strong>:有向无环图（Directed Acyclic Graph)表示的一系列算术/逻辑运算中的数据流图</p>\n<p>顶点代表一个操作或一个信息</p>\n<p>顶点v1和v2间存在边表示v1（操作v1的结果）是操作v2的输入。</p>\n<p>整体流程图如下：</p>\n<p><img src=\"where-s-crypto.assets/image-20210624093611741.png\" alt=\"image-20210624093611741\"></p>\n<h3 id=\"图构建-2\">图构建</h3>\n<p>给定函数入口点，execute symbolically，同时生成DFG图 G=(V,E)，图创建过程中连续进行归一化，提高了性能。</p>\n<p>假设有一系列汇编指令， 将每条指令i转换为一组操作Oi(可能为空（NOP或分支)，也可能包含多个操作，然后根据此创建相应的DFG图G=(V,E)。</p>\n<p>根据输入类型分为以下三种情况</p>\n<ul>\n<li>\n<p>立即数：创建一个顶点表示G中的常数值。由边连接到Oi</p>\n</li>\n<li>\n<p>寄存器：在写入该寄存器的最后一个值和Oi间创建一个边。实际上，这意味着为每个寄存器维护一个数组，其中包含对G中该值对应的顶点的引用</p>\n</li>\n<li>\n<p>内存：LOAD，STORE。将内存地址顶点作为输入，与其他顶点一样，地址可以是常量，也可以是更复杂的符号表达式</p>\n<p>图创建具体过程如下所示</p>\n<p><img src=\"where-s-crypto.assets/image-20210624104523602.png\" alt=\"image-20210624104523602\"></p>\n<p>为特定架构编写的处理器模块可以将每条指令转换为图形节点，但其不能自主创建新的节点，必须与broker交互。</p>\n<p>broker负责规范化后规则的应用，这个过程与处理器架构无关。</p>\n<p>处理器模块向broker提供所需节点的规范，代理再将规范化后的规则应用于规范。</p>\n<p>规范化后，broker向DFG查询是否已经存在符合规范化后规范的节点。是则返回对他的引用</p>\n<p>因此，在符合相同规范的图中不存在两个不同的节点，或是规范化后的等效节点。</p>\n<p>规范化：包括简化运算，公共子表达式消除和随后的内存访问</p>\n<ul>\n<li>简化运算：输入参数为常数的算数/逻辑运算，直接由结果代替。同样，如果一个元素为其作为输入的操作的标识元素，则该操作无效且可被删除。若元素为0，可以将操作替换为0</li>\n<li>公共子表达式消除：一个代码片段中，相同值被多次重新计算。</li>\n</ul>\n<p><img src=\"where-s-crypto.assets/image-20210624114508898.png\" alt=\"image-20210624114508898\"></p>\n<ul>\n<li>内存访问：将load操作替换为其结果来纠正此问题，若之前存在对同一内存地址节点的store操作，则结果是已知的。通过在图构建期间维护一个查找表（将地址节点映射到它们对应的存储值的哈希表），可以在恒定时间内执行替换。</li>\n</ul>\n<p><img src=\"where-s-crypto.assets/image-20210624154848633.png\" alt=\"image-20210624154848633\"></p>\n<p>对于关联操作，结果不依赖于它们的执行顺序。因此，将嵌套的关联操作转换为接收所有输入的单个操作</p>\n<p><img src=\"where-s-crypto.assets/image-20210624154904447.png\" alt=\"image-20210624154904447\"></p>\n<p>其他规则：</p>\n</li>\n<li>\n<p>表达式x加倍，用mult(x,2)表示</p>\n<p><img src=\"where-s-crypto.assets/image-20210625132559544.png\" alt=\"image-20210625132559544\"></p>\n</li>\n<li>\n<p>表达式x，常数c1，c2。当c2 <em>&lt;</em> 2^(32-c1)且c1 <em>&lt;</em> 32时，AND ( <em>x</em> &gt;&gt; <em>c</em> 1 <em>,</em> <em>c</em>2 )和AND ( ROTATE ( <em>x</em> <em>,</em> <em>c</em>1 ) <em>,</em> <em>c</em>2 ) 等价。用AND ( x &gt;&gt; c 1 <em>,</em> c 2 )表示</p>\n<p><img src=\"where-s-crypto.assets/image-20210625132545137.png\" alt=\"image-20210625132545137\"></p>\n</li>\n<li>\n<p>先乘后加</p>\n</li>\n</ul>\n<p><img src=\"where-s-crypto.assets/image-20210625132532624.png\" alt=\"image-20210625132532624\"></p>\n<p>​\t\t在图构建过程中应用规范化规则比在图完全生成后的优点：</p>\n<ul>\n<li>规范化函数h有恒定的运行时间复杂度，那么构建阶段的运行时间复杂度，包括归一化，会随着汇编指令的数量线性增长，而在完全生成的DFG上重复应用则为二次复杂度</li>\n<li>任何一对节点引用的等价性都可以在常数时间内进行评估，只要检查v1是否等于v2.因此可以在常数时间内实现用结果替换load操作。</li>\n</ul>\n<p>符号执行：条件指令。分为以下两种情况</p>\n<p>determined:变量被限制在一个域，因此只有一个可能的结果。如固定迭代次数组成的循环末尾的条件跳转指令。</p>\n<p>underdetermined：输入变量的限制不足以确定固定的结果。</p>\n<p>处理方法：</p>\n<p>图构建首先将<em>S</em> = ( G <em>,</em> P <em>,</em> B )初始化为空状态，即G是空图， P = true ， B没有任何评估结果的记录。然后，开始通过处理位于函数<em>f</em>入口点的指令来构造。一些指令可能会操纵执行流程，例如，分支指令，在这种情况下，我们在其目标地址处继续。当我们遇到一条指令导致执行流程返回到<em>f</em>的调用函数时，构造就完成了。比如，在 ARM 程序集中，这是通过将<em>f</em>的调用者设置的寄存器LR的初始值写入程序计数器寄存器PC 来实现的</p>\n<p>以元组( v 1 <em>,</em> o <em>,</em> v 2 )的形式表示条件c，如果v 1或v 2是非常量的，则谓词<em>P</em>可以充分限制<em>v</em> 0或<em>v</em> 1使得c确定；如果<em>c</em>未确定，则两种执行路径都是可能的，我们被迫选择遵循哪一个，或者可以通过复制状态<em>S</em>并随后将每个执行路径分配给其中一个实例来遵循两条路径。这样，最终的图构造由几个 DFG 组成；每个代表不同的执行路径。这种做法被称为分叉状态<em>S</em>。在出现未确定条件时进行分叉可最大化代码覆盖率。然而，由于状态爆炸问题，这是不可行的。因此采用path oracle来确定何时应用该方法。</p>\n<p>何时应用分叉的策略仅与符号执行本身松散相关。<em>Path Oracle</em>是一个单独的实体，它在图构建阶段被查询，用于每次出现未确定的条件<em>c</em>。它决定<em>c</em>被评估为true还是false，或者构造分叉并遵循两个执行路径。</p>\n<p>算法如下所示，谓词P被更新为包括条件c（或其否定），从而保持其定义属性满足（保证G表示f的输入/输出关系）。然后将path oracle做的决定添加到backlog B中。</p>\n<p><img src=\"where-s-crypto.assets/image-20210625124717799.png\" alt=\"image-20210625124717799\"></p>\n<p><strong>path oracle policy</strong></p>\n<p>对于某个数字<em>n</em>，获得由具有可变输入长度的恰好<em>n</em>次迭代组成的原语的DFG 。随后可以通过在结果 DFG 中精确搜索<em>n</em>次迭代来识别目标原语</p>\n<p><img src=\"where-s-crypto.assets/image-20210625125821055.png\" alt=\"image-20210625125821055\"></p>\n<p>de,i表示path oracle 对在执行地址e处找到的条件指令的第i个查询的决定</p>\n<p>7</p>\n<p><img src=\"where-s-crypto.assets/image-20210625132713995.png\" alt=\"image-20210625132713995\"></p>\n<p>S =(G;P;B),  P = true</p>\n<p>i = 0, P = true, and c = (R8&lt;= 0)  TAKE_BOTH</p>\n<p>P=(R8&lt;=0),B4[0] = true(这个状态会跳转11行并退出）, and S’ = (G’;P’;B’),  P’ = (R8 &gt; 0) B’4[0] =false</p>\n<p>S’继续循环，回到line4，c = (R8 &lt;= 1), i = 1, P’ = (R8 &gt; 0) and<br>\nB’4[0] = false   P’^c无法确定，因此TAKE_FALSE</p>\n<p>最后，i = n, we get c = R8 &lt;= n and P’ =(R8&gt;n-1). TAKE_TRUE</p>\n<p>构建完成，得到两个图，一个对应R8&lt;=0,一个R8=n。后者描述了算法的<em>n</em>次迭代，完全符合目标。前者描述零迭代，因此，包含的节点数量可以忽略不计。因此，我们接受该图在分析的后期阶段引起的少量开销。</p>\n<h3 id=\"清除\">清除</h3>\n<p>构建好后，进入清除阶段。从图中删除既不代表输入，也不代表任何输出计算中使用的值的节点。</p>\n<p>构建完成后，图G表示f在谓词P下的输入/输出关系。但是，也包含其他信息，比如临时load/store存进堆栈 创建的节点，由broker重写的表达式</p>\n<p>对于每个叶节点，检查其是否为f语义的一部分。如果v是以下几种情况中的任何一种，则认为它是：</p>\n<ul>\n<li>f的返回值</li>\n<li>store操作，且目标地址与SP寄存器无关。因此，信息存储在堆栈之外</li>\n<li>call操作，比如不受内联约束的函数调用</li>\n</ul>\n<p>若以上都不是，则删除v以及其入边</p>\n<h3 id=\"匹配\">匹配</h3>\n<p>模式匹配：在DFG中搜索与给定加密原语的图签名同构的子图。Ulmann子图同构算法来搜索DFG</p>\n<p>表达签名图：signature domain-specific language(DSL)</p>\n<p><img src=\"where-s-crypto.assets/image-20210624171314309.png\" alt=\"image-20210624171314309\"></p>\n<p>其中圆形框表示关键字，方形框表示数据类型。</p>\n<ul>\n<li>IDENTIFIER：为签名指定名称</li>\n<li>VARIANT：强制创建新的空DFG图(后面的表达式被添加+到图中)。因此，允许指定签名的多个变体。子图同构检测最终对所有变体进行检测。</li>\n<li>label（可选）：允许节点被其他表达式引用，从而实现表达式间的节点共享。</li>\n<li>TRANSIENT：从表达式生成的节点被认为是非必要的，可能被清除</li>\n</ul>\n<p>新的图节点由表达式类型生成</p>\n<p><img src=\"where-s-crypto.assets/image-20210624171324978.png\" alt=\"image-20210624171324978\"></p>\n<p>literal表示常量。</p>\n<p>STORE ， LOAD ， XOR ， OR ， AND ， MULT和ROTATE关键字后跟括号中包含的子表达式会引发新图节点的创建。子表达式作为输入节点。</p>\n<p>OPAQUE表示特殊的通配符节点s（通过子图同构算法与任何其他类型的节点进行比较总为真，且可以由有任意数量的输入节点，包括零个）</p>\n<p>clamp-label（可选）：为节点类型命名。与任何其他类型的节点进行比较都为真，并增加了所有带有相同类型标签的opaque必须映射到相同类型节点的限制（type clamping)</p>\n<p>子图同构：Ullmann算法（可剪枝的递归回溯算法），并增加了对type clamping的支持</p>\n<p>签名：主要为symmetric and unkeyed primitives。广义上说，该制定签名方法是制定primitives的定义属性，将它们转换为抽象的DFG，最后转换为用DSL表示的签名定义</p>\n<p><img src=\"where-s-crypto.assets/image-20210624174209159.png\" alt=\"image-20210624174209159\"></p>\n<p>​\t\tFeistel:</p>\n<p><img src=\"where-s-crypto.assets/image-20210624174908504.png\" alt=\"image-20210624174908504\"></p>\n<p>​\t\tF是一组特定算法的操作，因此不知道其属性。该OPAQUE操作值包括单一操作，而F包括数目不详的操作。已知F的输入为Ri和Ki，Ki也没有已知的性质。因此，为表示F引入多种variant。variant A中，用opaque（Ri)替换F，再用opaque(opaque(Ri))替换，直到达到8层嵌套操作。4444444</p>\n<p><img src=\"where-s-crypto.assets/image-20210624174324222.png\" alt=\"image-20210624174324222\"></p>\n<h3 id=\"范围与局限性\">范围与局限性</h3>\n<ol>\n<li>\n<p>规范化和优化：单个函数可以表示为许多不同的汇编指令组合。语义等价类和DFG间建立1-to-1 mapping超出范围。</p>\n</li>\n<li>\n<p>隐式流：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\\\语义等价</span><br><span class=\"line\">a &lt;- b \\\\b直接流向a，依赖在DFG中明显</span><br><span class=\"line\">if a then b &lt;- true; else b &lt;- false \\\\依赖信息丢失</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>函数入口点：IDA将函数入口点识别为算法的输入（可能不准确）</p>\n</li>\n<li>\n<p>代码混淆</p>\n</li>\n<li>\n<p>分类约束：假设寻找的算法属于已定义类别之一</p>\n</li>\n<li>\n<p>误报：某些原始类是其他原始类的子集，有些实例符合几个类的定义</p>\n</li>\n<li>\n<p>路径预测：编译器有时会在入口及退出时确保loop-guard evaluation，产生一个代表<em>n</em> + 1 次迭代的 DFG ；具有恒定迭代长度的密码原语超出了路径预测的控制范围。最后，循环展开将产生一个表示<em>kn</em>次迭代的 DFG ，其中<em>k</em>表示编译器分组的迭代次数。</p>\n</li>\n</ol>\n<h2 id=\"测试-5\">测试</h2>\n<h3 id=\"测试集\">测试集</h3>\n<ul>\n<li>[43]论文使用的数据集</li>\n<li>共享库的集合以及openWRT网络设备固件的可执行部分</li>\n<li>开源的专有密码实现的集合</li>\n<li>现实中的嵌入式固件（PLCs，ECUs）的集合</li>\n</ul>\n<h3 id=\"测试方法\">测试方法</h3>\n<p>可调变量n：DFG中包含的算法实例的目标数量。与构建的DFG的大小有关，因此与运行时间相关。但其足够大，以便可以识别所有已有签名。特定于算法的分类器和Feistal分类器仅针对算法的单个实例，因此不受n的影响；而（N）LFSR和Sequential block permutation分类器受n的影响，因此它们基于多个实例来识别一个原语。后者（什么？）表示了一些未知压缩函数c的两个连续实例。由于重写规则旨在促进数值简化，算法的第一步与最后一步可能会分别与c的第一个和最后一个实例合并。因此，选择n=4，保证在DFG中存在两个连续的c的实例，选择大于4的话显然不会提供有关此属性的任何优势。此外，确定4个连续的DFG（实际上没有实现的代码生成的）中的LSFR轮次是极不可能的。因此，选取n=4。</p>\n<h3 id=\"结果\">结果</h3>\n<h4 id=\"与Lestringant-43-比较\">与Lestringant[43]比较</h4>\n<p>构建了一个尽可能忠实他们的ARM架构的新样本集。使用特定算法的签名来保证公平比较。结果如下</p>\n<p><img src=\"where-s-crypto.assets/image-20210624202125509.png\" alt=\"image-20210624202125509\"></p>\n<p>无论编译器和优化级别如何，所有样本可以通过相应签名中的某一variant成功识别。证明能够识别这些算法，而无须求助于片段选择的启发式方法。</p>\n<h4 id=\"OpenWRT二进制文件\">OpenWRT二进制文件</h4>\n<p>从二进制代码构建 DFG是一种特殊的执行情况，因此会受到<em>停机</em>问题的影响。因此，不能保证图构建会终止。因此，引入了图构建超时时间t。</p>\n<p>在分析libcrypto.so.1.1期间构建的所有图与图构建时间t的直方图如下所示</p>\n<p><img src=\"where-s-crypto.assets/image-20210624202747254.png\" alt=\"image-20210624202747254\"></p>\n<p>结果表明，对于绝大多数图，构造时间可以在10s内完成。因此选择t=10s</p>\n<p>d：函数调用被内联的深度级别。</p>\n<p>调查d的影响，同时采用不同的值，并测量运行时间和准确性方面的性能。</p>\n<p><img src=\"where-s-crypto.assets/image-20210624203559676.png\" alt=\"image-20210624203559676\"></p>\n<p>根据两者选择合理的d值，可以看出d&gt;2时，准确性没有显著提高，而对于运行时间影响很大。因此选择d=2（True negative被省略，因为它们涵盖了绝大多数的结果，从而影响可读性 ）</p>\n<ul>\n<li>true negative:没有函数f实现密码原语a，也没有DFG图匹配到签名<img src=\"where-s-crypto.assets/image-20210624225715291.png\" alt=\"image-20210624225715291\"></li>\n<li>true positive: f实现了密码原语a，有DFG图匹配到签名</li>\n<li>false positive:没有函数f实现密码原语a，有DFG图匹配到签名</li>\n<li>false negative:f实现了密码原语a，没有DFG图匹配到签名</li>\n</ul>\n<p><img src=\"where-s-crypto.assets/image-20210624230418524.png\" alt=\"image-20210624230418524\"></p>\n<p>表中的每个单元格都描述了第一个positive结果的相应二进制文件中的符号名称，或者，在false negative的情况下，期望得到positive的符号名称</p>\n<h4 id=\"proprietary-algorithms\">proprietary algorithms</h4>\n<p>一些专有算法的分析如下所示。所有签名都针对一个通用的类别，且没有一个是预先构建来适合特定样本的。除了RED PIKE，其余都成功识别，其由于使用加法而不是异或，未被识别为Feistel。</p>\n<p><img src=\"where-s-crypto.assets/image-20210624231520804.png\" alt=\"image-20210624231520804\"></p>\n<h4 id=\"现实中的固件\">现实中的固件</h4>\n<p>Emerson ControlWave Micro RTU,<br>\nEmerson ControlWave XFC flow computer, Schneider Electric<br>\nM340 PLC and Volkswagen IPC</p>\n<p>除了Megamaso外，所有密码原语都被成功识别。Megamaso包含NLFSR，但非线性反馈是作为子程序实现的，且移位寄存器根据其返回值通过if语句更新。这违反了基于DFG的方法固有的隐式流量限制。</p>\n<p><img src=\"where-s-crypto.assets/image-20210624231925380.png\" alt=\"image-20210624231925380\"></p>\n<h4 id=\"执行结果\">执行结果</h4>\n<p><img src=\"where-s-crypto.assets/image-20210625112903207.png\" alt=\"image-20210625112903207\"></p>\n<h2 id=\"改进-2\">改进</h2>\n<ol>\n<li>增加signature</li>\n<li>根据需求调参（不同应用场景与算法，参数的选择）、轮函数数量</li>\n<li>密码原语的分类树不一定明确</li>\n<li>DFG无法表达代码流信息</li>\n</ol>\n"},{"title":"程序合成","date":"2021-12-06T13:00:00.000Z","keywords":null,"description":null,"top_img":null,"comments":1,"cover":"https://scorpionre.github.io/2021/12/06/program-synthesis/program-synthesis.assets/image-20220224115439047.png","toc":null,"toc_number":null,"copyright":null,"mathjax":null,"katex":null,"hide":null,"_content":"\n# 程序合成\n\n![image-20220224115439047](program-synthesis.assets/image-20220224115439047.png)\n\n顾斌, 于波, 董晓刚, 李晓锋, 钟睿明, 杨孟飞. 程序智能合成技术研究进展. 软件学报.\nhttp://www.jos.org.cn/1000-9825/6200.htm\n\n## 基于输入输出\n\n### 特点\n\n- 根据输入输出实例对训练合成模型。输入领域特定语言（DSL）描述的需求规格，合成模型便可以给出与之相对应的程序\n- 需求规约为输入输出示例对\n\n\n\n### 代表方法\n\n![image-20211223232437622](program-synthesis.assets/image-20211223232437622.png)\n\n主要进一步阅读了Balog等人的Deepcoder，该方法能够根据输入输出示例,使用深度神经网络和集束搜索技术实现特定领域的代码自动合成。\n\n特色：\n\n- 缩小了搜索空间,用大小为34 的DSL 指令集进行表示,通过将深度神经网络和集束搜索技术相结合生成简单的程序\n- 与传统方法相比,该方法实现效率较高。该方法作为一种代码自动合成方法,将深度学习技术和代码的搜索生成技术相结合,具有创新性\n\n局限性：\n\n- 指令集和操作数有限,无法描述复杂任务,通常只能生成10 行左右的代码。\n- 只能合成简单的程序，动态规划和搜索都无法做到。所以需要通过添加更多的原语来扩展DSL，并在程序构造中允许更多的灵活性(例如允许循环)\n\n\n\n![image-20211224202523935](program-synthesis.assets/image-20211224202523935.png)\n\n\n\n**输入输出：**\n\n总的输入为示例输入输出对，如下图中的Input-output example\n\n输出为DSL表示的程序\n\n![image-20211224200346689](program-synthesis.assets/image-20211224200346689.png)\n\n**模型结构**\n\n![image-20211224203951802](program-synthesis.assets/image-20211224203951802.png)\n\n- 用one-hot编码来表示输入输入和输出类型（数或数组），然后用NULL将其填充到最大长度L\n\n- 输入和输出的整数都映射到大小E=20的learned embedding vector中（整数的范围被限制在一个有限的范围内，每个嵌入都被单独参数化）\n- 将输入类型、输入、输出类型、输出的embedding连接到一个固定长度的向量中，并将这个向量通过H=3个包含K=256个sigmoid单元的隐藏层传递\n- 最后得到源代码中出现DSL定义的函数的可能性，上述程序得到的输出如下图所示\n\n![image-20211224200549972](program-synthesis.assets/image-20211224200549972.png)\n\nDSL表示的部分函数如下所示：\n\n![image-20211224205920700](program-synthesis.assets/image-20211224205920700.png)\n\n![image-20211224205908008](program-synthesis.assets/image-20211224205908008.png)\n\n然后，使用神经网络预测到的概率来指导搜索与给定输入输出示例对一致的程序。一般用到的算法有DFS,\"Sort and add\" enumeration,Sketch,λ^2。\n\n\n\n## 基于代码框架（语法）\n\n### 特点\n\n​\t主要利用程序结构或者语法框架信息,将程序代码转换为抽象语法树、控制流图和数据流图、程序框架草图等某种结构化表\n\n\n\n![image-20211223232459726](program-synthesis.assets/image-20211223232459726.png)\n\n打算进一步阅读Alur等人提出的方法，该方法的输入包括一组由逻辑表达式描述的需求语义规范和一组符合语法规则的候选实现集,允许用户使用语法来补充候选集,并找到一个满足给定需求的解.该团队同时在基于语法制导的程序合成方法基础上加入了多种技术,如增加反例技术、激活学习技术、随机搜索技术等,这些方法利用语法进行程序搜索,大大缩小了代码空间,从而提升了搜索效率。\n\n而更新的有的是生成SQL程序或只能根据上下文自动补全而无法生成可执行程序。\n\n\n\n### Search-based program Synthesis\n\nCommunications of the ACM,2018\n\n![image-20211226211621715](program-synthesis.assets/image-20211226211621715.png)\n\n\n\n**特色：**\n\n- 需求规约为逻辑规约，输入输出对\n\n  \n\n**局限性：**\n\n- 依赖于逻辑规约的定义\n\n- 仅仅找到一个表达式，相当于只能进行简单的数学、逻辑运算\n\n- 无法生成可执行代码\n\n  \n\n\n\n**输入输出：**\n\n输入：\n\n- Exp：（expressions specified using a grammar），如下所示\n\n![image-20211226204335258](program-synthesis.assets/image-20211226204335258.png)\n\n- Spec：所需函数的逻辑规范，如下所示表示x，y中的最大值\n\n![image-20211226204452516](program-synthesis.assets/image-20211226204452516.png)\n\n输出：\n\n从Exp找到一个expression e，使得Spec中用e替换f是valid\n\n找不到则报错\n\n\n\n**模型：**\n\n![image-20211226205016145](program-synthesis.assets/image-20211226205016145.png)\n\n- 初始示例集包含有趣的输入，learner使用这些输入来引导其搜索。这个集合最初可以是空的\n\n- learning module：寻找候选expression，至少对于初始示例集来说。\n  - 是inductive synthesis的一个实例\n  - 枚举搜索（剪枝方法：如果有e1,e2，对示例集中所有输入得到的输出都相同，则认为是等效的。枚举算法只维护一个不相等表达式的列表，当构造一个新表达式时，它首先检查它是否与列表中已经存在的表达式相等，如果相等，则丢弃它）或使用决策树\n- verification oracle（SMT solver）：验证e的合法性。对于所有输入来说，如果都满足则成功找到了e；不满足则反馈给Leaner一个反例\n\n\n\n\n\n## 基于自然语言\n\n### 特点\n\n- 需求规约为自然语言，但自然语言具有二义性\n\n![image-20211223232509638](program-synthesis.assets/image-20211223232509638.png)\n\n打算先进一步阅读Desai发表的文章。因为考虑到其可以利用神经网络模型学习自然语言与DSL 之间的关系,然后使用训练好的神经网络模型将用户提供的自然语言描述转换为DSL,再通过DSL 进行后续程序合成。或许可以和基于输入输出对的方法结合使用。\n\n### 代表方法\n\n![image-20211225081537462](program-synthesis.assets/image-20211225081537462.png)\n\n**特色：**\n\n- 从top-level训练数据生成用于分类器学习的训练数据\n\n- 将离散的评分指标平滑化为连续可微的损失函数，以便有效地学习权值\n- 可以应用于新的dsl，并且只需要DSL定义以及翻译对训练数据\n\n**局限性：**\n\n- 单词与terminals的映射没有考虑单词在句子中的位置\n- 上下文隐含义的理解\n\n\n\n**NL-to-DSL合成器输入输出**\n\n用户输入：\n\n- 自然语言（英语句子），如下图中的S\n\n输出：\n\n- 经过排序的候选DSL程序的列表，如下图中的P1，P2\n\n![image-20211225085504762](program-synthesis.assets/image-20211225085504762.png)\n\n\n\n**模型**\n\nNL-to-DSL合成器的合成方法：\n\n输入：\n\n- DSL：L=(G,TC)，G为上下文无关语法（Gt表示terminals(函数名或值)，Gr表示生成规则），TC为类型/语义检查器（检查程序是否well-typed）\n\n  比如下图所示grammar\n\n  ![image-20211225093440256](program-synthesis.assets/image-20211225093440256.png)\n\n- 训练数据：（S,P）的集合，S为英语句子，P为对应的DSL程序\n\n​\t具体细节论文中没有详细介绍，训练得到NL-to-DSL合成器，以及NLDict\n\n\n\nNL-to-DSL合成DSL的算法：\n\n![image-20211225095033519](program-synthesis.assets/image-20211225095033519.png)\n\n- 将用户输入的句子中的每个单词转换为terminal(函数名或值)得到NLDict字典\n\n  ​\t如果操作的名称是正确的英语单词，例如Insert，则使用WordNet同义词列表来收集与该操作关联的常用单词。如果名称不是一个简单的单词，而是几个单词的连接(或缩写)，例如StartsWith，则可以通过拆分名称和解析每个子组件单词的同义词来处理。\n\n- 将终端和一个单例映射(将单词的索引与生成的终端相关联)的元组存储到集合R0中\n\n- 通过bag算法：枚举所有可能的well-typed程序来组成程序\n\n  ![image-20211225101633374](program-synthesis.assets/image-20211225101633374.png)\n\n  - 其中M为witness map：如果L语言中的程序P与句子S是一致，存在S到Gt中的terminal的映射M，使得M有且仅有P中所有terminals。即S中的单词表示了DSL中的所有terminal\n\n  - UsableWords(S)是在S中出现的那些单词，它们被映射到一些terminals\n\n  - UsedWords(S;M)是在S中出现的可用单词的集合，作为映射M的一部分使用\n\n    ![image-20211225101503380](program-synthesis.assets/image-20211225101503380-16403986033541.png)\n\n- 对可能的程序排序并输出\n\n  - coverage score：输入的自然语言S中实际用于生成程序P的可用信息的比例\n\n  - mapping score：P中的terminals正确解释S中相应单词的可能性\n\n  - structure score：树状程序结构的自然程度，以及程序部分与生成它们的句子部分之间的联系\n\n  - 最终得分：梯度下降学习组合权重\n","source":"_posts/program-synthesis.md","raw":"---\ntitle: 程序合成\ndate: 2021-12-06 21:00:00\ntags:\n  - program synthesis\n  - paper\ncategories:\n  - [program synthesis,paper]\nkeywords:\ndescription:\ntop_img:\ncomments:\ncover: https://scorpionre.github.io/2021/12/06/program-synthesis/program-synthesis.assets/image-20220224115439047.png\ntoc:\ntoc_number:\ncopyright:\nmathjax:\nkatex:\nhide:\n---\n\n# 程序合成\n\n![image-20220224115439047](program-synthesis.assets/image-20220224115439047.png)\n\n顾斌, 于波, 董晓刚, 李晓锋, 钟睿明, 杨孟飞. 程序智能合成技术研究进展. 软件学报.\nhttp://www.jos.org.cn/1000-9825/6200.htm\n\n## 基于输入输出\n\n### 特点\n\n- 根据输入输出实例对训练合成模型。输入领域特定语言（DSL）描述的需求规格，合成模型便可以给出与之相对应的程序\n- 需求规约为输入输出示例对\n\n\n\n### 代表方法\n\n![image-20211223232437622](program-synthesis.assets/image-20211223232437622.png)\n\n主要进一步阅读了Balog等人的Deepcoder，该方法能够根据输入输出示例,使用深度神经网络和集束搜索技术实现特定领域的代码自动合成。\n\n特色：\n\n- 缩小了搜索空间,用大小为34 的DSL 指令集进行表示,通过将深度神经网络和集束搜索技术相结合生成简单的程序\n- 与传统方法相比,该方法实现效率较高。该方法作为一种代码自动合成方法,将深度学习技术和代码的搜索生成技术相结合,具有创新性\n\n局限性：\n\n- 指令集和操作数有限,无法描述复杂任务,通常只能生成10 行左右的代码。\n- 只能合成简单的程序，动态规划和搜索都无法做到。所以需要通过添加更多的原语来扩展DSL，并在程序构造中允许更多的灵活性(例如允许循环)\n\n\n\n![image-20211224202523935](program-synthesis.assets/image-20211224202523935.png)\n\n\n\n**输入输出：**\n\n总的输入为示例输入输出对，如下图中的Input-output example\n\n输出为DSL表示的程序\n\n![image-20211224200346689](program-synthesis.assets/image-20211224200346689.png)\n\n**模型结构**\n\n![image-20211224203951802](program-synthesis.assets/image-20211224203951802.png)\n\n- 用one-hot编码来表示输入输入和输出类型（数或数组），然后用NULL将其填充到最大长度L\n\n- 输入和输出的整数都映射到大小E=20的learned embedding vector中（整数的范围被限制在一个有限的范围内，每个嵌入都被单独参数化）\n- 将输入类型、输入、输出类型、输出的embedding连接到一个固定长度的向量中，并将这个向量通过H=3个包含K=256个sigmoid单元的隐藏层传递\n- 最后得到源代码中出现DSL定义的函数的可能性，上述程序得到的输出如下图所示\n\n![image-20211224200549972](program-synthesis.assets/image-20211224200549972.png)\n\nDSL表示的部分函数如下所示：\n\n![image-20211224205920700](program-synthesis.assets/image-20211224205920700.png)\n\n![image-20211224205908008](program-synthesis.assets/image-20211224205908008.png)\n\n然后，使用神经网络预测到的概率来指导搜索与给定输入输出示例对一致的程序。一般用到的算法有DFS,\"Sort and add\" enumeration,Sketch,λ^2。\n\n\n\n## 基于代码框架（语法）\n\n### 特点\n\n​\t主要利用程序结构或者语法框架信息,将程序代码转换为抽象语法树、控制流图和数据流图、程序框架草图等某种结构化表\n\n\n\n![image-20211223232459726](program-synthesis.assets/image-20211223232459726.png)\n\n打算进一步阅读Alur等人提出的方法，该方法的输入包括一组由逻辑表达式描述的需求语义规范和一组符合语法规则的候选实现集,允许用户使用语法来补充候选集,并找到一个满足给定需求的解.该团队同时在基于语法制导的程序合成方法基础上加入了多种技术,如增加反例技术、激活学习技术、随机搜索技术等,这些方法利用语法进行程序搜索,大大缩小了代码空间,从而提升了搜索效率。\n\n而更新的有的是生成SQL程序或只能根据上下文自动补全而无法生成可执行程序。\n\n\n\n### Search-based program Synthesis\n\nCommunications of the ACM,2018\n\n![image-20211226211621715](program-synthesis.assets/image-20211226211621715.png)\n\n\n\n**特色：**\n\n- 需求规约为逻辑规约，输入输出对\n\n  \n\n**局限性：**\n\n- 依赖于逻辑规约的定义\n\n- 仅仅找到一个表达式，相当于只能进行简单的数学、逻辑运算\n\n- 无法生成可执行代码\n\n  \n\n\n\n**输入输出：**\n\n输入：\n\n- Exp：（expressions specified using a grammar），如下所示\n\n![image-20211226204335258](program-synthesis.assets/image-20211226204335258.png)\n\n- Spec：所需函数的逻辑规范，如下所示表示x，y中的最大值\n\n![image-20211226204452516](program-synthesis.assets/image-20211226204452516.png)\n\n输出：\n\n从Exp找到一个expression e，使得Spec中用e替换f是valid\n\n找不到则报错\n\n\n\n**模型：**\n\n![image-20211226205016145](program-synthesis.assets/image-20211226205016145.png)\n\n- 初始示例集包含有趣的输入，learner使用这些输入来引导其搜索。这个集合最初可以是空的\n\n- learning module：寻找候选expression，至少对于初始示例集来说。\n  - 是inductive synthesis的一个实例\n  - 枚举搜索（剪枝方法：如果有e1,e2，对示例集中所有输入得到的输出都相同，则认为是等效的。枚举算法只维护一个不相等表达式的列表，当构造一个新表达式时，它首先检查它是否与列表中已经存在的表达式相等，如果相等，则丢弃它）或使用决策树\n- verification oracle（SMT solver）：验证e的合法性。对于所有输入来说，如果都满足则成功找到了e；不满足则反馈给Leaner一个反例\n\n\n\n\n\n## 基于自然语言\n\n### 特点\n\n- 需求规约为自然语言，但自然语言具有二义性\n\n![image-20211223232509638](program-synthesis.assets/image-20211223232509638.png)\n\n打算先进一步阅读Desai发表的文章。因为考虑到其可以利用神经网络模型学习自然语言与DSL 之间的关系,然后使用训练好的神经网络模型将用户提供的自然语言描述转换为DSL,再通过DSL 进行后续程序合成。或许可以和基于输入输出对的方法结合使用。\n\n### 代表方法\n\n![image-20211225081537462](program-synthesis.assets/image-20211225081537462.png)\n\n**特色：**\n\n- 从top-level训练数据生成用于分类器学习的训练数据\n\n- 将离散的评分指标平滑化为连续可微的损失函数，以便有效地学习权值\n- 可以应用于新的dsl，并且只需要DSL定义以及翻译对训练数据\n\n**局限性：**\n\n- 单词与terminals的映射没有考虑单词在句子中的位置\n- 上下文隐含义的理解\n\n\n\n**NL-to-DSL合成器输入输出**\n\n用户输入：\n\n- 自然语言（英语句子），如下图中的S\n\n输出：\n\n- 经过排序的候选DSL程序的列表，如下图中的P1，P2\n\n![image-20211225085504762](program-synthesis.assets/image-20211225085504762.png)\n\n\n\n**模型**\n\nNL-to-DSL合成器的合成方法：\n\n输入：\n\n- DSL：L=(G,TC)，G为上下文无关语法（Gt表示terminals(函数名或值)，Gr表示生成规则），TC为类型/语义检查器（检查程序是否well-typed）\n\n  比如下图所示grammar\n\n  ![image-20211225093440256](program-synthesis.assets/image-20211225093440256.png)\n\n- 训练数据：（S,P）的集合，S为英语句子，P为对应的DSL程序\n\n​\t具体细节论文中没有详细介绍，训练得到NL-to-DSL合成器，以及NLDict\n\n\n\nNL-to-DSL合成DSL的算法：\n\n![image-20211225095033519](program-synthesis.assets/image-20211225095033519.png)\n\n- 将用户输入的句子中的每个单词转换为terminal(函数名或值)得到NLDict字典\n\n  ​\t如果操作的名称是正确的英语单词，例如Insert，则使用WordNet同义词列表来收集与该操作关联的常用单词。如果名称不是一个简单的单词，而是几个单词的连接(或缩写)，例如StartsWith，则可以通过拆分名称和解析每个子组件单词的同义词来处理。\n\n- 将终端和一个单例映射(将单词的索引与生成的终端相关联)的元组存储到集合R0中\n\n- 通过bag算法：枚举所有可能的well-typed程序来组成程序\n\n  ![image-20211225101633374](program-synthesis.assets/image-20211225101633374.png)\n\n  - 其中M为witness map：如果L语言中的程序P与句子S是一致，存在S到Gt中的terminal的映射M，使得M有且仅有P中所有terminals。即S中的单词表示了DSL中的所有terminal\n\n  - UsableWords(S)是在S中出现的那些单词，它们被映射到一些terminals\n\n  - UsedWords(S;M)是在S中出现的可用单词的集合，作为映射M的一部分使用\n\n    ![image-20211225101503380](program-synthesis.assets/image-20211225101503380-16403986033541.png)\n\n- 对可能的程序排序并输出\n\n  - coverage score：输入的自然语言S中实际用于生成程序P的可用信息的比例\n\n  - mapping score：P中的terminals正确解释S中相应单词的可能性\n\n  - structure score：树状程序结构的自然程度，以及程序部分与生成它们的句子部分之间的联系\n\n  - 最终得分：梯度下降学习组合权重\n","slug":"program-synthesis","published":1,"updated":"2022-02-23T15:56:32.000Z","layout":"post","photos":[],"link":"","_id":"cletwjoi1001hri3s8viceq9q","content":"<h1>程序合成</h1>\n<p><img src=\"program-synthesis.assets/image-20220224115439047.png\" alt=\"image-20220224115439047\"></p>\n<p>顾斌, 于波, 董晓刚, 李晓锋, 钟睿明, 杨孟飞. 程序智能合成技术研究进展. 软件学报.<br>\n<a href=\"http://www.jos.org.cn/1000-9825/6200.htm\">http://www.jos.org.cn/1000-9825/6200.htm</a></p>\n<h2 id=\"基于输入输出\">基于输入输出</h2>\n<h3 id=\"特点\">特点</h3>\n<ul>\n<li>根据输入输出实例对训练合成模型。输入领域特定语言（DSL）描述的需求规格，合成模型便可以给出与之相对应的程序</li>\n<li>需求规约为输入输出示例对</li>\n</ul>\n<h3 id=\"代表方法\">代表方法</h3>\n<p><img src=\"program-synthesis.assets/image-20211223232437622.png\" alt=\"image-20211223232437622\"></p>\n<p>主要进一步阅读了Balog等人的Deepcoder，该方法能够根据输入输出示例,使用深度神经网络和集束搜索技术实现特定领域的代码自动合成。</p>\n<p>特色：</p>\n<ul>\n<li>缩小了搜索空间,用大小为34 的DSL 指令集进行表示,通过将深度神经网络和集束搜索技术相结合生成简单的程序</li>\n<li>与传统方法相比,该方法实现效率较高。该方法作为一种代码自动合成方法,将深度学习技术和代码的搜索生成技术相结合,具有创新性</li>\n</ul>\n<p>局限性：</p>\n<ul>\n<li>指令集和操作数有限,无法描述复杂任务,通常只能生成10 行左右的代码。</li>\n<li>只能合成简单的程序，动态规划和搜索都无法做到。所以需要通过添加更多的原语来扩展DSL，并在程序构造中允许更多的灵活性(例如允许循环)</li>\n</ul>\n<p><img src=\"program-synthesis.assets/image-20211224202523935.png\" alt=\"image-20211224202523935\"></p>\n<p><strong>输入输出：</strong></p>\n<p>总的输入为示例输入输出对，如下图中的Input-output example</p>\n<p>输出为DSL表示的程序</p>\n<p><img src=\"program-synthesis.assets/image-20211224200346689.png\" alt=\"image-20211224200346689\"></p>\n<p><strong>模型结构</strong></p>\n<p><img src=\"program-synthesis.assets/image-20211224203951802.png\" alt=\"image-20211224203951802\"></p>\n<ul>\n<li>\n<p>用one-hot编码来表示输入输入和输出类型（数或数组），然后用NULL将其填充到最大长度L</p>\n</li>\n<li>\n<p>输入和输出的整数都映射到大小E=20的learned embedding vector中（整数的范围被限制在一个有限的范围内，每个嵌入都被单独参数化）</p>\n</li>\n<li>\n<p>将输入类型、输入、输出类型、输出的embedding连接到一个固定长度的向量中，并将这个向量通过H=3个包含K=256个sigmoid单元的隐藏层传递</p>\n</li>\n<li>\n<p>最后得到源代码中出现DSL定义的函数的可能性，上述程序得到的输出如下图所示</p>\n</li>\n</ul>\n<p><img src=\"program-synthesis.assets/image-20211224200549972.png\" alt=\"image-20211224200549972\"></p>\n<p>DSL表示的部分函数如下所示：</p>\n<p><img src=\"program-synthesis.assets/image-20211224205920700.png\" alt=\"image-20211224205920700\"></p>\n<p><img src=\"program-synthesis.assets/image-20211224205908008.png\" alt=\"image-20211224205908008\"></p>\n<p>然后，使用神经网络预测到的概率来指导搜索与给定输入输出示例对一致的程序。一般用到的算法有DFS,“Sort and add” enumeration,Sketch,λ^2。</p>\n<h2 id=\"基于代码框架（语法）\">基于代码框架（语法）</h2>\n<h3 id=\"特点-2\">特点</h3>\n<p>​\t主要利用程序结构或者语法框架信息,将程序代码转换为抽象语法树、控制流图和数据流图、程序框架草图等某种结构化表</p>\n<p><img src=\"program-synthesis.assets/image-20211223232459726.png\" alt=\"image-20211223232459726\"></p>\n<p>打算进一步阅读Alur等人提出的方法，该方法的输入包括一组由逻辑表达式描述的需求语义规范和一组符合语法规则的候选实现集,允许用户使用语法来补充候选集,并找到一个满足给定需求的解.该团队同时在基于语法制导的程序合成方法基础上加入了多种技术,如增加反例技术、激活学习技术、随机搜索技术等,这些方法利用语法进行程序搜索,大大缩小了代码空间,从而提升了搜索效率。</p>\n<p>而更新的有的是生成SQL程序或只能根据上下文自动补全而无法生成可执行程序。</p>\n<h3 id=\"Search-based-program-Synthesis\">Search-based program Synthesis</h3>\n<p>Communications of the ACM,2018</p>\n<p><img src=\"program-synthesis.assets/image-20211226211621715.png\" alt=\"image-20211226211621715\"></p>\n<p><strong>特色：</strong></p>\n<ul>\n<li>需求规约为逻辑规约，输入输出对</li>\n</ul>\n<p><strong>局限性：</strong></p>\n<ul>\n<li>\n<p>依赖于逻辑规约的定义</p>\n</li>\n<li>\n<p>仅仅找到一个表达式，相当于只能进行简单的数学、逻辑运算</p>\n</li>\n<li>\n<p>无法生成可执行代码</p>\n</li>\n</ul>\n<p><strong>输入输出：</strong></p>\n<p>输入：</p>\n<ul>\n<li>Exp：（expressions specified using a grammar），如下所示</li>\n</ul>\n<p><img src=\"program-synthesis.assets/image-20211226204335258.png\" alt=\"image-20211226204335258\"></p>\n<ul>\n<li>Spec：所需函数的逻辑规范，如下所示表示x，y中的最大值</li>\n</ul>\n<p><img src=\"program-synthesis.assets/image-20211226204452516.png\" alt=\"image-20211226204452516\"></p>\n<p>输出：</p>\n<p>从Exp找到一个expression e，使得Spec中用e替换f是valid</p>\n<p>找不到则报错</p>\n<p><strong>模型：</strong></p>\n<p><img src=\"program-synthesis.assets/image-20211226205016145.png\" alt=\"image-20211226205016145\"></p>\n<ul>\n<li>\n<p>初始示例集包含有趣的输入，learner使用这些输入来引导其搜索。这个集合最初可以是空的</p>\n</li>\n<li>\n<p>learning module：寻找候选expression，至少对于初始示例集来说。</p>\n<ul>\n<li>是inductive synthesis的一个实例</li>\n<li>枚举搜索（剪枝方法：如果有e1,e2，对示例集中所有输入得到的输出都相同，则认为是等效的。枚举算法只维护一个不相等表达式的列表，当构造一个新表达式时，它首先检查它是否与列表中已经存在的表达式相等，如果相等，则丢弃它）或使用决策树</li>\n</ul>\n</li>\n<li>\n<p>verification oracle（SMT solver）：验证e的合法性。对于所有输入来说，如果都满足则成功找到了e；不满足则反馈给Leaner一个反例</p>\n</li>\n</ul>\n<h2 id=\"基于自然语言\">基于自然语言</h2>\n<h3 id=\"特点-3\">特点</h3>\n<ul>\n<li>需求规约为自然语言，但自然语言具有二义性</li>\n</ul>\n<p><img src=\"program-synthesis.assets/image-20211223232509638.png\" alt=\"image-20211223232509638\"></p>\n<p>打算先进一步阅读Desai发表的文章。因为考虑到其可以利用神经网络模型学习自然语言与DSL 之间的关系,然后使用训练好的神经网络模型将用户提供的自然语言描述转换为DSL,再通过DSL 进行后续程序合成。或许可以和基于输入输出对的方法结合使用。</p>\n<h3 id=\"代表方法-2\">代表方法</h3>\n<p><img src=\"program-synthesis.assets/image-20211225081537462.png\" alt=\"image-20211225081537462\"></p>\n<p><strong>特色：</strong></p>\n<ul>\n<li>\n<p>从top-level训练数据生成用于分类器学习的训练数据</p>\n</li>\n<li>\n<p>将离散的评分指标平滑化为连续可微的损失函数，以便有效地学习权值</p>\n</li>\n<li>\n<p>可以应用于新的dsl，并且只需要DSL定义以及翻译对训练数据</p>\n</li>\n</ul>\n<p><strong>局限性：</strong></p>\n<ul>\n<li>单词与terminals的映射没有考虑单词在句子中的位置</li>\n<li>上下文隐含义的理解</li>\n</ul>\n<p><strong>NL-to-DSL合成器输入输出</strong></p>\n<p>用户输入：</p>\n<ul>\n<li>自然语言（英语句子），如下图中的S</li>\n</ul>\n<p>输出：</p>\n<ul>\n<li>经过排序的候选DSL程序的列表，如下图中的P1，P2</li>\n</ul>\n<p><img src=\"program-synthesis.assets/image-20211225085504762.png\" alt=\"image-20211225085504762\"></p>\n<p><strong>模型</strong></p>\n<p>NL-to-DSL合成器的合成方法：</p>\n<p>输入：</p>\n<ul>\n<li>\n<p>DSL：L=(G,TC)，G为上下文无关语法（Gt表示terminals(函数名或值)，Gr表示生成规则），TC为类型/语义检查器（检查程序是否well-typed）</p>\n<p>比如下图所示grammar</p>\n<p><img src=\"program-synthesis.assets/image-20211225093440256.png\" alt=\"image-20211225093440256\"></p>\n</li>\n<li>\n<p>训练数据：（S,P）的集合，S为英语句子，P为对应的DSL程序</p>\n</li>\n</ul>\n<p>​\t具体细节论文中没有详细介绍，训练得到NL-to-DSL合成器，以及NLDict</p>\n<p>NL-to-DSL合成DSL的算法：</p>\n<p><img src=\"program-synthesis.assets/image-20211225095033519.png\" alt=\"image-20211225095033519\"></p>\n<ul>\n<li>\n<p>将用户输入的句子中的每个单词转换为terminal(函数名或值)得到NLDict字典</p>\n<p>​\t如果操作的名称是正确的英语单词，例如Insert，则使用WordNet同义词列表来收集与该操作关联的常用单词。如果名称不是一个简单的单词，而是几个单词的连接(或缩写)，例如StartsWith，则可以通过拆分名称和解析每个子组件单词的同义词来处理。</p>\n</li>\n<li>\n<p>将终端和一个单例映射(将单词的索引与生成的终端相关联)的元组存储到集合R0中</p>\n</li>\n<li>\n<p>通过bag算法：枚举所有可能的well-typed程序来组成程序</p>\n<p><img src=\"program-synthesis.assets/image-20211225101633374.png\" alt=\"image-20211225101633374\"></p>\n<ul>\n<li>\n<p>其中M为witness map：如果L语言中的程序P与句子S是一致，存在S到Gt中的terminal的映射M，使得M有且仅有P中所有terminals。即S中的单词表示了DSL中的所有terminal</p>\n</li>\n<li>\n<p>UsableWords(S)是在S中出现的那些单词，它们被映射到一些terminals</p>\n</li>\n<li>\n<p>UsedWords(S;M)是在S中出现的可用单词的集合，作为映射M的一部分使用</p>\n<p><img src=\"program-synthesis.assets/image-20211225101503380-16403986033541.png\" alt=\"image-20211225101503380\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>对可能的程序排序并输出</p>\n<ul>\n<li>\n<p>coverage score：输入的自然语言S中实际用于生成程序P的可用信息的比例</p>\n</li>\n<li>\n<p>mapping score：P中的terminals正确解释S中相应单词的可能性</p>\n</li>\n<li>\n<p>structure score：树状程序结构的自然程度，以及程序部分与生成它们的句子部分之间的联系</p>\n</li>\n<li>\n<p>最终得分：梯度下降学习组合权重</p>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{"about":{"class":{"class_name":"about","link_list":{"-1":{"name":"Scorpion","avatar":"/image/avatar.jpg","link":null,"descr":"�����ƹ������ë��̨��ɢ�򣬻�ѩ���������ݣ����ֲ�Ƭ����Ƭ�赸��Ƶ��ҵ����Ӱ���Ǻð�ȫ��"}}}},"link":{"class":{"class_name":"友情链接","link_list":{"-1":{"name":"M4tsuri","link":"https://M4tsuri.io","avatar":"/image/m4tsuri.jpg","descr":"pwn,blockchain"}}}}}},"excerpt":"","more":"<h1>程序合成</h1>\n<p><img src=\"program-synthesis.assets/image-20220224115439047.png\" alt=\"image-20220224115439047\"></p>\n<p>顾斌, 于波, 董晓刚, 李晓锋, 钟睿明, 杨孟飞. 程序智能合成技术研究进展. 软件学报.<br>\n<a href=\"http://www.jos.org.cn/1000-9825/6200.htm\">http://www.jos.org.cn/1000-9825/6200.htm</a></p>\n<h2 id=\"基于输入输出\">基于输入输出</h2>\n<h3 id=\"特点\">特点</h3>\n<ul>\n<li>根据输入输出实例对训练合成模型。输入领域特定语言（DSL）描述的需求规格，合成模型便可以给出与之相对应的程序</li>\n<li>需求规约为输入输出示例对</li>\n</ul>\n<h3 id=\"代表方法\">代表方法</h3>\n<p><img src=\"program-synthesis.assets/image-20211223232437622.png\" alt=\"image-20211223232437622\"></p>\n<p>主要进一步阅读了Balog等人的Deepcoder，该方法能够根据输入输出示例,使用深度神经网络和集束搜索技术实现特定领域的代码自动合成。</p>\n<p>特色：</p>\n<ul>\n<li>缩小了搜索空间,用大小为34 的DSL 指令集进行表示,通过将深度神经网络和集束搜索技术相结合生成简单的程序</li>\n<li>与传统方法相比,该方法实现效率较高。该方法作为一种代码自动合成方法,将深度学习技术和代码的搜索生成技术相结合,具有创新性</li>\n</ul>\n<p>局限性：</p>\n<ul>\n<li>指令集和操作数有限,无法描述复杂任务,通常只能生成10 行左右的代码。</li>\n<li>只能合成简单的程序，动态规划和搜索都无法做到。所以需要通过添加更多的原语来扩展DSL，并在程序构造中允许更多的灵活性(例如允许循环)</li>\n</ul>\n<p><img src=\"program-synthesis.assets/image-20211224202523935.png\" alt=\"image-20211224202523935\"></p>\n<p><strong>输入输出：</strong></p>\n<p>总的输入为示例输入输出对，如下图中的Input-output example</p>\n<p>输出为DSL表示的程序</p>\n<p><img src=\"program-synthesis.assets/image-20211224200346689.png\" alt=\"image-20211224200346689\"></p>\n<p><strong>模型结构</strong></p>\n<p><img src=\"program-synthesis.assets/image-20211224203951802.png\" alt=\"image-20211224203951802\"></p>\n<ul>\n<li>\n<p>用one-hot编码来表示输入输入和输出类型（数或数组），然后用NULL将其填充到最大长度L</p>\n</li>\n<li>\n<p>输入和输出的整数都映射到大小E=20的learned embedding vector中（整数的范围被限制在一个有限的范围内，每个嵌入都被单独参数化）</p>\n</li>\n<li>\n<p>将输入类型、输入、输出类型、输出的embedding连接到一个固定长度的向量中，并将这个向量通过H=3个包含K=256个sigmoid单元的隐藏层传递</p>\n</li>\n<li>\n<p>最后得到源代码中出现DSL定义的函数的可能性，上述程序得到的输出如下图所示</p>\n</li>\n</ul>\n<p><img src=\"program-synthesis.assets/image-20211224200549972.png\" alt=\"image-20211224200549972\"></p>\n<p>DSL表示的部分函数如下所示：</p>\n<p><img src=\"program-synthesis.assets/image-20211224205920700.png\" alt=\"image-20211224205920700\"></p>\n<p><img src=\"program-synthesis.assets/image-20211224205908008.png\" alt=\"image-20211224205908008\"></p>\n<p>然后，使用神经网络预测到的概率来指导搜索与给定输入输出示例对一致的程序。一般用到的算法有DFS,“Sort and add” enumeration,Sketch,λ^2。</p>\n<h2 id=\"基于代码框架（语法）\">基于代码框架（语法）</h2>\n<h3 id=\"特点-2\">特点</h3>\n<p>​\t主要利用程序结构或者语法框架信息,将程序代码转换为抽象语法树、控制流图和数据流图、程序框架草图等某种结构化表</p>\n<p><img src=\"program-synthesis.assets/image-20211223232459726.png\" alt=\"image-20211223232459726\"></p>\n<p>打算进一步阅读Alur等人提出的方法，该方法的输入包括一组由逻辑表达式描述的需求语义规范和一组符合语法规则的候选实现集,允许用户使用语法来补充候选集,并找到一个满足给定需求的解.该团队同时在基于语法制导的程序合成方法基础上加入了多种技术,如增加反例技术、激活学习技术、随机搜索技术等,这些方法利用语法进行程序搜索,大大缩小了代码空间,从而提升了搜索效率。</p>\n<p>而更新的有的是生成SQL程序或只能根据上下文自动补全而无法生成可执行程序。</p>\n<h3 id=\"Search-based-program-Synthesis\">Search-based program Synthesis</h3>\n<p>Communications of the ACM,2018</p>\n<p><img src=\"program-synthesis.assets/image-20211226211621715.png\" alt=\"image-20211226211621715\"></p>\n<p><strong>特色：</strong></p>\n<ul>\n<li>需求规约为逻辑规约，输入输出对</li>\n</ul>\n<p><strong>局限性：</strong></p>\n<ul>\n<li>\n<p>依赖于逻辑规约的定义</p>\n</li>\n<li>\n<p>仅仅找到一个表达式，相当于只能进行简单的数学、逻辑运算</p>\n</li>\n<li>\n<p>无法生成可执行代码</p>\n</li>\n</ul>\n<p><strong>输入输出：</strong></p>\n<p>输入：</p>\n<ul>\n<li>Exp：（expressions specified using a grammar），如下所示</li>\n</ul>\n<p><img src=\"program-synthesis.assets/image-20211226204335258.png\" alt=\"image-20211226204335258\"></p>\n<ul>\n<li>Spec：所需函数的逻辑规范，如下所示表示x，y中的最大值</li>\n</ul>\n<p><img src=\"program-synthesis.assets/image-20211226204452516.png\" alt=\"image-20211226204452516\"></p>\n<p>输出：</p>\n<p>从Exp找到一个expression e，使得Spec中用e替换f是valid</p>\n<p>找不到则报错</p>\n<p><strong>模型：</strong></p>\n<p><img src=\"program-synthesis.assets/image-20211226205016145.png\" alt=\"image-20211226205016145\"></p>\n<ul>\n<li>\n<p>初始示例集包含有趣的输入，learner使用这些输入来引导其搜索。这个集合最初可以是空的</p>\n</li>\n<li>\n<p>learning module：寻找候选expression，至少对于初始示例集来说。</p>\n<ul>\n<li>是inductive synthesis的一个实例</li>\n<li>枚举搜索（剪枝方法：如果有e1,e2，对示例集中所有输入得到的输出都相同，则认为是等效的。枚举算法只维护一个不相等表达式的列表，当构造一个新表达式时，它首先检查它是否与列表中已经存在的表达式相等，如果相等，则丢弃它）或使用决策树</li>\n</ul>\n</li>\n<li>\n<p>verification oracle（SMT solver）：验证e的合法性。对于所有输入来说，如果都满足则成功找到了e；不满足则反馈给Leaner一个反例</p>\n</li>\n</ul>\n<h2 id=\"基于自然语言\">基于自然语言</h2>\n<h3 id=\"特点-3\">特点</h3>\n<ul>\n<li>需求规约为自然语言，但自然语言具有二义性</li>\n</ul>\n<p><img src=\"program-synthesis.assets/image-20211223232509638.png\" alt=\"image-20211223232509638\"></p>\n<p>打算先进一步阅读Desai发表的文章。因为考虑到其可以利用神经网络模型学习自然语言与DSL 之间的关系,然后使用训练好的神经网络模型将用户提供的自然语言描述转换为DSL,再通过DSL 进行后续程序合成。或许可以和基于输入输出对的方法结合使用。</p>\n<h3 id=\"代表方法-2\">代表方法</h3>\n<p><img src=\"program-synthesis.assets/image-20211225081537462.png\" alt=\"image-20211225081537462\"></p>\n<p><strong>特色：</strong></p>\n<ul>\n<li>\n<p>从top-level训练数据生成用于分类器学习的训练数据</p>\n</li>\n<li>\n<p>将离散的评分指标平滑化为连续可微的损失函数，以便有效地学习权值</p>\n</li>\n<li>\n<p>可以应用于新的dsl，并且只需要DSL定义以及翻译对训练数据</p>\n</li>\n</ul>\n<p><strong>局限性：</strong></p>\n<ul>\n<li>单词与terminals的映射没有考虑单词在句子中的位置</li>\n<li>上下文隐含义的理解</li>\n</ul>\n<p><strong>NL-to-DSL合成器输入输出</strong></p>\n<p>用户输入：</p>\n<ul>\n<li>自然语言（英语句子），如下图中的S</li>\n</ul>\n<p>输出：</p>\n<ul>\n<li>经过排序的候选DSL程序的列表，如下图中的P1，P2</li>\n</ul>\n<p><img src=\"program-synthesis.assets/image-20211225085504762.png\" alt=\"image-20211225085504762\"></p>\n<p><strong>模型</strong></p>\n<p>NL-to-DSL合成器的合成方法：</p>\n<p>输入：</p>\n<ul>\n<li>\n<p>DSL：L=(G,TC)，G为上下文无关语法（Gt表示terminals(函数名或值)，Gr表示生成规则），TC为类型/语义检查器（检查程序是否well-typed）</p>\n<p>比如下图所示grammar</p>\n<p><img src=\"program-synthesis.assets/image-20211225093440256.png\" alt=\"image-20211225093440256\"></p>\n</li>\n<li>\n<p>训练数据：（S,P）的集合，S为英语句子，P为对应的DSL程序</p>\n</li>\n</ul>\n<p>​\t具体细节论文中没有详细介绍，训练得到NL-to-DSL合成器，以及NLDict</p>\n<p>NL-to-DSL合成DSL的算法：</p>\n<p><img src=\"program-synthesis.assets/image-20211225095033519.png\" alt=\"image-20211225095033519\"></p>\n<ul>\n<li>\n<p>将用户输入的句子中的每个单词转换为terminal(函数名或值)得到NLDict字典</p>\n<p>​\t如果操作的名称是正确的英语单词，例如Insert，则使用WordNet同义词列表来收集与该操作关联的常用单词。如果名称不是一个简单的单词，而是几个单词的连接(或缩写)，例如StartsWith，则可以通过拆分名称和解析每个子组件单词的同义词来处理。</p>\n</li>\n<li>\n<p>将终端和一个单例映射(将单词的索引与生成的终端相关联)的元组存储到集合R0中</p>\n</li>\n<li>\n<p>通过bag算法：枚举所有可能的well-typed程序来组成程序</p>\n<p><img src=\"program-synthesis.assets/image-20211225101633374.png\" alt=\"image-20211225101633374\"></p>\n<ul>\n<li>\n<p>其中M为witness map：如果L语言中的程序P与句子S是一致，存在S到Gt中的terminal的映射M，使得M有且仅有P中所有terminals。即S中的单词表示了DSL中的所有terminal</p>\n</li>\n<li>\n<p>UsableWords(S)是在S中出现的那些单词，它们被映射到一些terminals</p>\n</li>\n<li>\n<p>UsedWords(S;M)是在S中出现的可用单词的集合，作为映射M的一部分使用</p>\n<p><img src=\"program-synthesis.assets/image-20211225101503380-16403986033541.png\" alt=\"image-20211225101503380\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>对可能的程序排序并输出</p>\n<ul>\n<li>\n<p>coverage score：输入的自然语言S中实际用于生成程序P的可用信息的比例</p>\n</li>\n<li>\n<p>mapping score：P中的terminals正确解释S中相应单词的可能性</p>\n</li>\n<li>\n<p>structure score：树状程序结构的自然程度，以及程序部分与生成它们的句子部分之间的联系</p>\n</li>\n<li>\n<p>最终得分：梯度下降学习组合权重</p>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"[ichunqiu-crypto]writeup【loading】","date":"2022-01-24T10:00:00.000Z","keywords":null,"description":null,"top_img":null,"comments":1,"cover":"/image/star.jpg","toc":null,"toc_number":null,"copyright":null,"mathjax":null,"katex":true,"hide":null,"_content":"\n# [ichunqiu-crypto]writeup\n\n### [phrackCTF]BrokenPic\n\n题面：这里有个图片，可是好像打不开？\n\n\n\n给出一个bmp图片\n\n\n\n\n\n## RSA\n\n### [IceCTF]Round Rabins【Cipolla】\n\n发现n能开平方，提示rabin，e应为2，所以转化为下式求m的值\n$$\nc = m^2 (mod\\ p^2)\n$$\n先利用Cipolla算法求得r，使得（本题中k为2）\n$$\na = r^2 (mod\\ p)\n\\\\所以 (r^2-a)^k = 0 (mod\\ p^k)\n\\\\二项式分解 (r^2-a)^k=t^2-u^2a=0(mod\\ p^k)\n\\\\t^2u^{-2} = a = x^2(mod\\ p^k)\n\\\\所以 x = t*u^{-1} (mod p^k)\n\\\\即最后所求m\n$$\n利用平方差公式得到方程组，求解得t、u\n$$\n（r-\\sqrt[2]{a})^k = t-u\\sqrt[2]{a}\n\\\\(r+\\sqrt[2]{a})^k = t + u\\sqrt[2]{a}\n$$\n**Cipolla算法求r**\n\n首先找到一个a使得\n$$\n(a^2-n)^{(p-1)/2} = -1 (mod\\ p)\n\\\\令i^2 = a^2 - n\n$$\n\n```python\ndef find_a(n,p):\n```\n\n\n\n更一般的情况：先对n进行质因数分解，再使用中国剩余定理\n$$\nn=p1^{k1} * p2^{k2} * p3^{k3}\n$$\n","source":"_posts/ichunqiu-crypto-writeup.md","raw":"---\ntitle: \"[ichunqiu-crypto]writeup【loading】\"\ndate: 2022-01-24 18:00:00\ntags:\n\t- crypto\n\t- ctf\n\t- writeup\ncategories:\n\t- [crypto,ctf]\nkeywords:\ndescription:\ntop_img:\ncomments:\ncover:\ntoc:\ntoc_number:\ncopyright:\nmathjax:\nkatex: true\nhide:\n---\n\n# [ichunqiu-crypto]writeup\n\n### [phrackCTF]BrokenPic\n\n题面：这里有个图片，可是好像打不开？\n\n\n\n给出一个bmp图片\n\n\n\n\n\n## RSA\n\n### [IceCTF]Round Rabins【Cipolla】\n\n发现n能开平方，提示rabin，e应为2，所以转化为下式求m的值\n$$\nc = m^2 (mod\\ p^2)\n$$\n先利用Cipolla算法求得r，使得（本题中k为2）\n$$\na = r^2 (mod\\ p)\n\\\\所以 (r^2-a)^k = 0 (mod\\ p^k)\n\\\\二项式分解 (r^2-a)^k=t^2-u^2a=0(mod\\ p^k)\n\\\\t^2u^{-2} = a = x^2(mod\\ p^k)\n\\\\所以 x = t*u^{-1} (mod p^k)\n\\\\即最后所求m\n$$\n利用平方差公式得到方程组，求解得t、u\n$$\n（r-\\sqrt[2]{a})^k = t-u\\sqrt[2]{a}\n\\\\(r+\\sqrt[2]{a})^k = t + u\\sqrt[2]{a}\n$$\n**Cipolla算法求r**\n\n首先找到一个a使得\n$$\n(a^2-n)^{(p-1)/2} = -1 (mod\\ p)\n\\\\令i^2 = a^2 - n\n$$\n\n```python\ndef find_a(n,p):\n```\n\n\n\n更一般的情况：先对n进行质因数分解，再使用中国剩余定理\n$$\nn=p1^{k1} * p2^{k2} * p3^{k3}\n$$\n","slug":"ichunqiu-crypto-writeup","published":1,"updated":"2022-01-25T01:11:02.000Z","layout":"post","photos":[],"link":"","_id":"cletwjoi1001kri3s0uwz3own","content":"<h1>[ichunqiu-crypto]writeup</h1>\n<h3 id=\"phrackCTF-BrokenPic\">[phrackCTF]BrokenPic</h3>\n<p>题面：这里有个图片，可是好像打不开？</p>\n<p>给出一个bmp图片</p>\n<h2 id=\"RSA-2\">RSA</h2>\n<h3 id=\"IceCTF-Round-Rabins【Cipolla】\">[IceCTF]Round Rabins【Cipolla】</h3>\n<p>发现n能开平方，提示rabin，e应为2，所以转化为下式求m的值</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>c</mi><mo>=</mo><msup><mi>m</mi><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msup><mi>p</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">c = m^2 (mod\\ p^2)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>先利用Cipolla算法求得r，使得（本题中k为2）</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>a</mi><mo>=</mo><msup><mi>r</mi><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><mtext>所以</mtext><mo stretchy=\"false\">(</mo><msup><mi>r</mi><mn>2</mn></msup><mo>−</mo><mi>a</mi><msup><mo stretchy=\"false\">)</mo><mi>k</mi></msup><mo>=</mo><mn>0</mn><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msup><mi>p</mi><mi>k</mi></msup><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><mtext>二项式分解</mtext><mo stretchy=\"false\">(</mo><msup><mi>r</mi><mn>2</mn></msup><mo>−</mo><mi>a</mi><msup><mo stretchy=\"false\">)</mo><mi>k</mi></msup><mo>=</mo><msup><mi>t</mi><mn>2</mn></msup><mo>−</mo><msup><mi>u</mi><mn>2</mn></msup><mi>a</mi><mo>=</mo><mn>0</mn><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msup><mi>p</mi><mi>k</mi></msup><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><msup><mi>t</mi><mn>2</mn></msup><msup><mi>u</mi><mrow><mo>−</mo><mn>2</mn></mrow></msup><mo>=</mo><mi>a</mi><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msup><mi>p</mi><mi>k</mi></msup><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><mtext>所以</mtext><mi>x</mi><mo>=</mo><mi>t</mi><mo>∗</mo><msup><mi>u</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><msup><mi>p</mi><mi>k</mi></msup><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><mtext>即最后所求</mtext><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">a = r^2 (mod\\ p)\n\\\\所以 (r^2-a)^k = 0 (mod\\ p^k)\n\\\\二项式分解 (r^2-a)^k=t^2-u^2a=0(mod\\ p^k)\n\\\\t^2u^{-2} = a = x^2(mod\\ p^k)\n\\\\所以 x = t*u^{-1} (mod p^k)\n\\\\即最后所求m\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\">所以</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1491em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1491em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\">二项式分解</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1491em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8641em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">u</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1491em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8641em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">u</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1491em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\">所以</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1491em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">u</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\">即最后所求</span><span class=\"mord mathnormal\">m</span></span></span></span></span></p>\n<p>利用平方差公式得到方程组，求解得t、u</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>（</mtext><mi>r</mi><mo>−</mo><mroot><mi>a</mi><mn>2</mn></mroot><msup><mo stretchy=\"false\">)</mo><mi>k</mi></msup><mo>=</mo><mi>t</mi><mo>−</mo><mi>u</mi><mroot><mi>a</mi><mn>2</mn></mroot><mspace linebreak=\"newline\"></mspace><mo stretchy=\"false\">(</mo><mi>r</mi><mo>+</mo><mroot><mi>a</mi><mn>2</mn></mroot><msup><mo stretchy=\"false\">)</mo><mi>k</mi></msup><mo>=</mo><mi>t</mi><mo>+</mo><mi>u</mi><mroot><mi>a</mi><mn>2</mn></mroot></mrow><annotation encoding=\"application/x-tex\">（r-\\sqrt[2]{a})^k = t-u\\sqrt[2]{a}\n\\\\(r+\\sqrt[2]{a})^k = t + u\\sqrt[2]{a}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord cjk_fallback\">（</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1491em;vertical-align:-0.25em;\"></span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7172em;\"><span style=\"top:-2.895em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8492em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">a</span></span></span><span style=\"top:-2.8092em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1908em;\"><span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6984em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.1908em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7172em;\"><span style=\"top:-2.895em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8492em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">a</span></span></span><span style=\"top:-2.8092em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1908em;\"><span></span></span></span></span></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1491em;vertical-align:-0.25em;\"></span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7172em;\"><span style=\"top:-2.895em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8492em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">a</span></span></span><span style=\"top:-2.8092em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1908em;\"><span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6984em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.1908em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7172em;\"><span style=\"top:-2.895em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8492em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">a</span></span></span><span style=\"top:-2.8092em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1908em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<p><strong>Cipolla算法求r</strong></p>\n<p>首先找到一个a使得</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><msup><mi>a</mi><mn>2</mn></msup><mo>−</mo><mi>n</mi><msup><mo stretchy=\"false\">)</mo><mrow><mo stretchy=\"false\">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow></msup><mo>=</mo><mo>−</mo><mn>1</mn><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><mtext>令</mtext><msup><mi>i</mi><mn>2</mn></msup><mo>=</mo><msup><mi>a</mi><mn>2</mn></msup><mo>−</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">(a^2-n)^{(p-1)/2} = -1 (mod\\ p)\n\\\\令i^2 = a^2 - n\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.188em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">p</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span><span class=\"mord mtight\">/2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8641em;\"></span><span class=\"mord cjk_fallback\">令</span><span class=\"mord\"><span class=\"mord mathnormal\">i</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></span></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find_a</span>(<span class=\"params\">n,p</span>):</span></span><br></pre></td></tr></table></figure>\n<p>更一般的情况：先对n进行质因数分解，再使用中国剩余定理</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>n</mi><mo>=</mo><mi>p</mi><msup><mn>1</mn><mrow><mi>k</mi><mn>1</mn></mrow></msup><mo>∗</mo><mi>p</mi><msup><mn>2</mn><mrow><mi>k</mi><mn>2</mn></mrow></msup><mo>∗</mo><mi>p</mi><msup><mn>3</mn><mrow><mi>k</mi><mn>3</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">n=p1^{k1} * p2^{k2} * p3^{k3}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0935em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0935em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0935em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n","site":{"data":{"about":{"class":{"class_name":"about","link_list":{"-1":{"name":"Scorpion","avatar":"/image/avatar.jpg","link":null,"descr":"�����ƹ������ë��̨��ɢ�򣬻�ѩ���������ݣ����ֲ�Ƭ����Ƭ�赸��Ƶ��ҵ����Ӱ���Ǻð�ȫ��"}}}},"link":{"class":{"class_name":"友情链接","link_list":{"-1":{"name":"M4tsuri","link":"https://M4tsuri.io","avatar":"/image/m4tsuri.jpg","descr":"pwn,blockchain"}}}}}},"excerpt":"","more":"<h1>[ichunqiu-crypto]writeup</h1>\n<h3 id=\"phrackCTF-BrokenPic\">[phrackCTF]BrokenPic</h3>\n<p>题面：这里有个图片，可是好像打不开？</p>\n<p>给出一个bmp图片</p>\n<h2 id=\"RSA-2\">RSA</h2>\n<h3 id=\"IceCTF-Round-Rabins【Cipolla】\">[IceCTF]Round Rabins【Cipolla】</h3>\n<p>发现n能开平方，提示rabin，e应为2，所以转化为下式求m的值</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>c</mi><mo>=</mo><msup><mi>m</mi><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msup><mi>p</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">c = m^2 (mod\\ p^2)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>先利用Cipolla算法求得r，使得（本题中k为2）</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>a</mi><mo>=</mo><msup><mi>r</mi><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><mtext>所以</mtext><mo stretchy=\"false\">(</mo><msup><mi>r</mi><mn>2</mn></msup><mo>−</mo><mi>a</mi><msup><mo stretchy=\"false\">)</mo><mi>k</mi></msup><mo>=</mo><mn>0</mn><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msup><mi>p</mi><mi>k</mi></msup><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><mtext>二项式分解</mtext><mo stretchy=\"false\">(</mo><msup><mi>r</mi><mn>2</mn></msup><mo>−</mo><mi>a</mi><msup><mo stretchy=\"false\">)</mo><mi>k</mi></msup><mo>=</mo><msup><mi>t</mi><mn>2</mn></msup><mo>−</mo><msup><mi>u</mi><mn>2</mn></msup><mi>a</mi><mo>=</mo><mn>0</mn><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msup><mi>p</mi><mi>k</mi></msup><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><msup><mi>t</mi><mn>2</mn></msup><msup><mi>u</mi><mrow><mo>−</mo><mn>2</mn></mrow></msup><mo>=</mo><mi>a</mi><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msup><mi>p</mi><mi>k</mi></msup><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><mtext>所以</mtext><mi>x</mi><mo>=</mo><mi>t</mi><mo>∗</mo><msup><mi>u</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><msup><mi>p</mi><mi>k</mi></msup><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><mtext>即最后所求</mtext><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">a = r^2 (mod\\ p)\n\\\\所以 (r^2-a)^k = 0 (mod\\ p^k)\n\\\\二项式分解 (r^2-a)^k=t^2-u^2a=0(mod\\ p^k)\n\\\\t^2u^{-2} = a = x^2(mod\\ p^k)\n\\\\所以 x = t*u^{-1} (mod p^k)\n\\\\即最后所求m\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\">所以</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1491em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1491em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\">二项式分解</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1491em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8641em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">u</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1491em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8641em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">u</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1491em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\">所以</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1491em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">u</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\">即最后所求</span><span class=\"mord mathnormal\">m</span></span></span></span></span></p>\n<p>利用平方差公式得到方程组，求解得t、u</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>（</mtext><mi>r</mi><mo>−</mo><mroot><mi>a</mi><mn>2</mn></mroot><msup><mo stretchy=\"false\">)</mo><mi>k</mi></msup><mo>=</mo><mi>t</mi><mo>−</mo><mi>u</mi><mroot><mi>a</mi><mn>2</mn></mroot><mspace linebreak=\"newline\"></mspace><mo stretchy=\"false\">(</mo><mi>r</mi><mo>+</mo><mroot><mi>a</mi><mn>2</mn></mroot><msup><mo stretchy=\"false\">)</mo><mi>k</mi></msup><mo>=</mo><mi>t</mi><mo>+</mo><mi>u</mi><mroot><mi>a</mi><mn>2</mn></mroot></mrow><annotation encoding=\"application/x-tex\">（r-\\sqrt[2]{a})^k = t-u\\sqrt[2]{a}\n\\\\(r+\\sqrt[2]{a})^k = t + u\\sqrt[2]{a}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord cjk_fallback\">（</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1491em;vertical-align:-0.25em;\"></span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7172em;\"><span style=\"top:-2.895em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8492em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">a</span></span></span><span style=\"top:-2.8092em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1908em;\"><span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6984em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.1908em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7172em;\"><span style=\"top:-2.895em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8492em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">a</span></span></span><span style=\"top:-2.8092em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1908em;\"><span></span></span></span></span></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1491em;vertical-align:-0.25em;\"></span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7172em;\"><span style=\"top:-2.895em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8492em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">a</span></span></span><span style=\"top:-2.8092em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1908em;\"><span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6984em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.1908em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7172em;\"><span style=\"top:-2.895em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8492em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">a</span></span></span><span style=\"top:-2.8092em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1908em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<p><strong>Cipolla算法求r</strong></p>\n<p>首先找到一个a使得</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><msup><mi>a</mi><mn>2</mn></msup><mo>−</mo><mi>n</mi><msup><mo stretchy=\"false\">)</mo><mrow><mo stretchy=\"false\">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow></msup><mo>=</mo><mo>−</mo><mn>1</mn><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><mtext>令</mtext><msup><mi>i</mi><mn>2</mn></msup><mo>=</mo><msup><mi>a</mi><mn>2</mn></msup><mo>−</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">(a^2-n)^{(p-1)/2} = -1 (mod\\ p)\n\\\\令i^2 = a^2 - n\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.188em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">p</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span><span class=\"mord mtight\">/2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8641em;\"></span><span class=\"mord cjk_fallback\">令</span><span class=\"mord\"><span class=\"mord mathnormal\">i</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></span></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find_a</span>(<span class=\"params\">n,p</span>):</span></span><br></pre></td></tr></table></figure>\n<p>更一般的情况：先对n进行质因数分解，再使用中国剩余定理</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>n</mi><mo>=</mo><mi>p</mi><msup><mn>1</mn><mrow><mi>k</mi><mn>1</mn></mrow></msup><mo>∗</mo><mi>p</mi><msup><mn>2</mn><mrow><mi>k</mi><mn>2</mn></mrow></msup><mo>∗</mo><mi>p</mi><msup><mn>3</mn><mrow><mi>k</mi><mn>3</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">n=p1^{k1} * p2^{k2} * p3^{k3}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0935em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0935em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0935em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n"}],"PostAsset":[{"_id":"source/_posts/AES/AES.assets/aes_details.jpg","post":"cletwjohn0001ri3s514hetpe","slug":"AES.assets/aes_details.jpg","modified":1,"renderable":1},{"_id":"source/_posts/AES/AES.assets/image-20220115160053585.png","post":"cletwjohn0001ri3s514hetpe","slug":"AES.assets/image-20220115160053585.png","modified":1,"renderable":1},{"_id":"source/_posts/AES/AES.assets/image-20220118145857240.png","post":"cletwjohn0001ri3s514hetpe","slug":"AES.assets/image-20220118145857240.png","modified":1,"renderable":1},{"_id":"source/_posts/AES/AES.assets/image-20220118151325836.png","post":"cletwjohn0001ri3s514hetpe","slug":"AES.assets/image-20220118151325836.png","modified":1,"renderable":1},{"_id":"source/_posts/AES/AES.assets/image-20220118151417023.png","post":"cletwjohn0001ri3s514hetpe","slug":"AES.assets/image-20220118151417023.png","modified":1,"renderable":1},{"_id":"source/_posts/AES/AES.assets/image-20220118160907434.png","post":"cletwjohn0001ri3s514hetpe","slug":"AES.assets/image-20220118160907434.png","modified":1,"renderable":1},{"_id":"source/_posts/AES/AES.assets/image-20220118160943225.png","post":"cletwjohn0001ri3s514hetpe","slug":"AES.assets/image-20220118160943225.png","modified":1,"renderable":1},{"_id":"source/_posts/AES/AES.assets/image-20220118161013057.png","post":"cletwjohn0001ri3s514hetpe","slug":"AES.assets/image-20220118161013057.png","modified":1,"renderable":1},{"_id":"source/_posts/AES/AES.assets/image-20220118161112688.png","post":"cletwjohn0001ri3s514hetpe","slug":"AES.assets/image-20220118161112688.png","modified":1,"renderable":1},{"_id":"source/_posts/AES/AES.assets/image-20220118161222708.png","post":"cletwjohn0001ri3s514hetpe","slug":"AES.assets/image-20220118161222708.png","modified":1,"renderable":1},{"_id":"source/_posts/AES/AES.assets/image-20220118172332974.png","post":"cletwjohn0001ri3s514hetpe","slug":"AES.assets/image-20220118172332974.png","modified":1,"renderable":1},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/QNy9EWc7K4enJGu.jpg","post":"cletwjoht0006ri3s1aclcfs3","slug":"BUUCTF-crypto-writeup-md.assets/QNy9EWc7K4enJGu.jpg","modified":1,"renderable":1},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211107125148733.png","post":"cletwjoht0006ri3s1aclcfs3","slug":"BUUCTF-crypto-writeup-md.assets/image-20211107125148733.png","modified":1,"renderable":1},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211107144120942.png","post":"cletwjoht0006ri3s1aclcfs3","slug":"BUUCTF-crypto-writeup-md.assets/image-20211107144120942.png","modified":1,"renderable":1},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211107144143545.png","post":"cletwjoht0006ri3s1aclcfs3","slug":"BUUCTF-crypto-writeup-md.assets/image-20211107144143545.png","modified":1,"renderable":1},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211107144221290.png","post":"cletwjoht0006ri3s1aclcfs3","slug":"BUUCTF-crypto-writeup-md.assets/image-20211107144221290.png","modified":1,"renderable":1},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211107144251417.png","post":"cletwjoht0006ri3s1aclcfs3","slug":"BUUCTF-crypto-writeup-md.assets/image-20211107144251417.png","modified":1,"renderable":1},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211115232410660.png","post":"cletwjoht0006ri3s1aclcfs3","slug":"BUUCTF-crypto-writeup-md.assets/image-20211115232410660.png","modified":1,"renderable":1},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211115232440411.png","post":"cletwjoht0006ri3s1aclcfs3","slug":"BUUCTF-crypto-writeup-md.assets/image-20211115232440411.png","modified":1,"renderable":1},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211121110325817.png","post":"cletwjoht0006ri3s1aclcfs3","slug":"BUUCTF-crypto-writeup-md.assets/image-20211121110325817.png","modified":1,"renderable":1},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211121185128493.png","post":"cletwjoht0006ri3s1aclcfs3","slug":"BUUCTF-crypto-writeup-md.assets/image-20211121185128493.png","modified":1,"renderable":1},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211126162708811.png","post":"cletwjoht0006ri3s1aclcfs3","slug":"BUUCTF-crypto-writeup-md.assets/image-20211126162708811.png","modified":1,"renderable":1},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211126162739647.png","post":"cletwjoht0006ri3s1aclcfs3","slug":"BUUCTF-crypto-writeup-md.assets/image-20211126162739647.png","modified":1,"renderable":1},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211126163520911.png","post":"cletwjoht0006ri3s1aclcfs3","slug":"BUUCTF-crypto-writeup-md.assets/image-20211126163520911.png","modified":1,"renderable":1},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211128152817403.png","post":"cletwjoht0006ri3s1aclcfs3","slug":"BUUCTF-crypto-writeup-md.assets/image-20211128152817403.png","modified":1,"renderable":1},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20211228131817914.png","post":"cletwjoht0006ri3s1aclcfs3","slug":"BUUCTF-crypto-writeup-md.assets/image-20211228131817914.png","modified":1,"renderable":1},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20220118215319029.png","post":"cletwjoht0006ri3s1aclcfs3","slug":"BUUCTF-crypto-writeup-md.assets/image-20220118215319029.png","modified":1,"renderable":1},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/image-20220118215352072.png","post":"cletwjoht0006ri3s1aclcfs3","slug":"BUUCTF-crypto-writeup-md.assets/image-20220118215352072.png","modified":1,"renderable":1},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/t0189dac1c8ab2412c8.jpg","post":"cletwjoht0006ri3s1aclcfs3","slug":"BUUCTF-crypto-writeup-md.assets/t0189dac1c8ab2412c8.jpg","modified":1,"renderable":1},{"_id":"source/_posts/BUUCTF-crypto-writeup-md/BUUCTF-crypto-writeup-md.assets/t01dd9c90c1ecde8471.jpg","post":"cletwjoht0006ri3s1aclcfs3","slug":"BUUCTF-crypto-writeup-md.assets/t01dd9c90c1ecde8471.jpg","modified":1,"renderable":1},{"_id":"source/_posts/DES/DES.assets/image-20220112114938574.png","post":"cletwjohr0003ri3s7xys0zwf","slug":"DES.assets/image-20220112114938574.png","modified":1,"renderable":1},{"_id":"source/_posts/DES/DES.assets/image-20220112132946201.png","post":"cletwjohr0003ri3s7xys0zwf","slug":"DES.assets/image-20220112132946201.png","modified":1,"renderable":1},{"_id":"source/_posts/DES/DES.assets/image-20220112133041770.png","post":"cletwjohr0003ri3s7xys0zwf","slug":"DES.assets/image-20220112133041770.png","modified":1,"renderable":1},{"_id":"source/_posts/DES/DES.assets/image-20220112133518482.png","post":"cletwjohr0003ri3s7xys0zwf","slug":"DES.assets/image-20220112133518482.png","modified":1,"renderable":1},{"_id":"source/_posts/DES/DES.assets/image-20220112133737845.png","post":"cletwjohr0003ri3s7xys0zwf","slug":"DES.assets/image-20220112133737845.png","modified":1,"renderable":1},{"_id":"source/_posts/DES/DES.assets/image-20220112133802349.png","post":"cletwjohr0003ri3s7xys0zwf","slug":"DES.assets/image-20220112133802349.png","modified":1,"renderable":1},{"_id":"source/_posts/DES/DES.assets/image-20220112134549104.png","post":"cletwjohr0003ri3s7xys0zwf","slug":"DES.assets/image-20220112134549104.png","modified":1,"renderable":1},{"_id":"source/_posts/DES/DES.assets/image-20220112134612622.png","post":"cletwjohr0003ri3s7xys0zwf","slug":"DES.assets/image-20220112134612622.png","modified":1,"renderable":1},{"_id":"source/_posts/DES/DES.assets/image-20220112134705510.png","post":"cletwjohr0003ri3s7xys0zwf","slug":"DES.assets/image-20220112134705510.png","modified":1,"renderable":1},{"_id":"source/_posts/DES/DES.assets/image-20220112135026479.png","post":"cletwjohr0003ri3s7xys0zwf","slug":"DES.assets/image-20220112135026479.png","modified":1,"renderable":1},{"_id":"source/_posts/DES/DES.assets/image-20220112135218512.png","post":"cletwjohr0003ri3s7xys0zwf","slug":"DES.assets/image-20220112135218512.png","modified":1,"renderable":1},{"_id":"source/_posts/DES/DES.assets/image-20220112165741033.png","post":"cletwjohr0003ri3s7xys0zwf","slug":"DES.assets/image-20220112165741033.png","modified":1,"renderable":1},{"_id":"source/_posts/DES/DES.assets/image-20220113124310851.png","post":"cletwjohr0003ri3s7xys0zwf","slug":"DES.assets/image-20220113124310851.png","modified":1,"renderable":1},{"_id":"source/_posts/DES/DES.assets/image-20220113141131473.png","post":"cletwjohr0003ri3s7xys0zwf","slug":"DES.assets/image-20220113141131473.png","modified":1,"renderable":1},{"_id":"source/_posts/DES/DES.assets/image-20220113141442031.png","post":"cletwjohr0003ri3s7xys0zwf","slug":"DES.assets/image-20220113141442031.png","modified":1,"renderable":1},{"_id":"source/_posts/DES/DES.assets/image-20220113142045280.png","post":"cletwjohr0003ri3s7xys0zwf","slug":"DES.assets/image-20220113142045280.png","modified":1,"renderable":1},{"_id":"source/_posts/DES/DES.assets/image-20220113142202479.png","post":"cletwjohr0003ri3s7xys0zwf","slug":"DES.assets/image-20220113142202479.png","modified":1,"renderable":1},{"_id":"source/_posts/DES/DES.assets/image-20220113142344671.png","post":"cletwjohr0003ri3s7xys0zwf","slug":"DES.assets/image-20220113142344671.png","modified":1,"renderable":1},{"_id":"source/_posts/aligot/aligot.assets/image-20211128145601514.png","post":"cletwjohx0011ri3s5n0l5r94","slug":"aligot.assets/image-20211128145601514.png","modified":1,"renderable":1},{"_id":"source/_posts/aligot/aligot.assets/image-20211201174224006.png","post":"cletwjohx0011ri3s5n0l5r94","slug":"aligot.assets/image-20211201174224006.png","modified":1,"renderable":1},{"_id":"source/_posts/aligot/aligot.assets/image-20211202154148799.png","post":"cletwjohx0011ri3s5n0l5r94","slug":"aligot.assets/image-20211202154148799.png","modified":1,"renderable":1},{"_id":"source/_posts/aligot/aligot.assets/image-20211202154801527.png","post":"cletwjohx0011ri3s5n0l5r94","slug":"aligot.assets/image-20211202154801527.png","modified":1,"renderable":1},{"_id":"source/_posts/aligot/aligot.assets/image-20211202155126668.png","post":"cletwjohx0011ri3s5n0l5r94","slug":"aligot.assets/image-20211202155126668.png","modified":1,"renderable":1},{"_id":"source/_posts/aligot/aligot.assets/image-20211202184802760.png","post":"cletwjohx0011ri3s5n0l5r94","slug":"aligot.assets/image-20211202184802760.png","modified":1,"renderable":1},{"_id":"source/_posts/aligot/aligot.assets/image-20211202185040006.png","post":"cletwjohx0011ri3s5n0l5r94","slug":"aligot.assets/image-20211202185040006.png","modified":1,"renderable":1},{"_id":"source/_posts/aligot/aligot.assets/image-20211202185147355.png","post":"cletwjohx0011ri3s5n0l5r94","slug":"aligot.assets/image-20211202185147355.png","modified":1,"renderable":1},{"_id":"source/_posts/aligot/aligot.assets/image-20211202210609653.png","post":"cletwjohx0011ri3s5n0l5r94","slug":"aligot.assets/image-20211202210609653.png","modified":1,"renderable":1},{"_id":"source/_posts/aligot/aligot.assets/image-20211202210729211.png","post":"cletwjohx0011ri3s5n0l5r94","slug":"aligot.assets/image-20211202210729211.png","modified":1,"renderable":1},{"_id":"source/_posts/aligot/aligot.assets/image-20211202212334296.png","post":"cletwjohx0011ri3s5n0l5r94","slug":"aligot.assets/image-20211202212334296.png","modified":1,"renderable":1},{"_id":"source/_posts/aligot/aligot.assets/image-20211202215338681.png","post":"cletwjohx0011ri3s5n0l5r94","slug":"aligot.assets/image-20211202215338681.png","modified":1,"renderable":1},{"_id":"source/_posts/aligot/aligot.assets/image-20211202235129708.png","post":"cletwjohx0011ri3s5n0l5r94","slug":"aligot.assets/image-20211202235129708.png","modified":1,"renderable":1},{"_id":"source/_posts/md5/md5.assets/image-20220127171124399.png","post":"cletwjohz0017ri3s2vjc866i","slug":"md5.assets/image-20220127171124399.png","modified":1,"renderable":1},{"_id":"source/_posts/md5/md5.assets/image-20220127171654001.png","post":"cletwjohz0017ri3s2vjc866i","slug":"md5.assets/image-20220127171654001.png","modified":1,"renderable":1},{"_id":"source/_posts/md5/md5.assets/image-20220127175833516.png","post":"cletwjohz0017ri3s2vjc866i","slug":"md5.assets/image-20220127175833516.png","modified":1,"renderable":1},{"_id":"source/_posts/md5/md5.assets/image-20220127181300578.png","post":"cletwjohz0017ri3s2vjc866i","slug":"md5.assets/image-20220127181300578.png","modified":1,"renderable":1},{"_id":"source/_posts/md5/md5.assets/image-20220128122013626.png","post":"cletwjohz0017ri3s2vjc866i","slug":"md5.assets/image-20220128122013626.png","modified":1,"renderable":1},{"_id":"source/_posts/md5/md5.assets/image-20220128122933514.png","post":"cletwjohz0017ri3s2vjc866i","slug":"md5.assets/image-20220128122933514.png","modified":1,"renderable":1},{"_id":"source/_posts/md5/md5.assets/image-20220128123055931.png","post":"cletwjohz0017ri3s2vjc866i","slug":"md5.assets/image-20220128123055931.png","modified":1,"renderable":1},{"_id":"source/_posts/md5/md5.assets/image-20220128124206153.png","post":"cletwjohz0017ri3s2vjc866i","slug":"md5.assets/image-20220128124206153.png","modified":1,"renderable":1},{"_id":"source/_posts/lfsr/lfsr.assets/image-20220217205141000.png","post":"cletwjohy0016ri3sfoz269ia","slug":"lfsr.assets/image-20220217205141000.png","modified":1,"renderable":1},{"_id":"source/_posts/lfsr/lfsr.assets/image-20220224153901121.png","post":"cletwjohy0016ri3sfoz269ia","slug":"lfsr.assets/image-20220224153901121.png","modified":1,"renderable":1},{"_id":"source/_posts/lfsr/lfsr.assets/image-20220224160744696.png","post":"cletwjohy0016ri3sfoz269ia","slug":"lfsr.assets/image-20220224160744696.png","modified":1,"renderable":1},{"_id":"source/_posts/lfsr/lfsr.assets/image-20220224161436546.png","post":"cletwjohy0016ri3sfoz269ia","slug":"lfsr.assets/image-20220224161436546.png","modified":1,"renderable":1},{"_id":"source/_posts/c2dll/c2dll.assets/image-20210616195848892-16456145093001.png","post":"cletwjohy0012ri3sgehcfo83","slug":"c2dll.assets/image-20210616195848892-16456145093001.png","modified":1,"renderable":1},{"_id":"source/_posts/c2dll/c2dll.assets/image-20210618142608631-16456145093012.png","post":"cletwjohy0012ri3sgehcfo83","slug":"c2dll.assets/image-20210618142608631-16456145093012.png","modified":1,"renderable":1},{"_id":"source/_posts/c2dll/c2dll.assets/image-20210618143512463-16456145093014.png","post":"cletwjohy0012ri3sgehcfo83","slug":"c2dll.assets/image-20210618143512463-16456145093014.png","modified":1,"renderable":1},{"_id":"source/_posts/c2dll/c2dll.assets/image-20210618161025486-16456145093015.png","post":"cletwjohy0012ri3sgehcfo83","slug":"c2dll.assets/image-20210618161025486-16456145093015.png","modified":1,"renderable":1},{"_id":"source/_posts/c2dll/c2dll.assets/image-20210618161730728-16456145093016.png","post":"cletwjohy0012ri3sgehcfo83","slug":"c2dll.assets/image-20210618161730728-16456145093016.png","modified":1,"renderable":1},{"_id":"source/_posts/c2dll/c2dll.assets/image-20210618162011465-16456145093017.png","post":"cletwjohy0012ri3sgehcfo83","slug":"c2dll.assets/image-20210618162011465-16456145093017.png","modified":1,"renderable":1},{"_id":"source/_posts/c2dll/c2dll.assets/image-20210618162115746-16456145093018.png","post":"cletwjohy0012ri3sgehcfo83","slug":"c2dll.assets/image-20210618162115746-16456145093018.png","modified":1,"renderable":1},{"_id":"source/_posts/c2dll/c2dll.assets/image-20210618163119738-16456145093029.png","post":"cletwjohy0012ri3sgehcfo83","slug":"c2dll.assets/image-20210618163119738-16456145093029.png","modified":1,"renderable":1},{"_id":"source/_posts/c2dll/c2dll.assets/image-20210618163947120-164561450930210.png","post":"cletwjohy0012ri3sgehcfo83","slug":"c2dll.assets/image-20210618163947120-164561450930210.png","modified":1,"renderable":1},{"_id":"source/_posts/c2dll/c2dll.assets/image-20210618164215851-164561450930211.png","post":"cletwjohy0012ri3sgehcfo83","slug":"c2dll.assets/image-20210618164215851-164561450930211.png","modified":1,"renderable":1},{"_id":"source/_posts/c2dll/c2dll.assets/image-20210619104237632-164561450930215.png","post":"cletwjohy0012ri3sgehcfo83","slug":"c2dll.assets/image-20210619104237632-164561450930215.png","modified":1,"renderable":1},{"_id":"source/_posts/c2dll/c2dll.assets/image-20210619144516190-16456145093013.png","post":"cletwjohy0012ri3sgehcfo83","slug":"c2dll.assets/image-20210619144516190-16456145093013.png","modified":1,"renderable":1},{"_id":"source/_posts/c2dll/c2dll.assets/image-20210619145806024-164561450930212.png","post":"cletwjohy0012ri3sgehcfo83","slug":"c2dll.assets/image-20210619145806024-164561450930212.png","modified":1,"renderable":1},{"_id":"source/_posts/c2dll/c2dll.assets/image-20210619150017590-164561450930213.png","post":"cletwjohy0012ri3sgehcfo83","slug":"c2dll.assets/image-20210619150017590-164561450930213.png","modified":1,"renderable":1},{"_id":"source/_posts/c2dll/c2dll.assets/image-20210619150139149-164561450930214.png","post":"cletwjohy0012ri3sgehcfo83","slug":"c2dll.assets/image-20210619150139149-164561450930214.png","modified":1,"renderable":1},{"_id":"source/_posts/sha1/sha1.assets/image-20220223191837393.png","post":"cletwjohz001bri3sc0oh7ltx","slug":"sha1.assets/image-20220223191837393.png","modified":1,"renderable":1},{"_id":"source/_posts/sha1/sha1.assets/image-20220223192555863.png","post":"cletwjohz001bri3sc0oh7ltx","slug":"sha1.assets/image-20220223192555863.png","modified":1,"renderable":1},{"_id":"source/_posts/sha1/sha1.assets/image-20220223200517936.png","post":"cletwjohz001bri3sc0oh7ltx","slug":"sha1.assets/image-20220223200517936.png","modified":1,"renderable":1},{"_id":"source/_posts/sha1/sha1.assets/image-20220223200537067.png","post":"cletwjohz001bri3sc0oh7ltx","slug":"sha1.assets/image-20220223200537067.png","modified":1,"renderable":1},{"_id":"source/_posts/sha1/sha1.assets/image-20220223213829056.png","post":"cletwjohz001bri3sc0oh7ltx","slug":"sha1.assets/image-20220223213829056.png","modified":1,"renderable":1},{"_id":"source/_posts/dfg/dfg.assets/image-20220218195458486.png","post":"cletwjohy0014ri3sgf8705hm","slug":"dfg.assets/image-20220218195458486.png","modified":1,"renderable":1},{"_id":"source/_posts/dfg/dfg.assets/image-20220221181451970.png","post":"cletwjohy0014ri3sgf8705hm","slug":"dfg.assets/image-20220221181451970.png","modified":1,"renderable":1},{"_id":"source/_posts/dfg/dfg.assets/image-20220221190220766.png","post":"cletwjohy0014ri3sgf8705hm","slug":"dfg.assets/image-20220221190220766.png","modified":1,"renderable":1},{"_id":"source/_posts/dfg/dfg.assets/image-20220221190337262.png","post":"cletwjohy0014ri3sgf8705hm","slug":"dfg.assets/image-20220221190337262.png","modified":1,"renderable":1},{"_id":"source/_posts/dfg/dfg.assets/image-20220221191520450.png","post":"cletwjohy0014ri3sgf8705hm","slug":"dfg.assets/image-20220221191520450.png","modified":1,"renderable":1},{"_id":"source/_posts/dfg/dfg.assets/image-20220222110155634.png","post":"cletwjohy0014ri3sgf8705hm","slug":"dfg.assets/image-20220222110155634.png","modified":1,"renderable":1},{"_id":"source/_posts/dfg/dfg.assets/image-20220222110826232.png","post":"cletwjohy0014ri3sgf8705hm","slug":"dfg.assets/image-20220222110826232.png","modified":1,"renderable":1},{"_id":"source/_posts/dfg/dfg.assets/image-20220222112450707.png","post":"cletwjohy0014ri3sgf8705hm","slug":"dfg.assets/image-20220222112450707.png","modified":1,"renderable":1},{"_id":"source/_posts/dfg/dfg.assets/image-20220222113121499.png","post":"cletwjohy0014ri3sgf8705hm","slug":"dfg.assets/image-20220222113121499.png","modified":1,"renderable":1},{"_id":"source/_posts/dfg/dfg.assets/image-20220222141947171.png","post":"cletwjohy0014ri3sgf8705hm","slug":"dfg.assets/image-20220222141947171.png","modified":1,"renderable":1},{"_id":"source/_posts/dfg/dfg.assets/image-20220222143759387.png","post":"cletwjohy0014ri3sgf8705hm","slug":"dfg.assets/image-20220222143759387.png","modified":1,"renderable":1},{"_id":"source/_posts/dfg/dfg.assets/image-20220222152208862.png","post":"cletwjohy0014ri3sgf8705hm","slug":"dfg.assets/image-20220222152208862.png","modified":1,"renderable":1},{"_id":"source/_posts/dfg/dfg.assets/image-20220222152902061.png","post":"cletwjohy0014ri3sgf8705hm","slug":"dfg.assets/image-20220222152902061.png","modified":1,"renderable":1},{"_id":"source/_posts/dfg/dfg.assets/image-20220222195328619.png","post":"cletwjohy0014ri3sgf8705hm","slug":"dfg.assets/image-20220222195328619.png","modified":1,"renderable":1},{"_id":"source/_posts/dfg/dfg.assets/image-20220222195734989.png","post":"cletwjohy0014ri3sgf8705hm","slug":"dfg.assets/image-20220222195734989.png","modified":1,"renderable":1},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211223232437622.png","post":"cletwjoi1001hri3s8viceq9q","slug":"program-synthesis.assets/image-20211223232437622.png","modified":1,"renderable":1},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211223232459726.png","post":"cletwjoi1001hri3s8viceq9q","slug":"program-synthesis.assets/image-20211223232459726.png","modified":1,"renderable":1},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211223232509638.png","post":"cletwjoi1001hri3s8viceq9q","slug":"program-synthesis.assets/image-20211223232509638.png","modified":1,"renderable":1},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211224200346689.png","post":"cletwjoi1001hri3s8viceq9q","slug":"program-synthesis.assets/image-20211224200346689.png","modified":1,"renderable":1},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211224200549972.png","post":"cletwjoi1001hri3s8viceq9q","slug":"program-synthesis.assets/image-20211224200549972.png","modified":1,"renderable":1},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211224202523935.png","post":"cletwjoi1001hri3s8viceq9q","slug":"program-synthesis.assets/image-20211224202523935.png","modified":1,"renderable":1},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211224203951802.png","post":"cletwjoi1001hri3s8viceq9q","slug":"program-synthesis.assets/image-20211224203951802.png","modified":1,"renderable":1},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211224205908008.png","post":"cletwjoi1001hri3s8viceq9q","slug":"program-synthesis.assets/image-20211224205908008.png","modified":1,"renderable":1},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211224205920700.png","post":"cletwjoi1001hri3s8viceq9q","slug":"program-synthesis.assets/image-20211224205920700.png","modified":1,"renderable":1},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211225081537462.png","post":"cletwjoi1001hri3s8viceq9q","slug":"program-synthesis.assets/image-20211225081537462.png","modified":1,"renderable":1},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211225085504762.png","post":"cletwjoi1001hri3s8viceq9q","slug":"program-synthesis.assets/image-20211225085504762.png","modified":1,"renderable":1},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211225093440256.png","post":"cletwjoi1001hri3s8viceq9q","slug":"program-synthesis.assets/image-20211225093440256.png","modified":1,"renderable":1},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211225095033519.png","post":"cletwjoi1001hri3s8viceq9q","slug":"program-synthesis.assets/image-20211225095033519.png","modified":1,"renderable":1},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211225101503380-16403986033541.png","post":"cletwjoi1001hri3s8viceq9q","slug":"program-synthesis.assets/image-20211225101503380-16403986033541.png","modified":1,"renderable":1},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211225101633374.png","post":"cletwjoi1001hri3s8viceq9q","slug":"program-synthesis.assets/image-20211225101633374.png","modified":1,"renderable":1},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211226204335258.png","post":"cletwjoi1001hri3s8viceq9q","slug":"program-synthesis.assets/image-20211226204335258.png","modified":1,"renderable":1},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211226204452516.png","post":"cletwjoi1001hri3s8viceq9q","slug":"program-synthesis.assets/image-20211226204452516.png","modified":1,"renderable":1},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211226205016145.png","post":"cletwjoi1001hri3s8viceq9q","slug":"program-synthesis.assets/image-20211226205016145.png","modified":1,"renderable":1},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20211226211621715.png","post":"cletwjoi1001hri3s8viceq9q","slug":"program-synthesis.assets/image-20211226211621715.png","modified":1,"renderable":1},{"_id":"source/_posts/program-synthesis/program-synthesis.assets/image-20220224115439047.png","post":"cletwjoi1001hri3s8viceq9q","slug":"program-synthesis.assets/image-20220224115439047.png","modified":1,"renderable":1},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210601155403815.png","post":"cletwjoi0001dri3s4n5mfe51","slug":"where-s-crypto.assets/image-20210601155403815.png","modified":1,"renderable":1},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210623221842089.png","post":"cletwjoi0001dri3s4n5mfe51","slug":"where-s-crypto.assets/image-20210623221842089.png","modified":1,"renderable":1},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210624093611741.png","post":"cletwjoi0001dri3s4n5mfe51","slug":"where-s-crypto.assets/image-20210624093611741.png","modified":1,"renderable":1},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210624104523602.png","post":"cletwjoi0001dri3s4n5mfe51","slug":"where-s-crypto.assets/image-20210624104523602.png","modified":1,"renderable":1},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210624114508898.png","post":"cletwjoi0001dri3s4n5mfe51","slug":"where-s-crypto.assets/image-20210624114508898.png","modified":1,"renderable":1},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210624154848633.png","post":"cletwjoi0001dri3s4n5mfe51","slug":"where-s-crypto.assets/image-20210624154848633.png","modified":1,"renderable":1},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210624154904447.png","post":"cletwjoi0001dri3s4n5mfe51","slug":"where-s-crypto.assets/image-20210624154904447.png","modified":1,"renderable":1},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210624171314309.png","post":"cletwjoi0001dri3s4n5mfe51","slug":"where-s-crypto.assets/image-20210624171314309.png","modified":1,"renderable":1},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210624171324978.png","post":"cletwjoi0001dri3s4n5mfe51","slug":"where-s-crypto.assets/image-20210624171324978.png","modified":1,"renderable":1},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210624174209159.png","post":"cletwjoi0001dri3s4n5mfe51","slug":"where-s-crypto.assets/image-20210624174209159.png","modified":1,"renderable":1},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210624174324222.png","post":"cletwjoi0001dri3s4n5mfe51","slug":"where-s-crypto.assets/image-20210624174324222.png","modified":1,"renderable":1},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210624174908504.png","post":"cletwjoi0001dri3s4n5mfe51","slug":"where-s-crypto.assets/image-20210624174908504.png","modified":1,"renderable":1},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210624202125509.png","post":"cletwjoi0001dri3s4n5mfe51","slug":"where-s-crypto.assets/image-20210624202125509.png","modified":1,"renderable":1},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210624202747254.png","post":"cletwjoi0001dri3s4n5mfe51","slug":"where-s-crypto.assets/image-20210624202747254.png","modified":1,"renderable":1},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210624203559676.png","post":"cletwjoi0001dri3s4n5mfe51","slug":"where-s-crypto.assets/image-20210624203559676.png","modified":1,"renderable":1},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210624225715291.png","post":"cletwjoi0001dri3s4n5mfe51","slug":"where-s-crypto.assets/image-20210624225715291.png","modified":1,"renderable":1},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210624230418524.png","post":"cletwjoi0001dri3s4n5mfe51","slug":"where-s-crypto.assets/image-20210624230418524.png","modified":1,"renderable":1},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210624231520804.png","post":"cletwjoi0001dri3s4n5mfe51","slug":"where-s-crypto.assets/image-20210624231520804.png","modified":1,"renderable":1},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210624231925380.png","post":"cletwjoi0001dri3s4n5mfe51","slug":"where-s-crypto.assets/image-20210624231925380.png","modified":1,"renderable":1},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210625112903207.png","post":"cletwjoi0001dri3s4n5mfe51","slug":"where-s-crypto.assets/image-20210625112903207.png","modified":1,"renderable":1},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210625124717799.png","post":"cletwjoi0001dri3s4n5mfe51","slug":"where-s-crypto.assets/image-20210625124717799.png","modified":1,"renderable":1},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210625125821055.png","post":"cletwjoi0001dri3s4n5mfe51","slug":"where-s-crypto.assets/image-20210625125821055.png","modified":1,"renderable":1},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210625132532624.png","post":"cletwjoi0001dri3s4n5mfe51","slug":"where-s-crypto.assets/image-20210625132532624.png","modified":1,"renderable":1},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210625132545137.png","post":"cletwjoi0001dri3s4n5mfe51","slug":"where-s-crypto.assets/image-20210625132545137.png","modified":1,"renderable":1},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210625132559544.png","post":"cletwjoi0001dri3s4n5mfe51","slug":"where-s-crypto.assets/image-20210625132559544.png","modified":1,"renderable":1},{"_id":"source/_posts/where-s-crypto/where-s-crypto.assets/image-20210625132713995.png","post":"cletwjoi0001dri3s4n5mfe51","slug":"where-s-crypto.assets/image-20210625132713995.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cletwjohn0001ri3s514hetpe","category_id":"cletwjoht0007ri3sbfx533qy","_id":"cletwjohw000mri3s87da18s5"},{"post_id":"cletwjohn0001ri3s514hetpe","category_id":"cletwjohv000dri3s9quc42zx","_id":"cletwjohw000nri3sbmi4by3t"},{"post_id":"cletwjohr0003ri3s7xys0zwf","category_id":"cletwjoht0007ri3sbfx533qy","_id":"cletwjohw000qri3s6ib45aje"},{"post_id":"cletwjohr0003ri3s7xys0zwf","category_id":"cletwjohv000dri3s9quc42zx","_id":"cletwjohw000sri3scweahm0s"},{"post_id":"cletwjoht0006ri3s1aclcfs3","category_id":"cletwjohv000bri3segmra3zh","_id":"cletwjohw000vri3s8dxt22k1"},{"post_id":"cletwjoht0006ri3s1aclcfs3","category_id":"cletwjohv000lri3s1poqdjgg","_id":"cletwjohw000wri3secob3ro4"},{"post_id":"cletwjohy0016ri3sfoz269ia","category_id":"cletwjoht0007ri3sbfx533qy","_id":"cletwjoi1001iri3s8tjc8ait"},{"post_id":"cletwjohy0016ri3sfoz269ia","category_id":"cletwjohv000dri3s9quc42zx","_id":"cletwjoi1001lri3s3qpj0t5i"},{"post_id":"cletwjohx0011ri3s5n0l5r94","category_id":"cletwjoht0007ri3sbfx533qy","_id":"cletwjoi2001pri3shi9m1k0y"},{"post_id":"cletwjohx0011ri3s5n0l5r94","category_id":"cletwjohy0015ri3scm3yeqw6","_id":"cletwjoi2001rri3s8t168kgu"},{"post_id":"cletwjohz0017ri3s2vjc866i","category_id":"cletwjoht0007ri3sbfx533qy","_id":"cletwjoi2001uri3s1nlp6mdq"},{"post_id":"cletwjohz0017ri3s2vjc866i","category_id":"cletwjohv000dri3s9quc42zx","_id":"cletwjoi2001xri3s4giadht7"},{"post_id":"cletwjohy0012ri3sgehcfo83","category_id":"cletwjohz0019ri3s10qp9xa0","_id":"cletwjoi20020ri3sbq951jk1"},{"post_id":"cletwjohz001bri3sc0oh7ltx","category_id":"cletwjoht0007ri3sbfx533qy","_id":"cletwjoi20022ri3sf408asrp"},{"post_id":"cletwjohz001bri3sc0oh7ltx","category_id":"cletwjohv000dri3s9quc42zx","_id":"cletwjoi20024ri3s6vnh0w2a"},{"post_id":"cletwjoi0001dri3s4n5mfe51","category_id":"cletwjoht0007ri3sbfx533qy","_id":"cletwjoi20026ri3sfg9advn0"},{"post_id":"cletwjoi0001dri3s4n5mfe51","category_id":"cletwjohy0015ri3scm3yeqw6","_id":"cletwjoi20028ri3s0gpxho42"},{"post_id":"cletwjohy0014ri3sgf8705hm","category_id":"cletwjoht0007ri3sbfx533qy","_id":"cletwjoi2002ari3s1dtrbxw5"},{"post_id":"cletwjohy0014ri3sgf8705hm","category_id":"cletwjohy0015ri3scm3yeqw6","_id":"cletwjoi2002cri3set795i44"},{"post_id":"cletwjoi1001kri3s0uwz3own","category_id":"cletwjohv000bri3segmra3zh","_id":"cletwjoi2002eri3s4t5dhlh9"},{"post_id":"cletwjoi1001kri3s0uwz3own","category_id":"cletwjohv000lri3s1poqdjgg","_id":"cletwjoi2002gri3s9qdvazyt"},{"post_id":"cletwjoi1001hri3s8viceq9q","category_id":"cletwjoi2001ori3s9f7883pj","_id":"cletwjoi3002iri3sf7g89zqn"},{"post_id":"cletwjoi1001hri3s8viceq9q","category_id":"cletwjoi2001wri3s773s9rw8","_id":"cletwjoi3002kri3samxp0cgo"}],"PostTag":[{"post_id":"cletwjohn0001ri3s514hetpe","tag_id":"cletwjohs0004ri3s4tty710x","_id":"cletwjohv000fri3sgu0shin1"},{"post_id":"cletwjohn0001ri3s514hetpe","tag_id":"cletwjohu0009ri3scn25670e","_id":"cletwjohv000gri3s7p47hu27"},{"post_id":"cletwjohn0001ri3s514hetpe","tag_id":"cletwjohv000cri3s7cum80wd","_id":"cletwjohv000jri3s1dxjbvou"},{"post_id":"cletwjohr0003ri3s7xys0zwf","tag_id":"cletwjohs0004ri3s4tty710x","_id":"cletwjohw000pri3s8n5pfyya"},{"post_id":"cletwjohr0003ri3s7xys0zwf","tag_id":"cletwjohu0009ri3scn25670e","_id":"cletwjohw000rri3setruauni"},{"post_id":"cletwjohr0003ri3s7xys0zwf","tag_id":"cletwjohv000cri3s7cum80wd","_id":"cletwjohw000uri3sh15s0290"},{"post_id":"cletwjoht0006ri3s1aclcfs3","tag_id":"cletwjohs0004ri3s4tty710x","_id":"cletwjohw000yri3shlwociol"},{"post_id":"cletwjoht0006ri3s1aclcfs3","tag_id":"cletwjohw000tri3sh7yn0g78","_id":"cletwjohw000zri3sgkx1h46c"},{"post_id":"cletwjoht0006ri3s1aclcfs3","tag_id":"cletwjohw000xri3s5zybeds3","_id":"cletwjohw0010ri3s3x6jex6t"},{"post_id":"cletwjohy0016ri3sfoz269ia","tag_id":"cletwjohv000cri3s7cum80wd","_id":"cletwjohz001ari3sarpbfku5"},{"post_id":"cletwjohy0016ri3sfoz269ia","tag_id":"cletwjohy0013ri3s7tpb5qim","_id":"cletwjoi0001cri3s493o4mja"},{"post_id":"cletwjohy0016ri3sfoz269ia","tag_id":"cletwjohs0004ri3s4tty710x","_id":"cletwjoi0001fri3s08isbdi2"},{"post_id":"cletwjohy0016ri3sfoz269ia","tag_id":"cletwjohu0009ri3scn25670e","_id":"cletwjoi1001jri3s84c85jqe"},{"post_id":"cletwjohz0017ri3s2vjc866i","tag_id":"cletwjohv000cri3s7cum80wd","_id":"cletwjoi2001nri3s0amebewg"},{"post_id":"cletwjohz0017ri3s2vjc866i","tag_id":"cletwjohy0013ri3s7tpb5qim","_id":"cletwjoi2001qri3sbfugfd6k"},{"post_id":"cletwjohz0017ri3s2vjc866i","tag_id":"cletwjohu0009ri3scn25670e","_id":"cletwjoi2001tri3sccwa7u3y"},{"post_id":"cletwjohz001bri3sc0oh7ltx","tag_id":"cletwjohv000cri3s7cum80wd","_id":"cletwjoi2001vri3shnky4byl"},{"post_id":"cletwjohz001bri3sc0oh7ltx","tag_id":"cletwjohu0009ri3scn25670e","_id":"cletwjoi2001zri3sh71j9lkx"},{"post_id":"cletwjohz001bri3sc0oh7ltx","tag_id":"cletwjohy0013ri3s7tpb5qim","_id":"cletwjoi20021ri3sdgvofjxk"},{"post_id":"cletwjohx0011ri3s5n0l5r94","tag_id":"cletwjohs0004ri3s4tty710x","_id":"cletwjoi20023ri3sa0nw7pi9"},{"post_id":"cletwjohx0011ri3s5n0l5r94","tag_id":"cletwjohy0013ri3s7tpb5qim","_id":"cletwjoi20025ri3scb5agj7p"},{"post_id":"cletwjohx0011ri3s5n0l5r94","tag_id":"cletwjohz0018ri3s2oeyb50t","_id":"cletwjoi20027ri3sgfm3enhe"},{"post_id":"cletwjohx0011ri3s5n0l5r94","tag_id":"cletwjohv000cri3s7cum80wd","_id":"cletwjoi20029ri3s7ldwfomz"},{"post_id":"cletwjoi0001dri3s4n5mfe51","tag_id":"cletwjohs0004ri3s4tty710x","_id":"cletwjoi2002bri3s8204792r"},{"post_id":"cletwjoi0001dri3s4n5mfe51","tag_id":"cletwjohy0013ri3s7tpb5qim","_id":"cletwjoi2002dri3shv1z9j2z"},{"post_id":"cletwjoi0001dri3s4n5mfe51","tag_id":"cletwjohv000cri3s7cum80wd","_id":"cletwjoi2002fri3sazk00pry"},{"post_id":"cletwjoi0001dri3s4n5mfe51","tag_id":"cletwjohz0018ri3s2oeyb50t","_id":"cletwjoi2002hri3s52aadyjl"},{"post_id":"cletwjohy0012ri3sgehcfo83","tag_id":"cletwjohy0013ri3s7tpb5qim","_id":"cletwjoi3002jri3seuxx4g1w"},{"post_id":"cletwjoi1001kri3s0uwz3own","tag_id":"cletwjohs0004ri3s4tty710x","_id":"cletwjoi3002lri3shv5q7op4"},{"post_id":"cletwjoi1001kri3s0uwz3own","tag_id":"cletwjohw000tri3sh7yn0g78","_id":"cletwjoi3002mri3s2p6xda8j"},{"post_id":"cletwjoi1001kri3s0uwz3own","tag_id":"cletwjohw000xri3s5zybeds3","_id":"cletwjoi3002nri3s8fj9fgq6"},{"post_id":"cletwjohy0014ri3sgf8705hm","tag_id":"cletwjohs0004ri3s4tty710x","_id":"cletwjoi3002ori3sd57ud6w8"},{"post_id":"cletwjohy0014ri3sgf8705hm","tag_id":"cletwjohy0013ri3s7tpb5qim","_id":"cletwjoi3002pri3s0t3q7g0e"},{"post_id":"cletwjohy0014ri3sgf8705hm","tag_id":"cletwjohv000cri3s7cum80wd","_id":"cletwjoi3002qri3sbpyv8jk9"},{"post_id":"cletwjohy0014ri3sgf8705hm","tag_id":"cletwjohz0018ri3s2oeyb50t","_id":"cletwjoi3002rri3shbyjdgb0"},{"post_id":"cletwjoi1001hri3s8viceq9q","tag_id":"cletwjoi2001yri3s0cnu0ogw","_id":"cletwjoi3002sri3s5x51d5sk"},{"post_id":"cletwjoi1001hri3s8viceq9q","tag_id":"cletwjohz0018ri3s2oeyb50t","_id":"cletwjoi3002tri3sa6560peo"}],"Tag":[{"name":"crypto","_id":"cletwjohs0004ri3s4tty710x"},{"name":"algorithm","_id":"cletwjohu0009ri3scn25670e"},{"name":"CryptoDetect","_id":"cletwjohv000cri3s7cum80wd"},{"name":"ctf","_id":"cletwjohw000tri3sh7yn0g78"},{"name":"writeup","_id":"cletwjohw000xri3s5zybeds3"},{"name":"reverse","_id":"cletwjohy0013ri3s7tpb5qim"},{"name":"paper","_id":"cletwjohz0018ri3s2oeyb50t"},{"name":"program synthesis","_id":"cletwjoi2001yri3s0cnu0ogw"}]}}